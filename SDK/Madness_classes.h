// Class Madness.AccoladeRecordBaseWidget
// Size: 0x238 (Inherited: 0x230)
struct UAccoladeRecordBaseWidget : UUserWidget {
	char UnknownData_230[0x8]; // 0x230(0x08)

	void SetAccolade(struct UMadEnochAccolade* InAccolade); // Function Madness.AccoladeRecordBaseWidget.SetAccolade // (Final|Native|Public|BlueprintCallable) // @ game+0x150fe50
	void OnSetAccolade(); // Function Madness.AccoladeRecordBaseWidget.OnSetAccolade // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct UMadEnochAccolade* GetAccolade(); // Function Madness.AccoladeRecordBaseWidget.GetAccolade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x150ee90
};

// Class Madness.MadAnimNotify_AttackEarlyExit
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_AttackEarlyExit : UFWAnimNotify {
};

// Class Madness.MadAnimNotify_StartDistanceAttack
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_StartDistanceAttack : UFWAnimNotify {
};

// Class Madness.MadAnimNotify_StopDistanceAttack
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_StopDistanceAttack : UFWAnimNotify {
};

// Class Madness.MadAnimNotifyState_DisableIK
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotifyState_DisableIK : UFWAnimNotifyState {
};

// Class Madness.MadAnimNotifyState_Targeting
// Size: 0x48 (Inherited: 0x40)
struct UMadAnimNotifyState_Targeting : UFWAnimNotifyState {
	char NarrowAiming : 1; // 0x40(0x01)
	char UnknownData_40_1 : 7; // 0x40(0x01)
	char UnknownData_41[0x7]; // 0x41(0x07)
};

// Class Madness.MadAnimNotify_StartTargeting
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_StartTargeting : UFWAnimNotify {
};

// Class Madness.MadAnimNotify_StopTargeting
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_StopTargeting : UFWAnimNotify {
};

// Class Madness.MadAnimNotify_KillOutsideRecoverArea
// Size: 0x40 (Inherited: 0x40)
struct UMadAnimNotify_KillOutsideRecoverArea : UFWAnimNotify {
};

// Class Madness.MadAnimNotify_ApplyGameplayEffectToActor
// Size: 0x48 (Inherited: 0x40)
struct UMadAnimNotify_ApplyGameplayEffectToActor : UFWAnimNotify {
	struct UMadGameplayEffect* GameplayEffect; // 0x40(0x08)
};

// Class Madness.MadAnimNotifyState_ApplyLooseGameplayTag
// Size: 0x60 (Inherited: 0x40)
struct UMadAnimNotifyState_ApplyLooseGameplayTag : UFWAnimNotifyState {
	struct FGameplayTagContainer TagsToAdd; // 0x40(0x20)
};

// Class Madness.MadAnimNotifyState_SpawnTargetingMarker
// Size: 0x80 (Inherited: 0x40)
struct UMadAnimNotifyState_SpawnTargetingMarker : UFWAnimNotifyState {
	struct FMadAITargetMarker MarkerParticle; // 0x40(0x28)
	char bApplyToAllTargets : 1; // 0x68(0x01)
	char bApplyToSelf : 1; // 0x68(0x01)
	char bUseMovePrediction : 1; // 0x68(0x01)
	char UnknownData_68_3 : 5; // 0x68(0x01)
	char UnknownData_69[0x17]; // 0x69(0x17)
};

// Class Madness.MadAnimNotifyState_SpawnTargetMarkerAndExplosion
// Size: 0xa0 (Inherited: 0x40)
struct UMadAnimNotifyState_SpawnTargetMarkerAndExplosion : UFWAnimNotifyState {
	struct FMadAITargetMarker MarkerParticle; // 0x40(0x28)
	struct UExplosionTemplate* ExplosionTemplate; // 0x68(0x08)
	struct AMadDamageArea* DamageOverTimeArea; // 0x70(0x08)
	char bSelfActor : 1; // 0x78(0x01)
	char bAllEnemies : 1; // 0x78(0x01)
	char bUseMovementPrediction : 1; // 0x78(0x01)
	char UnknownData_78_3 : 5; // 0x78(0x01)
	char UnknownData_79[0x27]; // 0x79(0x27)
};

// Class Madness.MadAnimNotifyState_ApplyShaderEffect
// Size: 0x68 (Inherited: 0x40)
struct UMadAnimNotifyState_ApplyShaderEffect : UFWAnimNotifyState {
	struct UMadCharacterShaderEffect* CharacterShaderEffect; // 0x40(0x08)
	struct UMadWeaponShaderEffect* WeaponShaderEffect; // 0x48(0x08)
	struct FGameplayTag ShaderEffectGameplayTag; // 0x50(0x08)
	struct TArray<struct UMadShaderEffect*> AppliedShaderEffects; // 0x58(0x10)
};

// Class Madness.AnalyticsArrowComponent
// Size: 0x4f0 (Inherited: 0x4e0)
struct UAnalyticsArrowComponent : UArrowComponent {
	struct TArray<float> Stats; // 0x4e0(0x10)
};

// Class Madness.AnimInstanceWithLateral
// Size: 0x3b0 (Inherited: 0x380)
struct UAnimInstanceWithLateral : UFWAnimInstance_Base {
	char UnknownData_380[0x8]; // 0x380(0x08)
	struct UDNAContext* DNAContext; // 0x388(0x08)
	char UnknownData_390[0x20]; // 0x390(0x20)
};

// Class Madness.AnimSyncHelper
// Size: 0x308 (Inherited: 0x2f0)
struct AAnimSyncHelper : AActor {
	struct TArray<struct UMadNPCReactionComponent*> SyncNPCReactionComponents; // 0x2f0(0x10)
	char UnknownData_300[0x8]; // 0x300(0x08)
};

// Class Madness.BallLightning
// Size: 0x408 (Inherited: 0x2f0)
struct ABallLightning : AActor {
	float FlyHeight; // 0x2f0(0x04)
	char UnknownData_2F4[0x4]; // 0x2f4(0x04)
	struct UMadDamageType* Electro; // 0x2f8(0x08)
	struct AMadPlayerCharacter* PlayerClass; // 0x300(0x08)
	struct UParticleSystem* DamageParticleSystem; // 0x308(0x08)
	struct UCurveTable* EnemySkillsValues; // 0x310(0x08)
	struct UParticleSystemComponent* LightningBallStrike; // 0x318(0x08)
	struct UAudioComponent* ElectroLoop; // 0x320(0x08)
	struct UAudioComponent* ElectroShockEffect; // 0x328(0x08)
	struct USceneComponent* BallMain; // 0x330(0x08)
	struct UCapsuleComponent* BallDamageTrigger; // 0x338(0x08)
	struct USceneComponent* Scene; // 0x340(0x08)
	struct USphereComponent* SphereRange; // 0x348(0x08)
	struct UParticleSystemComponent* Beam0; // 0x350(0x08)
	struct UParticleSystemComponent* Beam1; // 0x358(0x08)
	struct UParticleSystemComponent* Beam2; // 0x360(0x08)
	struct UParticleSystemComponent* Beam3; // 0x368(0x08)
	char UnknownData_370[0x10]; // 0x370(0x10)
	struct UParticleSystemComponent* ElectroBall; // 0x380(0x08)
	struct USceneComponent* Link; // 0x388(0x08)
	struct UParticleSystemComponent* BeamLink; // 0x390(0x08)
	struct UBoxComponent* BeamDamageTrigger; // 0x398(0x08)
	struct UMadAIGameplayAbility* Ability; // 0x3a0(0x08)
	char UnknownData_3A8[0x40]; // 0x3a8(0x40)
	struct FVector CurrentDestination; // 0x3e8(0x0c)
	char UnknownData_3F4[0x14]; // 0x3f4(0x14)

	void SetupElectroBall(struct UMadAIGameplayAbility* AiAbility, bool bIsPositive); // Function Madness.BallLightning.SetupElectroBall // (Final|Native|Public|BlueprintCallable) // @ game+0x1510000
	void RunEQS(); // Function Madness.BallLightning.RunEQS // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnRep_DestinationSet(); // Function Madness.BallLightning.OnRep_DestinationSet // (Final|Native|Private) // @ game+0x150fe30
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.BallLightning.OnOverlapEnd // (Final|Native|Private) // @ game+0x150fa30
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.BallLightning.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x150f2e0
	void OnInterrupted(); // Function Madness.BallLightning.OnInterrupted // (Final|Native|Private) // @ game+0x150edf0
	void OnEQSFinished(struct UEnvQueryInstanceBlueprintWrapper* QueryInstance, enum class EEnvQueryStatus QueryStatus); // Function Madness.BallLightning.OnEQSFinished // (Final|Native|Protected|BlueprintCallable) // @ game+0x150f220
	void OnDamageTick(); // Function Madness.BallLightning.OnDamageTick // (Final|Native|Private) // @ game+0x150f200
	void OnCastReleased(); // Function Madness.BallLightning.OnCastReleased // (Final|Native|Private) // @ game+0x150f060
	void OnCasterDeath(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.BallLightning.OnCasterDeath // (Final|Native|Private) // @ game+0x150f080
	void ElectroBallTimerEnded(); // Function Madness.BallLightning.ElectroBallTimerEnded // (Final|Native|Private) // @ game+0x150edf0
};

// Class Madness.BaseUIModel
// Size: 0x50 (Inherited: 0x28)
struct UBaseUIModel : UObject {
	char UnknownData_28[0x28]; // 0x28(0x28)
};

// Class Madness.BlinkWave
// Size: 0x2f0 (Inherited: 0x2f0)
struct ABlinkWave : AActor {
};

// Class Madness.ChainDealer
// Size: 0x350 (Inherited: 0x2f0)
struct AChainDealer : AActor {
	struct AMadBaseCharacter* HostCharacter; // 0x2f0(0x08)
	struct FActiveGameplayEffectHandle Handle; // 0x2f8(0x08)
	struct TArray<struct AMadBaseCharacter*> SickPlayers; // 0x300(0x10)
	float BaseDamage; // 0x310(0x04)
	char UnknownData_314[0x4]; // 0x314(0x04)
	struct UParticleSystem* Emitter; // 0x318(0x08)
	struct UParticleSystemComponent* Beam; // 0x320(0x08)
	struct UDamageType* DamageTypeClass; // 0x328(0x08)
	struct UGameplayEffect* ChainLightingSickClass; // 0x330(0x08)
	struct TArray<struct FTargetChain> TargetChainArray; // 0x338(0x10)
	char UnknownData_348_0 : 7; // 0x348(0x01)
	bool bCanDealDamage : 1; // 0x348(0x01)
	char UnknownData_349[0x7]; // 0x349(0x07)

	void UpdateLightningBeam(struct AMadBaseCharacter* character, bool bToggle); // Function Madness.ChainDealer.UpdateLightningBeam // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1510150
	void UnLinkPlayerWithHost(struct AActor* OtherActor); // Function Madness.ChainDealer.UnLinkPlayerWithHost // (Final|Native|Public|BlueprintCallable) // @ game+0x15100d0
	void SetHost(struct AActor* Host); // Function Madness.ChainDealer.SetHost // (Final|Native|Public|BlueprintCallable) // @ game+0x150ff80
	void LinkPlayerWithHost(struct AActor* Actor); // Function Madness.ChainDealer.LinkPlayerWithHost // (Final|Native|Public|BlueprintCallable) // @ game+0x150efe0
	void DestroyEffectsOnOtherPlayers(struct FTargetChain Target); // Function Madness.ChainDealer.DestroyEffectsOnOtherPlayers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x150ed40
	void DestroyEffectsOnHost(); // Function Madness.ChainDealer.DestroyEffectsOnHost // (Final|Native|Public|BlueprintCallable) // @ game+0x150ed20
	void ApplyDamageToOtherPlayer(); // Function Madness.ChainDealer.ApplyDamageToOtherPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x150ea40
	void ApplyDamageToHost(); // Function Madness.ChainDealer.ApplyDamageToHost // (Final|Native|Public|BlueprintCallable) // @ game+0x150ea20
};

// Class Madness.ChainsCatchCenterDamageArea
// Size: 0x388 (Inherited: 0x2f0)
struct AChainsCatchCenterDamageArea : AActor {
	struct USceneComponent* SceneRoot; // 0x2f0(0x08)
	struct USphereComponent* Sphere; // 0x2f8(0x08)
	struct UAudioComponent* AudioLoop; // 0x300(0x08)
	struct UDecalComponent* Decal; // 0x308(0x08)
	struct UAudioComponent* HeatwaveStereoCue; // 0x310(0x08)
	struct TArray<struct AActor*> AffectedActors; // 0x318(0x10)
	float Damage; // 0x328(0x04)
	float DamgeLoopTime; // 0x32c(0x04)
	struct FTimerHandle TimerHandle; // 0x330(0x08)
	struct UCurveTable* EnemySkillsValues; // 0x338(0x08)
	struct FGameplayAttribute LevelAttribute; // 0x340(0x38)
	struct UDamageType* DamageTypeClass; // 0x378(0x08)
	char UnknownData_380[0x8]; // 0x380(0x08)

	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.ChainsCatchCenterDamageArea.OnOverlapEnd // (Final|Native|Public) // @ game+0x150fb70
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.ChainsCatchCenterDamageArea.OnOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x150f550
	void CallDeactivateArea(); // Function Madness.ChainsCatchCenterDamageArea.CallDeactivateArea // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallApplyFire(struct AActor* Player, struct AActor* Victim, bool bBoss); // Function Madness.ChainsCatchCenterDamageArea.CallApplyFire // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void ApplyDamageOverTime(); // Function Madness.ChainsCatchCenterDamageArea.ApplyDamageOverTime // (Final|Native|Public|BlueprintCallable) // @ game+0x150ea00
};

// Class Madness.ChainsCrossAreaSingleLine
// Size: 0x390 (Inherited: 0x2f0)
struct AChainsCrossAreaSingleLine : AActor {
	struct USceneComponent* SceneRoot; // 0x2f0(0x08)
	struct UBillboardComponent* Billboard; // 0x2f8(0x08)
	struct UParticleSystemComponent* FXLavaPuddle01; // 0x300(0x08)
	struct UParticleSystemComponent* FXLavaPuddle02; // 0x308(0x08)
	struct UParticleSystemComponent* PVolcanoBossStarAttackLane01; // 0x310(0x08)
	struct UAudioComponent* AudioCrossAttack; // 0x318(0x08)
	struct UStaticMeshComponent* DamageCollision; // 0x320(0x08)
	char UnknownData_328[0x8]; // 0x328(0x08)
	struct FTimerHandle PeriodicDamageHandle; // 0x330(0x08)
	struct AActor* ClassFilter; // 0x338(0x08)
	struct UDamageType* DamageTypeOverTime; // 0x340(0x08)
	struct UDamageType* DamageTypeOnEnter; // 0x348(0x08)
	struct UCurveTable* EnemySkillsValues; // 0x350(0x08)
	struct FGameplayAttribute Attribute; // 0x358(0x38)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.ChainsCrossAreaSingleLine.OnOwnerKilled // (Final|Native|Protected) // @ game+0x150fcb0
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.ChainsCrossAreaSingleLine.OnOverlapBegin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x150f7c0
	void EvaluateRow(struct FName RowName); // Function Madness.ChainsCrossAreaSingleLine.EvaluateRow // (Final|Native|Public|BlueprintCallable) // @ game+0x150ee10
	void DeactivateFireArea(); // Function Madness.ChainsCrossAreaSingleLine.DeactivateFireArea // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x150ed00
	void CallApplyFire(struct AActor* Player, struct AActor* Victim, bool bBoss); // Function Madness.ChainsCrossAreaSingleLine.CallApplyFire // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void ApplyPeriodicDamage(struct UPrimitiveComponent* MeshArea); // Function Madness.ChainsCrossAreaSingleLine.ApplyPeriodicDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x150ebc0
	void ApplyLavaPeriodicDamage01(); // Function Madness.ChainsCrossAreaSingleLine.ApplyLavaPeriodicDamage01 // (Final|Native|Public|BlueprintCallable) // @ game+0x150eae0
	void ApplyEnterDamage(struct AActor* Object); // Function Madness.ChainsCrossAreaSingleLine.ApplyEnterDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x150ea60
};

// Class Madness.ChainsSmallSphereQuakeProjectile
// Size: 0x328 (Inherited: 0x2f0)
struct AChainsSmallSphereQuakeProjectile : AActor {
	struct USceneComponent* Scene_Root; // 0x2f0(0x08)
	struct USceneComponent* ProjectileMeshRoot; // 0x2f8(0x08)
	struct USphereComponent* DamageArea; // 0x300(0x08)
	struct UAudioComponent* Audio_QuakeSound; // 0x308(0x08)
	struct TArray<struct AMadBaseCharacter*> DamagedEnemies; // 0x310(0x10)
	float Damage; // 0x320(0x04)
	char UnknownData_324[0x4]; // 0x324(0x04)

	void GetDamage(); // Function Madness.ChainsSmallSphereQuakeProjectile.GetDamage // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
	void DamageCollisionOverlap(struct USphereComponent* SphereComponent, struct AActor* ClassFilter); // Function Madness.ChainsSmallSphereQuakeProjectile.DamageCollisionOverlap // (Final|Native|Public|BlueprintCallable) // @ game+0x150ec40
};

// Class Madness.CombatNumbersSettings
// Size: 0x88 (Inherited: 0x30)
struct UCombatNumbersSettings : UDataAsset {
	struct TMap<enum class EMadCombatNumberType, struct FCombatNumberAnimData> CombatNumberAnimData; // 0x30(0x50)
	struct UCurveFloat* OffsetVsDistanceFactor; // 0x80(0x08)
};

// Class Madness.CustomPhysicsComponent
// Size: 0x570 (Inherited: 0x4f0)
struct UCustomPhysicsComponent : USphereComponent {
	float MinimalValue; // 0x4f0(0x04)
	float SmallRadiusRatio; // 0x4f4(0x04)
	char UnknownData_4F8[0x78]; // 0x4f8(0x78)

	void DisableOverlapLookUp(); // Function Madness.CustomPhysicsComponent.DisableOverlapLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0x150edd0
};

// Class Madness.DischargeMine
// Size: 0x3b8 (Inherited: 0x2f0)
struct ADischargeMine : AActor {
	struct USceneComponent* Root; // 0x2f0(0x08)
	struct UArrowComponent* Arrow; // 0x2f8(0x08)
	struct UBoxComponent* DamageTrigger; // 0x300(0x08)
	struct USceneComponent* Marker; // 0x308(0x08)
	struct UDecalComponent* Decal; // 0x310(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x318(0x08)
	struct USceneComponent* Discharge; // 0x320(0x08)
	struct UParticleSystemComponent* DischargeMineElectric; // 0x328(0x08)
	struct UAudioComponent* GuardianDischargeMineTrailCue; // 0x330(0x08)
	struct USceneComponent* Debris01; // 0x338(0x08)
	struct UStaticMeshComponent* SMReinforcementWires01; // 0x340(0x08)
	struct USceneComponent* Debris02; // 0x348(0x08)
	struct UStaticMeshComponent* SMGarbages02; // 0x350(0x08)
	struct UStaticMeshComponent* SMGarbages01; // 0x358(0x08)
	struct UParticleSystemComponent* DischargeMarker; // 0x360(0x08)
	struct UParticleSystemComponent* MineShowUp; // 0x368(0x08)
	struct UParticleSystem* EmitterTemplate; // 0x370(0x08)
	struct UDamageType* DamageTypeClass; // 0x378(0x08)
	struct FName AttachPointName; // 0x380(0x08)
	struct UMadAIGameplayAbility* Ability; // 0x388(0x08)
	struct UGameplayEffect* DamageEffectClass; // 0x390(0x08)
	struct FGameplayTag DamageTag; // 0x398(0x08)
	float DURATION; // 0x3a0(0x04)
	float DotInterval; // 0x3a4(0x04)
	float DotDamage; // 0x3a8(0x04)
	char UnknownData_3AC_0 : 7; // 0x3ac(0x01)
	bool bIsMineDeployed : 1; // 0x3ac(0x01)
	char UnknownData_3AD_0 : 7; // 0x3ad(0x01)
	bool bShowElements : 1; // 0x3ad(0x01)
	char UnknownData_3AE[0x2]; // 0x3ae(0x02)
	struct UMaterialInstanceDynamic* MatInstance; // 0x3b0(0x08)

	void Initialize(float InDuration, float InDotDamage, float InDotInterval); // Function Madness.DischargeMine.Initialize // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x150eed0
	void CallSetupDischargeMine(); // Function Madness.DischargeMine.CallSetupDischargeMine // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void ApplyMineDamage(struct UPrimitiveComponent* TriggerComponent, struct AActor* ClassFilter); // Function Madness.DischargeMine.ApplyMineDamage // (Final|Native|Protected|BlueprintCallable) // @ game+0x150eb00
};

// Class Madness.DischargeTrail
// Size: 0x338 (Inherited: 0x2f0)
struct ADischargeTrail : AActor {
	struct UParticleSystemComponent* ParticlesTrailComponent; // 0x2f0(0x08)
	struct UAudioComponent* AudioComponent; // 0x2f8(0x08)
	float UpdateTime; // 0x300(0x04)
	float EndTrailLifeSpan; // 0x304(0x04)
	float AudioFadeOutDuration; // 0x308(0x04)
	char UnknownData_30C[0x2c]; // 0x30c(0x2c)

	void CallSetupTrail(float InTravelTime); // Function Madness.DischargeTrail.CallSetupTrail // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15148c0
};

// Class Madness.ElectroShockWave
// Size: 0x3a0 (Inherited: 0x2f0)
struct AElectroShockWave : AActor {
	struct UParticleSystemComponent* ShockParticlesComponent; // 0x2f0(0x08)
	struct UAudioComponent* ShockAudioComponent; // 0x2f8(0x08)
	struct USphereComponent* HitCollisionComponent; // 0x300(0x08)
	struct FScalableFloat HitDamageScale; // 0x308(0x20)
	struct FScalableFloat DamageRangeOffsetScale; // 0x328(0x20)
	struct UDamageType* DamageType; // 0x348(0x08)
	struct UParticleSystem* ElectrocutionDamageEffect; // 0x350(0x08)
	float ShockWaveSpeed; // 0x358(0x04)
	float MinShockRadius; // 0x35c(0x04)
	float MaxShockRadius; // 0x360(0x04)
	float RadiusIncreaseTime; // 0x364(0x04)
	float ShockWaveDuration; // 0x368(0x04)
	char UnknownData_36C[0x34]; // 0x36c(0x34)

	void StartShockWave(); // Function Madness.ElectroShockWave.StartShockWave // (Final|Native|Protected|BlueprintCallable) // @ game+0x1516e10
	void SpawnShockEffect(struct AMadBaseCharacter* HitPawn); // Function Madness.ElectroShockWave.SpawnShockEffect // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1516d80
	void PlayEffects(); // Function Madness.ElectroShockWave.PlayEffects // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1516bc0
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.ElectroShockWave.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x15166c0
};

// Class Madness.MadChallengeModData
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeModData : UObject {
};

// Class Madness.EncounterEnemyEffectModData
// Size: 0x38 (Inherited: 0x28)
struct UEncounterEnemyEffectModData : UMadChallengeModData {
	struct TArray<struct UMadGameplayEffect*> Effects; // 0x28(0x10)
};

// Class Madness.EncounterSetupModData
// Size: 0x38 (Inherited: 0x28)
struct UEncounterSetupModData : UMadChallengeModData {
	struct FString ChallengeModId; // 0x28(0x10)
};

// Class Madness.EnvQueryTest_PathfindingMinDistFromPoint
// Size: 0x420 (Inherited: 0x2f0)
struct UEnvQueryTest_PathfindingMinDistFromPoint : UEnvQueryTest_Pathfinding {
	struct FAIDataProviderBoolValue CompareWithIdealPath; // 0x2f0(0x38)
	struct UEnvQueryContext* IdealPathStartContext; // 0x328(0x08)
	struct UEnvQueryContext* IdealPathEndContext; // 0x330(0x08)
	struct FAIDataProviderBoolValue ComparePathDistanceWithContext; // 0x338(0x38)
	struct FAIDataProviderBoolValue AllowCloseToQueryOwner; // 0x370(0x38)
	struct FAIDataProviderFloatValue AllowDistanceToQuery; // 0x3a8(0x38)
	struct UEnvQueryContext* DistanceCompareContext; // 0x3e0(0x08)
	struct FAIDataProviderFloatValue MinDistancePathFromContext; // 0x3e8(0x38)
};

// Class Madness.ForestBoss_AttractorVolume
// Size: 0x308 (Inherited: 0x2f0)
struct AForestBoss_AttractorVolume : AActor {
	struct FName AttractorId; // 0x2f0(0x08)
	struct UBoxComponent* BoxCollision; // 0x2f8(0x08)
	char UnknownData_300[0x8]; // 0x300(0x08)

	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.ForestBoss_AttractorVolume.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x1516930
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.ForestBoss_AttractorVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1516060
};

// Class Madness.ForestBoss_DestroyableCover
// Size: 0x310 (Inherited: 0x2f0)
struct AForestBoss_DestroyableCover : AActor {
	struct TArray<struct AActor*> PlayersInCoverShadow; // 0x2f0(0x10)
	struct TArray<struct AActor*> CoverActorsList; // 0x300(0x10)

	void SetCoversEnabled(bool Enabled); // Function Madness.ForestBoss_DestroyableCover.SetCoversEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1516cf0
	void DestroyCover(bool instantBreak, bool isGrowl); // Function Madness.ForestBoss_DestroyableCover.DestroyCover // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void DamagePlayers(); // Function Madness.ForestBoss_DestroyableCover.DamagePlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x1514a00
	void DamagePlayer(struct AActor* Player); // Function Madness.ForestBoss_DestroyableCover.DamagePlayer // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.ForestBoss_MonsterAttractor
// Size: 0x308 (Inherited: 0x2f0)
struct AForestBoss_MonsterAttractor : AActor {
	struct TArray<struct AForestBoss_AttractorVolume*> Sections; // 0x2f0(0x10)
	struct FName AttractorName; // 0x300(0x08)

	struct FName CalculatePlaceToAttack(); // Function Madness.ForestBoss_MonsterAttractor.CalculatePlaceToAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514880
};

// Class Madness.MadProjectile
// Size: 0x5c0 (Inherited: 0x5a0)
struct AMadProjectile : AProjectile {
	char UnknownData_5A0[0x8]; // 0x5a0(0x08)
	char UnknownData_5A8_0 : 7; // 0x5a8(0x01)
	bool bShouldRotateMesh : 1; // 0x5a8(0x01)
	char UnknownData_5A9_0 : 7; // 0x5a9(0x01)
	bool bCanBeReflected : 1; // 0x5a9(0x01)
	char UnknownData_5AA[0x6]; // 0x5aa(0x06)
	struct FVector RotationsPerSecond; // 0x5b0(0x0c)
	char UnknownData_5BC[0x4]; // 0x5bc(0x04)

	void SetExplodeMaxTime(float InDuration, bool bForceEnableTimer); // Function Madness.MadProjectile.SetExplodeMaxTime // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0a20
	void K2_ExplodeOnRequest(); // Function Madness.MadProjectile.K2_ExplodeOnRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x16bfcb0
	bool CanBeReflected(); // Function Madness.MadProjectile.CanBeReflected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16bf290
};

// Class Madness.HeavyProjectile
// Size: 0x5c0 (Inherited: 0x5c0)
struct AHeavyProjectile : AMadProjectile {
};

// Class Madness.LateralInterface
// Size: 0x28 (Inherited: 0x28)
struct ULateralInterface : UInterface {

	void RegisterLateralDNAContextChangedDelegate(struct FDelegate InDelegate); // Function Madness.LateralInterface.RegisterLateralDNAContextChangedDelegate // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1516be0
	struct UDNAContext* GetLateralDNAContext(); // Function Madness.LateralInterface.GetLateralDNAContext // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514c00
};

// Class Madness.MadAbilityGlobals
// Size: 0x258 (Inherited: 0x30)
struct UMadAbilityGlobals : UDataAsset {
	struct FMadAbilityGlobals_Mod Mod; // 0x30(0x10)
	struct TMap<struct FName, struct FMadModAssets> ModAssetsData; // 0x40(0x50)
	struct UDataTable* SkillDescriptionDT; // 0x90(0x08)
	struct UDataTable* MasteriesDescriptionDT; // 0x98(0x08)
	struct UDataTable* HeroTreeUpgradesDescriptionDT; // 0xa0(0x08)
	struct UDataTable* AttributeDescriptionDT; // 0xa8(0x08)
	struct UDataTable* ClassDescriptionDT; // 0xb0(0x08)
	int32_t MaxCharacterLevel; // 0xb8(0x04)
	char UnknownData_BC[0x4]; // 0xbc(0x04)
	struct TMap<struct FName, struct FMadAbilityDefinition> SkillDescriptionsData; // 0xc0(0x50)
	struct TMap<struct FName, struct FMadAbilityDefinition> MasteryDescriptionData; // 0x110(0x50)
	struct TMap<struct FName, struct FMadAttributeDefinition> AttributeDescriptionData; // 0x160(0x50)
	struct TMap<struct FName, struct FMadHeroTreeUpgradeDefinition> HeroTreeUpgradeDescriptionData; // 0x1b0(0x50)
	struct TMap<enum class EMadnessSkillPath, struct FMadPlayerClassDefinitionData> ClassDescriptionData; // 0x200(0x50)
	struct UPhysicalMaterial* ShieldPhysicalMaterial; // 0x250(0x08)

	struct TMap<struct FName, struct FMadModAssets> GetMods(); // Function Madness.MadAbilityGlobals.GetMods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514ce0
	struct FMadModAssets GetModAssets(struct FName ModName); // Function Madness.MadAbilityGlobals.GetModAssets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514c30
	struct TMap<struct FName, struct FMadModAssets> GetAvailableMods(struct FMadItemModRollParams Params); // Function Madness.MadAbilityGlobals.GetAvailableMods // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514a50
};

// Class Madness.MadAbilitySet
// Size: 0x40 (Inherited: 0x30)
struct UMadAbilitySet : UDataAsset {
	struct TArray<SoftClassProperty> Abilities; // 0x30(0x10)
};

// Class Madness.MadCategorizedAbilitySet
// Size: 0xc8 (Inherited: 0x30)
struct UMadCategorizedAbilitySet : UDataAsset {
	struct FAbilitySetWithRandomCount Auras; // 0x30(0x30)
	struct FAbilitySetWithRandomCount Support; // 0x60(0x30)
	struct FAbilitySetWithRandomCount Offensive; // 0x90(0x30)
	char UnknownData_C0[0x8]; // 0xc0(0x08)
};

// Class Madness.MadAbilitySystemComponent
// Size: 0x1640 (Inherited: 0x1478)
struct UMadAbilitySystemComponent : UAbilitySystemComponent {
	char UnknownData_1478[0x1c8]; // 0x1478(0x1c8)

	struct UGameplayAbility* FindActiveAbilityThatUseCastBar(); // Function Madness.MadAbilitySystemComponent.FindActiveAbilityThatUseCastBar // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1514a20
	void CancelAbilitiesWithTags(struct FGameplayTagContainer RequiredTags); // Function Madness.MadAbilitySystemComponent.CancelAbilitiesWithTags // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1514940
	void AbortAllAbilities(); // Function Madness.MadAbilitySystemComponent.AbortAllAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0x1514860
};

// Class Madness.MadAbilitySystemGlobals
// Size: 0x260 (Inherited: 0x260)
struct UMadAbilitySystemGlobals : UAbilitySystemGlobals {
};

// Class Madness.MadAbilityTargetInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadAbilityTargetInterface : UInterface {
};

// Class Madness.MadAbilityTask_DollyZoom
// Size: 0xc0 (Inherited: 0x80)
struct UMadAbilityTask_DollyZoom : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)
	char UnknownData_90[0x30]; // 0x90(0x30)

	struct UMadAbilityTask_DollyZoom* MadDollyZoom(struct UObject* WorldContextObject, struct AActor* Target, float ZoomDuration, float AfterZoomDuration, float FOVChange); // Function Madness.MadAbilityTask_DollyZoom.MadDollyZoom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1514d80
};

// Class Madness.MadAbilityTask_EnvQuery
// Size: 0xa0 (Inherited: 0x80)
struct UMadAbilityTask_EnvQuery : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)
	struct UEnvQuery* EnvQuery; // 0x90(0x08)
	struct UObject* Querier; // 0x98(0x08)

	void OnSignalCallback(); // Function Madness.MadAbilityTask_EnvQuery.OnSignalCallback // (Final|Native|Protected) // @ game+0x1516ba0
	struct UMadAbilityTask_EnvQuery* MadEnvQuery(struct UGameplayAbility* OwningAbility, struct UEnvQuery* InEnvQuery, struct UObject* InQuerier); // Function Madness.MadAbilityTask_EnvQuery.MadEnvQuery // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1514f00
};

// Class Madness.MadAbilityTask_ForceSprint
// Size: 0xb8 (Inherited: 0x80)
struct UMadAbilityTask_ForceSprint : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)
	struct FMulticastInlineDelegate OnImpact; // 0x90(0x10)
	char UnknownData_A0[0x18]; // 0xa0(0x18)

	void OnMovementImpact(struct FHitResult HitResult); // Function Madness.MadAbilityTask_ForceSprint.OnMovementImpact // (Final|Native|Protected) // @ game+0x1516290
	struct UMadAbilityTask_ForceSprint* MadForceSprint(struct UObject* WorldContextObject, float DURATION, float TurnRateMultiplier); // Function Madness.MadAbilityTask_ForceSprint.MadForceSprint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1514ff0
};

// Class Madness.MadAbilityTask_CurrentMontageChangeSection
// Size: 0xb8 (Inherited: 0x80)
struct UMadAbilityTask_CurrentMontageChangeSection : UAbilityTask {
	struct FMulticastInlineDelegate Success; // 0x80(0x10)
	struct FMulticastInlineDelegate Fail; // 0x90(0x10)
	char UnknownData_A0[0x18]; // 0xa0(0x18)

	struct UMadAbilityTask_CurrentMontageChangeSection* MadnessCurrentMontageChangeSection(struct UObject* WorldContextObject, struct UAnimMontage* Montage, struct FName NextSection, bool bJump); // Function Madness.MadAbilityTask_CurrentMontageChangeSection.MadnessCurrentMontageChangeSection // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1515f30
};

// Class Madness.MadAbilityTask_PlayMontageAndWaitNotifyName
// Size: 0x200 (Inherited: 0x80)
struct UMadAbilityTask_PlayMontageAndWaitNotifyName : UAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x80(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x90(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnNotifyEnd; // 0xc0(0x10)
	char UnknownData_D0[0x18]; // 0xd0(0x18)
	struct AMadBaseCharacter* OwnerPawn; // 0xe8(0x08)
	char UnknownData_F0[0xb0]; // 0xf0(0xb0)
	struct AMadBaseCharacter* Instigator; // 0x1a0(0x08)
	struct AActor* DamageCauser; // 0x1a8(0x08)
	char UnknownData_1B0[0x48]; // 0x1b0(0x48)
	struct AMadBaseCharacter* Victim; // 0x1f8(0x08)

	void StopMovementAfterMontage(); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.StopMovementAfterMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x1516e50
	void StopMontageAndEndTask(); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.StopMontageAndEndTask // (Final|Native|Public|BlueprintCallable) // @ game+0x1516e30
	void OnNotifyEndReceived(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.OnNotifyEndReceived // (Final|Native|Protected) // @ game+0x15165c0
	void OnNotifyBeginReceived(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.OnNotifyBeginReceived // (Final|Native|Protected) // @ game+0x15164c0
	void OnMontageInterrupted(); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x1516270
	void OnMontageBlendingOut(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.OnMontageBlendingOut // (Final|Native|Protected) // @ game+0x15161a0
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* MadPresetThenPlayeMontageAndWait(struct UObject* WorldContextObject, struct FName TaskInstanceName, struct UAnimMontage* MontageToPlay, struct FCameraFromMontage CameraFromMontage, struct FTransform PresetTransform, float Rate, bool bRandomSection, struct FName StartSection, bool bStopWhenAbilityEnds); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.MadPresetThenPlayeMontageAndWait // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1515bf0
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* MadPlayTwoCharactersMontageAndWait(struct UObject* WorldContextObject, struct FName TaskInstanceName, struct UTwoCharactersAnimationData* AnimationData, struct FCameraFromMontage CameraFromMontage, struct AMadBaseCharacter* Victim, float Rate, bool bStopWhenAbilityEnds); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.MadPlayTwoCharactersMontageAndWait // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15159b0
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* MadPlayReactionMontageAndWait(struct UObject* WorldContextObject, struct FName TaskInstanceName, struct UAnimMontage* MontageFront, struct UAnimMontage* MontageLeft, struct UAnimMontage* MontageRight, struct UAnimMontage* MontageBack, struct AController* Instigator, float Rate, bool bRandomSection, bool bStopWhenAbilityEnds, bool bInFaceRotation); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.MadPlayReactionMontageAndWait // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15156a0
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* MadPlayReactionAnimDataAndWait(struct UObject* WorldContextObject, struct FName TaskInstanceName, struct FMadReactionAnimData ReactionAnimData, struct AController* Instigator, struct AActor* DamageCauser, float Rate, bool bRandomSection, bool bStopWhenAbilityEnds, bool bInFaceRotation); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.MadPlayReactionAnimDataAndWait // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1515360
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* MadPlayMontageAndWait(struct UObject* WorldContextObject, struct FName TaskInstanceName, struct UAnimMontage* MontageToPlay, struct FCameraFromMontage CameraFromMontage, float Rate, bool bRandomSection, struct FName StartSection, bool bStopWhenAbilityEnds); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.MadPlayMontageAndWait // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15150e0
	struct UAnimMontage* GetChosenReactionMontage(); // Function Madness.MadAbilityTask_PlayMontageAndWaitNotifyName.GetChosenReactionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1514bd0
};

// Class Madness.MadDataAsset_Reaction
// Size: 0x40 (Inherited: 0x30)
struct UMadDataAsset_Reaction : UDataAsset {
	struct TArray<struct FMadAI_Reaction> Variants; // 0x30(0x10)
};

// Class Madness.MadAbilityTask_PlayReaction
// Size: 0xe8 (Inherited: 0x80)
struct UMadAbilityTask_PlayReaction : UAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x80(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x90(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xa0(0x10)
	struct UAnimMontage* ReactionMontage; // 0xb0(0x08)
	char UnknownData_B8[0x18]; // 0xb8(0x18)
	struct AMadBaseCharacter* DamageCauser; // 0xd0(0x08)
	struct UMadDataAsset_Reaction* AnimDataAsset; // 0xd8(0x08)
	char UnknownData_E0[0x8]; // 0xe0(0x08)

	void OnMontageInterrupted(); // Function Madness.MadAbilityTask_PlayReaction.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x151ea00
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAbilityTask_PlayReaction.OnMontageEnded // (Final|Native|Protected) // @ game+0x151e930
	struct UMadAbilityTask_PlayReaction* MadPlayReaction(struct UObject* WorldContextObject, struct UObject* DamageCauser, struct UMadDataAsset_Reaction* AnimDataAsset); // Function Madness.MadAbilityTask_PlayReaction.MadPlayReaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x151dab0
};

// Class Madness.MadAbilityTask_Push
// Size: 0xd0 (Inherited: 0x80)
struct UMadAbilityTask_Push : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)
	char UnknownData_90[0x40]; // 0x90(0x40)

	struct UMadAbilityTask_Push* MadPush(struct UObject* WorldContextObject, struct FVector PushDirection, float PushDistance); // Function Madness.MadAbilityTask_Push.MadPush // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x151dba0
};

// Class Madness.MadAbilityTask_WaitControllerRotation
// Size: 0xf0 (Inherited: 0x80)
struct UMadAbilityTask_WaitControllerRotation : UAbilityTask {
	struct FMulticastInlineDelegate OnControllerRotationFinished; // 0x80(0x10)
	char UnknownData_90[0x60]; // 0x90(0x60)

	struct UMadAbilityTask_WaitControllerRotation* MadnessWaitControllerRotation(struct UObject* WorldContextObject, struct FRotator InDesiredRotation, float InDuration, bool bInOnlyYaw); // Function Madness.MadAbilityTask_WaitControllerRotation.MadnessWaitControllerRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x151dfe0
};

// Class Madness.MadAbilityTask_WaitInput
// Size: 0xa8 (Inherited: 0x80)
struct UMadAbilityTask_WaitInput : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)
	char UnknownData_90[0x18]; // 0x90(0x18)

	void OnInputCallback(); // Function Madness.MadAbilityTask_WaitInput.OnInputCallback // (Final|Native|Public) // @ game+0x151e910
	struct UMadAbilityTask_WaitInput* MadWaitInput(struct UObject* WorldContextObject, bool bPress, float DURATION, bool bNotifyUI); // Function Madness.MadAbilityTask_WaitInput.MadWaitInput // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x151dcc0
};

// Class Madness.MadAbilityTask_WaitMoveInput
// Size: 0x98 (Inherited: 0x80)
struct UMadAbilityTask_WaitMoveInput : UAbilityTask {
	struct FMulticastInlineDelegate OnMoveInput; // 0x80(0x10)
	char UnknownData_90[0x8]; // 0x90(0x08)

	void OnSignalCallback(); // Function Madness.MadAbilityTask_WaitMoveInput.OnSignalCallback // (Final|Native|Protected) // @ game+0x151ea40
	struct UMadAbilityTask_WaitMoveInput* MadWaitMoveInput(struct UGameplayAbility* OwningAbility, bool bIncludeFireInput, bool bIncludeAimInput, bool bOnlySpecialInput); // Function Madness.MadAbilityTask_WaitMoveInput.MadWaitMoveInput // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x151de10
};

// Class Madness.MadAbilityTask_WaitNextTick
// Size: 0x90 (Inherited: 0x80)
struct UMadAbilityTask_WaitNextTick : UAbilityTask {
	struct FMulticastInlineDelegate OnFinished; // 0x80(0x10)

	struct UMadAbilityTask_WaitNextTick* MadWaitNextTick(struct UObject* WorldContextObject); // Function Madness.MadAbilityTask_WaitNextTick.MadWaitNextTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x151df60
	void FinishTask(); // Function Madness.MadAbilityTask_WaitNextTick.FinishTask // (Final|Native|Protected) // @ game+0x151d9a0
};

// Class Madness.MadAbilityTask_WaitTappingStop
// Size: 0xa8 (Inherited: 0x80)
struct UMadAbilityTask_WaitTappingStop : UAbilityTask {
	struct FMulticastInlineDelegate OnTappingStopped; // 0x80(0x10)
	char UnknownData_90[0x18]; // 0x90(0x18)

	void OnPressCallback(); // Function Madness.MadAbilityTask_WaitTappingStop.OnPressCallback // (Final|Native|Protected) // @ game+0x151ea20
	struct UMadAbilityTask_WaitTappingStop* MadnessWaitTappingStop(struct UObject* WorldContextObject, struct FName TaskInstanceName, float MaxTapDuration, float DurationBetweenTaps); // Function Madness.MadAbilityTask_WaitTappingStop.MadnessWaitTappingStop // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x151e130
};

// Class Madness.MadAccoladesUIModel
// Size: 0x120 (Inherited: 0x50)
struct UMadAccoladesUIModel : UBaseUIModel {
	char UnknownData_50[0x30]; // 0x50(0x30)
	struct TArray<struct FMadAccoladeCategoryUIData> Categories; // 0x80(0x10)
	struct TArray<struct FMadAccoladeLevelUIData> Levels; // 0x90(0x10)
	struct FMadAccoladeSummaryUIData Summary; // 0xa0(0x08)
	char UnknownData_A8[0x78]; // 0xa8(0x78)

	void SetupAccoladesUIData(); // Function Madness.MadAccoladesUIModel.SetupAccoladesUIData // (Final|Native|Private) // @ game+0x151ebd0
	void SetSeenAccolade(struct FString InGuidString, int32_t InTierIdx); // Function Madness.MadAccoladesUIModel.SetSeenAccolade // (Final|Native|Public) // @ game+0x151eaf0
	void OnAccoladeTierCompleted(struct UMadEnochAccolade* Accolade, struct FTierCompleteData TierCompleteData); // Function Madness.MadAccoladesUIModel.OnAccoladeTierCompleted // (Final|Native|Private|HasOutParms) // @ game+0x151e580
	void OnAccoladeProgressUpdate(struct UMadEnochAccolade* Accolade, struct UMadEnochAccoladeUnlockConditionBase* Condition); // Function Madness.MadAccoladesUIModel.OnAccoladeProgressUpdate // (Final|Native|Private) // @ game+0x151e4c0
	void OnAccoladeCompleted(struct UMadEnochAccolade* Accolade); // Function Madness.MadAccoladesUIModel.OnAccoladeCompleted // (Final|Native|Private) // @ game+0x151e440
	int32_t GetCurrentLevelIndex(); // Function Madness.MadAccoladesUIModel.GetCurrentLevelIndex // (Final|Native|Public|Const) // @ game+0x151da20
	int32_t GetCurrentLevel(); // Function Madness.MadAccoladesUIModel.GetCurrentLevel // (Final|Native|Public|Const) // @ game+0x151d9f0
	int32_t GetCurrentAccountPoints(); // Function Madness.MadAccoladesUIModel.GetCurrentAccountPoints // (Final|Native|Public|Const) // @ game+0x151d9c0
	void ClaimLevelReward(int32_t InLevel); // Function Madness.MadAccoladesUIModel.ClaimLevelReward // (Final|Native|Public) // @ game+0x151d900
	void ClaimAccoladeReward(struct FString InGuidString, int32_t InTierIdx); // Function Madness.MadAccoladesUIModel.ClaimAccoladeReward // (Final|Native|Public) // @ game+0x151d820
};

// Class Madness.MadActionPromptUIModel
// Size: 0xf8 (Inherited: 0x50)
struct UMadActionPromptUIModel : UBaseUIModel {
	char UnknownData_50[0x8]; // 0x50(0x08)
	struct TArray<struct FCoherentIntKeyBinding> ActionPromptKeyboardKeys; // 0x58(0x10)
	struct TArray<struct FCoherentIntKeyBinding> ActionPromptGamepadKeys; // 0x68(0x10)
	struct TArray<struct FCoherentStringKeyBinding> ActionPromptMouseKeys; // 0x78(0x10)
	int32_t CurrentActionKeyID; // 0x88(0x04)
	float CurrentProgress; // 0x8c(0x04)
	char UnknownData_90_0 : 7; // 0x90(0x01)
	bool bIsActionPromptDisplayed : 1; // 0x90(0x01)
	char UnknownData_91[0x7]; // 0x91(0x07)
	struct FActionPromptParams CurrentActionPromptParams; // 0x98(0x40)
	char UnknownData_D8[0x18]; // 0xd8(0x18)
	struct FWeakObjectPtr<struct UActionPromptWidgetComponent> CachedActionPromptComponent; // 0xf0(0x08)
};

// Class Madness.MadActorWithPreview
// Size: 0x3a8 (Inherited: 0x2f0)
struct AMadActorWithPreview : AActor {
	char UnknownData_2F0_0 : 7; // 0x2f0(0x01)
	bool bIsPreview : 1; // 0x2f0(0x01)
	char UnknownData_2F1[0x3]; // 0x2f1(0x03)
	float CollisionRadius; // 0x2f4(0x04)
	float CollisionHalfHeight; // 0x2f8(0x04)
	struct FVector TripWireConnectOffset; // 0x2fc(0x0c)
	struct FGameplayAttribute LimitAttribute; // 0x308(0x38)
	struct FGameplayAttribute MaxLimitAttribute; // 0x340(0x38)
	struct TArray<struct FWeakObjectPtr<struct AMadTripWire>> ConnectedTripWires; // 0x378(0x10)
	struct TArray<struct UMeshComponent*> CachedMeshComponents; // 0x388(0x10)
	struct FName ColorChangeParam; // 0x398(0x08)
	char UnknownData_3A0_0 : 7; // 0x3a0(0x01)
	bool bIsPlacementAllowed : 1; // 0x3a0(0x01)
	char UnknownData_3A1[0x7]; // 0x3a1(0x07)
};

// Class Madness.MadBaseAI
// Size: 0xbd8 (Inherited: 0xb98)
struct AMadBaseAI : AFWAIController {
	char UnknownData_B98[0x10]; // 0xb98(0x10)
	struct UEnvQuery* AdvanceCover; // 0xba8(0x08)
	struct UEnvQuery* FallbackCover; // 0xbb0(0x08)
	struct UEnvQuery* AwayCover; // 0xbb8(0x08)
	char UnknownData_BC0_0 : 7; // 0xbc0(0x01)
	bool bLeaveCoverOnDamage : 1; // 0xbc0(0x01)
	char UnknownData_BC1[0xf]; // 0xbc1(0x0f)
	float WakeUpNeighborRadius; // 0xbd0(0x04)
	char UnknownData_BD4[0x4]; // 0xbd4(0x04)

	void SetDefaultFocus(struct FVector Point); // Function Madness.MadBaseAI.SetDefaultFocus // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x151ea60
	void OnAttackEarlyExitEvent(); // Function Madness.MadBaseAI.OnAttackEarlyExitEvent // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	int32_t GetNumberOfActivePlayers(); // Function Madness.MadBaseAI.GetNumberOfActivePlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x151da80
	bool GetForceTurnInPlace(); // Function Madness.MadBaseAI.GetForceTurnInPlace // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x151da50
	void ForceTurnInPlace(); // Function Madness.MadBaseAI.ForceTurnInPlace // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xcd80f0
	void ClearDefaultFocus(); // Function Madness.MadBaseAI.ClearDefaultFocus // (Final|Native|Public|BlueprintCallable) // @ game+0x151d980
};

// Class Madness.MadAI
// Size: 0xbd8 (Inherited: 0xbd8)
struct AMadAI : AMadBaseAI {
};

// Class Madness.MadCrowdAI
// Size: 0xbd8 (Inherited: 0xbd8)
struct AMadCrowdAI : AMadBaseAI {
};

// Class Madness.FWMontageProvider_SmartObject
// Size: 0x30 (Inherited: 0x28)
struct UFWMontageProvider_SmartObject : UFWMontageProvider {
	struct FName DataTag; // 0x28(0x08)
};

// Class Madness.FWMontageProvider_SOStart
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOStart : UFWMontageProvider_SmartObject {
};

// Class Madness.FWMontageProvider_SOLoop
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOLoop : UFWMontageProvider_SmartObject {
};

// Class Madness.FWMontageProvider_SOSyncLoop
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOSyncLoop : UFWMontageProvider_SmartObject {
};

// Class Madness.FWMontageProvider_SOPostSync
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOPostSync : UFWMontageProvider_SmartObject {
};

// Class Madness.FWMontageProvider_SOEnd
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOEnd : UFWMontageProvider_SmartObject {
};

// Class Madness.FWMontageProvider_SOForceOut
// Size: 0x30 (Inherited: 0x30)
struct UFWMontageProvider_SOForceOut : UFWMontageProvider_SmartObject {
};

// Class Madness.MadAI_AbilitySafeZone
// Size: 0x330 (Inherited: 0x328)
struct AMadAI_AbilitySafeZone : AVolume {
	struct FGameplayTag TagToAdd; // 0x328(0x08)
};

// Class Madness.MadAI_AlteredDemonMortarProjectile
// Size: 0x5d8 (Inherited: 0x5c0)
struct AMadAI_AlteredDemonMortarProjectile : AMadProjectile {
	struct UParticleSystem* MortarProjectileMarker; // 0x5c0(0x08)
	float DefaultArcValue; // 0x5c8(0x04)
	float InCoverArcValue; // 0x5cc(0x04)
	struct UParticleSystemComponent* TargetMarkerParticleComponent; // 0x5d0(0x08)

	void MulticastSpawnTargetMarkerAtLocation(struct UWorld* World, struct UParticleSystem* EmitterTemplate, struct FTransform SpawnTransform, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod); // Function Madness.MadAI_AlteredDemonMortarProjectile.MulticastSpawnTargetMarkerAtLocation // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x151e260
};

// Class Madness.MadAI_Infantry
// Size: 0xbe0 (Inherited: 0xbd8)
struct AMadAI_Infantry : AMadAI {
	char UnknownData_BD8[0x8]; // 0xbd8(0x08)

	void OnPlayerChangedTargettingMode(bool bIsTargetting); // Function Madness.MadAI_Infantry.OnPlayerChangedTargettingMode // (Final|Native|Public) // @ game+0x1522bd0
};

// Class Madness.MadAI_Bailey
// Size: 0xbe8 (Inherited: 0xbe0)
struct AMadAI_Bailey : AMadAI_Infantry {
	char UnknownData_BE0[0x8]; // 0xbe0(0x08)
};

// Class Madness.MadAI_Bailey_StoneWaveProjectile
// Size: 0x600 (Inherited: 0x5c0)
struct AMadAI_Bailey_StoneWaveProjectile : AMadProjectile {
	float ZOffset; // 0x5c0(0x04)
	char UnknownData_5C4[0x4]; // 0x5c4(0x04)
	struct UBoxComponent* BoxCollisionComponent; // 0x5c8(0x08)
	char UnknownData_5D0[0x30]; // 0x5d0(0x30)

	void OnBeginOverlapCallback(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadAI_Bailey_StoneWaveProjectile.OnBeginOverlapCallback // (Final|Native|Protected|HasOutParms) // @ game+0x151e6a0
};

// Class Madness.MadAI_BasicBerserker
// Size: 0xbe8 (Inherited: 0xbe0)
struct AMadAI_BasicBerserker : AMadAI_Infantry {
	float TargetingRequiredTime; // 0xbe0(0x04)
	char UnknownData_BE4[0x4]; // 0xbe4(0x04)
};

// Class Madness.MadAI_Berserker
// Size: 0xbe8 (Inherited: 0xbe0)
struct AMadAI_Berserker : AMadAI_Infantry {
	char UnknownData_BE0[0x8]; // 0xbe0(0x08)
};

// Class Madness.MadAI_BerserkerProjectile
// Size: 0x5c0 (Inherited: 0x5c0)
struct AMadAI_BerserkerProjectile : AMadProjectile {

	void GetClosestHostileActorInRange(float Radius, struct FVector Origin, struct TArray<struct AActor*> ActorsToExclude, struct AActor* OutHostileActor); // Function Madness.MadAI_BerserkerProjectile.GetClosestHostileActorInRange // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1521df0
};

// Class Madness.MadAI_Crawler
// Size: 0xc20 (Inherited: 0xbd8)
struct AMadAI_Crawler : AMadAI {
	struct FMulticastInlineDelegate OnSightCheckWithEnemyResultSignature; // 0xbd8(0x10)
	float BlockDetectionDistanceThreshold; // 0xbe8(0x04)
	float BlockDetectionInterval; // 0xbec(0x04)
	int32_t BlockDetectionNumSamples; // 0xbf0(0x04)
	char UnknownData_BF4_0 : 7; // 0xbf4(0x01)
	bool bIsInEndMovementAnimState : 1; // 0xbf4(0x01)
	char UnknownData_BF5[0x3]; // 0xbf5(0x03)
	float LastWeaponHitTime; // 0xbf8(0x04)
	struct FVector LastWeaponHitOriginLocation; // 0xbfc(0x0c)
	char UnknownData_C08_0 : 7; // 0xc08(0x01)
	bool bLastMoveWasStrafe : 1; // 0xc08(0x01)
	char UnknownData_C09[0x7]; // 0xc09(0x07)
	struct TArray<struct FCrawlerFailInfo> RecentFails; // 0xc10(0x10)

	void OnWeaponHit(struct AActor* InstigatorActor, struct FHitResult HitInfo, struct UDamageType* DamageType, float Damage); // Function Madness.MadAI_Crawler.OnWeaponHit // (Final|Native|Protected|HasOutParms) // @ game+0x1522d00
	bool HasActorFailedInTime(struct AActor* Actor, float Time); // Function Madness.MadAI_Crawler.HasActorFailedInTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522190
	float GetLastWeaponHitTime(); // Function Madness.MadAI_Crawler.GetLastWeaponHitTime // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522110
	struct FVector GetLastWeaponHitOriginLocation(); // Function Madness.MadAI_Crawler.GetLastWeaponHitOriginLocation // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15220b0
	bool GetLastMoveWasStrafe(); // Function Madness.MadAI_Crawler.GetLastMoveWasStrafe // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522070
	void AddFail(struct AActor* Actor, float Time); // Function Madness.MadAI_Crawler.AddFail // (Final|Native|Public|BlueprintCallable) // @ game+0x1521be0
};

// Class Madness.MadAI_CrowdBerserker
// Size: 0xbe0 (Inherited: 0xbd8)
struct AMadAI_CrowdBerserker : AMadCrowdAI {
	char UnknownData_BD8[0x8]; // 0xbd8(0x08)
};

// Class Madness.MadAI_CrowdPerforo
// Size: 0xbf0 (Inherited: 0xbd8)
struct AMadAI_CrowdPerforo : AMadCrowdAI {
	char UnknownData_BD8[0x18]; // 0xbd8(0x18)

	void OnKilled(struct ABaseCharacter* ControllerOwner, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadAI_CrowdPerforo.OnKilled // (Native|Protected) // @ game+0x1522880
	void OnChargeAttackAvailableEvent(bool IsActive); // Function Madness.MadAI_CrowdPerforo.OnChargeAttackAvailableEvent // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x1522790
	void OnChargeAttackActiveEvent(bool IsActive); // Function Madness.MadAI_CrowdPerforo.OnChargeAttackActiveEvent // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x1522700
};

// Class Madness.MadAI_DesertBerserker
// Size: 0xbe8 (Inherited: 0xbe8)
struct AMadAI_DesertBerserker : AMadAI_BasicBerserker {
};

// Class Madness.MadAI_DesertSciathan
// Size: 0xc48 (Inherited: 0xbd8)
struct AMadAI_DesertSciathan : AMadAI {
	char UnknownData_BD8_0 : 7; // 0xbd8(0x01)
	bool bIsGliding : 1; // 0xbd8(0x01)
	char UnknownData_BD9_0 : 7; // 0xbd9(0x01)
	bool bEverHadTarget : 1; // 0xbd9(0x01)
	char UnknownData_BDA[0x2]; // 0xbda(0x02)
	float TrackDamageWindowLength; // 0xbdc(0x04)
	float TrackDistanceWindowLength; // 0xbe0(0x04)
	char UnknownData_BE4[0x64]; // 0xbe4(0x64)

	bool WasEnemyInRangeForTheDuration(float DURATION, float MaxDistance, float MinDistance); // Function Madness.MadAI_DesertSciathan.WasEnemyInRangeForTheDuration // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15234e0
	void SetIsOnGround(bool bOnGround); // Function Madness.MadAI_DesertSciathan.SetIsOnGround // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1523290
	bool GetIsOnGround(); // Function Madness.MadAI_DesertSciathan.GetIsOnGround // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522050
	float GetDamageDoneLately(float DURATION); // Function Madness.MadAI_DesertSciathan.GetDamageDoneLately // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1521fa0
	struct F360AttackBandInfo Get360AttackInfo(); // Function Madness.MadAI_DesertSciathan.Get360AttackInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1521dc0
	bool CanHitTargetWithGroundSlam(struct UMadAIGameplayAbility* OwningAbility, float MaxDistance, float MinHeight); // Function Madness.MadAI_DesertSciathan.CanHitTargetWithGroundSlam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1521cb0
};

// Class Madness.MadAI_Shotgunner_Base
// Size: 0xbe8 (Inherited: 0xbe0)
struct AMadAI_Shotgunner_Base : AMadAI_Infantry {
	char UnknownData_BE0_0 : 7; // 0xbe0(0x01)
	bool bSpecialTreatmentForCoversInLOS : 1; // 0xbe0(0x01)
	char UnknownData_BE1[0x7]; // 0xbe1(0x07)
};

// Class Madness.MadAI_DrDetonator
// Size: 0xbe8 (Inherited: 0xbe8)
struct AMadAI_DrDetonator : AMadAI_Shotgunner_Base {
};

// Class Madness.MadAI_ForestSciathan
// Size: 0xbe8 (Inherited: 0xbd8)
struct AMadAI_ForestSciathan : AMadAI {
	float MinAttackDistance; // 0xbd8(0x04)
	float MaxAttackDistance; // 0xbdc(0x04)
	char UnknownData_BE0[0x8]; // 0xbe0(0x08)
};

// Class Madness.MadAI_Guardian
// Size: 0xc08 (Inherited: 0xbd8)
struct AMadAI_Guardian : AMadAI {
	struct FGuardianChangeStanceDefensive ChangeStanceDefensiveProperties; // 0xbd8(0x10)
	struct FGuardianChangeStanceAvoidance ChangeStanceAvoidanceProperties; // 0xbe8(0x0c)
	float NextAggressiveTargetSelectionTime; // 0xbf4(0x04)
	float AggressiveTargetSelectionInterval; // 0xbf8(0x04)
	char UnknownData_BFC_0 : 7; // 0xbfc(0x01)
	bool bIsChanneling : 1; // 0xbfc(0x01)
	char UnknownData_BFD[0x3]; // 0xbfd(0x03)
	struct UMadDamageTrackerComponent* Tracker; // 0xc00(0x08)

	void SetIsChanneling(bool bNewIsChanneling); // Function Madness.MadAI_Guardian.SetIsChanneling // (Final|Native|Public|BlueprintCallable) // @ game+0x1523200
};

// Class Madness.MadAI_HeavyBase
// Size: 0xbf0 (Inherited: 0xbe0)
struct AMadAI_HeavyBase : AMadAI_Infantry {
	char UnknownData_BE0[0x10]; // 0xbe0(0x10)
};

// Class Madness.MadAI_Insect
// Size: 0xbf0 (Inherited: 0xbd8)
struct AMadAI_Insect : AMadAI {
	char UnknownData_BD8_0 : 7; // 0xbd8(0x01)
	bool bHideIfNoEnemiesFound : 1; // 0xbd8(0x01)
	char UnknownData_BD9_0 : 7; // 0xbd9(0x01)
	bool bAutoAttack : 1; // 0xbd9(0x01)
	char UnknownData_BDA[0x6]; // 0xbda(0x06)
	struct AMadInsectCharacter* SwarmPawn; // 0xbe0(0x08)
	struct ABaseCharacter* AttackTarget; // 0xbe8(0x08)
};

// Class Madness.MadAI_Lurker
// Size: 0xbf0 (Inherited: 0xbd8)
struct AMadAI_Lurker : AMadAI {
	char UnknownData_BD8[0x8]; // 0xbd8(0x08)
	struct UMadGameplayEffect* LurkerIsAngry; // 0xbe0(0x08)
	char UnknownData_BE8[0x8]; // 0xbe8(0x08)
};

// Class Madness.MadAI_LurkerAlpha
// Size: 0xcc0 (Inherited: 0xbf0)
struct AMadAI_LurkerAlpha : AMadAI_Lurker {
	struct UMadGameplayEffect* StunEffectOnHeavyDamage; // 0xbf0(0x08)
	struct FScalableFloat MeleeDamageScalableFloat; // 0xbf8(0x20)
	struct FGameplayAttribute LevelAttribute; // 0xc18(0x38)
	struct FGameplayTagContainer EffectsToRemoveOnMeleeAttack; // 0xc50(0x20)
	float TimeToResetStompAttack; // 0xc70(0x04)
	enum class ETraceTypeQuery MeleeAttackTraceChannel; // 0xc74(0x01)
	char UnknownData_C75[0x3]; // 0xc75(0x03)
	float TimeToResetTargetInSeconds; // 0xc78(0x04)
	float DefaultMeleeAttackRadius; // 0xc7c(0x04)
	float JawMeleeAttackRadius; // 0xc80(0x04)
	char UnknownData_C84[0x4]; // 0xc84(0x04)
	struct AMadCharAI_Lurker* ControlledLurker; // 0xc88(0x08)
	struct AActor* LastTarget; // 0xc90(0x08)
	char UnknownData_C98[0x28]; // 0xc98(0x28)

	void StopTimerForStompAttack(); // Function Madness.MadAI_LurkerAlpha.StopTimerForStompAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x15234c0
	void StartTimerForStompAttack(); // Function Madness.MadAI_LurkerAlpha.StartTimerForStompAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x15234a0
	void SetStompAttackStage(int32_t Value); // Function Madness.MadAI_LurkerAlpha.SetStompAttackStage // (Final|Native|Public|BlueprintCallable) // @ game+0x1523420
	void SetLastTarget(struct AActor* Target); // Function Madness.MadAI_LurkerAlpha.SetLastTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1523320
	void OnEndResetTargetTimer(); // Function Madness.MadAI_LurkerAlpha.OnEndResetTargetTimer // (Final|Native|Private) // @ game+0x1522840
	void OnEndCooldownTimerForStopmAttack(); // Function Madness.MadAI_LurkerAlpha.OnEndCooldownTimerForStopmAttack // (Final|Native|Private) // @ game+0x1522820
	int32_t GetStompAttackStage(); // Function Madness.MadAI_LurkerAlpha.GetStompAttackStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522170
	struct AActor* GetLastTarget(); // Function Madness.MadAI_LurkerAlpha.GetLastTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522090
};

// Class Madness.MadAI_NPCAlly
// Size: 0xc60 (Inherited: 0xbd8)
struct AMadAI_NPCAlly : AMadAI {
	struct Acharacter* CurrentTargetCharacter; // 0xbd8(0x08)
	struct AMadBaseAICharacter* CurrentPossessedCharacter; // 0xbe0(0x08)
	struct TArray<struct Acharacter*> TargetsToIgnore; // 0xbe8(0x10)
	char UnknownData_BF8[0x38]; // 0xbf8(0x38)
	char UnknownData_C30_0 : 7; // 0xc30(0x01)
	bool bEnableLookAtAnimation : 1; // 0xc30(0x01)
	char UnknownData_C31[0x3]; // 0xc31(0x03)
	float ReactionCheckChance; // 0xc34(0x04)
	float NotifyLookAtChance; // 0xc38(0x04)
	char UnknownData_C3C_0 : 7; // 0xc3c(0x01)
	bool bInterpolateLookAtAnimation : 1; // 0xc3c(0x01)
	char UnknownData_C3D[0x3]; // 0xc3d(0x03)
	float LookAtInterpolationSpeed; // 0xc40(0x04)
	int32_t LookAtAnimationUpdateRate; // 0xc44(0x04)
	float LookAtAnimationDuration; // 0xc48(0x04)
	float LookAtCooldownDuration; // 0xc4c(0x04)
	float ReactionCheckUpdateRate; // 0xc50(0x04)
	float ReactionCheckDistance; // 0xc54(0x04)
	char UnknownData_C58[0x8]; // 0xc58(0x08)

	void OnTargetCharacterBeingDestroyed(struct AActor* Actor); // Function Madness.MadAI_NPCAlly.OnTargetCharacterBeingDestroyed // (Final|Native|Protected) // @ game+0x1522c80
};

// Class Madness.MadAI_PathMarkerController
// Size: 0x410 (Inherited: 0x408)
struct AMadAI_PathMarkerController : AAIController {
	float OffsetFromCorners; // 0x408(0x04)
	char UnknownData_40C[0x4]; // 0x40c(0x04)
};

// Class Madness.MadAI_Perforo
// Size: 0xbe0 (Inherited: 0xbd8)
struct AMadAI_Perforo : AMadAI {
	float TimeSinceLastHitToCutPath; // 0xbd8(0x04)
	char UnknownData_BDC[0x4]; // 0xbdc(0x04)
};

// Class Madness.MadAI_Perforo_Alpha
// Size: 0xc08 (Inherited: 0xbd8)
struct AMadAI_Perforo_Alpha : AMadAI {
	char UnknownData_BD8_0 : 7; // 0xbd8(0x01)
	bool bHasGland : 1; // 0xbd8(0x01)
	char UnknownData_BD9[0x3]; // 0xbd9(0x03)
	float TrackDamageWindowLength; // 0xbdc(0x04)
	struct TArray<struct FMadPADamageWindow> DamageWindows; // 0xbe0(0x10)
	struct ABaseCharacter* SelectedDangerousTargetForAnomalySlash; // 0xbf0(0x08)
	char UnknownData_BF8[0x10]; // 0xbf8(0x10)

	bool PerforoAlphaHasGland(struct AController* Controller); // Function Madness.MadAI_Perforo_Alpha.PerforoAlphaHasGland // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1523100
	int32_t NumberOfMinionsAttackingTarget(struct UFWAIArchetype* MinionArchetype, struct AActor* Target); // Function Madness.MadAI_Perforo_Alpha.NumberOfMinionsAttackingTarget // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522320
	int32_t NumberOfMinions(struct UFWAIArchetype* MinionArchetype); // Function Madness.MadAI_Perforo_Alpha.NumberOfMinions // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522280
};

// Class Madness.MadAI_Sciathan
// Size: 0xbf8 (Inherited: 0xbd8)
struct AMadAI_Sciathan : AMadAI {
	char UnknownData_BD8_0 : 7; // 0xbd8(0x01)
	bool bHasPerformedFlyBy : 1; // 0xbd8(0x01)
	char UnknownData_BD9[0x7]; // 0xbd9(0x07)
	struct ALevelSequenceActor* ReservedLevelSequenceActor; // 0xbe0(0x08)
	float LastWeaponHitTime; // 0xbe8(0x04)
	struct FVector LastWeaponHitOriginLocation; // 0xbec(0x0c)

	void SetReservedLevelSequenceActor(struct ALevelSequenceActor* LevelSequenceActor); // Function Madness.MadAI_Sciathan.SetReservedLevelSequenceActor // (Final|Native|Public|BlueprintCallable) // @ game+0x15233a0
	void OnWeaponHit(struct AActor* InstigatorActor, struct FHitResult HitInfo, struct UDamageType* DamageType, float Damage); // Function Madness.MadAI_Sciathan.OnWeaponHit // (Final|Native|Protected|HasOutParms) // @ game+0x1522f00
	struct ALevelSequenceActor* GetReservedLevelSequenceActor(); // Function Madness.MadAI_Sciathan.GetReservedLevelSequenceActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1522150
	float GetLastWeaponHitTime(); // Function Madness.MadAI_Sciathan.GetLastWeaponHitTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522130
	struct FVector GetLastWeaponHitOriginLocation(); // Function Madness.MadAI_Sciathan.GetLastWeaponHitOriginLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15220e0
	bool GetHasPerformedFlyBy(); // Function Madness.MadAI_Sciathan.GetHasPerformedFlyBy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1522030
	void CleanUpReservedState(); // Function Madness.MadAI_Sciathan.CleanUpReservedState // (Final|Native|Public|BlueprintCallable) // @ game+0x1521da0
};

// Class Madness.MadAI_Shotgunner_Desert
// Size: 0xc50 (Inherited: 0xbe8)
struct AMadAI_Shotgunner_Desert : AMadAI_Shotgunner_Base {
	char UnknownData_BE8[0x8]; // 0xbe8(0x08)
	struct FScalableFloat ShieldUsageTimeoutScale; // 0xbf0(0x20)
	char UnknownData_C10[0x40]; // 0xc10(0x40)

	void OnShowShield(); // Function Madness.MadAI_Shotgunner_Desert.OnShowShield // (Final|Native|Protected) // @ game+0x1522c60
	void OnHideShield(); // Function Madness.MadAI_Shotgunner_Desert.OnHideShield // (Final|Native|Protected) // @ game+0x1522860
	void OnBreakShield(); // Function Madness.MadAI_Shotgunner_Desert.OnBreakShield // (Final|Native|Protected) // @ game+0x15226e0
	void OnAnimNotifyEvent(struct UFWAnimNotify* AnimNotify, struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAI_Shotgunner_Desert.OnAnimNotifyEvent // (Final|Native|Protected) // @ game+0x1522400
};

// Class Madness.MadNavmeshProjectile
// Size: 0x5f0 (Inherited: 0x5c0)
struct AMadNavmeshProjectile : AMadProjectile {
	float ZOffset; // 0x5c0(0x04)
	char UnknownData_5C4[0x2c]; // 0x5c4(0x2c)

	struct AMadNavmeshProjectile* SpawnNavmeshProjectile(struct UObject* WorldContextObject, struct AMadNavmeshProjectile* ProjectileClass, struct FVector Origin, struct FVector Direction, struct APawn* InstigatorPawn, struct AActor* OwnerActor, float InitialSpeedOverride, float MaxTestDistance); // Function Madness.MadNavmeshProjectile.SpawnNavmeshProjectile // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1683f20
};

// Class Madness.MadAI_SmallLurkerProjectile
// Size: 0x610 (Inherited: 0x5f0)
struct AMadAI_SmallLurkerProjectile : AMadNavmeshProjectile {
	float MinDistanceToTarget; // 0x5f0(0x04)
	char UnknownData_5F4[0x4]; // 0x5f4(0x04)
	struct AActor* TargetActor; // 0x5f8(0x08)
	char UnknownData_600[0x10]; // 0x600(0x10)

	void SetHomingTarget(struct AActor* CustomTarget); // Function Madness.MadAI_SmallLurkerProjectile.SetHomingTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1523180
	void OnAnyDamageCallback(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Madness.MadAI_SmallLurkerProjectile.OnAnyDamageCallback // (Final|Native|Private) // @ game+0x1522550
	void MulticastTurnOffHoming(); // Function Madness.MadAI_SmallLurkerProjectile.MulticastTurnOffHoming // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1522260
};

// Class Madness.MadAI_Sniper
// Size: 0xbf8 (Inherited: 0xbe0)
struct AMadAI_Sniper : AMadAI_Infantry {
	char UnknownData_BE0[0x18]; // 0xbe0(0x18)
};

// Class Madness.MadAI_SplineBerserker
// Size: 0xbe8 (Inherited: 0xbe0)
struct AMadAI_SplineBerserker : AMadAI_Infantry {
	char UnknownData_BE0[0x8]; // 0xbe0(0x08)
};

// Class Madness.MadAI_SplinePerforo
// Size: 0xbd8 (Inherited: 0xbd8)
struct AMadAI_SplinePerforo : AMadAI {
};

// Class Madness.MadAI_Telegraphist
// Size: 0xbf8 (Inherited: 0xbf8)
struct AMadAI_Telegraphist : AMadAI_Sniper {
};

// Class Madness.MadAI_Telegraphist_Desert
// Size: 0xbf8 (Inherited: 0xbf8)
struct AMadAI_Telegraphist_Desert : AMadAI_Telegraphist {
};

// Class Madness.MadAI_Tick
// Size: 0xbf0 (Inherited: 0xbd8)
struct AMadAI_Tick : AMadAI {
	char UnknownData_BD8_0 : 7; // 0xbd8(0x01)
	bool bHideIfNoEnemiesFound : 1; // 0xbd8(0x01)
	char UnknownData_BD9_0 : 7; // 0xbd9(0x01)
	bool bAutoAttack : 1; // 0xbd9(0x01)
	char UnknownData_BDA[0x6]; // 0xbda(0x06)
	struct AMadTickCharacter* TickPawn; // 0xbe0(0x08)
	struct ABaseCharacter* AttackTarget; // 0xbe8(0x08)
};

// Class Madness.MadAI_VolcanoBoss
// Size: 0xba0 (Inherited: 0xb98)
struct AMadAI_VolcanoBoss : AFWAIController {
	char UnknownData_B98[0x8]; // 0xb98(0x08)
};

// Class Madness.MadAI_VolcanoSpider
// Size: 0xc18 (Inherited: 0xbd8)
struct AMadAI_VolcanoSpider : AMadAI {
	float MinSprintTime; // 0xbd8(0x04)
	float MaxSprintTime; // 0xbdc(0x04)
	float WalkTimeFraction; // 0xbe0(0x04)
	float DistanceToTarget; // 0xbe4(0x04)
	float AngleToTarget; // 0xbe8(0x04)
	char UnknownData_BEC[0x4]; // 0xbec(0x04)
	struct FGameplayTagContainer AbilityTags; // 0xbf0(0x20)
	char UnknownData_C10[0x8]; // 0xc10(0x08)

	void SetTryToExplode(bool bTry); // Function Madness.MadAI_VolcanoSpider.SetTryToExplode // (Final|Native|Public|BlueprintCallable) // @ game+0x1527400
	void Explode(); // Function Madness.MadAI_VolcanoSpider.Explode // (Final|Native|Public|BlueprintCallable) // @ game+0x1526730
};

// Class Madness.MadAI_WarzoneSciathan
// Size: 0xc48 (Inherited: 0xc48)
struct AMadAI_WarzoneSciathan : AMadAI_DesertSciathan {
};

// Class Madness.MadAI_Yagak
// Size: 0xc20 (Inherited: 0xbd8)
struct AMadAI_Yagak : AMadAI {
	char UnknownData_BD8[0x10]; // 0xbd8(0x10)
	struct UMadDamageTrackerComponent* Tracker; // 0xbe8(0x08)
	float MinTargetSnapTime; // 0xbf0(0x04)
	float MaxTargetSnapTime; // 0xbf4(0x04)
	float PlayerRange; // 0xbf8(0x04)
	int32_t DashHitCount; // 0xbfc(0x04)
	struct FGameplayTagContainer BlinkAbilityTag; // 0xc00(0x20)
};

// Class Madness.MadGameplayAbility
// Size: 0x4b8 (Inherited: 0x410)
struct UMadGameplayAbility : UGameplayAbility {
	char UnknownData_410_0 : 7; // 0x410(0x01)
	bool bIsNotSkillAbility : 1; // 0x410(0x01)
	char UnknownData_411_0 : 7; // 0x411(0x01)
	bool bEndAbilityAfterPawnsDeath : 1; // 0x411(0x01)
	char UnknownData_412_0 : 7; // 0x412(0x01)
	bool bCanActivateAfterPawnsDeath : 1; // 0x412(0x01)
	char UnknownData_413_0 : 7; // 0x413(0x01)
	bool bAutoApplyCost : 1; // 0x413(0x01)
	char UnknownData_414_0 : 7; // 0x414(0x01)
	bool bAutoApplyDuration : 1; // 0x414(0x01)
	char UnknownData_415_0 : 7; // 0x415(0x01)
	bool bDisableDurationEffectOnEndAbility : 1; // 0x415(0x01)
	char UnknownData_416_0 : 7; // 0x416(0x01)
	bool bAutoApplyCooldown : 1; // 0x416(0x01)
	char UnknownData_417_0 : 7; // 0x417(0x01)
	bool bAutoApplyKeywords : 1; // 0x417(0x01)
	char UnknownData_418_0 : 7; // 0x418(0x01)
	bool bAttemptToPutPlayerBackInCover : 1; // 0x418(0x01)
	char UnknownData_419_0 : 7; // 0x419(0x01)
	bool bSuppressLocomotionAnimationChangeIfTemporarilyRemovedFromCover : 1; // 0x419(0x01)
	char UnknownData_41A_0 : 7; // 0x41a(0x01)
	bool bBlockMovement : 1; // 0x41a(0x01)
	char UnknownData_41B_0 : 7; // 0x41b(0x01)
	bool bDisableGroundIK : 1; // 0x41b(0x01)
	char UnknownData_41C_0 : 7; // 0x41c(0x01)
	bool bAnimationDataAppliedAutomatically : 1; // 0x41c(0x01)
	char UnknownData_41D[0x3]; // 0x41d(0x03)
	struct AMadActorWithPreview* SpawnedConstructClass; // 0x420(0x08)
	char UnknownData_428_0 : 7; // 0x428(0x01)
	bool bBlockInteractions : 1; // 0x428(0x01)
	char UnknownData_429_0 : 7; // 0x429(0x01)
	bool bIsThrowingAbility : 1; // 0x429(0x01)
	char UnknownData_42A_0 : 7; // 0x42a(0x01)
	bool bCanBeActivatedDuringTransition : 1; // 0x42a(0x01)
	char UnknownData_42B_0 : 7; // 0x42b(0x01)
	bool bUsingCastBar : 1; // 0x42b(0x01)
	char UnknownData_42C_0 : 7; // 0x42c(0x01)
	bool bImmuneToInterruptAll : 1; // 0x42c(0x01)
	char UnknownData_42D_0 : 7; // 0x42d(0x01)
	bool bNoImmuneMessage : 1; // 0x42d(0x01)
	char UnknownData_42E[0x2]; // 0x42e(0x02)
	struct TArray<struct UMadPlayerAnimData*> AnimationData; // 0x430(0x10)
	char UnknownData_440_0 : 7; // 0x440(0x01)
	bool bPassAllNotifies : 1; // 0x440(0x01)
	char UnknownData_441[0x3]; // 0x441(0x03)
	float AbilityTimeout; // 0x444(0x04)
	char UnknownData_448_0 : 7; // 0x448(0x01)
	bool bAutoActivateWhenGranted : 1; // 0x448(0x01)
	char UnknownData_449_0 : 7; // 0x449(0x01)
	bool bDelayedAutoActivation : 1; // 0x449(0x01)
	char UnknownData_44A_0 : 7; // 0x44a(0x01)
	bool bCanActivateInNonCombatArea : 1; // 0x44a(0x01)
	char UnknownData_44B_0 : 7; // 0x44b(0x01)
	bool bLockPlayerVisibility : 1; // 0x44b(0x01)
	char UnknownData_44C_0 : 7; // 0x44c(0x01)
	bool bAlteredAbility : 1; // 0x44c(0x01)
	char UnknownData_44D_0 : 7; // 0x44d(0x01)
	bool bPlayActivateChatter : 1; // 0x44d(0x01)
	char UnknownData_44E[0x2]; // 0x44e(0x02)
	struct FNameWrapper SpeechLineToPlay; // 0x450(0x10)
	char UnknownData_460[0x10]; // 0x460(0x10)
	struct UGameplayEffect* DurationGameplayEffectClass; // 0x470(0x08)
	char UnknownData_478[0x4]; // 0x478(0x04)
	int32_t AbilityRandomSeed; // 0x47c(0x04)
	struct FRandomStream AbilityRandomStream; // 0x480(0x08)
	char UnknownData_488[0x10]; // 0x488(0x10)
	struct UCameraState_Global* CameraStateClass; // 0x498(0x08)
	char UnknownData_4A0_0 : 7; // 0x4a0(0x01)
	bool bAutoActivateCameraState : 1; // 0x4a0(0x01)
	char UnknownData_4A1[0x1]; // 0x4a1(0x01)
	char UnknownData_4A2_0 : 7; // 0x4a2(0x01)
	bool bDebugScriptExecution : 1; // 0x4a2(0x01)
	char UnknownData_4A3[0x5]; // 0x4a3(0x05)
	struct TArray<struct FString> DebugScriptExecution; // 0x4a8(0x10)

	void TargetArraySendGameplayEvent(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct FGameplayTag EventTag, struct FGameplayEventData payload, int32_t AffectedActors); // Function Madness.MadGameplayAbility.TargetArraySendGameplayEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161d620
	void TargetArrayRemoveGameplayEffect(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct UGameplayEffect* GameplayEffect, struct FGameplayTagContainer GrantedTags, int32_t AffectedActors, int32_t StacksToRemove, struct AActor* Causer); // Function Madness.MadGameplayAbility.TargetArrayRemoveGameplayEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161d370
	void TargetArrayGetBestByHealth(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, bool bLowestHealth, struct AMadBaseCharacter* BestChar); // Function Madness.MadGameplayAbility.TargetArrayGetBestByHealth // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161d1b0
	void TargetArrayGetBestByDistance(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, bool bNearest, struct AMadBaseCharacter* BestChar, float Distance); // Function Madness.MadGameplayAbility.TargetArrayGetBestByDistance // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161cfb0
	struct TArray<struct AActor*> TargetArrayFilter(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions); // Function Madness.MadGameplayAbility.TargetArrayFilter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161ce40
	void TargetArrayExecuteImpactCue(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct AActor* Attacker, float TraceDistance, struct FGameplayTag GameplayCueTag, int32_t AffectedActors); // Function Madness.MadGameplayAbility.TargetArrayExecuteImpactCue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161cc20
	void TargetArrayApplyHeal(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct AActor* Causer, float Value, bool bIsPercentValue, bool bShowCue, int32_t AffectedActors, float HealedTotal); // Function Madness.MadGameplayAbility.TargetArrayApplyHeal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161c960
	void TargetArrayApplyGameplayEffects(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct TArray<struct FGameplayEffectSpecHandle> GameplayEffectSpecs); // Function Madness.MadGameplayAbility.TargetArrayApplyGameplayEffects // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161c760
	void TargetArrayApplyGameplayEffect(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, struct UGameplayEffect* GameplayEffect, struct AActor* Causer, int32_t AffectedActors); // Function Madness.MadGameplayAbility.TargetArrayApplyGameplayEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161c590
	void TargetArrayApplyDamage(struct TArray<struct AActor*> Targets, struct TArray<struct FMadTargetCondition> Conditions, float Damage, struct AController* Instigator, struct AActor* DamageCauser, struct UMadDamageType* DamageTypeClass); // Function Madness.MadGameplayAbility.TargetArrayApplyDamage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161c380
	void StopCameraAbilityState(); // Function Madness.MadGameplayAbility.StopCameraAbilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x161c360
	void StartCameraAbilityState(struct FCameraControlParameters ControlParameters); // Function Madness.MadGameplayAbility.StartCameraAbilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x161c270
	void ResetSkillCharges(); // Function Madness.MadGameplayAbility.ResetSkillCharges // (Final|Native|Public|BlueprintCallable) // @ game+0x161bb20
	void RemoveAnimDataOverride(); // Function Madness.MadGameplayAbility.RemoveAnimDataOverride // (Final|Native|Protected|BlueprintCallable) // @ game+0x161b980
	void QuickChange(bool bShow, int32_t InNumber); // Function Madness.MadGameplayAbility.QuickChange // (Final|Native|Public|BlueprintCallable) // @ game+0x161b8c0
	void OnPawnKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadGameplayAbility.OnPawnKilled // (Final|Native|Private) // @ game+0x161b400
	void MetricsCommitAbilityUsage(); // Function Madness.MadGameplayAbility.MetricsCommitAbilityUsage // (Final|Native|Protected|BlueprintCallable) // @ game+0x161b280
	void K2_StopAbilityDuration(); // Function Madness.MadGameplayAbility.K2_StopAbilityDuration // (Final|Native|Protected|BlueprintCallable) // @ game+0x161b260
	void K2_SendAbilityMessage(struct FText MsgText, int32_t InDuration); // Function Madness.MadGameplayAbility.K2_SendAbilityMessage // (Final|Native|Protected|BlueprintCallable) // @ game+0x161b130
	void K2_ResetCooldownsForActiveSkills(); // Function Madness.MadGameplayAbility.K2_ResetCooldownsForActiveSkills // (Final|Native|Public|BlueprintCallable) // @ game+0x161b110
	bool K2_CommitAbilityDurationWithTag(struct FGameplayTag DataTag, float Magnitude, bool bReset); // Function Madness.MadGameplayAbility.K2_CommitAbilityDurationWithTag // (Final|Native|Protected|BlueprintCallable) // @ game+0x161b000
	bool K2_CommitAbilityDuration(struct FName DataName, float Magnitude, bool bReset); // Function Madness.MadGameplayAbility.K2_CommitAbilityDuration // (Native|Protected|BlueprintCallable) // @ game+0x161aef0
	bool K2_CommitAbilityCooldownWithTagMagnitude(struct FGameplayTag DataTag, float Magnitude, bool BroadcastCommitEvent, bool ForceCooldown); // Function Madness.MadGameplayAbility.K2_CommitAbilityCooldownWithTagMagnitude // (Final|Native|Public|BlueprintCallable) // @ game+0x161ad80
	bool K2_CommitAbilityCooldownWithMagnitude(bool BroadcastCommitEvent, bool ForceCooldown, struct FName DataName, float Magnitude); // Function Madness.MadGameplayAbility.K2_CommitAbilityCooldownWithMagnitude // (Native|Public|BlueprintCallable) // @ game+0x161ac00
	bool K2_CanBeInterrupted(); // Function Madness.MadGameplayAbility.K2_CanBeInterrupted // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x161abd0
	void K2_ActivateAbilityNonInstanced(struct FGameplayAbilitySpecHandle Handle, struct FGameplayAbilityActorInfo ActorInfo, struct FGameplayAbilityActivationInfo ActivationInfo); // Function Madness.MadGameplayAbility.K2_ActivateAbilityNonInstanced // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void K2_ActivateAbilityFromDamageEvent(float Damage, struct UMadDamageType* DamageTypeClass, struct AMadPlayerController* InstigatorAsMadPC, struct AFWAIController* InstigatorAsAIController, struct AActor* DamageCauser); // Function Madness.MadGameplayAbility.K2_ActivateAbilityFromDamageEvent // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	bool IsSpawnTargetDataValid(struct FGameplayAbilityTargetDataHandle TargetData); // Function Madness.MadGameplayAbility.IsSpawnTargetDataValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x161aa90
	bool IsSectionLooped(struct UAnimMontage* InMontage, struct FName InName); // Function Madness.MadGameplayAbility.IsSectionLooped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x161a940
	void GetThrowOriginAndSpeed(struct FGameplayAbilityTargetDataHandle TargetData, struct FVector OutOrigin, struct FVector OutDirection, float OutSpeed, enum class EThrowType OutThrowType); // Function Madness.MadGameplayAbility.GetThrowOriginAndSpeed // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x161a6e0
	struct FTransform GetThrowOffsetFromMontage(struct UAnimMontage* InMontage, struct FName ThrowSectionName, struct FName ThrowSocketName, struct FString ThrowNotifyName, struct FName SlotName); // Function Madness.MadGameplayAbility.GetThrowOffsetFromMontage // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x161a510
	struct FTransform GetThrowOffset(struct FName ThrowSectionName, struct FName ThrowSocketName, struct FString ThrowNotifyName, struct FName SlotName); // Function Madness.MadGameplayAbility.GetThrowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x161a370
	bool GetTargetLocation(struct FGameplayAbilityTargetDataHandle TargetData, struct FVector OutTargetLocation); // Function Madness.MadGameplayAbility.GetTargetLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x161a200
	bool GetTarget(struct FGameplayAbilityTargetDataHandle TargetData, struct AActor* OutTarget); // Function Madness.MadGameplayAbility.GetTarget // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x161a090
	float GetRemainingDuration(); // Function Madness.MadGameplayAbility.GetRemainingDuration // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x161a030
	void GetParamsFromEventData(struct FGameplayEventData EventData, struct AMadPlayerController* InstigatorAsMadPC, struct AFWAIController* InstigatorAsAIController, float Damage, struct UMadDamageType* DamageTypeClass, struct AActor* DamageCauser); // Function Madness.MadGameplayAbility.GetParamsFromEventData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619bb0
	int32_t GetNumberOfEnemiesInRangeFromOwner(float InRange); // Function Madness.MadGameplayAbility.GetNumberOfEnemiesInRangeFromOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619ae0
	int32_t GetNumberOfEnemies(struct TArray<struct AActor*> InDamagedActors); // Function Madness.MadGameplayAbility.GetNumberOfEnemies // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619a20
	float GetGrantedByEffectLevel(); // Function Madness.MadGameplayAbility.GetGrantedByEffectLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619820
	void GetGameplayEffectsDurations(float CooldownEffect, float DurationEffect); // Function Madness.MadGameplayAbility.GetGameplayEffectsDurations // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619740
	int32_t GetCurrentSectionIndex(struct UAnimInstance* AnimInstance, struct UAnimMontage* InMontage); // Function Madness.MadGameplayAbility.GetCurrentSectionIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619660
	struct TArray<struct FName> GetCompositeSectionNames(struct UAnimMontage* InMontage); // Function Madness.MadGameplayAbility.GetCompositeSectionNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619580
	bool GetAllTargets(struct FGameplayAbilityTargetDataHandle TargetData, struct TArray<struct AActor*> OutTargets); // Function Madness.MadGameplayAbility.GetAllTargets // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16191c0
	struct UFWAIArchetype* GetAIArchetype(struct AActor* InAIActor); // Function Madness.MadGameplayAbility.GetAIArchetype // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619130
	bool FindMastery(struct AMadPlayerCharacter* InPlayer, struct FGameplayTag MasteryTag); // Function Madness.MadGameplayAbility.FindMastery // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1618fb0
	void FaceTarget(struct AMadBaseCharacter* InTarget, struct AMadPlayerCharacter* InPlayer, float InDuration, bool InOnlyYaw); // Function Madness.MadGameplayAbility.FaceTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1618e40
	void ExecuteImpactCueFromHitResult(struct FHitResult InHitResult, struct FGameplayTag GameplayCueTag); // Function Madness.MadGameplayAbility.ExecuteImpactCueFromHitResult // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1618c60
	void ExecuteImpactCueFromHitInfo(struct AActor* HitActor, struct FTakeHitInfo HitInfo, struct FGameplayTag GameplayCueTag); // Function Madness.MadGameplayAbility.ExecuteImpactCueFromHitInfo // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1618aa0
	void ExecuteImpactCue(struct AActor* InAttacker, struct AActor* InTarget, float TraceDistance, struct FGameplayTag GameplayCueTag); // Function Madness.MadGameplayAbility.ExecuteImpactCue // (Final|Native|Protected|BlueprintCallable) // @ game+0x1618950
	void EnableLayeredBlendSetup(struct FLayeredBlendSetup BlendSetup); // Function Madness.MadGameplayAbility.EnableLayeredBlendSetup // (Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1618880
	void DisableLayeredBlendSetup(); // Function Madness.MadGameplayAbility.DisableLayeredBlendSetup // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x1618820
	bool ConsumeEffects(struct AActor* InTarget, struct FGameplayTagContainer Tags); // Function Madness.MadGameplayAbility.ConsumeEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1618550
	void CommitKeywords(struct FGameplayTagContainer InIgnoreKeywords); // Function Madness.MadGameplayAbility.CommitKeywords // (Final|Native|Public|BlueprintCallable) // @ game+0x1618480
	void ApplyAnimDataOverride(); // Function Madness.MadGameplayAbility.ApplyAnimDataOverride // (Final|Native|Protected|BlueprintCallable) // @ game+0x1618440
};

// Class Madness.MadAIGameplayAbility
// Size: 0x518 (Inherited: 0x4b8)
struct UMadAIGameplayAbility : UMadGameplayAbility {
	char UnknownData_4B8[0x8]; // 0x4b8(0x08)
	struct FGameplayTagContainer ProhibitedTargetTags; // 0x4c0(0x20)
	struct FGameplayTagContainer DeactivationOwnedTags; // 0x4e0(0x20)
	struct UMadAbilitySet* AbilitySetForPlayer; // 0x500(0x08)
	char UnknownData_508_0 : 7; // 0x508(0x01)
	bool bStopsAIBehaviorLogic : 1; // 0x508(0x01)
	char UnknownData_509_0 : 7; // 0x509(0x01)
	bool bRestartAIBehaviorLogicOnEnd : 1; // 0x509(0x01)
	char UnknownData_50A_0 : 7; // 0x50a(0x01)
	bool bStopsAIMovement : 1; // 0x50a(0x01)
	char UnknownData_50B_0 : 7; // 0x50b(0x01)
	bool bForceCollision : 1; // 0x50b(0x01)
	char UnknownData_50C[0xc]; // 0x50c(0x0c)

	void SetAIFocalPoint(struct AActor* FocusTarget, struct FVector FocalPoint); // Function Madness.MadAIGameplayAbility.SetAIFocalPoint // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x154f4f0
	void K2_RestoreDefaultCollision(); // Function Madness.MadAIGameplayAbility.K2_RestoreDefaultCollision // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x154efa0
	bool K2_NavMeshRaycast(struct FVector RayStart, struct FVector RayEnd, struct FVector HitLocation, struct UObject* Querier, struct UNavigationQueryFilter* FilterClass); // Function Madness.MadAIGameplayAbility.K2_NavMeshRaycast // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x154edc0
	enum class EMadAIAbilityResult K2_GetAIAbilityResult(); // Function Madness.MadAIGameplayAbility.K2_GetAIAbilityResult // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x154ed90
	void K2_ForceCollsion(); // Function Madness.MadAIGameplayAbility.K2_ForceCollsion // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x154ed70
	void K2_FailAbility(); // Function Madness.MadAIGameplayAbility.K2_FailAbility // (Native|Public|BlueprintCallable) // @ game+0x154ed50
	bool K2_CanHitTargetUsingSMMeleeAttack(struct UMadAIGameplayAbility* OwningAbility, struct AActor* Target, struct UMadDataAsset_SMMeleeAttacks* AnimDataAsset); // Function Madness.MadAIGameplayAbility.K2_CanHitTargetUsingSMMeleeAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x154ec60
	bool K2_CanHitTargetUsingMeleeAttack(struct AActor* Source, struct AActor* Target, struct UMadDataAsset_DirectionalMeleeAttack* AnimDataAsset, float CollisionRadiusMultiplier, bool CheckCollisionAboveCovers); // Function Madness.MadAIGameplayAbility.K2_CanHitTargetUsingMeleeAttack // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154ead0
	bool K2_CanHitTargetUsingComboMeleeAttack(struct AActor* Source, struct AActor* Target, struct UMadDataAsset_DirectionalMeleeAttack* AnimDataAsset, float CollisionRadiusMultiplier); // Function Madness.MadAIGameplayAbility.K2_CanHitTargetUsingComboMeleeAttack // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e980
	bool K2_AreHostileActorsInRange(struct APawn* Source, struct FVector Origin, float Radius, int32_t RequiredNumberOfHostiles); // Function Madness.MadAIGameplayAbility.K2_AreHostileActorsInRange // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e810
	struct AMadCharAI* GetPawnFromActorInfo(struct FGameplayAbilityActorInfo ActorInfo); // Function Madness.MadAIGameplayAbility.GetPawnFromActorInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e640
	struct AMadBaseAI* GetAIControllerFromActor(struct AActor* Actor); // Function Madness.MadAIGameplayAbility.GetAIControllerFromActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e280
	struct AMadBaseAI* GetAIControllerFromActivatingPawn(); // Function Madness.MadAIGameplayAbility.GetAIControllerFromActivatingPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e250
	struct AActor* GetAIAbilityTarget(); // Function Madness.MadAIGameplayAbility.GetAIAbilityTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e220
	struct AMadCharAI* GetActivatingPawn(); // Function Madness.MadAIGameplayAbility.GetActivatingPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e390
	struct UAbilitySystemComponent* GetAbilitySystemComponentFromActor(struct AActor* Actor); // Function Madness.MadAIGameplayAbility.GetAbilitySystemComponentFromActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e310
	bool DoesTargetHaveTags(struct AActor* Target, struct FGameplayTagContainer Tags); // Function Madness.MadAIGameplayAbility.DoesTargetHaveTags // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x154df20
	bool DoesTargetHaveProhibitedTagsForAI(struct AActor* TargetActor); // Function Madness.MadAIGameplayAbility.DoesTargetHaveProhibitedTagsForAI // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x154de80
	void ClearAIFocalPoint(); // Function Madness.MadAIGameplayAbility.ClearAIFocalPoint // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x154de60
	bool CanHitTarget(struct ABaseCharacter* Source, struct AActor* Target, bool bUseIdealYawRotationToTarget); // Function Madness.MadAIGameplayAbility.CanHitTarget // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x154dd50
};

// Class Madness.MadAIAbility_ThrowGrenade
// Size: 0x518 (Inherited: 0x518)
struct UMadAIAbility_ThrowGrenade : UMadAIGameplayAbility {

	bool IsThrowLocationValid(struct FVector Location); // Function Madness.MadAIAbility_ThrowGrenade.IsThrowLocationValid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15330b0
	struct FVector GetBestThrowLocation(float Radius, enum class EFWDiscreteDistance MinDistance, bool bSkipSingleTargetWithoutCover, float MaxAngleOutOfCover, float MaxAngleInCover, bool bNeedFinalLocation); // Function Madness.MadAIAbility_ThrowGrenade.GetBestThrowLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15327a0
};

// Class Madness.MadAIAbility_Airstrike
// Size: 0x5b0 (Inherited: 0x518)
struct UMadAIAbility_Airstrike : UMadAIAbility_ThrowGrenade {
	struct FScalableFloat MinActivationDistance; // 0x518(0x20)
	struct FScalableFloat MaxActivationDistance; // 0x538(0x20)
	struct FScalableFloat MaxTargetGroupingDistance; // 0x558(0x20)
	struct UMadDataAsset_ThrowProjectileVariants* ThrowVariants; // 0x578(0x08)
	struct UMadGameplayEffect* FailedAttemptCooldownClass; // 0x580(0x08)
	char UnknownData_588[0x10]; // 0x588(0x10)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x598(0x08)
	struct AMadBaseAI* OwnerController; // 0x5a0(0x08)
	struct UMadThrowProjectile* ThrowTask; // 0x5a8(0x08)

	void ThrowingFinished(struct FName NotifyName); // Function Madness.MadAIAbility_Airstrike.ThrowingFinished // (Final|Native|Protected) // @ game+0x15277e0
	void TestFinished(bool bCanThrow); // Function Madness.MadAIAbility_Airstrike.TestFinished // (Final|Native|Protected) // @ game+0x1527750
};

// Class Madness.MadAIAbility_Altered_Blink
// Size: 0x598 (Inherited: 0x518)
struct UMadAIAbility_Altered_Blink : UMadAIGameplayAbility {
	float MaxBlinkRange; // 0x518(0x04)
	char UnknownData_51C[0x4]; // 0x51c(0x04)
	struct UEnvQuery* EscapeQuery; // 0x520(0x08)
	struct UEnvQuery* AttackQuery; // 0x528(0x08)
	struct UAnimMontage* CastingMontage; // 0x530(0x08)
	float AbilityCastingTime; // 0x538(0x04)
	char UnknownData_53C[0x4]; // 0x53c(0x04)
	struct UGameplayEffect* BlinkEffectClass; // 0x540(0x08)
	struct UGameplayEffect* PostAbilityEffectClass; // 0x548(0x08)
	struct AActor* BlinkWaveClass; // 0x550(0x08)
	struct AActor* PostBlinkExplosionClass; // 0x558(0x08)
	float TooMuchDanger; // 0x560(0x04)
	char UnknownData_564[0x4]; // 0x564(0x04)
	struct AMadCharAI* AbilityOwner; // 0x568(0x08)
	struct AActor* Target; // 0x570(0x08)
	char UnknownData_578[0x20]; // 0x578(0x20)

	void OnSpawnWave(struct AActor* WaveActor, struct AMadCharAI* InCaster, struct FVector CasterLocation, struct FVector InBlinkLocation, bool bTeleportTo); // Function Madness.MadAIAbility_Altered_Blink.OnSpawnWave // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1a35c70
	void OnSpawnExplosion(struct AActor* ExplosionActor); // Function Madness.MadAIAbility_Altered_Blink.OnSpawnExplosion // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnMontageNotifyBegin(struct FName NotifyName); // Function Madness.MadAIAbility_Altered_Blink.OnMontageNotifyBegin // (Final|Native|Private) // @ game+0x1526ef0
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Altered_Blink.OnMontageComplete // (Final|Native|Private) // @ game+0x1526d80
	void OnMontageChangeSuccessSpawn(); // Function Madness.MadAIAbility_Altered_Blink.OnMontageChangeSuccessSpawn // (Final|Native|Private) // @ game+0x1526d60
	void OnMontageChangeFail(); // Function Madness.MadAIAbility_Altered_Blink.OnMontageChangeFail // (Final|Native|Private) // @ game+0x1526d40
	void OnMontageCancelled(struct FName NotifyName); // Function Madness.MadAIAbility_Altered_Blink.OnMontageCancelled // (Final|Native|Private) // @ game+0x1526cc0
};

// Class Madness.MadAIAbility_Altered_GroundHit
// Size: 0x520 (Inherited: 0x518)
struct UMadAIAbility_Altered_GroundHit : UMadAIGameplayAbility {
	struct AMadDamageArea* DamageAreaTemplate; // 0x518(0x08)

	void SpawnDamageArea(struct AActor* Owner, struct FVector SpawnOrigin); // Function Madness.MadAIAbility_Altered_GroundHit.SpawnDamageArea // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1527590
	void OnDamageAreaSpawned(struct AActor* SpawnedArea); // Function Madness.MadAIAbility_Altered_GroundHit.OnDamageAreaSpawned // (Final|Native|Protected) // @ game+0x1526bc0
	void OnDamageAreaSpawnCompleted(); // Function Madness.MadAIAbility_Altered_GroundHit.OnDamageAreaSpawnCompleted // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	bool AreHostileActorsInRange(struct AFWAIController* OwnerAIController, struct FVector Origin, int32_t MinNumberOfHostiles, float Radius); // Function Madness.MadAIAbility_Altered_GroundHit.AreHostileActorsInRange // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526220
};

// Class Madness.MadAIAbility_Altered_InstantBurn
// Size: 0x530 (Inherited: 0x518)
struct UMadAIAbility_Altered_InstantBurn : UMadAIGameplayAbility {
	struct UMadGameplayEffect* BlockReactionsGameplayEffect; // 0x518(0x08)
	char UnknownData_520[0x10]; // 0x520(0x10)

	void SelectNewAbilityTargetWithinRange(struct AFWAIController* OwnerAIController, float Range, struct AActor* OutNewTarget); // Function Madness.MadAIAbility_Altered_InstantBurn.SelectNewAbilityTargetWithinRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15270b0
	bool IsAbilityTargetAvailableWithinRange(struct AFWAIController* OwnerAIController, float Range, bool bNextTarget); // Function Madness.MadAIAbility_Altered_InstantBurn.IsAbilityTargetAvailableWithinRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15269b0
	void AddTargetActorToTheAttackedList(struct AActor* AttackedActor); // Function Madness.MadAIAbility_Altered_InstantBurn.AddTargetActorToTheAttackedList // (Final|Native|Public|BlueprintCallable) // @ game+0x15261a0
};

// Class Madness.MadAiAbility_Guardian_Barrage
// Size: 0x6a0 (Inherited: 0x518)
struct UMadAiAbility_Guardian_Barrage : UMadAIGameplayAbility {
	struct FMulticastInlineDelegate OnComplete; // 0x518(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x528(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x538(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x548(0x10)
	struct FMulticastInlineDelegate OnBarrageInterrupted; // 0x558(0x10)
	struct UAnimMontage* CastingMontage; // 0x568(0x08)
	float DistanceToEnemyMin; // 0x570(0x04)
	float DistanceToEnemyMax; // 0x574(0x04)
	struct AScrapBarrage_Projectile* ProjectileClass; // 0x578(0x08)
	struct AScrapBarrage_Marker* MarkerClass; // 0x580(0x08)
	struct UGameplayEffect* PostAbilityEffectClass; // 0x588(0x08)
	struct UGameplayEffect* BarrageChannelEffectClass; // 0x590(0x08)
	float AbilityCastingTime; // 0x598(0x04)
	char UnknownData_59C[0x4]; // 0x59c(0x04)
	struct UParticleSystem* ParticleSystem; // 0x5a0(0x08)
	struct UAnimMontage* ShardMontage; // 0x5a8(0x08)
	struct FScalableFloat ProjectileDamageValueScalable; // 0x5b0(0x20)
	float BarrageSpawnOffset; // 0x5d0(0x04)
	float BarrageSpawnHeightOffset; // 0x5d4(0x04)
	float BarrageSpawnAngleRange; // 0x5d8(0x04)
	float ProjectileSpawnRandomOffset; // 0x5dc(0x04)
	int32_t MultiThrowMin; // 0x5e0(0x04)
	int32_t MultiThrowMax; // 0x5e4(0x04)
	struct AActor* Target; // 0x5e8(0x08)
	struct AMadCharAI* Caster; // 0x5f0(0x08)
	struct TArray<struct AActor*> AllPlayers; // 0x5f8(0x10)
	struct TArray<struct AScrapBarrage_Marker*> MarkersArray; // 0x608(0x10)
	struct AActor* CurrentTarget; // 0x618(0x08)
	struct TArray<struct FVector> MarkerLocationsArray; // 0x620(0x10)
	char UnknownData_630_0 : 7; // 0x630(0x01)
	bool bSetCooldown : 1; // 0x630(0x01)
	char UnknownData_631[0x3]; // 0x631(0x03)
	int32_t ThrowCountCurrent; // 0x634(0x04)
	int32_t MultiThrowCount; // 0x638(0x04)
	struct FVector ClosestToTargetMarkerLocation; // 0x63c(0x0c)
	float ProjectileSpawnInterval; // 0x648(0x04)
	char UnknownData_64C_0 : 7; // 0x64c(0x01)
	bool bThrowOnce : 1; // 0x64c(0x01)
	char UnknownData_64D_0 : 7; // 0x64d(0x01)
	bool bFixedThrowNumber : 1; // 0x64d(0x01)
	char UnknownData_64E[0x2]; // 0x64e(0x02)
	struct UMadAbilityTask_CurrentMontageChangeSection* ChangeMontageSectionTask; // 0x650(0x08)
	char UnknownData_658[0x48]; // 0x658(0x48)

	void Throw(); // Function Madness.MadAiAbility_Guardian_Barrage.Throw // (Final|Native|Private) // @ game+0x152ef40
	bool ShowCastBar(float CastTime, bool bIsChanneling); // Function Madness.MadAiAbility_Guardian_Barrage.ShowCastBar // (Final|Native|Protected|BlueprintCallable) // @ game+0x152ec10
	void SetMaxBarrageHits(); // Function Madness.MadAiAbility_Guardian_Barrage.SetMaxBarrageHits // (Final|Native|Protected|BlueprintCallable) // @ game+0x152ebf0
	void OnTargetMarkerFullySpawned(struct AActor* MarkerActor); // Function Madness.MadAiAbility_Guardian_Barrage.OnTargetMarkerFullySpawned // (Final|Native|Private) // @ game+0x152eac0
	void OnProjectileFullySpawned(struct AActor* ProjectileActor); // Function Madness.MadAiAbility_Guardian_Barrage.OnProjectileFullySpawned // (Final|Native|Private) // @ game+0x152ea40
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Barrage.OnNotifyBeginHandler // (Final|Native|Protected) // @ game+0x152e940
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Barrage.OnInterruptedHandler // (Final|Native|Protected) // @ game+0x152e740
	void OnInterruptChangeSectionSuccessful(); // Function Madness.MadAiAbility_Guardian_Barrage.OnInterruptChangeSectionSuccessful // (Final|Native|Private) // @ game+0x152e600
	void OnInterruptChangeSectionFailed(); // Function Madness.MadAiAbility_Guardian_Barrage.OnInterruptChangeSectionFailed // (Final|Native|Private) // @ game+0x152e5a0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Barrage.OnCompleteHandler // (Final|Native|Protected) // @ game+0x152e500
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Barrage.OnCancelledHandler // (Final|Native|Protected) // @ game+0x152e300
	struct FVector GetBarrageSpawnLocation(); // Function Madness.MadAiAbility_Guardian_Barrage.GetBarrageSpawnLocation // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x152e0e0
	void CreateBarrageMarkers(); // Function Madness.MadAiAbility_Guardian_Barrage.CreateBarrageMarkers // (Final|Native|Protected|BlueprintCallable) // @ game+0x152e080
	void CallSetBarrageOrigin(); // Function Madness.MadAiAbility_Guardian_Barrage.CallSetBarrageOrigin // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadAIAbility_Altered_Mortar
// Size: 0x6a0 (Inherited: 0x6a0)
struct UMadAIAbility_Altered_Mortar : UMadAiAbility_Guardian_Barrage {

	void SelectRandomNumberOfPoints(struct AAIController* OwnerController, struct TArray<struct FVector> ArrayToResize); // Function Madness.MadAIAbility_Altered_Mortar.SelectRandomNumberOfPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15271d0
};

// Class Madness.MadAIAbility_Altered_NukeShield
// Size: 0x520 (Inherited: 0x518)
struct UMadAIAbility_Altered_NukeShield : UMadAIGameplayAbility {
	char UnknownData_518[0x8]; // 0x518(0x08)

	bool HasRequiredHealthLevel(struct AFWAIController* OwnerAIController, float HealthLevel); // Function Madness.MadAIAbility_Altered_NukeShield.HasRequiredHealthLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15268e0
	bool GetAttackPerTierPerformed(enum class ENukeShieldTier Tier); // Function Madness.MadAIAbility_Altered_NukeShield.GetAttackPerTierPerformed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526790
};

// Class Madness.MadAIAbility_Altered_TrippleDash
// Size: 0x578 (Inherited: 0x518)
struct UMadAIAbility_Altered_TrippleDash : UMadAIGameplayAbility {
	struct AMadDamageArea* DamageAreaTemplate; // 0x518(0x08)
	float ZTestDistance; // 0x520(0x04)
	float DistanceMultiplier; // 0x524(0x04)
	float MinDistanceBewteenTargetAndSelfActor; // 0x528(0x04)
	float InRadius; // 0x52c(0x04)
	struct APawn* OwningPawn; // 0x530(0x08)
	struct AActor* TargetActor; // 0x538(0x08)
	struct AFWAIController* Controller; // 0x540(0x08)
	int32_t NonDBNOTargetsNumber; // 0x548(0x04)
	char UnknownData_54C[0x4]; // 0x54c(0x04)
	struct TArray<struct AActor*> TargetsToAttack; // 0x550(0x10)
	struct FVector JumpEndPoint; // 0x560(0x0c)
	struct FVector JumpStartPoint; // 0x56c(0x0c)

	void SpawnDamageArea(struct FVector AreaOrigin); // Function Madness.MadAIAbility_Altered_TrippleDash.SpawnDamageArea // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1527660
	void SetJumpStartPoint(struct FVector InPoint); // Function Madness.MadAIAbility_Altered_TrippleDash.SetJumpStartPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1527360
	void SetJumpEndPoint(struct FVector InPoint); // Function Madness.MadAIAbility_Altered_TrippleDash.SetJumpEndPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15272c0
	void RotateAbilityOwnerTowardTarget(); // Function Madness.MadAIAbility_Altered_TrippleDash.RotateAbilityOwnerTowardTarget // (Final|Native|Protected|BlueprintCallable) // @ game+0x1527090
	void PostJumpCleanup(); // Function Madness.MadAIAbility_Altered_TrippleDash.PostJumpCleanup // (Final|Native|Public|BlueprintCallable) // @ game+0x1527070
	void OnEndEnabled(); // Function Madness.MadAIAbility_Altered_TrippleDash.OnEndEnabled // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnDamageAreaSpawned(struct AActor* SpawnedArea); // Function Madness.MadAIAbility_Altered_TrippleDash.OnDamageAreaSpawned // (Final|Native|Private) // @ game+0x1526c40
	void OnDamageAreaSpawnCompleted(); // Function Madness.MadAIAbility_Altered_TrippleDash.OnDamageAreaSpawnCompleted // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	int32_t GetOverallTargetsNumber(); // Function Madness.MadAIAbility_Altered_TrippleDash.GetOverallTargetsNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15268c0
	struct FVector GetJumpStartPoint(); // Function Madness.MadAIAbility_Altered_TrippleDash.GetJumpStartPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526890
	struct FVector GetJumpEndPoint(); // Function Madness.MadAIAbility_Altered_TrippleDash.GetJumpEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526860
	bool CanActivateTripleDash(struct APawn* SelfActor, struct AActor* Target, float MinDistance, float MaxDistance, struct FVector OutVector); // Function Madness.MadAIAbility_Altered_TrippleDash.CanActivateTripleDash // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526560
	bool CalculateNextJumpEndPoint(); // Function Madness.MadAIAbility_Altered_TrippleDash.CalculateNextJumpEndPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1526390
};

// Class Madness.MadAIAbility_Bailey_EarthTremble
// Size: 0x578 (Inherited: 0x518)
struct UMadAIAbility_Bailey_EarthTremble : UMadAIGameplayAbility {
	struct TArray<struct FVector> ExplosionOffsets; // 0x518(0x10)
	float PredictionTime; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct AMadCharAI_Bailey* OwningPawn; // 0x530(0x08)
	struct AAIController* AIController; // 0x538(0x08)
	char UnknownData_540[0x38]; // 0x540(0x38)

	void OnSpawnLocationsFound(); // Function Madness.MadAIAbility_Bailey_EarthTremble.OnSpawnLocationsFound // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void FindSpikesLocations(); // Function Madness.MadAIAbility_Bailey_EarthTremble.FindSpikesLocations // (Final|Native|Public|BlueprintCallable) // @ game+0x1526770
};

// Class Madness.MadAIAbility_Bailey_GroundShock
// Size: 0x560 (Inherited: 0x518)
struct UMadAIAbility_Bailey_GroundShock : UMadAIGameplayAbility {
	struct UExplosionTemplate* SpikeExplosionTemplate; // 0x518(0x08)
	struct UEnvQuery* SpawnpointSelectionEQS; // 0x520(0x08)
	struct TArray<struct FVector> SpawnLocations; // 0x528(0x10)
	char UnknownData_538[0x28]; // 0x538(0x28)

	void SpawnSpikes(); // Function Madness.MadAIAbility_Bailey_GroundShock.SpawnSpikes // (Final|Native|Public|BlueprintCallable) // @ game+0x15276f0
	void FindSpikeLocations(); // Function Madness.MadAIAbility_Bailey_GroundShock.FindSpikeLocations // (Final|Native|Public|BlueprintCallable) // @ game+0x1526750
};

// Class Madness.MadAIAbility_Bailey_StoneWave
// Size: 0x570 (Inherited: 0x518)
struct UMadAIAbility_Bailey_StoneWave : UMadAIGameplayAbility {
	struct AMadProjectile* StoneWaveProjectile; // 0x518(0x08)
	struct FMulticastInlineDelegate SpawnSucceededDelegate; // 0x520(0x10)
	struct FMulticastInlineDelegate SpawnFailedDelegate; // 0x530(0x10)
	struct AMadCharAI* OwnerPawn; // 0x540(0x08)
	char UnknownData_548[0x8]; // 0x548(0x08)
	struct TArray<struct FWaveAndTargetData> SpawnedWaves; // 0x550(0x10)
	char UnknownData_560[0x10]; // 0x560(0x10)

	void SpawnStoneWaveActorsAllTargets(); // Function Madness.MadAIAbility_Bailey_StoneWave.SpawnStoneWaveActorsAllTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x1527710
	void SpawnAllTargetMarkers(struct FMadAITargetMarker TargetMarker, bool bUpdatePosition); // Function Madness.MadAIAbility_Bailey_StoneWave.SpawnAllTargetMarkers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1527490
	void OnWaveSpawned(struct AActor* InSpawned); // Function Madness.MadAIAbility_Bailey_StoneWave.OnWaveSpawned // (Final|Native|Private) // @ game+0x1526ff0
	void DestroyAllTargetMarkers(); // Function Madness.MadAIAbility_Bailey_StoneWave.DestroyAllTargetMarkers // (Final|Native|Public|BlueprintCallable) // @ game+0x1526710
};

// Class Madness.MadAIAbility_CallForBackup
// Size: 0x5a8 (Inherited: 0x518)
struct UMadAIAbility_CallForBackup : UMadAIGameplayAbility {
	struct TArray<struct FName> WaveNames; // 0x518(0x10)
	struct FScalableFloat MinFriendlyCountToReinforceScale; // 0x528(0x20)
	struct FMontageAssetSelector Montage; // 0x548(0x20)
	struct FName NotifyName; // 0x568(0x08)
	struct UFWAISemaphoreGroupClass* SemaphoreGroupClass; // 0x570(0x08)
	float SemaphoreDelay; // 0x578(0x04)
	char UnknownData_57C[0x4]; // 0x57c(0x04)
	struct UGameplayEffect* InitialCooldownGameplayEffectClass; // 0x580(0x08)
	char UnknownData_588[0x18]; // 0x588(0x18)
	struct UMadAIAbilityTask_CallBackup* Task; // 0x5a0(0x08)

	void TaskFinished(); // Function Madness.MadAIAbility_CallForBackup.TaskFinished // (Final|Native|Protected) // @ game+0x1527730
	struct FName GetBackupWaveName(); // Function Madness.MadAIAbility_CallForBackup.GetBackupWaveName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1526820
};

// Class Madness.MadAIAbilityTask
// Size: 0x90 (Inherited: 0x80)
struct UMadAIAbilityTask : UAbilityTask {
	struct AAIController* OwnerController; // 0x80(0x08)
	char UnknownData_88[0x8]; // 0x88(0x08)
};

// Class Madness.MadAIAbilityTask_CallBackup
// Size: 0x108 (Inherited: 0x90)
struct UMadAIAbilityTask_CallBackup : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	char UnknownData_C0[0x48]; // 0xc0(0x48)

	void TaskCallBackupDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_CallBackup.TaskCallBackupDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_CallBackup.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x1526ed0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_CallBackup.OnMontageEnded // (Final|Native|Protected) // @ game+0x1526e00
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_CallBackup.OnAnimNotify // (Final|Native|Protected) // @ game+0x1526ac0
	struct UMadAIAbilityTask_CallBackup* CallBackup(struct UObject* WorldContextObject, struct FMontageAssetSelector Montage, struct FName NotifyName, struct FName WaveName); // Function Madness.MadAIAbilityTask_CallBackup.CallBackup // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x15263c0
};

// Class Madness.MadAIAbility_Captain_AnomalicCleave
// Size: 0x5b0 (Inherited: 0x518)
struct UMadAIAbility_Captain_AnomalicCleave : UMadAIGameplayAbility {
	struct UAnimMontage* AttackMontage; // 0x518(0x08)
	struct FName Section; // 0x520(0x08)
	struct FName ExecuteNotifyName; // 0x528(0x08)
	float PlayRate; // 0x530(0x04)
	float TurnDuration; // 0x534(0x04)
	struct FScalableFloat MaxRangeScale; // 0x538(0x20)
	float MaxPredictionDistance; // 0x558(0x04)
	float MaxPredictionTime; // 0x55c(0x04)
	struct UGameplayEffect* CastingEffectClass; // 0x560(0x08)
	struct UExplosionTemplate* ExplosionTemplate; // 0x568(0x08)
	struct AMadCharAI* OwnerCharacter; // 0x570(0x08)
	struct AFWAIController* OwnerController; // 0x578(0x08)
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* PlayMontageTask; // 0x580(0x08)
	struct AActor* CurrentTarget; // 0x588(0x08)
	char UnknownData_590[0x10]; // 0x590(0x10)
	struct TArray<struct AMadBaseTurretActor*> IgnoreTurrets; // 0x5a0(0x10)

	void OnNofityBegin(struct FName NotifyName); // Function Madness.MadAIAbility_Captain_AnomalicCleave.OnNofityBegin // (Final|Native|Protected) // @ game+0x1526f70
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Captain_AnomalicCleave.OnMontageComplete // (Final|Native|Protected) // @ game+0x1526d80
};

// Class Madness.MadAIAbility_CastedBase
// Size: 0x698 (Inherited: 0x518)
struct UMadAIAbility_CastedBase : UMadAIGameplayAbility {
	struct FScalableFloat RangeMin; // 0x518(0x20)
	struct FScalableFloat RangeMax; // 0x538(0x20)
	struct UAnimMontage* CastingMontage; // 0x558(0x08)
	float CastingTime; // 0x560(0x04)
	char UnknownData_564_0 : 7; // 0x564(0x01)
	bool bIsChanneled : 1; // 0x564(0x01)
	char UnknownData_565[0x3]; // 0x565(0x03)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x568(0x08)
	struct AMadBaseAI* OwnerController; // 0x570(0x08)
	char UnknownData_578[0x120]; // 0x578(0x120)

	void OnNotifyBegin(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbility_CastedBase.OnNotifyBegin // (Native|Protected) // @ game+0x152bab0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbility_CastedBase.OnMontageEnded // (Final|Native|Protected) // @ game+0x152b860
};

// Class Madness.MadAIAbility_Captain_AnomalyBarrier
// Size: 0x7a8 (Inherited: 0x698)
struct UMadAIAbility_Captain_AnomalyBarrier : UMadAIAbility_CastedBase {
	struct FName TimeBeingTargetedName; // 0x698(0x08)
	float MinTimeBeingTargetedToActivateAbility; // 0x6a0(0x04)
	float RotateToTargetDuration; // 0x6a4(0x04)
	struct FScalableFloat ChannelingTime; // 0x6a8(0x20)
	struct TArray<float> AnglesOfWaves; // 0x6c8(0x10)
	float DelayBetweenWaveSpawns; // 0x6d8(0x04)
	struct FName ChargeHitSpawnSocketName; // 0x6dc(0x08)
	char UnknownData_6E4[0x4]; // 0x6e4(0x04)
	struct AMadAnomalyBarrierProjectile* NavmeshProjectileClass; // 0x6e8(0x08)
	float MaxNavmeshProjectileTestDistance; // 0x6f0(0x04)
	char UnknownData_6F4[0x4]; // 0x6f4(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedback; // 0x6f8(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x720(0x28)
	struct UCameraShake* CameraShakeClass; // 0x748(0x08)
	float CameraShakeInnerRadius; // 0x750(0x04)
	float CameraShakeOutterRadius; // 0x754(0x04)
	float CameraShakeFalloff; // 0x758(0x04)
	char UnknownData_75C_0 : 7; // 0x75c(0x01)
	bool bCameraShakeOrientTowardsEpicenter : 1; // 0x75c(0x01)
	char UnknownData_75D[0x3]; // 0x75d(0x03)
	struct AMadAnomalyBarrier* AnomalyBarrierClass; // 0x760(0x08)
	struct FName BarrierAttachmentSocketName; // 0x768(0x08)
	struct AMadAnomalyBarrier* Barrier; // 0x770(0x08)
	struct AActor* CurrentTarget; // 0x778(0x08)
	char UnknownData_780[0x28]; // 0x780(0x28)

	void SpawnNextWave(); // Function Madness.MadAIAbility_Captain_AnomalyBarrier.SpawnNextWave // (Final|Native|Private) // @ game+0x152bf20
};

// Class Madness.MadAIAbility_Captain_BaseAura
// Size: 0x710 (Inherited: 0x698)
struct UMadAIAbility_Captain_BaseAura : UMadAIAbility_CastedBase {
	struct FScalableFloat CastTime; // 0x698(0x20)
	struct AMadBaseAura* AuraActor; // 0x6b8(0x08)
	struct UFWAISemaphoreGroupClass* SemaphoreGroupClass; // 0x6c0(0x08)
	struct FScalableFloat SemaphoreDelayScalable; // 0x6c8(0x20)
	struct FScalableFloat SemaphoreDelayCancelledScalable; // 0x6e8(0x20)
	char UnknownData_708[0x8]; // 0x708(0x08)
};

// Class Madness.MadAIAbility_Captain_BeamTrap
// Size: 0x6b0 (Inherited: 0x518)
struct UMadAIAbility_Captain_BeamTrap : UMadAIGameplayAbility {
	struct FScalableFloat MaxRangeScale; // 0x518(0x20)
	struct FScalableFloat BaseDamageScale; // 0x538(0x20)
	struct AMadBeamTrapManager* BeamTrapManagerClass; // 0x558(0x08)
	struct AMadBeamTrapMarker* MarkerClass; // 0x560(0x08)
	float DesiredTrapDistanceToTarget; // 0x568(0x04)
	float MaxTrapDistanceToTarget; // 0x56c(0x04)
	float ExtraSpawnHeight; // 0x570(0x04)
	int32_t DesiredNumberOfTraps; // 0x574(0x04)
	int32_t MinNumberOfTraps; // 0x578(0x04)
	float CalculateTargetMinRotation; // 0x57c(0x04)
	float CalculateTargetMinMovement; // 0x580(0x04)
	float MaxPredictionDistance; // 0x584(0x04)
	float MaxPredictionTime; // 0x588(0x04)
	float ExtraRadius; // 0x58c(0x04)
	struct UAnimMontage* AttackMontage; // 0x590(0x08)
	struct FName StartSection; // 0x598(0x08)
	struct FName SuccessSection; // 0x5a0(0x08)
	struct FName InterruptSection; // 0x5a8(0x08)
	float CastingDuration; // 0x5b0(0x04)
	char UnknownData_5B4_0 : 7; // 0x5b4(0x01)
	bool bIsChanneling : 1; // 0x5b4(0x01)
	char UnknownData_5B5[0x3]; // 0x5b5(0x03)
	struct UGameplayEffect* CastingEffectClass; // 0x5b8(0x08)
	struct UGameplayEffect* ExhaustionEffectClass; // 0x5c0(0x08)
	float ExhaustionDurationLong; // 0x5c8(0x04)
	float ExhaustionDurationShort; // 0x5cc(0x04)
	struct FGameplayTag ExhaustionTag; // 0x5d0(0x08)
	struct AMadCharAI* OwnerCharacter; // 0x5d8(0x08)
	struct AFWAIController* OwnerController; // 0x5e0(0x08)
	struct UMadAbilityTask_PlayMontageAndWaitNotifyName* PlayMontageTask; // 0x5e8(0x08)
	struct UMadAbilityTask_CurrentMontageChangeSection* ChangeMontageSectionTask; // 0x5f0(0x08)
	struct AActor* CurrentTarget; // 0x5f8(0x08)
	char UnknownData_600[0x88]; // 0x600(0x88)
	struct TArray<struct AMadBeamTrapMarker*> Markers; // 0x688(0x10)
	char UnknownData_698[0x18]; // 0x698(0x18)

	void OnMontageFailed(struct FName NotifyName); // Function Madness.MadAIAbility_Captain_BeamTrap.OnMontageFailed // (Final|Native|Protected) // @ game+0x152b930
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Captain_BeamTrap.OnMontageComplete // (Final|Native|Protected) // @ game+0x152b7e0
	void OnChangeMontageSectionFailed(); // Function Madness.MadAIAbility_Captain_BeamTrap.OnChangeMontageSectionFailed // (Final|Native|Protected) // @ game+0x152b6c0
	void OnChangeMontageSectionEnded(); // Function Madness.MadAIAbility_Captain_BeamTrap.OnChangeMontageSectionEnded // (Final|Native|Protected) // @ game+0x152b6a0
};

// Class Madness.MadAIAbility_Captain_BurstHeal
// Size: 0x740 (Inherited: 0x698)
struct UMadAIAbility_Captain_BurstHeal : UMadAIAbility_CastedBase {
	struct UMadGameplayEffect* HealingEffect; // 0x698(0x08)
	struct FScalableFloat WoundThreshold; // 0x6a0(0x20)
	struct FScalableFloat RegularHealValue; // 0x6c0(0x20)
	struct FScalableFloat EliteHealValue; // 0x6e0(0x20)
	struct FScalableFloat CastTime; // 0x700(0x20)
	struct TArray<struct AMadBaseAICharacter*> HealTargets; // 0x720(0x10)
	char UnknownData_730[0x10]; // 0x730(0x10)
};

// Class Madness.MadAIAbility_Captain_ChargingBeam
// Size: 0x740 (Inherited: 0x698)
struct UMadAIAbility_Captain_ChargingBeam : UMadAIAbility_CastedBase {
	float BeamMaxLength; // 0x698(0x04)
	struct FVector BeamDestinationOffset; // 0x69c(0x0c)
	struct AMadChargingBeam* BeamEffectClass; // 0x6a8(0x08)
	struct FName BeamSpawnSocketName; // 0x6b0(0x08)
	float RotateToTargetSpeed; // 0x6b8(0x04)
	struct FName ConeCheckSocketName; // 0x6bc(0x08)
	float ConeCheckHalfAngle; // 0x6c4(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedback; // 0x6c8(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x6f0(0x28)
	struct UForceFeedbackComponent* ForceFeedbackSpawned; // 0x718(0x08)
	struct UMadAIAbilityTask_RotateTowardActor* RotateTask; // 0x720(0x08)
	struct UMadAIAbilityTask_ConeCheck* ConeCheckTask; // 0x728(0x08)
	char UnknownData_730[0x10]; // 0x730(0x10)

	void OnConeOverlapEnd(struct AActor* OtherActor); // Function Madness.MadAIAbility_Captain_ChargingBeam.OnConeOverlapEnd // (Final|Native|Private) // @ game+0x152b6e0
};

// Class Madness.MadAIAbility_Captain_DustStorm
// Size: 0x6a0 (Inherited: 0x698)
struct UMadAIAbility_Captain_DustStorm : UMadAIAbility_CastedBase {
	struct AMadDustStorm* DustStormActor; // 0x698(0x08)
};

// Class Madness.MadAIAbility_Captain_HealingCocoon
// Size: 0x6a8 (Inherited: 0x698)
struct UMadAIAbility_Captain_HealingCocoon : UMadAIAbility_CastedBase {
	struct AMadHealingCocoon* HealingCocoonActor; // 0x698(0x08)
	int32_t MaxAbilityTargets; // 0x6a0(0x04)
	char UnknownData_6A4[0x4]; // 0x6a4(0x04)
};

// Class Madness.MadAIAbility_Captain_HealthBasedBuff
// Size: 0x708 (Inherited: 0x698)
struct UMadAIAbility_Captain_HealthBasedBuff : UMadAIAbility_CastedBase {
	struct FScalableFloat CastTime; // 0x698(0x20)
	float LevelOfDangerMin; // 0x6b8(0x04)
	float AllowedHealthThreashold; // 0x6bc(0x04)
	float RotateToTargetDuration; // 0x6c0(0x04)
	char UnknownData_6C4_0 : 7; // 0x6c4(0x01)
	bool CanApplyToSelf : 1; // 0x6c4(0x01)
	char UnknownData_6C5[0x3]; // 0x6c5(0x03)
	struct UGameplayEffect* EffectToApplyOnTarget; // 0x6c8(0x08)
	struct FGameplayTagContainer ForbiddenTagsOnTarget; // 0x6d0(0x20)
	struct FGameplayTag TargetLockTag; // 0x6f0(0x08)
	struct AMadBaseCharacter* CastingTarget; // 0x6f8(0x08)
	char UnknownData_700[0x8]; // 0x700(0x08)
};

// Class Madness.MadAIAbility_Captain_IceOrbs
// Size: 0x728 (Inherited: 0x698)
struct UMadAIAbility_Captain_IceOrbs : UMadAIAbility_CastedBase {
	struct FScalableFloat OrbLifeSpan; // 0x698(0x20)
	struct FScalableFloat CastTime; // 0x6b8(0x20)
	struct UEnvQuery* OrbsSpawnLocationsQuery; // 0x6d8(0x08)
	int32_t MaxOrbsToSpawn; // 0x6e0(0x04)
	int32_t MinDistanceBetweenLocations; // 0x6e4(0x04)
	float DelayBetweenSpawns; // 0x6e8(0x04)
	char UnknownData_6EC[0x4]; // 0x6ec(0x04)
	struct AMadIceOrb* OrbActor; // 0x6f0(0x08)
	char UnknownData_6F8[0x30]; // 0x6f8(0x30)

	void SpawnOrb(); // Function Madness.MadAIAbility_Captain_IceOrbs.SpawnOrb // (Final|Native|Private) // @ game+0x152bf40
};

// Class Madness.MadAIAbility_Captain_LifeDevourer
// Size: 0x7d8 (Inherited: 0x698)
struct UMadAIAbility_Captain_LifeDevourer : UMadAIAbility_CastedBase {
	float CasterHealthRatioMaxToActivate; // 0x698(0x04)
	char UnknownData_69C[0x4]; // 0x69c(0x04)
	struct FScalableFloat ChannelingDuration; // 0x6a0(0x20)
	struct FScalableFloat CastingDuration; // 0x6c0(0x20)
	struct FScalableFloat BaseDamage; // 0x6e0(0x20)
	float RotateToTargetSpeed; // 0x700(0x04)
	struct FName ConeCheckSocketName; // 0x704(0x08)
	float ConeCheckHalfAngle; // 0x70c(0x04)
	float ConeCheckMaxRangeOffset; // 0x710(0x04)
	char UnknownData_714[0x4]; // 0x714(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedback; // 0x718(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x740(0x28)
	struct FGameplayTagContainer LifeDevourerAbilityTag; // 0x768(0x20)
	struct FGameplayTag LifeDevourerHealTag; // 0x788(0x08)
	struct UGameplayEffect* LifeDevourerBeam; // 0x790(0x08)
	struct UGameplayEffect* LifeDevourerHeal; // 0x798(0x08)
	struct UDamageType* DamageType; // 0x7a0(0x08)
	float DamageRate; // 0x7a8(0x04)
	float DamageAbsorbedMultiplier; // 0x7ac(0x04)
	struct UForceFeedbackComponent* ForceFeedbackSpawned; // 0x7b0(0x08)
	struct UMadAIAbilityTask_RotateTowardActor* RotateTask; // 0x7b8(0x08)
	struct UMadAIAbilityTask_ConeCheck* ConeCheckTask; // 0x7c0(0x08)
	char UnknownData_7C8[0x10]; // 0x7c8(0x10)

	void OnConeOverlapEnd(struct AActor* OtherActor); // Function Madness.MadAIAbility_Captain_LifeDevourer.OnConeOverlapEnd // (Final|Native|Private) // @ game+0x152b760
	void OnApplyDamage(); // Function Madness.MadAIAbility_Captain_LifeDevourer.OnApplyDamage // (Final|Native|Private) // @ game+0x152b5c0
};

// Class Madness.MadAIAbility_Captain_Mortar
// Size: 0x638 (Inherited: 0x518)
struct UMadAIAbility_Captain_Mortar : UMadAIGameplayAbility {
	struct FScalableFloat MinRangeScale; // 0x518(0x20)
	struct FScalableFloat MaxRangeScale; // 0x538(0x20)
	struct UGameplayEffect* ThrowEffectClass; // 0x558(0x08)
	struct UGameplayEffect* ExhaustionEffectClass; // 0x560(0x08)
	struct UAnimMontage* AttackMontage; // 0x568(0x08)
	float ArcFromCover; // 0x570(0x04)
	float ArcOutsideCover; // 0x574(0x04)
	enum class ECollisionChannel CollisionChannel; // 0x578(0x01)
	char UnknownData_579[0x3]; // 0x579(0x03)
	float MaxSimTime; // 0x57c(0x04)
	int32_t NumOfTraces; // 0x580(0x04)
	struct FName ThrowLeftNotifyName; // 0x584(0x08)
	struct FName ThrowRightNotifyName; // 0x58c(0x08)
	struct FName ThrowLeftSocketName; // 0x594(0x08)
	struct FName ThrowRightSocketName; // 0x59c(0x08)
	float MaxPredictionDistance; // 0x5a4(0x04)
	float MaxPredictionTime; // 0x5a8(0x04)
	float RandomRadius; // 0x5ac(0x04)
	struct AProjectile* ProjectileClass; // 0x5b0(0x08)
	struct UParticleSystem* Marker; // 0x5b8(0x08)
	struct FScalableFloat BaseDamageScale; // 0x5c0(0x20)
	struct FScalableFloat DamageRadiusScale; // 0x5e0(0x20)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x600(0x08)
	struct AFWAIController* OwnerController; // 0x608(0x08)
	struct UAITask_PlayAnimation* PlayAnimationTask; // 0x610(0x08)
	struct AActor* CurrentTarget; // 0x618(0x08)
	char UnknownData_620[0x18]; // 0x620(0x18)

	void OnNotifyBegin(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbility_Captain_Mortar.OnNotifyBegin // (Final|Native|Protected) // @ game+0x152b9b0
	void OnAnimTaskEnded(struct UFWAITask* Task, enum class EFWAITaskResult Result); // Function Madness.MadAIAbility_Captain_Mortar.OnAnimTaskEnded // (Final|Native|Protected) // @ game+0x152b500
};

// Class Madness.MadAIAbility_Captain_PhaseShift
// Size: 0x5e0 (Inherited: 0x518)
struct UMadAIAbility_Captain_PhaseShift : UMadAIGameplayAbility {
	struct FScalableFloat TravelTimePer1000uu; // 0x518(0x20)
	struct FScalableFloat AttackActivationRange; // 0x538(0x20)
	struct FScalableFloat EscapeActivationRange; // 0x558(0x20)
	struct UEnvQuery* AttackQueryTemplate; // 0x578(0x08)
	struct UEnvQuery* EscapeQueryTemplate; // 0x580(0x08)
	struct AMadPhaseShiftWave* WaveActorClass; // 0x588(0x08)
	float LevelOfDangerActivationThreshold; // 0x590(0x04)
	float EscapeHealthThreshold; // 0x594(0x04)
	struct FPhaseShiftQueryParams AttackQueryParams; // 0x598(0x0c)
	struct FPhaseShiftQueryParams EscapeQueryParams; // 0x5a4(0x0c)
	struct AMadPhaseShiftWave* WaveActor; // 0x5b0(0x08)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x5b8(0x08)
	struct AMadBaseAI* OwnerController; // 0x5c0(0x08)
	char UnknownData_5C8[0x18]; // 0x5c8(0x18)

	void OnTravelFinished(); // Function Madness.MadAIAbility_Captain_PhaseShift.OnTravelFinished // (Final|Native|Public) // @ game+0x152bf00
};

// Class Madness.MadAIAbility_Captain_Reinvigorate
// Size: 0x6b8 (Inherited: 0x698)
struct UMadAIAbility_Captain_Reinvigorate : UMadAIAbility_CastedBase {
	struct AMadReinvigorateAuraWave* ReinvigorateAuraWaveClass; // 0x698(0x08)
	int32_t MinValidTargetAllies; // 0x6a0(0x04)
	char UnknownData_6A4[0x4]; // 0x6a4(0x04)
	struct UMadGameplayEffect* CastingEffectClass; // 0x6a8(0x08)
	char UnknownData_6B0[0x8]; // 0x6b0(0x08)
};

// Class Madness.MadAIAbility_Captain_Vortex
// Size: 0x720 (Inherited: 0x698)
struct UMadAIAbility_Captain_Vortex : UMadAIAbility_CastedBase {
	struct UMadGameplayEffect* ActivationFailedCooldownEffect; // 0x698(0x08)
	struct AMadVortex* VortexActorClass; // 0x6a0(0x08)
	struct UEnvQuery* SpawnLocationQuery; // 0x6a8(0x08)
	struct UEnvQuery* TeleportLocationsQuery; // 0x6b0(0x08)
	enum class EEnvQueryRunMode TeleportLocationsQueryRunMode; // 0x6b8(0x01)
	char UnknownData_6B9[0x3]; // 0x6b9(0x03)
	struct FVector SpawnLocationOffset; // 0x6bc(0x0c)
	struct FVector TeleportLocationOffset; // 0x6c8(0x0c)
	char UnknownData_6D4[0x4c]; // 0x6d4(0x4c)
};

// Class Madness.MadAIAbility_Captain_WanderingFlames
// Size: 0x6d0 (Inherited: 0x698)
struct UMadAIAbility_Captain_WanderingFlames : UMadAIAbility_CastedBase {
	struct UEnvQuery* SpawnLocationsQueryTemplate; // 0x698(0x08)
	struct AMadWanderingFlame* WanderingFlameActorClass; // 0x6a0(0x08)
	struct UMadGameplayEffect* AbilityFailedCooldownEffect; // 0x6a8(0x08)
	struct FName SpawnFlameNotify; // 0x6b0(0x08)
	struct AMadWanderingFlame* FlameActor; // 0x6b8(0x08)
	char UnknownData_6C0[0x10]; // 0x6c0(0x10)
};

// Class Madness.MadAIAbility_Crawler_RotatingBeam_Base
// Size: 0x560 (Inherited: 0x518)
struct UMadAIAbility_Crawler_RotatingBeam_Base : UMadAIGameplayAbility {
	float PreRotateTowardTargetSpeed; // 0x518(0x04)
	float PreRotateTowardTargetAnglePrecision; // 0x51c(0x04)
	float FacingTargetCheckUpdateDelta; // 0x520(0x04)
	float TimeToStayFocusedOnTarget; // 0x524(0x04)
	float PreRotationMaxDuration; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct AMadCharAI* ActivatingPawn; // 0x530(0x08)
	struct UMadAIAbilityTask_RotateTowardActor* RotateTask; // 0x538(0x08)
	struct AActor* RotateTargetActor; // 0x540(0x08)
	char UnknownData_548[0x18]; // 0x548(0x18)

	void StartBeamAbility(); // Function Madness.MadAIAbility_Crawler_RotatingBeam_Base.StartBeamAbility // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void FacingTargetCheckUpdate(); // Function Madness.MadAIAbility_Crawler_RotatingBeam_Base.FacingTargetCheckUpdate // (Final|Native|Private) // @ game+0x152b3e0
	void CancelBeamAbility(); // Function Madness.MadAIAbility_Crawler_RotatingBeam_Base.CancelBeamAbility // (Final|Native|Private) // @ game+0x152b3c0
};

// Class Madness.MadAIAbility_Crawler_SweepingBeam
// Size: 0x618 (Inherited: 0x518)
struct UMadAIAbility_Crawler_SweepingBeam : UMadAIGameplayAbility {
	struct UAnimMontage* LeftTurnMontage; // 0x518(0x08)
	struct UAnimMontage* RightTurnMontage; // 0x520(0x08)
	struct AActor* BeamMarkerClass; // 0x528(0x08)
	struct AActor* BeamClass; // 0x530(0x08)
	struct FScalableFloat ScalableBeamDamage; // 0x538(0x20)
	float MinRangeToTarget; // 0x558(0x04)
	float BeamSize; // 0x55c(0x04)
	float UpdateBeamRate; // 0x560(0x04)
	float PitchModifier; // 0x564(0x04)
	float SweepSphereRadius; // 0x568(0x04)
	float FaceingTargetAccuracy; // 0x56c(0x04)
	enum class ECollisionChannel TraceChannel; // 0x570(0x01)
	char UnknownData_571[0x3]; // 0x571(0x03)
	struct FName StartBeamSocket; // 0x574(0x08)
	char UnknownData_57C[0x4]; // 0x57c(0x04)
	struct UMadDamageType* BeamDamageClass; // 0x580(0x08)
	struct FName BeamDimensionParamName; // 0x588(0x08)
	struct FGameplayTagContainer TagsToRemoveOnHit; // 0x590(0x20)
	char UnknownData_5B0[0x28]; // 0x5b0(0x28)
	struct AMadCharAI_Crawler* OwnerCrawler; // 0x5d8(0x08)
	struct AActor* BeamActor; // 0x5e0(0x08)
	struct AActor* MarkerActor; // 0x5e8(0x08)
	struct AActor* LastHitActor; // 0x5f0(0x08)
	struct TArray<struct AActor*> CharactersHit; // 0x5f8(0x10)
	struct TArray<struct UParticleSystemComponent*> CachedBeamParticles; // 0x608(0x10)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadAIAbility_Crawler_SweepingBeam.OnOwnerKilled // (Final|Native|Private) // @ game+0x152bbb0
	void OnBeamOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadAIAbility_Crawler_SweepingBeam.OnBeamOverlap // (Final|Native|Private) // @ game+0x152b5e0
	void OnAnimNotify(struct FName InNotifyName); // Function Madness.MadAIAbility_Crawler_SweepingBeam.OnAnimNotify // (Final|Native|Private) // @ game+0x152b480
	void OnAnimEnd(struct FName InNotifyName); // Function Madness.MadAIAbility_Crawler_SweepingBeam.OnAnimEnd // (Final|Native|Private) // @ game+0x152b400
};

// Class Madness.MadAIAbility_Crawler_TurnToFace
// Size: 0x578 (Inherited: 0x518)
struct UMadAIAbility_Crawler_TurnToFace : UMadAIGameplayAbility {
	float TargetBehindMaxConeAngle; // 0x518(0x04)
	char UnknownData_51C[0x4]; // 0x51c(0x04)
	struct UNavigationQueryFilter* SpaceSearchQueryFilterClass; // 0x520(0x08)
	struct FMontageAssetSelector LeftTurnMontage; // 0x528(0x20)
	struct FMontageAssetSelector RightTurnMontage; // 0x548(0x20)
	struct AMadCharAI_Crawler* OwnerCharacter; // 0x568(0x08)
	struct AMadAI_Crawler* OwnerController; // 0x570(0x08)

	void OnAnimationTaskFinished(struct FName NotifyName); // Function Madness.MadAIAbility_Crawler_TurnToFace.OnAnimationTaskFinished // (Final|Native|Private) // @ game+0x152e180
};

// Class Madness.MadAIAbility_ForestBerserker_AerialStrike
// Size: 0x540 (Inherited: 0x518)
struct UMadAIAbility_ForestBerserker_AerialStrike : UMadAIGameplayAbility {
	struct UAnimMontage* AerialStrikeMontage; // 0x518(0x08)
	float MinDistanceToActivate; // 0x520(0x04)
	float MaxDistanceToActivate; // 0x524(0x04)
	float AbilityActivationMaxAngle; // 0x528(0x04)
	float MaxAngleBetweenTargetAndOffmeshLink; // 0x52c(0x04)
	float MaxTargetDistFromOffmeshLink; // 0x530(0x04)
	char UnknownData_534[0xc]; // 0x534(0x0c)

	void OnNotifyBegin(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBerserker_AerialStrike.OnNotifyBegin // (Final|Native|Private) // @ game+0x152e7c0
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBerserker_AerialStrike.OnMontageComplete // (Final|Native|Private) // @ game+0x1526d80
	void OnMontageCancelled(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBerserker_AerialStrike.OnMontageCancelled // (Final|Native|Private) // @ game+0x1526d80
};

// Class Madness.MadAIAbility_ForestBoss_Growl
// Size: 0x5f8 (Inherited: 0x518)
struct UMadAIAbility_ForestBoss_Growl : UMadAIGameplayAbility {
	struct FMulticastInlineDelegate OnComplete; // 0x518(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x528(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x538(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x548(0x10)
	char UnknownData_558[0x28]; // 0x558(0x28)
	int32_t RockEvent; // 0x580(0x04)
	char UnknownData_584[0x4]; // 0x584(0x04)
	struct UAnimMontage* MontageToPlay; // 0x588(0x08)
	char UnknownData_590_0 : 7; // 0x590(0x01)
	bool bIsFinalStage : 1; // 0x590(0x01)
	char UnknownData_591[0x3]; // 0x591(0x03)
	float ProximityDamageRange; // 0x594(0x04)
	float ProximityDamageAngle; // 0x598(0x04)
	char UnknownData_59C[0x4]; // 0x59c(0x04)
	struct UMadDamageType* DamageType; // 0x5a0(0x08)
	struct UCurveTable* DamageCurveTable; // 0x5a8(0x08)
	float DamageInterval; // 0x5b0(0x04)
	float PlayerCheckInterval; // 0x5b4(0x04)
	float CoverDamageInterval; // 0x5b8(0x04)
	float CoverDamageAngle; // 0x5bc(0x04)
	int32_t GrowlLocationIndex; // 0x5c0(0x04)
	float HeightPercentToCheckLOS; // 0x5c4(0x04)
	struct AActor* GrowlMarkerClass; // 0x5c8(0x08)
	struct FName GrowlMarkerBone; // 0x5d0(0x08)
	float GrowlMarkerDownDistance; // 0x5d8(0x04)
	char UnknownData_5DC[0x4]; // 0x5dc(0x04)
	struct AMadCharAI_ForestBoss* OwnerActor; // 0x5e0(0x08)
	struct AActor* GrowlAttackMarker; // 0x5e8(0x08)
	char UnknownData_5F0[0x8]; // 0x5f0(0x08)

	void UpdateGrowlTrace(); // Function Madness.MadAIAbility_ForestBoss_Growl.UpdateGrowlTrace // (Final|Native|Public) // @ game+0x152ef60
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBoss_Growl.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x152e840
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBoss_Growl.OnInterruptedHandler // (Final|Native|Public) // @ game+0x152e640
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBoss_Growl.OnCompleteHandler // (Final|Native|Public) // @ game+0x152e400
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_ForestBoss_Growl.OnCancelledHandler // (Final|Native|Public) // @ game+0x152e200
	void GrowlStarted(); // Function Madness.MadAIAbility_ForestBoss_Growl.GrowlStarted // (Final|Native|Public) // @ game+0x152e160
	void GrowlEnded(); // Function Madness.MadAIAbility_ForestBoss_Growl.GrowlEnded // (Final|Native|Public) // @ game+0x152e140
	void GrowlDamage(); // Function Madness.MadAIAbility_ForestBoss_Growl.GrowlDamage // (Final|Native|Public) // @ game+0x152e120
	void FinishAbility(); // Function Madness.MadAIAbility_ForestBoss_Growl.FinishAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x152e0c0
	void CheckPlayersInCone(); // Function Madness.MadAIAbility_ForestBoss_Growl.CheckPlayersInCone // (Final|Native|Public) // @ game+0x152e060
	void CheckCovers(); // Function Madness.MadAIAbility_ForestBoss_Growl.CheckCovers // (Final|Native|Public) // @ game+0x152e040
	bool AreTargetsTooClose(struct AFWAIController* OwnerAIController, struct FVector Origin, float Radius); // Function Madness.MadAIAbility_ForestBoss_Growl.AreTargetsTooClose // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x152df20
};

// Class Madness.MadAIAbility_ForestBoss_Punch
// Size: 0x558 (Inherited: 0x518)
struct UMadAIAbility_ForestBoss_Punch : UMadAIGameplayAbility {
	struct UMadDamageType* DamageType; // 0x518(0x08)
	struct FScalableFloat DamageValueScaled; // 0x520(0x20)
	struct TArray<struct FName> DamageBones; // 0x540(0x10)
	float PunchRadiusFromBone; // 0x550(0x04)
	float MarkerAreaRadius; // 0x554(0x04)

	void SmashDown(int32_t Count, int32_t MarkerIdx); // Function Madness.MadAIAbility_ForestBoss_Punch.SmashDown // (Final|Native|Protected|BlueprintCallable) // @ game+0x152edb0
};

// Class Madness.MadAiAbility_Guardian_BallLight
// Size: 0x5b8 (Inherited: 0x518)
struct UMadAiAbility_Guardian_BallLight : UMadAIGameplayAbility {
	struct AMadCharAI* Caster; // 0x518(0x08)
	struct UAnimMontage* CastingMontage; // 0x520(0x08)
	struct UAnimMontage* ChannelShield; // 0x528(0x08)
	float AbilityCastingTime; // 0x530(0x04)
	float RotateToTargetDuration; // 0x534(0x04)
	struct UGameplayEffect* PostAbilityEffectClass; // 0x538(0x08)
	struct UGameplayEffect* LightningBallEffectClass; // 0x540(0x08)
	float MaxDistanceToEnemy; // 0x548(0x04)
	char UnknownData_54C[0x4]; // 0x54c(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x550(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x560(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x570(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x580(0x10)
	struct UMadAbilityTask_CurrentMontageChangeSection* ChangeMontageSectionTask; // 0x590(0x08)
	char UnknownData_598[0x20]; // 0x598(0x20)

	void SpawnElectroBall(struct FVector SpawnTransformLocation, bool isPositive); // Function Madness.MadAiAbility_Guardian_BallLight.SpawnElectroBall // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x1a35c70
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_BallLight.OnNotifyBeginHandler // (Final|Native|Private) // @ game+0x152e8c0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_BallLight.OnInterruptedHandler // (Final|Native|Private) // @ game+0x152e6c0
	void OnInterruptChangeSectionSuccessful(); // Function Madness.MadAiAbility_Guardian_BallLight.OnInterruptChangeSectionSuccessful // (Final|Native|Private) // @ game+0x152e5e0
	void OnInterruptChangeSectionFailed(); // Function Madness.MadAiAbility_Guardian_BallLight.OnInterruptChangeSectionFailed // (Final|Native|Private) // @ game+0x152e580
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_BallLight.OnCompleteHandler // (Final|Native|Private) // @ game+0x152e480
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_BallLight.OnCancelledHandler // (Final|Native|Private) // @ game+0x152e280
};

// Class Madness.MadAIAbility_Guardian_Blink
// Size: 0x598 (Inherited: 0x598)
struct UMadAIAbility_Guardian_Blink : UMadAIAbility_Altered_Blink {
};

// Class Madness.MadAiAbility_Guardian_LightBlank
// Size: 0x5d8 (Inherited: 0x518)
struct UMadAiAbility_Guardian_LightBlank : UMadAIGameplayAbility {
	struct AMadCharAI* Caster; // 0x518(0x08)
	struct AMadBlanket* BlanketClass; // 0x520(0x08)
	struct FScalableFloat LightningBlanketDurationScalable; // 0x528(0x20)
	struct FScalableFloat LightningBlanketDamageOverTimeScalable; // 0x548(0x20)
	float LightningBlanketDuration; // 0x568(0x04)
	int32_t MaxBlanketsToSpawn; // 0x56c(0x04)
	float DelayBetweenSpawns; // 0x570(0x04)
	char UnknownData_574[0x4]; // 0x574(0x04)
	struct UEnvQuery* SpawnAtTargetQuery; // 0x578(0x08)
	struct AActor* CurrentTarget; // 0x580(0x08)
	char UnknownData_588[0x50]; // 0x588(0x50)

	void SpawnBlankets(struct TArray<struct FVector> BlanketLocations); // Function Madness.MadAiAbility_Guardian_LightBlank.SpawnBlankets // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x152ee90
};

// Class Madness.MadAiAbility_Guardian_Mine
// Size: 0x628 (Inherited: 0x518)
struct UMadAiAbility_Guardian_Mine : UMadAIGameplayAbility {
	struct AMadCharAI* Caster; // 0x518(0x08)
	struct UAnimMontage* CastingMontage; // 0x520(0x08)
	float AbilityCastingTime; // 0x528(0x04)
	float DistanceToEnemy; // 0x52c(0x04)
	float LevelOfDangerMin; // 0x530(0x04)
	float LevelOfDangerMax; // 0x534(0x04)
	char UnknownData_538_0 : 7; // 0x538(0x01)
	bool bTargetOnlyCharactersInCover : 1; // 0x538(0x01)
	char UnknownData_539[0x7]; // 0x539(0x07)
	struct FTimerHandle CastHandle; // 0x540(0x08)
	char UnknownData_548_0 : 7; // 0x548(0x01)
	bool bIsCompleted : 1; // 0x548(0x01)
	char UnknownData_549[0x7]; // 0x549(0x07)
	struct TArray<struct AActor*> AllTargets; // 0x550(0x10)
	struct TArray<struct AActor*> ValidTargets; // 0x560(0x10)
	float RotateToTargetDuration; // 0x570(0x04)
	float TrailTravelTime; // 0x574(0x04)
	struct FScalableFloat MineDurationScalable; // 0x578(0x20)
	struct FScalableFloat MineDamageOverTimeScalable; // 0x598(0x20)
	struct FScalableFloat MineDamageOverTimeIntervalScalable; // 0x5b8(0x20)
	struct ADischargeTrail* DischargeTrailBPClass; // 0x5d8(0x08)
	struct ADischargeMine* DischargeMineBPClass; // 0x5e0(0x08)
	struct UEnvQuery* MineSpawnActorsQuery; // 0x5e8(0x08)
	struct FVector MineSpawnLocationFromActorOffset; // 0x5f0(0x0c)
	char UnknownData_5FC[0x2c]; // 0x5fc(0x2c)

	void SpawnActors(); // Function Madness.MadAiAbility_Guardian_Mine.SpawnActors // (Final|Native|Protected|BlueprintCallable) // @ game+0x152ee70
	bool ShowCastBar(float CastTime, bool bIsChanneling); // Function Madness.MadAiAbility_Guardian_Mine.ShowCastBar // (Final|Native|Protected|BlueprintCallable) // @ game+0x152ece0
	void SetCastEffects(bool bTurnOn); // Function Madness.MadAiAbility_Guardian_Mine.SetCastEffects // (Final|Native|Protected|BlueprintCallable) // @ game+0x152eb60
	void RotateTowardTargetPlayer(); // Function Madness.MadAiAbility_Guardian_Mine.RotateTowardTargetPlayer // (Final|Native|Protected|BlueprintCallable) // @ game+0x152eb40
};

// Class Madness.MadAiAbility_Guardian_Shield
// Size: 0x6a0 (Inherited: 0x518)
struct UMadAiAbility_Guardian_Shield : UMadAIGameplayAbility {
	struct AActor* Target; // 0x518(0x08)
	struct AMadCharAI* Caster; // 0x520(0x08)
	struct UAnimMontage* CastingMontage; // 0x528(0x08)
	float AbilityCastingTime; // 0x530(0x04)
	float LevelOfDangerMin; // 0x534(0x04)
	float UseAbilityAtHealthThreshold; // 0x538(0x04)
	char UnknownData_53C[0x4]; // 0x53c(0x04)
	struct FScalableFloat ChannelDurationScalable; // 0x540(0x20)
	struct FScalableFloat ShieldDurabilityScalable; // 0x560(0x20)
	struct FScalableFloat ShieldDurabilityCoopMulScalable; // 0x580(0x20)
	struct FScalableFloat ShieldDotDamageScalable; // 0x5a0(0x20)
	struct FScalableFloat ShrapnelDamageScalable; // 0x5c0(0x20)
	struct AScrapShield* ShieldBPClass; // 0x5e0(0x08)
	struct UGameplayEffect* ScrapShieldEffectClass; // 0x5e8(0x08)
	struct UGameplayEffect* ScrapShieldCooldownClass; // 0x5f0(0x08)
	struct FGameplayTag DataTag; // 0x5f8(0x08)
	struct UEnvQuery* AreaValidationQuery; // 0x600(0x08)
	int32_t MinRequiredValidAreaPoints; // 0x608(0x04)
	char UnknownData_60C[0x4]; // 0x60c(0x04)
	struct TArray<struct UDamageType*> KnockbackDamageTypesCancellingBlockingReactions; // 0x610(0x10)
	struct UGameplayEffect* BlockingReactionEffectClass; // 0x620(0x08)
	struct FMulticastInlineDelegate OnShieldInterrupted; // 0x628(0x10)
	struct FMulticastInlineDelegate OnShieldReleased; // 0x638(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x648(0x10)
	struct UMadAbilityTask_CurrentMontageChangeSection* ChangeMontageSectionTask; // 0x658(0x08)
	char UnknownData_660[0x40]; // 0x660(0x40)

	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Shield.OnNotifyBeginHandler // (Final|Native|Protected) // @ game+0x152e9c0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Shield.OnInterruptedHandler // (Final|Native|Protected) // @ game+0x152e380
	void OnInterruptChangeSectionSuccessful(); // Function Madness.MadAiAbility_Guardian_Shield.OnInterruptChangeSectionSuccessful // (Final|Native|Private) // @ game+0x152e620
	void OnInterruptChangeSectionFailed(); // Function Madness.MadAiAbility_Guardian_Shield.OnInterruptChangeSectionFailed // (Final|Native|Private) // @ game+0x152e5c0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Shield.OnCompleteHandler // (Final|Native|Protected) // @ game+0x152e180
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAiAbility_Guardian_Shield.OnCancelledHandler // (Final|Native|Protected) // @ game+0x152e380
	void ExplodeShields(); // Function Madness.MadAiAbility_Guardian_Shield.ExplodeShields // (Final|Native|Protected) // @ game+0x152e0a0
};

// Class Madness.MadAiAbility_Guardian_Shock
// Size: 0x518 (Inherited: 0x518)
struct UMadAiAbility_Guardian_Shock : UMadAIGameplayAbility {
};

// Class Madness.MadAIAbility_Lurker_Charge
// Size: 0x658 (Inherited: 0x518)
struct UMadAIAbility_Lurker_Charge : UMadAIGameplayAbility {
	float MinRunInPlaceMoveDistance; // 0x518(0x04)
	char UnknownData_51C[0x134]; // 0x51c(0x134)
	struct AMadCharAI* OwningPawn; // 0x650(0x08)

	void OnTargetPassed(); // Function Madness.MadAIAbility_Lurker_Charge.OnTargetPassed // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnTargetHitAnObtacle(); // Function Madness.MadAIAbility_Lurker_Charge.OnTargetHitAnObtacle // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	bool IsDirectHit(struct FVector ImpactHitLocation, struct AActor* AbilityOwner); // Function Madness.MadAIAbility_Lurker_Charge.IsDirectHit // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532e80
	bool IsCurrentTargetUnderAttack(struct Acharacter* SelfCharacter, struct AActor* TargetCharacter); // Function Madness.MadAIAbility_Lurker_Charge.IsCurrentTargetUnderAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532dc0
	void EnableSpreadOutLogic(bool bEnabled); // Function Madness.MadAIAbility_Lurker_Charge.EnableSpreadOutLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x15326e0
	void EnableIndirectHitTest(bool bEnableTest); // Function Madness.MadAIAbility_Lurker_Charge.EnableIndirectHitTest // (Final|Native|Public|BlueprintCallable) // @ game+0x1532660
	bool CanTraceReachTarget(struct Acharacter* SelfCharacter, struct AActor* TargetCharacter, float CapsuleRadiusMultiplier, float CapsuleHalfHeightMultiplier); // Function Madness.MadAIAbility_Lurker_Charge.CanTraceReachTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532230
	bool CanStartChargeAttack(struct Acharacter* SelfCharacter, struct AActor* TargetCharacter, float MinDistanceToTarget, float MaxDistanceToTarget, float MinDotToTarget, float CapsuleRadiusMultiplier, float CapsuleHalfHeightMultiplier); // Function Madness.MadAIAbility_Lurker_Charge.CanStartChargeAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532030
	bool CanActivateDistanceAttack(struct AActor* SourceActor, struct AActor* TargetActor, float MinDistanceToTarget, float MaxDistanceToTarget, float MinDotToTarget); // Function Madness.MadAIAbility_Lurker_Charge.CanActivateDistanceAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1531ea0
	void BroadcastStunStateToSquadMembers(struct Acharacter* SelfCharacter); // Function Madness.MadAIAbility_Lurker_Charge.BroadcastStunStateToSquadMembers // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1531e20
};

// Class Madness.MadAIAbility_Lurker_Stomp
// Size: 0x518 (Inherited: 0x518)
struct UMadAIAbility_Lurker_Stomp : UMadAIGameplayAbility {

	bool IsTargetLocationReachable(struct AActor* TargetActor, float ExtraDistance, float DistanceMultiplier, struct UNavigationQueryFilter* FilterClass); // Function Madness.MadAIAbility_Lurker_Stomp.IsTargetLocationReachable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532f60
	bool AreHostileActorsInRange(struct AFWAIController* OwnerAIController, struct FVector Origin, int32_t MinNumberOfHostiles, float Radius); // Function Madness.MadAIAbility_Lurker_Stomp.AreHostileActorsInRange // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1531cb0
	bool AreAnyTeammatesAlive(struct AFWAIController* OwnerAIConrtoller); // Function Madness.MadAIAbility_Lurker_Stomp.AreAnyTeammatesAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1531c20
};

// Class Madness.MadAIAbility_OasisShaman_Healing
// Size: 0x518 (Inherited: 0x518)
struct UMadAIAbility_OasisShaman_Healing : UMadAIGameplayAbility {

	bool IsWoundedMemberFromSquadInRange(struct AFWAIController* MemberToExclude, struct FVector Origin, float Radius, float LastSeenTimeout); // Function Madness.MadAIAbility_OasisShaman_Healing.IsWoundedMemberFromSquadInRange // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1533150
	void GetWoundedMemberFromSquadInRange(struct AFWAIController* MemberToExclude, struct FVector Origin, float Radius, float LastSeenTimeout, struct AController* OutController); // Function Madness.MadAIAbility_OasisShaman_Healing.GetWoundedMemberFromSquadInRange // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532c00
};

// Class Madness.MadAIAbility_Perforo_PoisonousMist
// Size: 0x588 (Inherited: 0x518)
struct UMadAIAbility_Perforo_PoisonousMist : UMadAIGameplayAbility {
	struct UMadDataAsset_ThrowSequentialProjectilesVariants* ThrowAnimVariants; // 0x518(0x08)
	struct TArray<struct FMontageAssetSelector> DodgeAnimations; // 0x520(0x10)
	struct UFWAISemaphoreGroupClass* StartSemaphore; // 0x530(0x08)
	struct UFWAISemaphoreGroupClass* PerTargetSemaphore; // 0x538(0x08)
	struct UFWAISemaphoreGroupClass* HeavySemaphore; // 0x540(0x08)
	float StartSemaphoreUnlockDelay; // 0x548(0x04)
	float PerTargetSemaphoreUnlockDelay; // 0x54c(0x04)
	float HeavySemaphoreUnlockDelay; // 0x550(0x04)
	char UnknownData_554[0x4]; // 0x554(0x04)
	struct AMadCharAI* AbilityOwner; // 0x558(0x08)
	struct AActor* TargetActor; // 0x560(0x08)
	struct UMadAIAbilityTask_ThrowSequentialProjectiles* Task; // 0x568(0x08)
	struct UAnimMontage* PlayingMontage; // 0x570(0x08)
	float TestsInterval; // 0x578(0x04)
	char UnknownData_57C[0xc]; // 0x57c(0x0c)

	void OnInterrupted(); // Function Madness.MadAIAbility_Perforo_PoisonousMist.OnInterrupted // (Final|Native|Private) // @ game+0x1533770
	void OnDodgeMontageEnded(struct UAnimMontage* Montage, bool bInterupted); // Function Madness.MadAIAbility_Perforo_PoisonousMist.OnDodgeMontageEnded // (Final|Native|Private) // @ game+0x1533520
	void OnComplete(); // Function Madness.MadAIAbility_Perforo_PoisonousMist.OnComplete // (Final|Native|Private) // @ game+0x1533480
	void OnCancelled(); // Function Madness.MadAIAbility_Perforo_PoisonousMist.OnCancelled // (Final|Native|Private) // @ game+0x15333e0
};

// Class Madness.MadAIAbility_PerforoAlpha_BroodCalling
// Size: 0x5b0 (Inherited: 0x5a8)
struct UMadAIAbility_PerforoAlpha_BroodCalling : UMadAIAbility_CallForBackup {
	struct UFWAIArchetype* MinionArchetype; // 0x5a8(0x08)
};

// Class Madness.MadAIAbility_Sciathan_FlyByTarget
// Size: 0x688 (Inherited: 0x518)
struct UMadAIAbility_Sciathan_FlyByTarget : UMadAIGameplayAbility {
	float MinDistForActivate; // 0x518(0x04)
	float MaxDistForActivate; // 0x51c(0x04)
	float TimeBetweenBreakOutChecks; // 0x520(0x04)
	float TimeBetweenBreakOutChecksIfShot; // 0x524(0x04)
	float TimeAfterSpawnToStartCheckingForBreak; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct UEnvQuery* ShotWhenFlyingEQSTemplate; // 0x530(0x08)
	char UnknownData_538[0x120]; // 0x538(0x120)
	char UnknownData_658_0 : 7; // 0x658(0x01)
	bool bHasBeenActivated : 1; // 0x658(0x01)
	char UnknownData_659[0x3]; // 0x659(0x03)
	float TimeForNextCheck; // 0x65c(0x04)
	float StartCheckingTime; // 0x660(0x04)
	char UnknownData_664[0x24]; // 0x664(0x24)

	void OnFlyByTaskFinished(struct UMadAIAbilityTask* Task, enum class EFWAITaskResult Result); // Function Madness.MadAIAbility_Sciathan_FlyByTarget.OnFlyByTaskFinished // (Final|Native|Protected) // @ game+0x15336b0
};

// Class Madness.MadAIAbility_ShotReactionBase
// Size: 0x528 (Inherited: 0x518)
struct UMadAIAbility_ShotReactionBase : UMadAIGameplayAbility {
	char UnknownData_518[0x10]; // 0x518(0x10)

	void RestoreMovementModeAndEndAbility(struct FName NotifyName); // Function Madness.MadAIAbility_ShotReactionBase.RestoreMovementModeAndEndAbility // (Final|Native|Public) // @ game+0x1533810
};

// Class Madness.MadAIAbility_Sniper_CallForBackup
// Size: 0x5d8 (Inherited: 0x5a8)
struct UMadAIAbility_Sniper_CallForBackup : UMadAIAbility_CallForBackup {
	float MinDistanceToEnemies; // 0x5a8(0x04)
	char UnknownData_5AC_0 : 7; // 0x5ac(0x01)
	bool bTestOnlyMainTarget : 1; // 0x5ac(0x01)
	char UnknownData_5AD[0x3]; // 0x5ad(0x03)
	struct FScalableFloat CallChargesScale; // 0x5b0(0x20)
	char UnknownData_5D0[0x8]; // 0x5d0(0x08)
};

// Class Madness.MadAIAbility_ThrowSmokeGrenade
// Size: 0x528 (Inherited: 0x518)
struct UMadAIAbility_ThrowSmokeGrenade : UMadAIGameplayAbility {
	struct FVector ThrowLocation; // 0x518(0x0c)
	char UnknownData_524[0x4]; // 0x524(0x04)

	bool GetBestThrowLocation(float RandomRadius, float MinDistance, float MaxDistance, float Offset, float PredictDistance, float PredictDuration, float MaxAngleOutOfCover, float MaxAngleInCover); // Function Madness.MadAIAbility_ThrowSmokeGrenade.GetBestThrowLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1532990
};

// Class Madness.MadAIAbility_TurnToAshes
// Size: 0x558 (Inherited: 0x518)
struct UMadAIAbility_TurnToAshes : UMadAIGameplayAbility {
	struct UMadGameplayEffect* EffectWhileHidden; // 0x518(0x08)
	float TimeInAshes; // 0x520(0x04)
	float HealthPercentageAfterRessurection; // 0x524(0x04)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x528(0x08)
	struct AMadAI* OwnerController; // 0x530(0x08)
	struct FTimerHandle TimerHandle; // 0x538(0x08)
	struct AActor* LethalDamageInstigator; // 0x540(0x08)
	char UnknownData_548[0x10]; // 0x548(0x10)

	void OnFakeDeath(struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Madness.MadAIAbility_TurnToAshes.OnFakeDeath // (Final|Native|Protected) // @ game+0x15335f0
};

// Class Madness.MadAIAbility_VolcanoBoss_ChargeEnd
// Size: 0x5a8 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_ChargeEnd : UMadAIGameplayAbility {
	struct UAnimMontage* MontageToPlay; // 0x518(0x08)
	struct AProjectile* VolcanoProjectile; // 0x520(0x08)
	struct FName ProjectileSocketName; // 0x528(0x08)
	float ProjectileArc; // 0x530(0x04)
	int32_t AttacksToRepeatMin; // 0x534(0x04)
	int32_t AttacksToRepeatMax; // 0x538(0x04)
	float RandomLocationValidDotThreshold; // 0x53c(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x540(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x550(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x560(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x570(0x10)
	struct TArray<struct ABasePlayerController*> AllPlayers; // 0x580(0x10)
	char UnknownData_590[0x18]; // 0x590(0x18)

	void WallLocationReached(); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.WallLocationReached // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void StartClimb(); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.StartClimb // (Final|Native|Protected|BlueprintCallable) // @ game+0x15339a0
	void SetArenaTargetLocations(struct TArray<struct FVector> Locations); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.SetArenaTargetLocations // (Final|Native|Protected|BlueprintCallable) // @ game+0x1533890
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.OnNotifyBeginHandler // (Final|Native|Private) // @ game+0x1533790
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.OnInterruptedHandler // (Final|Native|Private) // @ game+0x152e480
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.OnCompleteHandler // (Final|Native|Private) // @ game+0x15334a0
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.OnCancelledHandler // (Final|Native|Private) // @ game+0x1533400
	void Land(); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.Land // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void JumpDown(); // Function Madness.MadAIAbility_VolcanoBoss_ChargeEnd.JumpDown // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadAIAbility_VolcanoBoss_ChargeStart
// Size: 0x530 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_ChargeStart : UMadAIGameplayAbility {
	char UnknownData_518_0 : 7; // 0x518(0x01)
	bool bChargeStartSuccessful : 1; // 0x518(0x01)
	char UnknownData_519[0x3]; // 0x519(0x03)
	float VerticalChargeOffset; // 0x51c(0x04)
	float FinalLocationHeightOffset; // 0x520(0x04)
	float MaxChargeDistance; // 0x524(0x04)
	float WallDistance; // 0x528(0x04)
	float MaxAngleDotOffset; // 0x52c(0x04)

	bool FindAndSetChargeLocation(); // Function Madness.MadAIAbility_VolcanoBoss_ChargeStart.FindAndSetChargeLocation // (Final|Native|Protected|BlueprintCallable) // @ game+0x1532770
};

// Class Madness.MadAIAbility_VolcanoBoss_DiveAttack
// Size: 0x528 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_DiveAttack : UMadAIGameplayAbility {
	float ClawDamageAmount; // 0x518(0x04)
	float ClawDamageZOffset; // 0x51c(0x04)
	struct UBaseDamageType* ClawDamageType; // 0x520(0x08)

	void LegStrikeDamage(struct FName SocketName, float BaseDamage, float DamageRadius); // Function Madness.MadAIAbility_VolcanoBoss_DiveAttack.LegStrikeDamage // (Final|Native|Protected|BlueprintCallable) // @ game+0x15332e0
	void ClawTraceAndDamage(struct FName StartBone, struct FName EndBone); // Function Madness.MadAIAbility_VolcanoBoss_DiveAttack.ClawTraceAndDamage // (Final|Native|Protected|BlueprintCallable) // @ game+0x1532380
};

// Class Madness.MadAIAbility_VolcanoBoss_JumpWall
// Size: 0x578 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_JumpWall : UMadAIGameplayAbility {
	struct AProjectile* VolcanoProjectile; // 0x518(0x08)
	struct FName ProjectileSocketName; // 0x520(0x08)
	int32_t NumberOfTargetedProjectilesThrew; // 0x528(0x04)
	char UnknownData_52C[0x4]; // 0x52c(0x04)
	struct TArray<struct AActor*> AllPlayers; // 0x530(0x10)
	struct FTrajectoryCorrectionData TrajectoryCorrectionData; // 0x540(0x30)
	char UnknownData_570[0x8]; // 0x570(0x08)

	void TryToCalculateTrajectoryCorrectionBounds(struct TArray<struct FVector> Locations, struct FVector CenterPointOfArena); // Function Madness.MadAIAbility_VolcanoBoss_JumpWall.TryToCalculateTrajectoryCorrectionBounds // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15339c0
	void LaunchProjectile(); // Function Madness.MadAIAbility_VolcanoBoss_JumpWall.LaunchProjectile // (Final|Native|Protected|BlueprintCallable) // @ game+0x15332c0
};

// Class Madness.MadAIAbility_VolcanoBoss_Melee
// Size: 0x528 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_Melee : UMadAIGameplayAbility {
	struct UDamageType* DamageType; // 0x518(0x08)
	float ClawDamage; // 0x520(0x04)
	float ClawRadius; // 0x524(0x04)

	void ClawTraceAndDamage(struct FName StartBone, struct FName EndBone, struct TArray<struct AActor*> IgnoreActors, struct AActor* OutDamagedActor); // Function Madness.MadAIAbility_VolcanoBoss_Melee.ClawTraceAndDamage // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1532440
};

// Class Madness.MadAIAbility_VolcanoBoss_Swing
// Size: 0x518 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_Swing : UMadAIGameplayAbility {

	float DotToActor(struct AActor* Target); // Function Madness.MadAIAbility_VolcanoBoss_Swing.DotToActor // (Final|Native|Protected|BlueprintCallable) // @ game+0x15325c0
};

// Class Madness.MadAIAbility_VolcanoBoss_ThrowProjectile
// Size: 0x548 (Inherited: 0x518)
struct UMadAIAbility_VolcanoBoss_ThrowProjectile : UMadAIGameplayAbility {
	float YawOffset; // 0x518(0x04)
	float PitchOffset; // 0x51c(0x04)
	float MinimumSpeed; // 0x520(0x04)
	float MaximumSpeed; // 0x524(0x04)
	struct AProjectile* VolcanoProjectile; // 0x528(0x08)
	struct FName SourceSocket; // 0x530(0x08)
	struct AMadCharAI* Owner; // 0x538(0x08)
	char UnknownData_540[0x8]; // 0x540(0x08)

	void SpawnVolcanoProjectile(); // Function Madness.MadAIAbility_VolcanoBoss_ThrowProjectile.SpawnVolcanoProjectile // (Final|Native|Protected|BlueprintCallable) // @ game+0x1533980
};

// Class Madness.MadAIAbility_Yagak_AnomalyRifts
// Size: 0x6f0 (Inherited: 0x698)
struct UMadAIAbility_Yagak_AnomalyRifts : UMadAIAbility_CastedBase {
	struct UExplosionTemplate* ShieldSpawnExplosionTemplate; // 0x698(0x08)
	struct UMadGameplayEffect* FailedActivationCooldownEffect; // 0x6a0(0x08)
	struct UEnvQuery* RiftQuery; // 0x6a8(0x08)
	struct AActor* TurretClass; // 0x6b0(0x08)
	int32_t DesiredTurretsPerPlayer; // 0x6b8(0x04)
	float TurretSpawnInterval; // 0x6bc(0x04)
	struct FTimerHandle TurretSpawnTimerHandle; // 0x6c0(0x08)
	struct TArray<struct ABaseCharacter*> Targets; // 0x6c8(0x10)
	char UnknownData_6D8[0x18]; // 0x6d8(0x18)

	void SpawnTurret(); // Function Madness.MadAIAbility_Yagak_AnomalyRifts.SpawnTurret // (Final|Native|Protected) // @ game+0x15379a0
};

// Class Madness.MadAIAbility_Yagak_Barrier
// Size: 0x588 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Barrier : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	struct UAnimMontage* MontageToPlay; // 0x520(0x08)
	struct AYagakShield* ShieldBPClass; // 0x528(0x08)
	struct AYagakShield* Shield; // 0x530(0x08)
	float CastTime; // 0x538(0x04)
	float BarrierZOffset; // 0x53c(0x04)
	float BarrierDuration; // 0x540(0x04)
	char UnknownData_544[0x4]; // 0x544(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x548(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x558(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x568(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x578(0x10)

	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Barrier.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x15373d0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Barrier.OnInterruptedHandler // (Final|Native|Public) // @ game+0x1537060
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Barrier.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536e60
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Barrier.OnCancelledHandler // (Final|Native|Public) // @ game+0x1536c60
	void BarrierFinished(); // Function Madness.MadAIAbility_Yagak_Barrier.BarrierFinished // (Final|Native|Public) // @ game+0x1536a40
};

// Class Madness.MadAIAbility_Yagak_BaseTaunt
// Size: 0x538 (Inherited: 0x518)
struct UMadAIAbility_Yagak_BaseTaunt : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	struct TArray<struct UAnimMontage*> AnimMontages; // 0x520(0x10)
	struct UAnimMontage* CastingMontage; // 0x530(0x08)

	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_BaseTaunt.OnCompleteHandler // (Final|Native|Public) // @ game+0x152e180
	void CheckingAIPawn(); // Function Madness.MadAIAbility_Yagak_BaseTaunt.CheckingAIPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a80
};

// Class Madness.MadAIAbility_Yagak_Blink
// Size: 0x598 (Inherited: 0x598)
struct UMadAIAbility_Yagak_Blink : UMadAIAbility_Altered_Blink {
};

// Class Madness.MadAIAbility_Yagak_ChainLight
// Size: 0x6f8 (Inherited: 0x698)
struct UMadAIAbility_Yagak_ChainLight : UMadAIAbility_CastedBase {
	struct UMadDamageType* DamageTypeClass; // 0x698(0x08)
	struct UMadGameplayEffect* LightningEffectClass; // 0x6a0(0x08)
	struct UMadGameplayEffect* LightningHopEffectClass; // 0x6a8(0x08)
	struct FScalableFloat LightningHopRange; // 0x6b0(0x20)
	struct FScalableFloat BaseDamage; // 0x6d0(0x20)
	char UnknownData_6F0[0x8]; // 0x6f0(0x08)
};

// Class Madness.MadAIAbility_Yagak_Chains
// Size: 0x550 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Chains : UMadAIGameplayAbility {
	struct UAnimMontage* CastingMontage; // 0x518(0x08)
	float HookLocationOffset; // 0x520(0x04)
	char UnknownData_524[0x4]; // 0x524(0x04)
	struct FGameplayTagContainer Tag; // 0x528(0x20)
	struct UGameplayEffect* HeavySwingClass; // 0x548(0x08)

	struct FVector LocationBetweenHooks(); // Function Madness.MadAIAbility_Yagak_Chains.LocationBetweenHooks // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1536c20
	void EndAbilityCleanup(); // Function Madness.MadAIAbility_Yagak_Chains.EndAbilityCleanup // (Final|Native|Public|BlueprintCallable) // @ game+0x1536bc0
	void DeactivateCrossFireArea(); // Function Madness.MadAIAbility_Yagak_Chains.DeactivateCrossFireArea // (Final|Native|Public|BlueprintCallable) // @ game+0x1536ba0
};

// Class Madness.MadAIAbility_Yagak_ChainsCatch
// Size: 0x760 (Inherited: 0x698)
struct UMadAIAbility_Yagak_ChainsCatch : UMadAIAbility_CastedBase {
	struct UMadDamageType* PushDamageTypeClass; // 0x698(0x08)
	struct UMadDamageType* CatchDamageTypeClass; // 0x6a0(0x08)
	struct UMadExplosionTemplate* GroundHitExplosionTemplateClass; // 0x6a8(0x08)
	struct UMadGameplayEffect* EffectOnHitClass; // 0x6b0(0x08)
	struct FScalableFloat PushBaseDamage; // 0x6b8(0x20)
	struct FScalableFloat CatchBaseDamage; // 0x6d8(0x20)
	struct FGameplayTagContainer GameplayTagsToRemoveOnHit; // 0x6f8(0x20)
	int32_t MinSpins; // 0x718(0x04)
	int32_t MaxSpins; // 0x71c(0x04)
	float DamageToleranceDist; // 0x720(0x04)
	float CatchToleranceDist; // 0x724(0x04)
	struct TArray<struct AActor*> DamagedActors; // 0x728(0x10)
	char UnknownData_738[0x28]; // 0x738(0x28)

	void OnNotifyEnd(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbility_Yagak_ChainsCatch.OnNotifyEnd // (Final|Native|Protected) // @ game+0x15375d0
};

// Class Madness.MadAIAbility_Yagak_ChainsTaunt
// Size: 0x538 (Inherited: 0x518)
struct UMadAIAbility_Yagak_ChainsTaunt : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	struct TArray<struct UAnimMontage*> AnimMontages; // 0x520(0x10)
	struct UAnimMontage* CastingMontage; // 0x530(0x08)

	void CheckingAIPawn(); // Function Madness.MadAIAbility_Yagak_ChainsTaunt.CheckingAIPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a80
};

// Class Madness.MadAIAbility_Yagak_Cleaver
// Size: 0x570 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Cleaver : UMadAIGameplayAbility {
	struct UAnimMontage* AttackMontage; // 0x518(0x08)
	struct AMadCharAI_Yagak_Cleaver* Yagak; // 0x520(0x08)
	float MaxRange; // 0x528(0x04)
	float MinRange; // 0x52c(0x04)
	struct UCurveTable* EnemySkillsValues; // 0x530(0x08)
	struct FGameplayAttribute Attribute; // 0x538(0x38)
};

// Class Madness.MadAIAbility_Yagak_Cleave
// Size: 0x5b0 (Inherited: 0x570)
struct UMadAIAbility_Yagak_Cleave : UMadAIAbility_Yagak_Cleaver {
	struct FMulticastInlineDelegate OnComplete; // 0x570(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x580(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x590(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5a0(0x10)

	void SetOverlapAndEndAbility(); // Function Madness.MadAIAbility_Yagak_Cleave.SetOverlapAndEndAbility // (Final|Native|Public) // @ game+0x15377e0
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Cleave.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x1537450
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Cleave.OnInterruptedHandler // (Final|Native|Public) // @ game+0x15370e0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Cleave.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536ee0
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Cleave.OnCancelledHandler // (Final|Native|Public) // @ game+0x1536ce0
	void FaceRotation(); // Function Madness.MadAIAbility_Yagak_Cleave.FaceRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x1536be0
	void BasicSetters(); // Function Madness.MadAIAbility_Yagak_Cleave.BasicSetters // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a60
};

// Class Madness.MadAIAbility_Yagak_CleaverComboBase
// Size: 0x540 (Inherited: 0x518)
struct UMadAIAbility_Yagak_CleaverComboBase : UMadAIGameplayAbility {
	float RangeMin; // 0x518(0x04)
	float RangeMax; // 0x51c(0x04)
	struct AMadCharAI_Yagak_Cleaver* OwnerCharacter; // 0x520(0x08)
	struct AMadAI_Yagak* OwnerController; // 0x528(0x08)
	struct UAnimMontage* MontageToPlay; // 0x530(0x08)
	char UnknownData_538[0x8]; // 0x538(0x08)

	struct UAnimMontage* SelectAnimMontageToPlay(float DistanceToTarget); // Function Madness.MadAIAbility_Yagak_CleaverComboBase.SelectAnimMontageToPlay // (Event|Protected|BlueprintEvent|Const) // @ game+0x1a35c70
	void OnNotifyBegin(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbility_Yagak_CleaverComboBase.OnNotifyBegin // (Native|Protected) // @ game+0x15372d0
	void OnMontageBlendingOut(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbility_Yagak_CleaverComboBase.OnMontageBlendingOut // (Native|Protected) // @ game+0x15371e0
};

// Class Madness.MadAIAbility_Yagak_CleaverTaunt
// Size: 0x538 (Inherited: 0x518)
struct UMadAIAbility_Yagak_CleaverTaunt : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	struct TArray<struct UAnimMontage*> AnimMontages; // 0x520(0x10)
	struct UAnimMontage* CastingMontage; // 0x530(0x08)

	void CheckingAIPawn(); // Function Madness.MadAIAbility_Yagak_CleaverTaunt.CheckingAIPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a80
};

// Class Madness.MadAIAbility_Yagak_ControlSandWyrms
// Size: 0x6b0 (Inherited: 0x698)
struct UMadAIAbility_Yagak_ControlSandWyrms : UMadAIAbility_CastedBase {
	struct AMadTentacle* TentacleTemplate; // 0x698(0x08)
	float TargetGroupingMaxDistance; // 0x6a0(0x04)
	char UnknownData_6A4[0x4]; // 0x6a4(0x04)
	struct UAnimMontage* TentacleMontage; // 0x6a8(0x08)
};

// Class Madness.MadAIAbility_Yagak_Dash
// Size: 0x568 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Dash : UMadAIGameplayAbility {
	struct UEnvQuery* QueryTemplate; // 0x518(0x08)
	struct UGameplayEffect* PostAbilityEffectClass; // 0x520(0x08)
	float MoveDuration; // 0x528(0x04)
	float TurnDuration; // 0x52c(0x04)
	struct UAnimMontage* StartMontage; // 0x530(0x08)
	struct UAnimMontage* LoopMontage; // 0x538(0x08)
	struct UAnimMontage* StopMontage; // 0x540(0x08)
	struct UCurveFloat* DashCurve; // 0x548(0x08)
	char UnknownData_550[0x18]; // 0x550(0x18)

	void OnMoveComplete(); // Function Madness.MadAIAbility_Yagak_Dash.OnMoveComplete // (Final|Native|Protected) // @ game+0x15372b0
	void DashStop(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Dash.DashStop // (Final|Native|Protected) // @ game+0x1536b20
	void DashLoop(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Dash.DashLoop // (Final|Native|Protected) // @ game+0x1536aa0
};

// Class Madness.MadAIAbility_Yagak_FloatingTaunt
// Size: 0x538 (Inherited: 0x518)
struct UMadAIAbility_Yagak_FloatingTaunt : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	struct TArray<struct UAnimMontage*> AnimMontages; // 0x520(0x10)
	struct UAnimMontage* CastingMontage; // 0x530(0x08)

	void CheckingAIPawn(); // Function Madness.MadAIAbility_Yagak_FloatingTaunt.CheckingAIPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a80
};

// Class Madness.MadAIAbility_Yagak_FullSwing
// Size: 0x600 (Inherited: 0x550)
struct UMadAIAbility_Yagak_FullSwing : UMadAIAbility_Yagak_Chains {
	struct UParticleSystem* MarkerAbility; // 0x550(0x08)
	struct FName MarkerParamSizeName; // 0x558(0x08)
	struct FVector MarkerSize; // 0x560(0x0c)
	char UnknownData_56C[0x4]; // 0x56c(0x04)
	struct UExplosionTemplate* Explosion; // 0x570(0x08)
	struct AChainsSmallSphereQuakeProjectile* SmallSphereBPClass; // 0x578(0x08)
	int32_t NumberOfSwings; // 0x580(0x04)
	int32_t MaxSwings; // 0x584(0x04)
	int32_t MinSwings; // 0x588(0x04)
	char UnknownData_58C[0x4]; // 0x58c(0x04)
	float DeformRadius; // 0x590(0x04)
	float DeformSpeed; // 0x594(0x04)
	float RotateCharacterTurningSpeed; // 0x598(0x04)
	char UnknownData_59C[0x4]; // 0x59c(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnNotifyEnd; // 0x5e0(0x10)
	struct UParticleSystemComponent* Marker; // 0x5f0(0x08)
	struct UMadAIAbilityTask_RotateTowardActor* RotateTask; // 0x5f8(0x08)

	void UpdateSwingLoopCounter(); // Function Madness.MadAIAbility_Yagak_FullSwing.UpdateSwingLoopCounter // (Final|Native|Public|BlueprintCallable) // @ game+0x15379e0
	void OnNotifyEndHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_FullSwing.OnNotifyEndHandler // (Final|Native|Public) // @ game+0x15376d0
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_FullSwing.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x15374d0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_FullSwing.OnInterruptedHandler // (Final|Native|Public) // @ game+0x1537160
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_FullSwing.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536f60
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_FullSwing.OnCancelledHandler // (Final|Native|Public) // @ game+0x1536d60
};

// Class Madness.MadAIAbility_Yagak_GatherEnergy
// Size: 0x6b8 (Inherited: 0x698)
struct UMadAIAbility_Yagak_GatherEnergy : UMadAIAbility_CastedBase {
	struct AYagakRiftEnergy* EnergyActorTemplate; // 0x698(0x08)
	struct AMadYagakAnomalyShield* AnomalyShieldClass; // 0x6a0(0x08)
	struct UGameplayEffect* AnomalyPowerBuff; // 0x6a8(0x08)
	struct FTimerHandle ShieldSpawnTimerHandle; // 0x6b0(0x08)
};

// Class Madness.MadAIAbility_Yagak_Jump
// Size: 0x558 (Inherited: 0x540)
struct UMadAIAbility_Yagak_Jump : UMadAIAbility_Yagak_CleaverComboBase {
	char UnknownData_540[0xc]; // 0x540(0x0c)
	float DefaultDesiredDistance; // 0x54c(0x04)
	float PredictDuration; // 0x550(0x04)
	float MaxPredictionDistance; // 0x554(0x04)
};

// Class Madness.MadAIAbility_Yagak_LightStrikes
// Size: 0x5f8 (Inherited: 0x518)
struct UMadAIAbility_Yagak_LightStrikes : UMadAIGameplayAbility {
	struct AActor* Target; // 0x518(0x08)
	struct AMadCharAI* Caster; // 0x520(0x08)
	struct UAnimMontage* CastingMontage; // 0x528(0x08)
	struct FTimerHandle CastHandle; // 0x530(0x08)
	struct FTimerHandle StrikeDelayHandle; // 0x538(0x08)
	struct TArray<struct AActor*> AllTargets; // 0x540(0x10)
	struct AYagakLightningStrike* LightningStrikeClass; // 0x550(0x08)
	struct UGameplayEffect* ChannelEffectClass; // 0x558(0x08)
	struct UGameplayEffect* ExhaustionEffectClass; // 0x560(0x08)
	float StrikeInterval; // 0x568(0x04)
	float MinRange; // 0x56c(0x04)
	float MaxRange; // 0x570(0x04)
	int32_t StrikeCount; // 0x574(0x04)
	float StrikeTimeModifier; // 0x578(0x04)
	float TimeToLightningHit; // 0x57c(0x04)
	char UnknownData_580[0x18]; // 0x580(0x18)
	struct TArray<struct AActor*> StrikeTargets; // 0x598(0x10)
	struct AActor* StrikeTarget; // 0x5a8(0x08)
	struct FMulticastInlineDelegate OnComplete; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5e0(0x10)
	char UnknownData_5F0[0x8]; // 0x5f0(0x08)

	void StrikesFinished(); // Function Madness.MadAIAbility_Yagak_LightStrikes.StrikesFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x15379c0
	void SpawnStrikesAtLocations(); // Function Madness.MadAIAbility_Yagak_LightStrikes.SpawnStrikesAtLocations // (Final|Native|Public|BlueprintCallable) // @ game+0x1537980
	bool ShowCastBar(struct FText AbilityName, float CastTime, bool bIsChanneling); // Function Madness.MadAIAbility_Yagak_LightStrikes.ShowCastBar // (Final|Native|Public|BlueprintCallable) // @ game+0x1537800
	void SetCastEffects(bool bTurnOn); // Function Madness.MadAIAbility_Yagak_LightStrikes.SetCastEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x1537750
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_LightStrikes.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x1537550
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_LightStrikes.OnInterruptedHandler // (Final|Native|Public) // @ game+0x1536d60
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_LightStrikes.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536fe0
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_LightStrikes.OnCancelledHandler // (Final|Native|Public) // @ game+0x1536de0
	void GetCasterAndTargets(); // Function Madness.MadAIAbility_Yagak_LightStrikes.GetCasterAndTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x1536c00
};

// Class Madness.MadAIAbility_Yagak_Melee
// Size: 0x540 (Inherited: 0x540)
struct UMadAIAbility_Yagak_Melee : UMadAIAbility_Yagak_CleaverComboBase {
};

// Class Madness.MadAIAbility_Yagak_QuickSlash
// Size: 0x618 (Inherited: 0x550)
struct UMadAIAbility_Yagak_QuickSlash : UMadAIAbility_Yagak_Chains {
	struct UAnimMontage* StartAttackMontage; // 0x550(0x08)
	char UnknownData_558_0 : 7; // 0x558(0x01)
	bool bFinishedWithRightHand : 1; // 0x558(0x01)
	char UnknownData_559[0x7]; // 0x559(0x07)
	struct UGameplayEffect* LeftPoseEffectClass; // 0x560(0x08)
	struct FGameplayTagContainer LeftPoseTag; // 0x568(0x20)
	struct FGameplayTagContainer UsingHeavySwingTag; // 0x588(0x20)
	struct FGameplayTag QuickSlashTag; // 0x5a8(0x08)
	struct UExplosionTemplate* Explosion; // 0x5b0(0x08)
	struct AChainsSmallSphereQuakeProjectile* SmallSphereBPClass; // 0x5b8(0x08)
	struct FMulticastInlineDelegate OnComplete; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnNotifyEnd; // 0x600(0x10)
	int32_t LoopsCount; // 0x610(0x04)
	char UnknownData_614[0x4]; // 0x614(0x04)

	void StartMontage(); // Function Madness.MadAIAbility_Yagak_QuickSlash.StartMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x153adb0
	void OnNotifyEndHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_QuickSlash.OnNotifyEndHandler // (Final|Native|Public) // @ game+0x153a840
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_QuickSlash.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x153a640
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_QuickSlash.OnInterruptedHandler // (Final|Native|Public) // @ game+0x153a3c0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_QuickSlash.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536d60
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_QuickSlash.OnCancelledHandler // (Final|Native|Public) // @ game+0x153a140
	void FinishMontage(); // Function Madness.MadAIAbility_Yagak_QuickSlash.FinishMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a40
	void ApplyIdleLeftPoseStatus(bool bApply); // Function Madness.MadAIAbility_Yagak_QuickSlash.ApplyIdleLeftPoseStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x1539ef0
};

// Class Madness.MadAIAbility_Yagak_Reset
// Size: 0x518 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Reset : UMadAIGameplayAbility {
};

// Class Madness.MadAIAbility_Yagak_Shroud
// Size: 0x5e0 (Inherited: 0x518)
struct UMadAIAbility_Yagak_Shroud : UMadAIGameplayAbility {
	struct UAnimMontage* CleaverMontage; // 0x518(0x08)
	struct UAnimMontage* ChainsMontage; // 0x520(0x08)
	struct AMadCharAI_Yagak* Yagak; // 0x528(0x08)
	struct UGameplayEffect* InShroudClass; // 0x530(0x08)
	struct UGameplayEffect* InitialCooldownEffectTemplate; // 0x538(0x08)
	struct FTimerHandle TimerChecker; // 0x540(0x08)
	struct FName SupportWaveName; // 0x548(0x08)
	struct AYagakShroud* Shroud; // 0x550(0x08)
	struct AYagakShroud* ShroudBPClass; // 0x558(0x08)
	struct FGameplayTagContainer Tag; // 0x560(0x20)
	struct FVector ShroudScale; // 0x580(0x0c)
	struct FVector SwordLocationOffset; // 0x58c(0x0c)
	float ClearTime; // 0x598(0x04)
	float MaxHealthRatioForActivation; // 0x59c(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5d0(0x10)

	void SetOverlapAndEndAbility(); // Function Madness.MadAIAbility_Yagak_Shroud.SetOverlapAndEndAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1536a40
	void RemoveTag(); // Function Madness.MadAIAbility_Yagak_Shroud.RemoveTag // (Final|Native|Public) // @ game+0x153ad70
	void OnSupportWaveKilled(struct AFWWaveSpawningSystem* Wss, int32_t WaveIndex, struct FName WaveName, int32_t NumWavesKilled, struct ABaseCharacter* KilledCharacter); // Function Madness.MadAIAbility_Yagak_Shroud.OnSupportWaveKilled // (Final|Native|Public) // @ game+0x153a9c0
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Shroud.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x153a6c0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Shroud.OnInterruptedHandler // (Final|Native|Public) // @ game+0x1536fe0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Shroud.OnCompleteHandler // (Final|Native|Public) // @ game+0x1536f60
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Shroud.OnCancelledHandler // (Final|Native|Public) // @ game+0x1536d60
	void DestroyShroud(); // Function Madness.MadAIAbility_Yagak_Shroud.DestroyShroud // (Final|Native|Public|BlueprintCallable) // @ game+0x153a020
	void CallGameplayTagRemove(); // Function Madness.MadAIAbility_Yagak_Shroud.CallGameplayTagRemove // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadAIAbility_Yagak_Strike
// Size: 0x5f8 (Inherited: 0x570)
struct UMadAIAbility_Yagak_Strike : UMadAIAbility_Yagak_Cleaver {
	struct FVector JumpDestination; // 0x570(0x0c)
	struct FVector TraceOffset; // 0x57c(0x0c)
	struct FVector HalfSize; // 0x588(0x0c)
	struct FVector GroundSlamOffset; // 0x594(0x0c)
	float TargetDistance; // 0x5a0(0x04)
	float GroundSlamOffsetMultiplier; // 0x5a4(0x04)
	float AttackRate; // 0x5a8(0x04)
	char UnknownData_5AC_0 : 7; // 0x5ac(0x01)
	bool bCanSubmitCooldown : 1; // 0x5ac(0x01)
	char UnknownData_5AD[0x3]; // 0x5ad(0x03)
	struct UExplosionTemplate* Explosion; // 0x5b0(0x08)
	struct FMulticastInlineDelegate OnComplete; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5e8(0x10)

	void StartAbility(); // Function Madness.MadAIAbility_Yagak_Strike.StartAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x153ad90
	void RunEQS(); // Function Madness.MadAIAbility_Yagak_Strike.RunEQS // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Strike.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x153a740
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Strike.OnInterruptedHandler // (Final|Native|Public) // @ game+0x153a440
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Strike.OnCompleteHandler // (Final|Native|Public) // @ game+0x153a240
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_Strike.OnCancelledHandler // (Final|Native|Public) // @ game+0x153a1c0
	void BasicSetters(); // Function Madness.MadAIAbility_Yagak_Strike.BasicSetters // (Final|Native|Public|BlueprintCallable) // @ game+0x1539f80
};

// Class Madness.MadAIAbility_Yagak_SummonRiftWyrm
// Size: 0x598 (Inherited: 0x518)
struct UMadAIAbility_Yagak_SummonRiftWyrm : UMadAIGameplayAbility {
	char UnknownData_518[0x28]; // 0x518(0x28)
	float ChannelTime; // 0x540(0x04)
	float CastTime; // 0x544(0x04)
	float HighHealthRatio; // 0x548(0x04)
	float LowHealthRatio; // 0x54c(0x04)
	struct FName StartFromRight; // 0x550(0x08)
	struct FName StartFromLeft; // 0x558(0x08)
	struct FName SpawnNotifyName; // 0x560(0x08)
	struct UAnimMontage* CastingMontage; // 0x568(0x08)
	struct FRotator WyrmRotationOffset; // 0x570(0x0c)
	char UnknownData_57C[0x4]; // 0x57c(0x04)
	struct AActor* RiftWyrmCallerClass; // 0x580(0x08)
	struct FGameplayTag GlobalCooldownTag; // 0x588(0x08)
	float MinGlobalCooldown; // 0x590(0x04)
	float MaxGlobalCooldown; // 0x594(0x04)

	void OnMontageNotifyBegin(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SummonRiftWyrm.OnMontageNotifyBegin // (Final|Native|Protected) // @ game+0x153a540
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SummonRiftWyrm.OnMontageComplete // (Final|Native|Protected) // @ game+0x153a4c0
	void OnMontageCancelled(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SummonRiftWyrm.OnMontageCancelled // (Final|Native|Protected) // @ game+0x1526d80
};

// Class Madness.MadAIAbility_Yagak_SwingingCombo
// Size: 0x858 (Inherited: 0x570)
struct UMadAIAbility_Yagak_SwingingCombo : UMadAIAbility_Yagak_Cleaver {
	struct UAnimMontage* InitialTauntMontage; // 0x570(0x08)
	struct UAnimMontage* SwordJumpMontage; // 0x578(0x08)
	struct UAnimMontage* SwordJumpMidMontage; // 0x580(0x08)
	struct UAnimMontage* SwordJumpEndMontage; // 0x588(0x08)
	struct UAnimMontage* StabMontage; // 0x590(0x08)
	struct UAnimMontage* PostStabMontage; // 0x598(0x08)
	struct UAnimMontage* FinishersMontage; // 0x5a0(0x08)
	struct UAnimMontage* LightBackhandRightMontage; // 0x5a8(0x08)
	struct UAnimMontage* LightBackhandLeftMontage; // 0x5b0(0x08)
	struct UAnimMontage* LightBackhandForwardMontage; // 0x5b8(0x08)
	struct UAnimMontage* LightForehandRightMontage; // 0x5c0(0x08)
	struct UAnimMontage* LightForehandLeftMontage; // 0x5c8(0x08)
	struct UAnimMontage* LightForehandForwardMontage; // 0x5d0(0x08)
	struct UAnimMontage* HeavyBackhandMontage; // 0x5d8(0x08)
	struct UAnimMontage* SwordDodgeMontage; // 0x5e0(0x08)
	struct TArray<struct UAnimMontage*> FinisherTaunts; // 0x5e8(0x10)
	struct TArray<struct UAnimMontage*> FronthandTaunts; // 0x5f8(0x10)
	struct FName InitialTauntTask; // 0x608(0x08)
	struct FName SwordJumpTask; // 0x610(0x08)
	struct FName SwordJumpSection; // 0x618(0x08)
	struct FName SwordJumpMidTask; // 0x620(0x08)
	struct FName JumpAttackMoveToTargetTask; // 0x628(0x08)
	struct FName SwordJumpEndTask; // 0x630(0x08)
	struct FName SwordJumpEndSection; // 0x638(0x08)
	struct FName StabTask; // 0x640(0x08)
	struct FName PostStabTask; // 0x648(0x08)
	struct FName LightBackhandTask; // 0x650(0x08)
	struct FName StrongBackhandTask; // 0x658(0x08)
	struct FName QuickBackhandTask; // 0x660(0x08)
	struct FName QuickForehandTask; // 0x668(0x08)
	struct FName QuickFinishTask; // 0x670(0x08)
	struct FName MediumQuickForehandTask; // 0x678(0x08)
	struct FName MediumStrongBackhandTask; // 0x680(0x08)
	struct FName LightForehandTask; // 0x688(0x08)
	struct FName StrongForehandTask; // 0x690(0x08)
	struct FName SwordDodgeTask; // 0x698(0x08)
	struct FName LightBackhandSection; // 0x6a0(0x08)
	struct FName StrongBackhandSection; // 0x6a8(0x08)
	struct FName QuickBackhandSection; // 0x6b0(0x08)
	struct FName StrongForehandSection; // 0x6b8(0x08)
	struct FName LightForehandSection; // 0x6c0(0x08)
	struct FName RightDodgeSection; // 0x6c8(0x08)
	struct FName LeftDodgeSection; // 0x6d0(0x08)
	struct FName StrongFinishTask; // 0x6d8(0x08)
	struct FName SwordForwardSection; // 0x6e0(0x08)
	struct FName Sword45RSection; // 0x6e8(0x08)
	struct FName Sword45LSection; // 0x6f0(0x08)
	struct FName Sword90RSection; // 0x6f8(0x08)
	struct FName Sword90LSection; // 0x700(0x08)
	struct FName Sword135RSection; // 0x708(0x08)
	struct FName Sword135LSection; // 0x710(0x08)
	struct FName Sword180RSection; // 0x718(0x08)
	struct FName Sword180LSection; // 0x720(0x08)
	struct FName FinisherTauntTask; // 0x728(0x08)
	struct FName FronthandTauntTask; // 0x730(0x08)
	float TauntChance; // 0x738(0x04)
	float JumpDistance; // 0x73c(0x04)
	float SwordJumpTurnDuration; // 0x740(0x04)
	float JumpAttackMoveOffset; // 0x744(0x04)
	float JumpOffsetFromNavmeshEdge; // 0x748(0x04)
	float LightBackhandChance; // 0x74c(0x04)
	float StrongBackhandChance; // 0x750(0x04)
	float JumpLightChance; // 0x754(0x04)
	float JumpAfterDistance; // 0x758(0x04)
	float BackhandAfterDistance; // 0x75c(0x04)
	float StabDistance; // 0x760(0x04)
	float InitialTauntRate; // 0x764(0x04)
	float SwordJumpRate; // 0x768(0x04)
	float SwordJumpMidRate; // 0x76c(0x04)
	float SwordJumpEndRate; // 0x770(0x04)
	float StabRate; // 0x774(0x04)
	float PostStabRate; // 0x778(0x04)
	float FinisherTauntRate; // 0x77c(0x04)
	float SwordDodgeRate; // 0x780(0x04)
	float LightBackhandRate; // 0x784(0x04)
	float StrongBackhandRate; // 0x788(0x04)
	float StrongForehandRate; // 0x78c(0x04)
	float LightForehandRate; // 0x790(0x04)
	float AfterStabFarDistance; // 0x794(0x04)
	float AfterStabNearDistance; // 0x798(0x04)
	float PostStabFinisherWeight; // 0x79c(0x04)
	float NearDodgeDistance; // 0x7a0(0x04)
	float FarDodgeDistance; // 0x7a4(0x04)
	float DodgeFinisherWeight; // 0x7a8(0x04)
	float DiagonalDotMin; // 0x7ac(0x04)
	float DiagonalDotMax; // 0x7b0(0x04)
	float AttackIdleWait; // 0x7b4(0x04)
	float TargetForwardAngle; // 0x7b8(0x04)
	float Target45Angle; // 0x7bc(0x04)
	float Target90Angle; // 0x7c0(0x04)
	float Target135Angle; // 0x7c4(0x04)
	float Target180Angle; // 0x7c8(0x04)
	char UnknownData_7CC[0x4]; // 0x7cc(0x04)
	struct FGameplayTagContainer HeavySwingTags; // 0x7d0(0x20)
	struct FGameplayTag RegularQuakeCue; // 0x7f0(0x08)
	struct FGameplayTag BackhandPoseTag; // 0x7f8(0x08)
	struct UExplosionTemplate* LightSlamExplosion; // 0x800(0x08)
	struct UExplosionTemplate* HeavySlamExplosion; // 0x808(0x08)
	struct UGameplayEffect* HeavySwingEffectClass; // 0x810(0x08)
	struct UGameplayEffect* BackhandIdleEffect; // 0x818(0x08)
	struct AActor* HeavyQuakeClass; // 0x820(0x08)
	struct AActor* LightQuakeClass; // 0x828(0x08)
	struct UCurveFloat* JumpAttackMoveToTargetCurve; // 0x830(0x08)
	char UnknownData_838[0x20]; // 0x838(0x20)

	void TriggeringSwordDamageEnd(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.TriggeringSwordDamageEnd // (Final|Native|Protected) // @ game+0x153ae50
	void TriggeringSwordDamageBegin(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.TriggeringSwordDamageBegin // (Final|Native|Protected) // @ game+0x153add0
	void PostJumpLightCombo_Step3(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.PostJumpLightCombo_Step3 // (Final|Native|Protected) // @ game+0x153acf0
	void PostJumpLightCombo_Step2(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.PostJumpLightCombo_Step2 // (Final|Native|Protected) // @ game+0x153ac70
	void OnSwordJumpStartComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnSwordJumpStartComplete // (Final|Native|Protected) // @ game+0x153abf0
	void OnSwordJumpMoveComplete(); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnSwordJumpMoveComplete // (Final|Native|Protected) // @ game+0x153abd0
	void OnSwordJumpEndComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnSwordJumpEndComplete // (Final|Native|Protected) // @ game+0x153ab50
	void OnStabComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnStabComplete // (Final|Native|Protected) // @ game+0x153a940
	void OnPostStabComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnPostStabComplete // (Final|Native|Protected) // @ game+0x153a8c0
	void OnInitialTauntComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.OnInitialTauntComplete // (Final|Native|Protected) // @ game+0x153a340
	void FronthandComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.FronthandComplete // (Final|Native|Protected) // @ game+0x153a0c0
	void EndForehandFinisher(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.EndForehandFinisher // (Final|Native|Protected) // @ game+0x153a040
	void CloseRangeMediumCombo_Step2(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.CloseRangeMediumCombo_Step2 // (Final|Native|Protected) // @ game+0x1539fa0
	void AllDone(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_SwingingCombo.AllDone // (Final|Native|Protected) // @ game+0x152e180
};

// Class Madness.MadAIAbility_Yagak_TeleGrasp
// Size: 0x560 (Inherited: 0x518)
struct UMadAIAbility_Yagak_TeleGrasp : UMadAIGameplayAbility {
	char UnknownData_518[0xc]; // 0x518(0x0c)
	float TelekineticGraspRadius; // 0x524(0x04)
	struct AMadCharAI_Yagak* Caster; // 0x528(0x08)
	struct UParticleSystemComponent* HazardousMarker; // 0x530(0x08)
	struct UParticleSystem* MarkerTemplate; // 0x538(0x08)
	float CastTime; // 0x540(0x04)
	char UnknownData_544[0x4]; // 0x544(0x04)
	struct UAnimMontage* CastingMontage; // 0x548(0x08)
	struct UExplosionTemplate* ExplosionTemplate; // 0x550(0x08)
	struct FGameplayTag GlobalCooldownTag; // 0x558(0x08)

	void OnMontageNotifyBegin(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleGrasp.OnMontageNotifyBegin // (Final|Native|Public) // @ game+0x153a5c0
	void OnMontageComplete(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleGrasp.OnMontageComplete // (Final|Native|Public) // @ game+0x1526d80
};

// Class Madness.MadAIAbility_Yagak_TeleSlam
// Size: 0x588 (Inherited: 0x518)
struct UMadAIAbility_Yagak_TeleSlam : UMadAIGameplayAbility {
	struct AMadCharAI* AIPawn; // 0x518(0x08)
	float CastingDuration; // 0x520(0x04)
	char UnknownData_524[0x4]; // 0x524(0x04)
	struct UAnimMontage* MontageToPlay; // 0x528(0x08)
	struct UExplosionTemplate* Explosion; // 0x530(0x08)
	struct FMulticastInlineDelegate OnComplete; // 0x538(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x548(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x558(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x568(0x10)
	char UnknownData_578[0x10]; // 0x578(0x10)

	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleSlam.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x153a7c0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleSlam.OnInterruptedHandler // (Final|Native|Public) // @ game+0x1536e60
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleSlam.OnCompleteHandler // (Final|Native|Public) // @ game+0x153a2c0
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_TeleSlam.OnCancelledHandler // (Final|Native|Public) // @ game+0x1537060
};

// Class Madness.MadAIAbility_Yagak_WideSlash
// Size: 0x5c8 (Inherited: 0x550)
struct UMadAIAbility_Yagak_WideSlash : UMadAIAbility_Yagak_Chains {
	char UnknownData_550_0 : 7; // 0x550(0x01)
	bool bFirstAreaSpawned : 1; // 0x550(0x01)
	char UnknownData_551[0x7]; // 0x551(0x07)
	struct AChainsCrossAreaSingleLine* ChainsCrossAreaClass; // 0x558(0x08)
	float FireAreaOffset; // 0x560(0x04)
	float FireOffset1; // 0x564(0x04)
	float FireOffset2; // 0x568(0x04)
	float FireYawOffset1; // 0x56c(0x04)
	float FireYawOffset2; // 0x570(0x04)
	int32_t CombatState; // 0x574(0x04)
	struct FMulticastInlineDelegate OnComplete; // 0x578(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x588(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x598(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnNotifyEnd; // 0x5b8(0x10)

	void SpawnFireLineArea(bool bRightHookAsLocation, float Offset, bool bInvertRotation, float YawOffset); // Function Madness.MadAIAbility_Yagak_WideSlash.SpawnFireLineArea // (Final|Native|Public|BlueprintCallable) // @ game+0x153f7b0
	void OnNotifyEndHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_WideSlash.OnNotifyEndHandler // (Final|Native|Public) // @ game+0x153f570
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_WideSlash.OnNotifyBeginHandler // (Final|Native|Public) // @ game+0x153f4f0
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_WideSlash.OnInterruptedHandler // (Final|Native|Public) // @ game+0x153f0b0
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_WideSlash.OnCompleteHandler // (Final|Native|Public) // @ game+0x153f030
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadAIAbility_Yagak_WideSlash.OnCancelledHandler // (Final|Native|Public) // @ game+0x153efb0
};

// Class Madness.MadAIAbilityTask_ConeCheck
// Size: 0x100 (Inherited: 0x90)
struct UMadAIAbilityTask_ConeCheck : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnStartOverlap; // 0x90(0x10)
	struct FMulticastInlineDelegate OnEndOverlap; // 0xa0(0x10)
	struct AActor* ActorAsConeOrigin; // 0xb0(0x08)
	struct AActor* ConeDirectionActor; // 0xb8(0x08)
	struct AActor* ActorToWatch; // 0xc0(0x08)
	struct TArray<struct AActor*> OverlappingActors; // 0xc8(0x10)
	char UnknownData_D8[0x28]; // 0xd8(0x28)

	struct UMadAIAbilityTask_ConeCheck* ConeCheck(struct UMadAIGameplayAbility* WorldContextObject, struct AActor* ActorAsConeOrigin, struct FString SocketName, struct FVector VectorAsConeOrigin, float ConeHalfAngle, struct AActor* ConeDirection, struct AActor* ActorToCheck, float ConeDistance, bool UseBoneRotation, bool UseOnlyBoneYawRotation, bool GatherAllCharacters, bool DebugDraw, enum class None Priority); // Function Madness.MadAIAbilityTask_ConeCheck.ConeCheck // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x153d860
};

// Class Madness.MadAIAbilityTask_CreateAnomalyShield
// Size: 0x110 (Inherited: 0x90)
struct UMadAIAbilityTask_CreateAnomalyShield : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCreateShield; // 0xc0(0x10)
	char UnknownData_D0[0x40]; // 0xd0(0x40)

	void TaskCreateAnomalyShieldDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_CreateAnomalyShield.TaskCreateAnomalyShieldDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_CreateAnomalyShield.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x153f470
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_CreateAnomalyShield.OnMontageEnded // (Final|Native|Protected) // @ game+0x153f130
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_CreateAnomalyShield.OnAnimNotify // (Final|Native|Protected) // @ game+0x153ed60
	void CreateShield(); // Function Madness.MadAIAbilityTask_CreateAnomalyShield.CreateShield // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct UMadAIAbilityTask_CreateAnomalyShield* CreateAnomalyShield(struct UObject* WorldContextObject, struct FMontageAssetSelector Montage, struct FName NotifyName); // Function Madness.MadAIAbilityTask_CreateAnomalyShield.CreateAnomalyShield // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x153dcb0
};

// Class Madness.MadAIAbilityTask_DDBoomBlastSelectTarget
// Size: 0x108 (Inherited: 0x90)
struct UMadAIAbilityTask_DDBoomBlastSelectTarget : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0xa0(0x10)
	char UnknownData_B0[0x8]; // 0xb0(0x08)
	struct AActor* CurrentTarget; // 0xb8(0x08)
	struct TArray<struct AActor*> Targets; // 0xc0(0x10)
	char UnknownData_D0[0x38]; // 0xd0(0x38)

	void TaskDDBoomBlastSelectTargetDelegate__DelegateSignature(struct AActor* Target, struct FVector Destination); // DelegateFunction Madness.MadAIAbilityTask_DDBoomBlastSelectTarget.TaskDDBoomBlastSelectTargetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x1a35c70
	struct UMadAIAbilityTask_DDBoomBlastSelectTarget* DDBoomBlastSelectTarget(struct UObject* WorldContextObject, struct AActor* CurrentTarget, bool bTryToSwapTarget, bool bCheckOnlyCurrentTarget, float DeltaDistanceTest, float MaxDistance, float MinDistance, float MaxAngle); // Function Madness.MadAIAbilityTask_DDBoomBlastSelectTarget.DDBoomBlastSelectTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x153e280
};

// Class Madness.MadDataAsset_DirectionalMeleeAttack
// Size: 0x48 (Inherited: 0x30)
struct UMadDataAsset_DirectionalMeleeAttack : UDataAsset {
	struct TArray<struct FMadAI_SingleMeleeAttack> Variants; // 0x30(0x10)
	float MaxAttackDistanceIncreased; // 0x40(0x04)
	char UnknownData_44_0 : 7; // 0x44(0x01)
	bool bIsInPlaceAttack : 1; // 0x44(0x01)
	char UnknownData_45[0x3]; // 0x45(0x03)
};

// Class Madness.MadAIAbilityTask_DirectionalMeleeAttack
// Size: 0x120 (Inherited: 0x90)
struct UMadAIAbilityTask_DirectionalMeleeAttack : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnAIAnimNotify; // 0x90(0x10)
	struct FMulticastInlineDelegate OnComplete; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xc0(0x10)
	struct AActor* TargetActor; // 0xd0(0x08)
	struct UMadDataAsset_DirectionalMeleeAttack* AnimDataAsset; // 0xd8(0x08)
	char UnknownData_E0[0x40]; // 0xe0(0x40)

	void TaskDirectionalMeleeAttackDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_DirectionalMeleeAttack.TaskDirectionalMeleeAttackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void TaskDirectionalMeleeAttackAnimNotifyDelegate__DelegateSignature(struct UFWAnimNotify* AnimNotify, struct FName NotifyName); // DelegateFunction Madness.MadAIAbilityTask_DirectionalMeleeAttack.TaskDirectionalMeleeAttackAnimNotifyDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_DirectionalMeleeAttack.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x153f4b0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_DirectionalMeleeAttack.OnMontageEnded // (Final|Native|Protected) // @ game+0x153f2d0
	void OnAnimNotify(struct UFWAnimNotify* AnimNotify, struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_DirectionalMeleeAttack.OnAnimNotify // (Final|Native|Protected) // @ game+0x153ee60
	struct UMadAIAbilityTask_DirectionalMeleeAttack* DirectionalMeleeAttack(struct UObject* WorldContextObject, struct AActor* TargetActor, struct UMadDataAsset_DirectionalMeleeAttack* AnimDataAsset, bool bComboAttack, bool bContinuousAttacks, bool bCheckDistanceOnNavmesh); // Function Madness.MadAIAbilityTask_DirectionalMeleeAttack.DirectionalMeleeAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x153e4d0
};

// Class Madness.MadAIAbilityTask_DS360Attack
// Size: 0x3f8 (Inherited: 0x90)
struct UMadAIAbilityTask_DS360Attack : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyBegin; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyEnd; // 0xd0(0x10)
	char UnknownData_E0[0x318]; // 0xe0(0x318)

	void TaskDS360AttackDelegate__DelegateSignature(struct FName NotifyName); // DelegateFunction Madness.MadAIAbilityTask_DS360Attack.TaskDS360AttackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void SpawnNextProjectile(); // Function Madness.MadAIAbilityTask_DS360Attack.SpawnNextProjectile // (Final|Native|Protected) // @ game+0x153f910
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_DS360Attack.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x153f490
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_DS360Attack.OnMontageEnded // (Final|Native|Protected) // @ game+0x153f200
	void OnAbilityAnimNotifyEnd(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_DS360Attack.OnAbilityAnimNotifyEnd // (Final|Native|Protected) // @ game+0x153ec60
	void OnAbilityAnimNotifyBegin(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_DS360Attack.OnAbilityAnimNotifyBegin // (Final|Native|Protected) // @ game+0x153ea60
	struct UMadAIAbilityTask_DS360Attack* ExecuteDS360Attack(struct UObject* WorldContextObject, float MinDistance, float MaxDistance, struct AProjectile* Projectile, float ProjectileGroundSpeed, float ExtraHeight, struct FMontageAssetSelector Montage, struct TArray<struct FName> NotifyNames, float PredictionTime, float MaxPredictionDistance, float MaxRotationAngle, float MaxTestRotationAngle, bool bAdjustDistance); // Function Madness.MadAIAbilityTask_DS360Attack.ExecuteDS360Attack // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x153e690
	bool CanUse360Attack(struct UMadAIGameplayAbility* OwningAbility, struct TArray<struct F360AttackBandInfo> BandInfos); // Function Madness.MadAIAbilityTask_DS360Attack.CanUse360Attack // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x153d570
};

// Class Madness.MadAIAbilityTask_DSChangeHeight
// Size: 0xc0 (Inherited: 0x90)
struct UMadAIAbilityTask_DSChangeHeight : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnCompleted; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct UMadDSHeightComponent* HeightComponent; // 0xb0(0x08)
	char UnknownData_B8[0x8]; // 0xb8(0x08)

	struct UMadAIAbilityTask_DSChangeHeight* RestoreDSOriginalHeight(struct UObject* WorldContextObject, float MaxSpeed, float Acceleration, bool bDeclerateAtEnd, bool bGlide, float StartSpeed); // Function Madness.MadAIAbilityTask_DSChangeHeight.RestoreDSOriginalHeight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x153f5f0
	struct UMadAIAbilityTask_DSChangeHeight* ChangeDSHeight(struct UObject* WorldContextObject, float NewHeight, float MaxSpeed, float Acceleration, bool bDeclerateAtEnd, bool bResetToDefaultOnArrival, float StartSpeed); // Function Madness.MadAIAbilityTask_DSChangeHeight.ChangeDSHeight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x153d660
};

// Class Madness.MadAIAbilityTask_DSGlideAttack
// Size: 0x210 (Inherited: 0x90)
struct UMadAIAbilityTask_DSGlideAttack : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPlayAttackAnimation; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPlayAttackExitForwardAnimation; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPlayAttackExitBackwardAnimation; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayIntoDiveAnimation; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayDiveAnimation; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnPlayClimbAnimation; // 0x100(0x10)
	struct AActor* TargetActor; // 0x110(0x08)
	struct UMadDSHeightComponent* HeightComp; // 0x118(0x08)
	struct UBaseCharacterMovementComponent* MovementComp; // 0x120(0x08)
	struct UMadAnimReplication_DesertSciathan* AnimReplComp; // 0x128(0x08)
	char UnknownData_130[0xe0]; // 0x130(0xe0)

	void TaskDSGlideAttackDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_DSGlideAttack.TaskDSGlideAttackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_DSGlideAttack* CreateDSGlideAttack(struct UObject* WorldContextObject, struct AActor* TargetActor, float AttackAnimDistance, float DistanceBehindTarget, float Height, float Acceleration, float DiveAcceleration, float ClimbAcceleration, float TurnSpeed, float MaxSpeed, float MinSpeed, float ClimbGroundSpeed, float DiveSpeed, float ClimbSpeed, float PredictionTime, float PredictionDistance, bool bEndInGlide); // Function Madness.MadAIAbilityTask_DSGlideAttack.CreateDSGlideAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x153ddf0
	bool CanHitTargetWithGlideAttack(struct UMadAIGameplayAbility* OwningAbility, struct AActor* Target, float MinDistance, float MaxDistance, float MaxAngle, float MinSpeed, float MinHeight, bool bMustGlide); // Function Madness.MadAIAbilityTask_DSGlideAttack.CanHitTargetWithGlideAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x153d280
	void AnimationFinished(); // Function Madness.MadAIAbilityTask_DSGlideAttack.AnimationFinished // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x153d260
	void AnimationFailed(); // Function Madness.MadAIAbilityTask_DSGlideAttack.AnimationFailed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x153d240
};

// Class Madness.MadDataAsset_SFThrowProjectileVariants
// Size: 0x40 (Inherited: 0x30)
struct UMadDataAsset_SFThrowProjectileVariants : UDataAsset {
	struct TArray<struct FMadAI_SFThrowEntry> Variants; // 0x30(0x10)
};

// Class Madness.MadAIAbilityTask_FSThrowProjectile
// Size: 0x420 (Inherited: 0x90)
struct UMadAIAbilityTask_FSThrowProjectile : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyBegin; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyEnd; // 0xd0(0x10)
	char UnknownData_E0[0x340]; // 0xe0(0x340)

	struct UMadAIAbilityTask_FSThrowProjectile* ThrowSFProjectile(struct UObject* WorldContextObject, struct UFWAIWeaponComponent* WeaponComponent); // Function Madness.MadAIAbilityTask_FSThrowProjectile.ThrowSFProjectile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x153f950
	void TaskFSThrowProjectileNotifyDelegate__DelegateSignature(struct FName NotifyName); // DelegateFunction Madness.MadAIAbilityTask_FSThrowProjectile.TaskFSThrowProjectileNotifyDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void TaskFSThrowProjectileDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_FSThrowProjectile.TaskFSThrowProjectileDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void SpawnNextProjectile(); // Function Madness.MadAIAbilityTask_FSThrowProjectile.SpawnNextProjectile // (Final|Native|Protected) // @ game+0x153f930
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_FSThrowProjectile.OnMontageInterrupted // (Final|Native|Public) // @ game+0x153f4d0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_FSThrowProjectile.OnMontageEnded // (Final|Native|Public) // @ game+0x153f3a0
	void OnAbilityAnimNotifyEnd(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_FSThrowProjectile.OnAbilityAnimNotifyEnd // (Final|Native|Public) // @ game+0x153ec60
	void OnAbilityAnimNotifyBegin(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_FSThrowProjectile.OnAbilityAnimNotifyBegin // (Final|Native|Public) // @ game+0x153eb60
	bool CanThrowSFProjectile(struct UFWAIWeaponComponent* WeaponComponent, struct UMadDataAsset_SFThrowProjectileVariants* AnimVariants); // Function Madness.MadAIAbilityTask_FSThrowProjectile.CanThrowSFProjectile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x153d4b0
};

// Class Madness.FWSpaceWrappingDestinationProvider_SFThrowProjectile
// Size: 0x28 (Inherited: 0x28)
struct UFWSpaceWrappingDestinationProvider_SFThrowProjectile : UFWSpaceWrappingDestinationProvider {
};

// Class Madness.MadAIAbilityTask_IntervalTick
// Size: 0xb0 (Inherited: 0x90)
struct UMadAIAbilityTask_IntervalTick : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnTickTask; // 0x90(0x10)
	float TimerInterval; // 0xa0(0x04)
	float TimerRandomDeviation; // 0xa4(0x04)
	float TimerNextActivationTime; // 0xa8(0x04)
	char UnknownData_AC[0x4]; // 0xac(0x04)

	struct UMadAIAbilityTask_IntervalTick* IntervalTick(struct UMadAIGameplayAbility* OwningAbility, float InTimerInterval, float InTimerRandomDeviation); // Function Madness.MadAIAbilityTask_IntervalTick.IntervalTick // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1542150
};

// Class Madness.Mad_PAAnomalyEruptionDamage
// Size: 0x370 (Inherited: 0x2f0)
struct AMad_PAAnomalyEruptionDamage : AActor {
	struct UMadDamageType* DamageType; // 0x2f0(0x08)
	float DelayToStart; // 0x2f8(0x04)
	float DelayToEnd; // 0x2fc(0x04)
	struct FScalableFloat DamageDurationScale; // 0x300(0x20)
	struct FScalableFloat DamageIntervalScale; // 0x320(0x20)
	float ScaleMultiplier; // 0x340(0x04)
	char UnknownData_344[0x4]; // 0x344(0x04)
	struct AFWAIController* OwnerAI; // 0x348(0x08)
	struct TArray<struct FPAAnomalyEruption_OverlappingActors> OverlappingActors; // 0x350(0x10)
	char UnknownData_360[0x10]; // 0x360(0x10)

	void OnOverlapEnd(struct AActor* MyActor, struct AActor* OtherActor); // Function Madness.Mad_PAAnomalyEruptionDamage.OnOverlapEnd // (Final|Native|Protected) // @ game+0x1542eb0
	void OnOverlapBegin(struct AActor* MyActor, struct AActor* OtherActor); // Function Madness.Mad_PAAnomalyEruptionDamage.OnOverlapBegin // (Final|Native|Protected) // @ game+0x1542c70
	void OnDamagingStop(); // Function Madness.Mad_PAAnomalyEruptionDamage.OnDamagingStop // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnDamagingStart(); // Function Madness.Mad_PAAnomalyEruptionDamage.OnDamagingStart // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	float GetEffectLifeTime(); // Function Madness.Mad_PAAnomalyEruptionDamage.GetEffectLifeTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1542110
};

// Class Madness.Mad_PAAnomalyEruptionTrail
// Size: 0x3a8 (Inherited: 0x2f0)
struct AMad_PAAnomalyEruptionTrail : AActor {
	float Speed; // 0x2f0(0x04)
	char UnknownData_2F4[0x4]; // 0x2f4(0x04)
	struct AMad_PAAnomalyEruptionDamage* DamageActorClass; // 0x2f8(0x08)
	int32_t ExtraSpawnCount; // 0x300(0x04)
	float RadiusMin; // 0x304(0x04)
	float RadiusMax; // 0x308(0x04)
	float DeltaAngleMin; // 0x30c(0x04)
	float DeltaAngleMax; // 0x310(0x04)
	float DamageScaleDown; // 0x314(0x04)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bDamage : 1; // 0x318(0x01)
	char UnknownData_319[0x7]; // 0x319(0x07)
	struct UMadDamageType* DamageType; // 0x320(0x08)
	float ExtraLifeTime; // 0x328(0x04)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct FMulticastInlineDelegate OnStart; // 0x330(0x10)
	struct FMulticastInlineDelegate OnMoving; // 0x340(0x10)
	struct FMulticastInlineDelegate OnFinish; // 0x350(0x10)
	char UnknownData_360[0x4]; // 0x360(0x04)
	struct FVector Destination; // 0x364(0x0c)
	struct AFWAIController* OwnerAI; // 0x370(0x08)
	char UnknownData_378[0x30]; // 0x378(0x30)

	void PAAnomalyEruptionTrailDelegate__DelegateSignature(); // DelegateFunction Madness.Mad_PAAnomalyEruptionTrail.PAAnomalyEruptionTrailDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnOverlapBegin(struct AActor* MyActor, struct AActor* OtherActor); // Function Madness.Mad_PAAnomalyEruptionTrail.OnOverlapBegin // (Final|Native|Protected) // @ game+0x1542d30
	void OnArrived(); // Function Madness.Mad_PAAnomalyEruptionTrail.OnArrived // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	bool IsMoving(); // Function Madness.Mad_PAAnomalyEruptionTrail.IsMoving // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1542240
};

// Class Madness.MadAIAbilityTask_PAAnomalyEruption
// Size: 0x138 (Inherited: 0x90)
struct UMadAIAbilityTask_PAAnomalyEruption : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	char UnknownData_C0[0x50]; // 0xc0(0x50)
	struct TArray<struct AMad_PAAnomalyEruptionTrail*> Trails; // 0x110(0x10)
	char UnknownData_120[0x18]; // 0x120(0x18)

	void TaskPAAnomalyEruptionDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_PAAnomalyEruption.TaskPAAnomalyEruptionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_PAAnomalyEruption* PAAnomalyEruption(struct UObject* WorldContextObject, float MaxDistance, struct AMad_PAAnomalyEruptionTrail* EruptionTrailClass, struct FMontageAssetSelector Montage, float PredictionTime, float PredictionMaxDistance, struct FName StartBoneName, struct FName NotifySpawnName, struct FName NotifyMoveName); // Function Madness.MadAIAbilityTask_PAAnomalyEruption.PAAnomalyEruption // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1542f70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_PAAnomalyEruption.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x1542c30
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_PAAnomalyEruption.OnMontageEnded // (Final|Native|Protected) // @ game+0x15429c0
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_PAAnomalyEruption.OnAnimNotify // (Final|Native|Protected) // @ game+0x1542270
	bool CanUsePAAnomalyEruption(struct UMadAIGameplayAbility* OwningAbility, float MaxDistance); // Function Madness.MadAIAbilityTask_PAAnomalyEruption.CanUsePAAnomalyEruption // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1541e00
};

// Class Madness.Mad_PAAnomalySlashTrail
// Size: 0x350 (Inherited: 0x2f0)
struct AMad_PAAnomalySlashTrail : AActor {
	float Speed; // 0x2f0(0x04)
	float TurnSpeed; // 0x2f4(0x04)
	float ExtraLifeTime; // 0x2f8(0x04)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
	struct UMadDamageType* DamageType; // 0x300(0x08)
	char UnknownData_308[0x8]; // 0x308(0x08)
	struct AFWAIController* OwnerAI; // 0x310(0x08)
	struct APawn* TargetActor; // 0x318(0x08)
	char UnknownData_320[0x30]; // 0x320(0x30)

	void OnOverlapBegin(struct AActor* MyActor, struct AActor* OtherActor); // Function Madness.Mad_PAAnomalySlashTrail.OnOverlapBegin // (Final|Native|Protected) // @ game+0x1542df0
	void OnArrived(); // Function Madness.Mad_PAAnomalySlashTrail.OnArrived // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadAIAbilityTask_PAAnomalySlash
// Size: 0x120 (Inherited: 0x90)
struct UMadAIAbilityTask_PAAnomalySlash : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	char UnknownData_C0[0x10]; // 0xc0(0x10)
	struct UAnimMontage* MontageAsset; // 0xd0(0x08)
	char UnknownData_D8[0x48]; // 0xd8(0x48)

	void TaskPAAnomalySlashDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_PAAnomalySlash.TaskPAAnomalySlashDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_PAAnomalySlash* PAAnomalySlash(struct UObject* WorldContextObject, float MaxDistance, struct AMad_PAAnomalySlashTrail* SlashTrailClass, struct UAnimMontage* Montage, struct TArray<struct FPAAnomalySlash_MontageSection> MontageSections, struct FName StartBoneName, struct FName NotifyName, float PredictionTime, float PredictionDistance); // Function Madness.MadAIAbilityTask_PAAnomalySlash.PAAnomalySlash // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1543210
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_PAAnomalySlash.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x153f470
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_PAAnomalySlash.OnMontageEnded // (Final|Native|Protected) // @ game+0x1542a90
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_PAAnomalySlash.OnAnimNotify // (Final|Native|Protected) // @ game+0x1542370
	bool CanUsePAAnomalySlash(struct UMadAIGameplayAbility* OwningAbility, float MinDistance, float MaxDistance, float TestDuration); // Function Madness.MadAIAbilityTask_PAAnomalySlash.CanUsePAAnomalySlash // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1541ed0
};

// Class Madness.MadAIAbilityTask_PAMotherTouch
// Size: 0x118 (Inherited: 0x90)
struct UMadAIAbilityTask_PAMotherTouch : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	char UnknownData_C0[0x58]; // 0xc0(0x58)

	void TaskPAMotherTouchDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_PAMotherTouch.TaskPAMotherTouchDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_PAMotherTouch* PAMotherTouch(struct UObject* WorldContextObject, struct TArray<struct UGameplayEffect*> EffectsToApply, struct UFWAIArchetype* MinionArchetype, struct FMontageAssetSelector Montage, struct FName NotifyName); // Function Madness.MadAIAbilityTask_PAMotherTouch.PAMotherTouch // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x15434d0
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_PAMotherTouch.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x1526ed0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_PAMotherTouch.OnMontageEnded // (Final|Native|Protected) // @ game+0x1526e00
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_PAMotherTouch.OnAnimNotify // (Final|Native|Protected) // @ game+0x1542470
	bool CanUsePAMotherTouch(struct UMadAIGameplayAbility* OwningAbility, struct UFWAIArchetype* MinionArchetype, bool bIgnoreGland); // Function Madness.MadAIAbilityTask_PAMotherTouch.CanUsePAMotherTouch // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1542000
};

// Class Madness.MadAIAbilityTask_PerforateCharge
// Size: 0x150 (Inherited: 0x90)
struct UMadAIAbilityTask_PerforateCharge : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPlayChargeAnimation; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPlayAttackAnimation; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPlayHitAnimation; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayMissAnimation; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayAbortAnimation; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnBoom; // 0x100(0x10)
	struct AActor* TargetActor; // 0x110(0x08)
	char UnknownData_118[0x38]; // 0x118(0x38)

	void TaskPerforateCharge__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_PerforateCharge.TaskPerforateCharge__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_PerforateCharge* PerforateCharge(struct UObject* WorldContextObject, struct AActor* Target, struct FName BoomNotify, float MaxChargeDistance, float AttackMinDistance, float AttackMaxDistance, float AbortDistance, float AttackMaxAngle, float PredictionTime, float PredictionDistance, bool bSelectAttackTime, bool bEarlyAbortIfCantReachTarget, bool bAbortIfOutOfRange); // Function Madness.MadAIAbilityTask_PerforateCharge.PerforateCharge // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1543a00
	void OnDamageDone(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadAIAbilityTask_PerforateCharge.OnDamageDone // (Final|Native|Protected) // @ game+0x1542670
	void OnAnimNotify(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_PerforateCharge.OnAnimNotify // (Final|Native|Protected) // @ game+0x1542570
	bool CanHitTargetWithPerforateCharge(struct UMadAIGameplayAbility* OwningAbility, struct AActor* Target, float MinDistance, float MaxDistance, float MaxAngle, float PredictionTime, float PredictionDistance); // Function Madness.MadAIAbilityTask_PerforateCharge.CanHitTargetWithPerforateCharge // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1541b10
	void AnimationFinished(); // Function Madness.MadAIAbilityTask_PerforateCharge.AnimationFinished // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15418c0
	void AnimationFailed(enum class EPerforateChargeState FailedInState); // Function Madness.MadAIAbilityTask_PerforateCharge.AnimationFailed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1541840
};

// Class Madness.MadAIAbilityTask_PAPerforateCharge
// Size: 0x150 (Inherited: 0x150)
struct UMadAIAbilityTask_PAPerforateCharge : UMadAIAbilityTask_PerforateCharge {

	struct UMadAIAbilityTask_PAPerforateCharge* PAPerforateCharge(struct UObject* WorldContextObject, struct AActor* Target, struct FName BoomNotify, float MaxChargeDistance, float AttackMinDistance, float AttackMaxDistance, float AbortDistance, float AttackMaxAngle, float PredictionTime, float PredictionDistance, bool bSelectAttackTime, bool bEarlyAbortIfCantReachTarget); // Function Madness.MadAIAbilityTask_PAPerforateCharge.PAPerforateCharge // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15436c0
	bool CanHitTargetWithPAPerforateCharge(struct UMadAIGameplayAbility* OwningAbility, struct AActor* Target, float MinDistance, float MaxDistance, float MaxAngle, float PredictionTime, float PredictionDistance, bool bIgnoreGland); // Function Madness.MadAIAbilityTask_PAPerforateCharge.CanHitTargetWithPAPerforateCharge // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15418e0
};

// Class Madness.MadDataAsset_Dodges
// Size: 0x40 (Inherited: 0x30)
struct UMadDataAsset_Dodges : UDataAsset {
	struct TArray<struct FMadAI_SingleDodge> Variants; // 0x30(0x10)
};

// Class Madness.MadAIAbilityTask_PlayDodgeAnim
// Size: 0xf8 (Inherited: 0x90)
struct UMadAIAbilityTask_PlayDodgeAnim : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct UMadDataAsset_Dodges* AnimDataAsset; // 0xc0(0x08)
	char UnknownData_C8[0x30]; // 0xc8(0x30)

	void TaskPlayDodgeAnimDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_PlayDodgeAnim.TaskPlayDodgeAnimDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_PlayDodgeAnim* PlayDodgeAnim(struct UObject* WorldContextObject, struct UMadDataAsset_Dodges* AnimDataAsset, int32_t AssetIndex); // Function Madness.MadAIAbilityTask_PlayDodgeAnim.PlayDodgeAnim // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1543d90
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_PlayDodgeAnim.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x1542c50
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_PlayDodgeAnim.OnMontageEnded // (Final|Native|Protected) // @ game+0x1542b60
	bool CanPlayDodgeAnim(struct AActor* Target, struct UMadDataAsset_Dodges* AnimDataAsset, int32_t OutAnimIndex); // Function Madness.MadAIAbilityTask_PlayDodgeAnim.CanPlayDodgeAnim // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1541d00
};

// Class Madness.MadAIAbilityTask_RequestAISpawn
// Size: 0xd0 (Inherited: 0x90)
struct UMadAIAbilityTask_RequestAISpawn : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnAISpawn; // 0x90(0x10)
	char UnknownData_A0[0x30]; // 0xa0(0x30)

	struct UMadAIAbilityTask_RequestAISpawn* RequestAISpawn(struct UObject* WorldContextObject, struct AActor* Instigator, struct UFWAIArchetype* AIArchetype, struct FVector SpawnLocation, struct FRotator SpawnRotation, enum class ETeam SpawnTeam, bool bDisableCollision); // Function Madness.MadAIAbilityTask_RequestAISpawn.RequestAISpawn // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1543e80
};

// Class Madness.MadAIAbilityTask_RotateToFaceActor
// Size: 0xd8 (Inherited: 0x90)
struct UMadAIAbilityTask_RotateToFaceActor : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnCancelled; // 0x90(0x10)
	struct FMulticastInlineDelegate OnComplete; // 0xa0(0x10)
	struct AActor* TargetActor; // 0xb0(0x08)
	char UnknownData_B8[0x20]; // 0xb8(0x20)

	void TaskRotateToFaceDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_RotateToFaceActor.TaskRotateToFaceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadAIAbilityTask_RotateToFaceActor* RotateToFaceActor(struct UMadAIGameplayAbility* WorldContextObject, struct AActor* TargetActor, float Precision, float ConeAngle, bool UseControllerDesiredRotation); // Function Madness.MadAIAbilityTask_RotateToFaceActor.RotateToFaceActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154a780
};

// Class Madness.MadAIAbilityTask_RotateTowardActor
// Size: 0xa8 (Inherited: 0x90)
struct UMadAIAbilityTask_RotateTowardActor : UMadAIAbilityTask {
	struct AActor* TargetActor; // 0x90(0x08)
	char UnknownData_98[0x10]; // 0x98(0x10)

	struct UMadAIAbilityTask_RotateTowardActor* RotateTowardActor(struct UObject* WorldContextObject, struct AActor* TargetActor, float YawSpeed); // Function Madness.MadAIAbilityTask_RotateTowardActor.RotateTowardActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154a900
};

// Class Madness.MadAIAbilityTask_SciathanFlyByTarget
// Size: 0xc0 (Inherited: 0x90)
struct UMadAIAbilityTask_SciathanFlyByTarget : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnTaskFinished; // 0x90(0x10)
	char UnknownData_A0[0x8]; // 0xa0(0x08)
	struct AActor* Target; // 0xa8(0x08)
	char UnknownData_B0[0x10]; // 0xb0(0x10)

	struct UMadAIAbilityTask_SciathanFlyByTarget* SciathanFlyByTarget(struct UMadAIGameplayAbility* OwningAbility, struct AActor* TargetActor); // Function Madness.MadAIAbilityTask_SciathanFlyByTarget.SciathanFlyByTarget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154aa00
};

// Class Madness.MadAIAbilityTask_SMMeleeAttack
// Size: 0x138 (Inherited: 0x90)
struct UMadAIAbilityTask_SMMeleeAttack : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnAIAnimNotify; // 0x90(0x10)
	struct FMulticastInlineDelegate OnComplete; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyBegin; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyEnd; // 0xe0(0x10)
	char UnknownData_F0[0x8]; // 0xf0(0x08)
	struct AActor* TargetActor; // 0xf8(0x08)
	struct UMadDataAsset_SMMeleeAttacks* AnimDataAsset; // 0x100(0x08)
	char UnknownData_108[0x30]; // 0x108(0x30)

	void TaskSMMeleeAttackDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_SMMeleeAttack.TaskSMMeleeAttackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void TaskSMMeleeAttackAnimNotifyDelegate__DelegateSignature(struct UFWAnimNotify* AnimNotify, struct FName NotifyName); // DelegateFunction Madness.MadAIAbilityTask_SMMeleeAttack.TaskSMMeleeAttackAnimNotifyDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void TaskSMMeleeAttackAbilityNotifyDelegate__DelegateSignature(struct UMadAIMeleeAttack* MeleeAttack, struct FName NotifyName); // DelegateFunction Madness.MadAIAbilityTask_SMMeleeAttack.TaskSMMeleeAttackAbilityNotifyDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_SMMeleeAttack.OnMontageInterrupted // (Final|Native|Protected) // @ game+0x154a5e0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_SMMeleeAttack.OnMontageEnded // (Final|Native|Protected) // @ game+0x154a440
	void OnAnimNotifyEarlyExit(struct UFWAnimNotify* AnimNotify, struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_SMMeleeAttack.OnAnimNotifyEarlyExit // (Final|Native|Protected) // @ game+0x154a2f0
	void OnAbilityAnimNotifyEnd(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_SMMeleeAttack.OnAbilityAnimNotifyEnd // (Final|Native|Protected) // @ game+0x154a0f0
	void OnAbilityAnimNotifyBegin(struct FName NotifyNameIn, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_SMMeleeAttack.OnAbilityAnimNotifyBegin // (Final|Native|Protected) // @ game+0x1549ff0
	struct UMadAIAbilityTask_SMMeleeAttack* CreateSMMeleeAttack(struct UObject* WorldContextObject, struct AActor* TargetActor, struct UMadDataAsset_SMMeleeAttacks* AnimDataAsset); // Function Madness.MadAIAbilityTask_SMMeleeAttack.CreateSMMeleeAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15497f0
};

// Class Madness.MadDataAsset_ThrowSequentialProjectilesVariants
// Size: 0x48 (Inherited: 0x30)
struct UMadDataAsset_ThrowSequentialProjectilesVariants : UDataAsset {
	struct TArray<struct FMadAI_SequentialThrowEntry> Variants; // 0x30(0x10)
	float MaxAttackDistanceIncreased; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class Madness.MadAIAbilityTask_ThrowSequentialProjectiles
// Size: 0x110 (Inherited: 0x90)
struct UMadAIAbilityTask_ThrowSequentialProjectiles : UMadAIAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	char UnknownData_C0_0 : 7; // 0xc0(0x01)
	bool bDidMoveDuringTask : 1; // 0xc0(0x01)
	char UnknownData_C1[0x4f]; // 0xc1(0x4f)

	struct UMadAIAbilityTask_ThrowSequentialProjectiles* ThrowSequentialProjectiles(struct UObject* WorldContextObject, struct UFWAIWeaponComponent* WeaponComponent); // Function Madness.MadAIAbilityTask_ThrowSequentialProjectiles.ThrowSequentialProjectiles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154ab80
	void TaskThrowSequentialProjectilesDelegate__DelegateSignature(); // DelegateFunction Madness.MadAIAbilityTask_ThrowSequentialProjectiles.TaskThrowSequentialProjectilesDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnMontageInterrupted(); // Function Madness.MadAIAbilityTask_ThrowSequentialProjectiles.OnMontageInterrupted // (Final|Native|Public) // @ game+0x154a600
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadAIAbilityTask_ThrowSequentialProjectiles.OnMontageEnded // (Final|Native|Public) // @ game+0x154a510
	void OnAnimNotify(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAIAbilityTask_ThrowSequentialProjectiles.OnAnimNotify // (Final|Native|Public) // @ game+0x154a1f0
	bool CanThrowSequentialProjectiles(struct UFWAIWeaponComponent* WeaponComponent, struct UMadDataAsset_ThrowSequentialProjectilesVariants* AnimVariants, bool bCanUseHeavyVariant); // Function Madness.MadAIAbilityTask_ThrowSequentialProjectiles.CanThrowSequentialProjectiles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1549390
};

// Class Madness.FWSpaceWrappingDestinationProvider_ThrowProjectile
// Size: 0x28 (Inherited: 0x28)
struct UFWSpaceWrappingDestinationProvider_ThrowProjectile : UFWSpaceWrappingDestinationProvider {
};

// Class Madness.MadAIBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMadAIBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetHealthBarVisible(struct APawn* Pawn, bool bVisible); // Function Madness.MadAIBlueprintLibrary.SetHealthBarVisible // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154aac0
	void RestoreFullHealth(struct APawn* Pawn); // Function Madness.MadAIBlueprintLibrary.RestoreFullHealth // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x154a710
	void RemoveLooseGameplayTag(struct APawn* Pawn, struct FGameplayTagContainer Tags); // Function Madness.MadAIBlueprintLibrary.RemoveLooseGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x154a620
	struct FVector GetTargetingLocation(struct UAIPerceptionComponent* PerceptionComponent, struct AActor* Target); // Function Madness.MadAIBlueprintLibrary.GetTargetingLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1549f20
	bool GetRandomReachablePointInVolume(struct APawn* Pawn, struct FVector Centre, float Radius, struct AVolume* Volume, struct FVector ResultLocation, float RadiusMultipler, float ExtraRadius); // Function Madness.MadAIBlueprintLibrary.GetRandomReachablePointInVolume // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1549d10
	bool GetInterceptTime(float ShotSpeed, struct FVector StartPos, struct FVector TargetPos, struct FVector TargetVelocity, float InterceptTime); // Function Madness.MadAIBlueprintLibrary.GetInterceptTime // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1549b30
	float EvaluateRandomForLevel(struct APawn* Pawn, struct FScalableFloat Min, struct FScalableFloat Max); // Function Madness.MadAIBlueprintLibrary.EvaluateRandomForLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15499e0
	float EvaluateForLevel(struct APawn* Pawn, struct FScalableFloat ScalableFloat); // Function Madness.MadAIBlueprintLibrary.EvaluateForLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15498e0
	bool CheckIfProjectileArcSectionCollides(struct UObject* WorldContextObject, struct TArray<struct AActor*> IgnoreActors, struct FVector StartPos, struct FVector EndPos, struct FVector StartVelocity, float StartTime, float EndTime, float SphereRadius, struct AActor* HitActor, float DistanceToIgnorePawns, bool DoTraceToEndPos); // Function Madness.MadAIBlueprintLibrary.CheckIfProjectileArcSectionCollides // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1549480
	bool CanHitTargetUsingAIAbility(struct FGameplayTagContainer GameplayAbilityTag, struct ABaseCharacter* Owner, struct AActor* TargetActor, bool UseIdealYawRotationToTarget); // Function Madness.MadAIBlueprintLibrary.CanHitTargetUsingAIAbility // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1549200
	bool CanActivateAIAbility(struct FGameplayTagContainer GameplayAbilityTag, struct ABaseCharacter* Owner); // Function Madness.MadAIBlueprintLibrary.CanActivateAIAbility // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15490e0
	void AddLooseGameplayTag(struct APawn* Pawn, struct FGameplayTagContainer Tags); // Function Madness.MadAIBlueprintLibrary.AddLooseGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1548ff0
};

// Class Madness.MadAIRank_Common
// Size: 0x28 (Inherited: 0x28)
struct UMadAIRank_Common : UFWAIRank {
};

// Class Madness.MadAIRank_Elite
// Size: 0x28 (Inherited: 0x28)
struct UMadAIRank_Elite : UFWAIRank {
};

// Class Madness.MadAIRank_Leader
// Size: 0x28 (Inherited: 0x28)
struct UMadAIRank_Leader : UFWAIRank {
};

// Class Madness.MadAIRank_Boss
// Size: 0x28 (Inherited: 0x28)
struct UMadAIRank_Boss : UFWAIRank {
};

// Class Madness.MadAIFaction_Creature
// Size: 0x28 (Inherited: 0x28)
struct UMadAIFaction_Creature : UFWAIFaction {
};

// Class Madness.MadAIFaction_Ally
// Size: 0x28 (Inherited: 0x28)
struct UMadAIFaction_Ally : UFWAIFaction {
};

// Class Madness.MadAIArchetype_Ally
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Ally : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_TestNPC
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_TestNPC : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Rifleman
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Rifleman : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Shotgunner
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Shotgunner : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Sniper
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Sniper : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Berserker
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Berserker : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_RadioTelegraphist
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_RadioTelegraphist : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Perforo
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Perforo : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Hound
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Hound : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Lurker
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Lurker : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_SmallLurker
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_SmallLurker : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_LurkerTutorial
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_LurkerTutorial : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Crawler
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Crawler : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Sciathan
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Sciathan : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_SpaceCow
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_SpaceCow : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Captain
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Captain : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_CaptainRifleman
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_CaptainRifleman : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_CaptainShotgunner
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_CaptainShotgunner : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_CaptainSniper
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_CaptainSniper : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_CaptainBerserker
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_CaptainBerserker : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_CaptainHeavygunner
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_CaptainHeavygunner : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Veteran
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Veteran : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Altered
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Altered : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_AlphaPerforo
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_AlphaPerforo : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Ticks
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Ticks : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_SwarnTicks
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_SwarnTicks : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Insect
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Insect : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Boss01
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Boss01 : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_BossForest
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_BossForest : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_Boss02
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_Boss02 : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_VolcanoSpider
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_VolcanoSpider : UFWAIArchetype {
};

// Class Madness.MadAIArchetype_BossYagak
// Size: 0x28 (Inherited: 0x28)
struct UMadAIArchetype_BossYagak : UFWAIArchetype {
};

// Class Madness.MadAIComponent
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMadAIComponent : UFWAIComponent {

	struct AMadAI* GetMadController(); // Function Madness.MadAIComponent.GetMadController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e610
	struct AMadCharAI* GetCharacter(); // Function Madness.MadAIComponent.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x154e3c0
};

// Class Madness.MadAIDamageReactionComponent
// Size: 0x1e8 (Inherited: 0x1e0)
struct UMadAIDamageReactionComponent : UFWAIDamageReactionComponent {
	char UnknownData_1E0[0x8]; // 0x1e0(0x08)
};

// Class Madness.MadAIMeleeAttack
// Size: 0x88 (Inherited: 0x28)
struct UMadAIMeleeAttack : UObject {
	struct FName AttackName; // 0x28(0x08)
	struct FMontageAssetSelector Montage; // 0x30(0x20)
	char UnknownData_50_0 : 7; // 0x50(0x01)
	bool bCanBeFirstAttack : 1; // 0x50(0x01)
	char UnknownData_51_0 : 7; // 0x51(0x01)
	bool GlobalCoolDownFromAttackEnd : 1; // 0x51(0x01)
	char UnknownData_52_0 : 7; // 0x52(0x01)
	bool bDisableAttack : 1; // 0x52(0x01)
	char UnknownData_53[0x1]; // 0x53(0x01)
	float COOLDOWN; // 0x54(0x04)
	float GlobalCoolDown; // 0x58(0x04)
	float PredictionDuration; // 0x5c(0x04)
	float PredictionMaxDistance; // 0x60(0x04)
	char UnknownData_64[0x4]; // 0x64(0x04)
	struct TArray<struct UMadAIMeleeAttackCondition*> EnterConditions; // 0x68(0x10)
	struct TArray<struct FMadAINextMeleeAttack> NextAttacks; // 0x78(0x10)
};

// Class Madness.MadDataAsset_SMMeleeAttacks
// Size: 0x50 (Inherited: 0x30)
struct UMadDataAsset_SMMeleeAttacks : UDataAsset {
	struct TArray<struct UMadAIMeleeAttack*> Attacks; // 0x30(0x10)
	float MinDistanceToCheckSq; // 0x40(0x04)
	float MaxPredictionTime; // 0x44(0x04)
	float MaxPredictionDistance; // 0x48(0x04)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class Madness.MadAIMeleeAttackCondition
// Size: 0x30 (Inherited: 0x28)
struct UMadAIMeleeAttackCondition : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
};

// Class Madness.MadAIMeleeAttackCondition_BPBase
// Size: 0x30 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_BPBase : UMadAIMeleeAttackCondition {

	struct FVector PredictPosition(struct FMadAIMeleeAttackRuntime RunTime, enum class EMAPredictionMode PredictionMode, struct UMadAIMeleeAttack* Attack, struct AActor* Owner, struct AActor* Target); // Function Madness.MadAIMeleeAttackCondition_BPBase.PredictPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x154f2c0
	struct FString GetFailureString(struct FMadAIMeleeAttackRuntime RunTime, struct UMadAIMeleeAttack* Attack, struct AActor* Owner, struct AActor* Target); // Function Madness.MadAIMeleeAttackCondition_BPBase.GetFailureString // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x154e3f0
	bool EvalInt(enum class EAttackConditionRelation Relation, int32_t T1, int32_t T2); // Function Madness.MadAIMeleeAttackCondition_BPBase.EvalInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x154e130
	bool EvalFloat(enum class EAttackConditionRelation Relation, float T1, float T2); // Function Madness.MadAIMeleeAttackCondition_BPBase.EvalFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x154e030
	bool CanExecute(struct FMadAIMeleeAttackRuntime RunTime, struct UMadAIMeleeAttack* Attack, struct AActor* Owner, struct AActor* Target); // Function Madness.MadAIMeleeAttackCondition_BPBase.CanExecute // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x154db90
};

// Class Madness.MadAIMeleeAttackCondition_Distance
// Size: 0x40 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_Distance : UMadAIMeleeAttackCondition {
	float MinDistance; // 0x30(0x04)
	float MaxDistance; // 0x34(0x04)
	enum class EMAPredictionMode PredictionMode; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAIMeleeAttackCondition_Direction
// Size: 0x40 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_Direction : UMadAIMeleeAttackCondition {
	float Angle; // 0x30(0x04)
	float AngleRange; // 0x34(0x04)
	enum class EMAPredictionMode PredictionMode; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAIMeleeAttackCondition_DirectPath
// Size: 0x38 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_DirectPath : UMadAIMeleeAttackCondition {
	enum class EMAPredictionMode PredictionMode; // 0x30(0x01)
	char UnknownData_31[0x7]; // 0x31(0x07)
};

// Class Madness.MadAIMeleeAttackCondition_BlockedByOthers
// Size: 0x38 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_BlockedByOthers : UMadAIMeleeAttackCondition {
	enum class EMAPredictionMode PredictionMode; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	float SizeMultipler; // 0x34(0x04)
};

// Class Madness.MadAIMeleeAttackCondition_ChainLength
// Size: 0x38 (Inherited: 0x30)
struct UMadAIMeleeAttackCondition_ChainLength : UMadAIMeleeAttackCondition {
	enum class EAttackConditionRelation Relation; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	int32_t Value; // 0x34(0x04)
};

// Class Madness.MadAIMetrics
// Size: 0x58 (Inherited: 0x50)
struct UMadAIMetrics : UFWAIMetrics {
	enum class EFWDiscreteDistance MinCoverDistanceToTarget; // 0x50(0x01)
	enum class EFWDiscreteDistance MaxCoverDistanceToTarget; // 0x51(0x01)
	char UnknownData_52[0x6]; // 0x52(0x06)
};

// Class Madness.MadAIDataProvider_Metrics
// Size: 0x30 (Inherited: 0x28)
struct UMadAIDataProvider_Metrics : UAIDataProvider {
	float MinBestCoverDistanceToTarget; // 0x28(0x04)
	float MaxBestCoverDistanceToTarget; // 0x2c(0x04)
};

// Class Madness.MadAIRes_AnomalyShieldDestroyed
// Size: 0x150 (Inherited: 0x70)
struct UMadAIRes_AnomalyShieldDestroyed : UFWAIResponse {
	struct FScalableFloat HealthPercentToDestroyScale; // 0x70(0x20)
	struct FGameplayTagContainer AnomalyShieldTag; // 0x90(0x20)
	struct FMontageAssetSelector DestroyedMontage; // 0xb0(0x20)
	struct FName MeshColorParameter; // 0xd0(0x08)
	struct FVector MinBrightGlowColor; // 0xd8(0x0c)
	struct FVector MaxBrightGlowColor; // 0xe4(0x0c)
	struct FVector BlinkBrightGlowColor; // 0xf0(0x0c)
	char UnknownData_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct UGameplayEffect*> RemoveEffectsOnDestroy; // 0x100(0x10)
	struct TArray<struct UGameplayEffect*> ApplyEffectsOnDestroy; // 0x110(0x10)
	float BlinkOnDelay; // 0x120(0x04)
	float BlinkOffDelay; // 0x124(0x04)
	char UnknownData_128_0 : 7; // 0x128(0x01)
	bool bRequestSprintMovementOnDestroy : 1; // 0x128(0x01)
	char UnknownData_129[0x7]; // 0x129(0x07)
	struct UMadAbilitySystemComponent* AbilityComp; // 0x130(0x08)
	char UnknownData_138[0x18]; // 0x138(0x18)
};

// Class Madness.MadAIRes_AvoidEnemyProjectile
// Size: 0x98 (Inherited: 0x70)
struct UMadAIRes_AvoidEnemyProjectile : UFWAIResponse {
	char UnknownData_70[0x28]; // 0x70(0x28)

	void OnProjectile(struct FVector EventOrigin, struct AProjectile* ProjectileClass, struct FName Info, struct FVector Direction); // Function Madness.MadAIRes_AvoidEnemyProjectile.OnProjectile // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x154f140
};

// Class Madness.MadAIRes_ChangeCoverAfterDamage
// Size: 0x118 (Inherited: 0x70)
struct UMadAIRes_ChangeCoverAfterDamage : UFWAIResponse {
	char UnknownData_70[0x1c]; // 0x70(0x1c)
	float ChangeCoverAfterDamageQueryRepeatTime; // 0x8c(0x04)
	struct FScalableFloat HealthPercentScale; // 0x90(0x20)
	struct FScalableFloat DamageDurationScale; // 0xb0(0x20)
	float MinTimeInCurrentCover; // 0xd0(0x04)
	char UnknownData_D4_0 : 7; // 0xd4(0x01)
	bool bCanMoveWhileTargeted : 1; // 0xd4(0x01)
	char UnknownData_D5_0 : 7; // 0xd5(0x01)
	bool bCanMoveMidAbility : 1; // 0xd5(0x01)
	char UnknownData_D6[0x42]; // 0xd6(0x42)
};

// Class Madness.MadAIRes_Damage
// Size: 0x90 (Inherited: 0x80)
struct UMadAIRes_Damage : UFWAIRes_Damage {
	char UnknownData_80[0x10]; // 0x80(0x10)
};

// Class Madness.MadAITask_DSChangeHeight
// Size: 0xb8 (Inherited: 0x98)
struct UMadAITask_DSChangeHeight : UFWAITask {
	struct UMadDSHeightComponent* HeightComponent; // 0x98(0x08)
	char UnknownData_A0[0x18]; // 0xa0(0x18)
};

// Class Madness.MadAITask_DSFallToGround
// Size: 0xe0 (Inherited: 0xb8)
struct UMadAITask_DSFallToGround : UMadAITask_DSChangeHeight {
	struct FMulticastInlineDelegate OnReachedGround; // 0xb8(0x10)
	char UnknownData_C8[0x18]; // 0xc8(0x18)
};

// Class Madness.MadAIRes_DSFallToGround
// Size: 0x178 (Inherited: 0x70)
struct UMadAIRes_DSFallToGround : UFWAIResponse {
	struct FScalableFloat Duration1PlayerScale; // 0x70(0x20)
	struct FScalableFloat DamageFraction1PlayerScale; // 0x90(0x20)
	struct FScalableFloat Duration2PlayerScale; // 0xb0(0x20)
	struct FScalableFloat DamageFraction2PlayerScale; // 0xd0(0x20)
	struct FScalableFloat Duration3PlayerScale; // 0xf0(0x20)
	struct FScalableFloat DamageFraction3PlayerScale; // 0x110(0x20)
	float COOLDOWN; // 0x130(0x04)
	float FallSpeed; // 0x134(0x04)
	float FallAcceleration; // 0x138(0x04)
	float OnGroundDuration; // 0x13c(0x04)
	struct FSoftObjectPath FallMontage; // 0x140(0x18)
	struct FName FallStart; // 0x158(0x08)
	struct UAITask_PlayAnimation* PlayAnimTask; // 0x160(0x08)
	char UnknownData_168[0x10]; // 0x168(0x10)

	void OnReachedGround(); // Function Madness.MadAIRes_DSFallToGround.OnReachedGround // (Final|Native|Protected) // @ game+0x154f2a0
	void OnAITaskEnded(struct UFWAITask* Task, enum class EFWAITaskResult Result); // Function Madness.MadAIRes_DSFallToGround.OnAITaskEnded // (Final|Native|Protected) // @ game+0x154efc0
};

// Class Madness.MadAIRes_DSGlideEvade
// Size: 0xf8 (Inherited: 0x70)
struct UMadAIRes_DSGlideEvade : UFWAIResponse {
	float MinDistanceToDestination; // 0x70(0x04)
	float MinDistanceToCurrentTarget; // 0x74(0x04)
	float MaxAngleToCurrentTarget; // 0x78(0x04)
	float MaxSpeedWhileEvading; // 0x7c(0x04)
	float MinTimeBetweenEvades; // 0x80(0x04)
	float MaxTimeToBeInChain; // 0x84(0x04)
	float MinTimeBetweenChains; // 0x88(0x04)
	int32_t ChainLength; // 0x8c(0x04)
	float MaxTimeSinceThreatenedToStartEvade; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)
	struct FGameplayTagContainer GameplayTags; // 0x98(0x20)
	struct FSoftObjectPath AvoidGlideMontage; // 0xb8(0x18)
	struct TArray<struct FName> AvoidGlideRightSections; // 0xd0(0x10)
	struct TArray<struct FName> AvoidGlideLeftSections; // 0xe0(0x10)
	char UnknownData_F0_0 : 7; // 0xf0(0x01)
	bool bEvadeOnAiming : 1; // 0xf0(0x01)
	char UnknownData_F1[0x7]; // 0xf1(0x07)

	void OnAITaskEnded(struct UFWAITask* Task, enum class EFWAITaskResult Result); // Function Madness.MadAIRes_DSGlideEvade.OnAITaskEnded // (Final|Native|Protected) // @ game+0x154f080
};

// Class Madness.MadAIRes_HeavyDamage
// Size: 0x70 (Inherited: 0x70)
struct UMadAIRes_HeavyDamage : UFWAIResponse {
};

// Class Madness.MadAIRes_LeaveCover
// Size: 0x78 (Inherited: 0x78)
struct UMadAIRes_LeaveCover : UFWAIRes_AbilityTag {
};

// Class Madness.MadAIRes_Lurker_Damage
// Size: 0x98 (Inherited: 0x70)
struct UMadAIRes_Lurker_Damage : UFWAIResponse {
	struct AMadCharAI_Lurker* MyCharacter; // 0x70(0x08)
	struct AMadAI_LurkerAlpha* AIController; // 0x78(0x08)
	char UnknownData_80[0x18]; // 0x80(0x18)
};

// Class Madness.MadAIRes_RecoverFromSkill
// Size: 0x78 (Inherited: 0x78)
struct UMadAIRes_RecoverFromSkill : UFWAIRes_AbilityTag {
};

// Class Madness.MadAIRes_Shotgunner_Desert_HeavyDamage
// Size: 0x70 (Inherited: 0x70)
struct UMadAIRes_Shotgunner_Desert_HeavyDamage : UFWAIResponse {
};

// Class Madness.MadAIRes_Shotgunner_HeavyDamage
// Size: 0x70 (Inherited: 0x70)
struct UMadAIRes_Shotgunner_HeavyDamage : UFWAIResponse {
};

// Class Madness.MadAIRes_WakeUpNeighbor
// Size: 0x70 (Inherited: 0x70)
struct UMadAIRes_WakeUpNeighbor : UFWAIResponse {
};

// Class Madness.MadGrenade
// Size: 0x5d0 (Inherited: 0x5c0)
struct AMadGrenade : AMadProjectile {
	struct FMulticastInlineDelegate GrenadeExploded; // 0x5c0(0x10)
};

// Class Madness.MadAirstrikeFlare
// Size: 0x690 (Inherited: 0x5d0)
struct AMadAirstrikeFlare : AMadGrenade {
	float RotationSpeed; // 0x5d0(0x04)
	float FlareDeactivationDelayInSeconds; // 0x5d4(0x04)
	struct UParticleSystemComponent* FlareParticleComp; // 0x5d8(0x08)
	struct UAudioComponent* AudioComponent; // 0x5e0(0x08)
	struct USoundCue* OnHitSoundCue; // 0x5e8(0x08)
	float AudioLoopFadeOutDuration; // 0x5f0(0x04)
	float FirstSpawnDelay; // 0x5f4(0x04)
	float TimeBetweenMissileSpawnsMin; // 0x5f8(0x04)
	float TimeBetweenMissileSpawnsMax; // 0x5fc(0x04)
	float MissileRadius; // 0x600(0x04)
	float MissilesSpawnOffsetMin; // 0x604(0x04)
	float MissilesSpawnOffsetMax; // 0x608(0x04)
	uint32_t MissileCount; // 0x60c(0x04)
	struct AProjectile* MissileClass; // 0x610(0x08)
	struct UBase3DWidgetComponent* HazardZoneWidget; // 0x618(0x08)
	char UnknownData_620[0x70]; // 0x620(0x70)

	void SpawnMissile(); // Function Madness.MadAirstrikeFlare.SpawnMissile // (Final|Native|Private) // @ game+0x1553bf0
	void OnFlareFuseBurned(); // Function Madness.MadAirstrikeFlare.OnFlareFuseBurned // (Final|Native|Private) // @ game+0x1553310
	void HandleSoundsOnHit(struct FVector HitLocation); // Function Madness.MadAirstrikeFlare.HandleSoundsOnHit // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0x1552b50
};

// Class Madness.MadAISquad_Lurker
// Size: 0x1c8 (Inherited: 0x1a8)
struct UMadAISquad_Lurker : UFWAISquad {
	struct TArray<struct AActor*> LurkerChargeTargets; // 0x1a8(0x10)
	struct TArray<struct AActor*> TargetedActors; // 0x1b8(0x10)

	void RemoveTargetedCharacterFromTheList(struct AActor* HostileActor); // Function Madness.MadAISquad_Lurker.RemoveTargetedCharacterFromTheList // (Final|Native|Public|BlueprintCallable) // @ game+0x1553850
	bool IsFreeTargetAvailable(struct AActor* AIController); // Function Madness.MadAISquad_Lurker.IsFreeTargetAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1552da0
	bool IsActorTargeted(struct AActor* Actor); // Function Madness.MadAISquad_Lurker.IsActorTargeted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1552c60
	bool IsActorOnToChargeAtList(struct AActor* TargetActor); // Function Madness.MadAISquad_Lurker.IsActorOnToChargeAtList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1552bd0
	int32_t GetNumberOfTargetedActors(); // Function Madness.MadAISquad_Lurker.GetNumberOfTargetedActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1552b30
	struct AActor* GetNewTarget(struct AActor* AIController); // Function Madness.MadAISquad_Lurker.GetNewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1552aa0
	void AddActorToChargeAtList(bool bAdd, struct AActor* TargetActor); // Function Madness.MadAISquad_Lurker.AddActorToChargeAtList // (Final|Native|Public|BlueprintCallable) // @ game+0x15529c0
};

// Class Madness.FWAISemaphoreGroupClass_Advance
// Size: 0x30 (Inherited: 0x30)
struct UFWAISemaphoreGroupClass_Advance : UFWAISemaphoreGroupClass {
};

// Class Madness.FWAISemaphoreGroupClass_Grenade
// Size: 0x30 (Inherited: 0x30)
struct UFWAISemaphoreGroupClass_Grenade : UFWAISemaphoreGroupClass {
};

// Class Madness.MadAISemaphoreGroupClass_SniperFireTickets
// Size: 0x30 (Inherited: 0x30)
struct UMadAISemaphoreGroupClass_SniperFireTickets : UFWAISemaphoreGroupClass {
};

// Class Madness.MadAISemaphoreGroupClass_MeleeAttack
// Size: 0x30 (Inherited: 0x30)
struct UMadAISemaphoreGroupClass_MeleeAttack : UFWAISemaphoreGroupClass {
};

// Class Madness.MadAISemaphoreGroupClass_BerserkerMoveToTarget
// Size: 0x30 (Inherited: 0x30)
struct UMadAISemaphoreGroupClass_BerserkerMoveToTarget : UFWAISemaphoreGroupClass {
};

// Class Madness.MadAISemaphoreGroupClass_SniperChangeSlot
// Size: 0x30 (Inherited: 0x30)
struct UMadAISemaphoreGroupClass_SniperChangeSlot : UFWAISemaphoreGroupClass {
};

// Class Madness.MadAISystem
// Size: 0x518 (Inherited: 0x408)
struct UMadAISystem : UFWAISystem {
	struct FString DefaultWssTweaks; // 0x408(0x10)
	char UnknownData_418[0x38]; // 0x418(0x38)
	struct TArray<struct AMadWanderingFlame*> SpawnedWanderingFlames; // 0x450(0x10)
	struct UCurveTable* SemaphoresCurveTable; // 0x460(0x08)
	struct UCurveTable* ChallengeSemaphoresCurveTable; // 0x468(0x08)
	char UnknownData_470[0x68]; // 0x470(0x68)
	struct TArray<struct UMadCoverBoxComponent*> AllCoverBox; // 0x4d8(0x10)
	struct TArray<struct UMadStaticNavModifierBoxComponent*> AllNavModBox; // 0x4e8(0x10)
	struct TArray<struct AMadNavModVolume*> AllNavModVolumes; // 0x4f8(0x10)
	char UnknownData_508[0x10]; // 0x508(0x10)

	void SetHasActiveAura(struct UObject* WorldContextObject, bool bValue); // Function Madness.MadAISystem.SetHasActiveAura // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1553ab0
	void OnWssOverridesDataTableReceived(bool bSuccess, struct UDataTable* Table, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadAISystem.OnWssOverridesDataTableReceived // (Final|Native|Private) // @ game+0x1553710
	void OnRegionDifficultyDataTableReceived(bool bSuccess, struct UDataTable* Table, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadAISystem.OnRegionDifficultyDataTableReceived // (Final|Native|Private) // @ game+0x15535b0
	void OnEventDataTableReceived(bool bSuccess, struct UDataTable* Table, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadAISystem.OnEventDataTableReceived // (Final|Native|Private) // @ game+0x15531d0
	bool IsAnyAuraActive(struct UObject* WorldContextObject); // Function Madness.MadAISystem.IsAnyAuraActive // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1552d20
	void DisplayBiom(); // Function Madness.MadAISystem.DisplayBiom // (Exec|Native|Public) // @ game+0x1552a80
};

// Class Madness.MadAITask_ChangeCoverSlot
// Size: 0xa0 (Inherited: 0x98)
struct UMadAITask_ChangeCoverSlot : UFWAITask {
	struct UEnvQuery* QueryTemplate; // 0x98(0x08)
};

// Class Madness.MadAITask_ClimbCover
// Size: 0x128 (Inherited: 0x128)
struct UMadAITask_ClimbCover : UFWAITask_MantleOverCover {
};

// Class Madness.MadAITask_DesertShotgunner_ShieldActivation
// Size: 0xa0 (Inherited: 0x98)
struct UMadAITask_DesertShotgunner_ShieldActivation : UFWAITask {
	struct UAnimMontage* MontageAsset; // 0x98(0x08)
};

// Class Madness.MadAITask_DSGlideEvade
// Size: 0x130 (Inherited: 0xf0)
struct UMadAITask_DSGlideEvade : UAITask_PlayAnimation {
	char UnknownData_F0[0x30]; // 0xf0(0x30)
	struct USkeletalMeshComponent* MyMeshComp; // 0x120(0x08)
	struct UMadPathFollowingComponent_DesertSciathan* PathFollowerComp; // 0x128(0x08)

	void NotifyEndReceived(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAITask_DSGlideEvade.NotifyEndReceived // (Final|Native|Protected) // @ game+0x1552f30
	void NotifyBeginReceived(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadAITask_DSGlideEvade.NotifyBeginReceived // (Final|Native|Protected) // @ game+0x1552e30
};

// Class Madness.MadAITask_Jump
// Size: 0x138 (Inherited: 0x138)
struct UMadAITask_Jump : UFWAITask_Jump {
};

// Class Madness.MadAITask_MantleOverCover
// Size: 0x128 (Inherited: 0x128)
struct UMadAITask_MantleOverCover : UFWAITask_MantleOverCover {
};

// Class Madness.MadAITask_RotateRequest
// Size: 0x98 (Inherited: 0x98)
struct UMadAITask_RotateRequest : UFWAITask {
};

// Class Madness.MadAITask_RunAway
// Size: 0xc0 (Inherited: 0x98)
struct UMadAITask_RunAway : UFWAITask {
	char UnknownData_98[0x28]; // 0x98(0x28)
};

// Class Madness.MadAITask_ScriptedGoto
// Size: 0xd8 (Inherited: 0x98)
struct UMadAITask_ScriptedGoto : UFWAITask {
	char UnknownData_98[0x30]; // 0x98(0x30)
	struct AActor* GoalActor; // 0xc8(0x08)
	char UnknownData_D0[0x8]; // 0xd0(0x08)

	struct UMadAITask_ScriptedGoto* ScriptedGoTo(struct AAIController* Controller, struct FCoverSlotInfo CoverSlotInfo, struct FVector GoalLocation, struct AActor* GoalActor, enum class EMovementMood NewMood, bool bEquipWeapon); // Function Madness.MadAITask_ScriptedGoto.ScriptedGoTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x15538d0
};

// Class Madness.MadAITask_SniperPeekAction
// Size: 0x130 (Inherited: 0x130)
struct UMadAITask_SniperPeekAction : UFWAITask_PeekAction {
};

// Class Madness.MadBackpackComponent
// Size: 0x1110 (Inherited: 0xe40)
struct UMadBackpackComponent : UFWBackpackComponent {
	struct UParticleSystem* SmokeParticle; // 0xe38(0x08)
	struct FVector ParticleRelativeLocation; // 0xe40(0x0c)
	struct FRotator ParticleRelativeRotation; // 0xe4c(0x0c)
	struct FVector SmokeParticleScaleMin; // 0xe58(0x0c)
	struct FVector SmokeParticleScaleMax; // 0xe64(0x0c)
	int32_t ParticleScaleChangeStepsNum; // 0xe70(0x04)
	struct USoundBase* SmokeSound; // 0xe78(0x08)
	struct UAnimMontage* ExplosionAnim; // 0xe80(0x08)
	struct UMadDamageType* BackpackSelfExplosionDT; // 0xe88(0x08)
	struct UMaterial* BackpackDamagedMaterial; // 0xe90(0x08)
	struct FString CurveTableRowName; // 0xe98(0x10)
	struct UCurveTable* CurveTable; // 0xea8(0x08)
	struct FGameplayTagContainer GameplayTags; // 0xeb0(0x20)
	struct FTakeHitInfo LastHitInfo; // 0xed0(0x200)
	char UnknownData_10D4[0x4]; // 0x10d4(0x04)
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x10d8(0x08)
	struct UAudioComponent* AudioComponent; // 0x10e0(0x08)
	char UnknownData_10E8_0 : 7; // 0x10e8(0x01)
	bool bExplosionHandled : 1; // 0x10e8(0x01)
	char UnknownData_10E9[0x27]; // 0x10e9(0x27)

	void OnRep_Explosion(); // Function Madness.MadBackpackComponent.OnRep_Explosion // (Final|Native|Private) // @ game+0x15735f0
	void OnAnimNotify(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadBackpackComponent.OnAnimNotify // (Native|Protected) // @ game+0x1572ff0
};

// Class Madness.MadAlphaPerforoBackpackComponent
// Size: 0x1120 (Inherited: 0x1110)
struct UMadAlphaPerforoBackpackComponent : UMadBackpackComponent {
	struct FGameplayTag AbilityTag; // 0x1110(0x08)
	struct USkeletalMesh* DestroyedSkeletalMesh; // 0x1118(0x08)
};

// Class Madness.MadItem
// Size: 0x4c0 (Inherited: 0x300)
struct AMadItem : AInventoryItem {
	struct USceneComponent* Scene; // 0x300(0x08)
	struct FGuid BackendId; // 0x308(0x10)
	struct FMadItemProperties Properties; // 0x318(0xa0)
	struct TArray<enum class EMadItemSlot> PossibleEquipmentSlots; // 0x3b8(0x10)
	struct FWeakObjectPtr<struct AMadInventory> MyMadInventory; // 0x3c8(0x08)
	char UnknownData_3D0_0 : 7; // 0x3d0(0x01)
	bool bWasPickedUp : 1; // 0x3d0(0x01)
	char UnknownData_3D1[0xc7]; // 0x3d1(0xc7)
	struct FMadEnhanceMods EnhanceMods; // 0x498(0x10)
	int32_t ImproveCounter; // 0x4a8(0x04)
	int32_t ChangeModCounter; // 0x4ac(0x04)
	int32_t ChangeConfigVariantCounter; // 0x4b0(0x04)
	int32_t LevelCounter; // 0x4b4(0x04)
	struct FName Paint; // 0x4b8(0x08)

	void ServerSetSkin(struct FName InSkinName); // Function Madness.MadItem.ServerSetSkin // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657d50
	void ServerSetRecent(bool bRecent); // Function Madness.MadItem.ServerSetRecent // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657cc0
	void ServerSelectEnhanceMod(int32_t ModID); // Function Madness.MadItem.ServerSelectEnhanceMod // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657c30
	void ServerPaint(struct FName PaintName); // Function Madness.MadItem.ServerPaint // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657ba0
	void ServerLevel(); // Function Madness.MadItem.ServerLevel // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da3d0
	void ServerImprove(int32_t AttributeId); // Function Madness.MadItem.ServerImprove // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657b10
	void ServerEnhance(); // Function Madness.MadItem.ServerEnhance // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657af0
	void ServerChangeModByName(int32_t SlotID, struct FName AvailableModName); // Function Madness.MadItem.ServerChangeModByName // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657a20
	void ServerChangeMod(int32_t SlotID, int32_t AvailableModId); // Function Madness.MadItem.ServerChangeMod // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1657960
	void ServerChangeConfigVariant(struct FName ConfigVariantName); // Function Madness.MadItem.ServerChangeConfigVariant // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da630
	struct TMap<struct FName, int32_t> RollDismantleYield(); // Function Madness.MadItem.RollDismantleYield // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1657750
	void OnRep_Paint(); // Function Madness.MadItem.OnRep_Paint // (Native|Protected) // @ game+0x16574c0
	void OnRep_LevelCounter(); // Function Madness.MadItem.OnRep_LevelCounter // (Final|Native|Protected) // @ game+0x16574a0
	void OnRep_ImproveCounter(); // Function Madness.MadItem.OnRep_ImproveCounter // (Final|Native|Protected) // @ game+0x1657480
	void OnRep_EnhanceMods(); // Function Madness.MadItem.OnRep_EnhanceMods // (Final|Native|Public) // @ game+0x1657460
	void OnRep_ChangeModCounter(); // Function Madness.MadItem.OnRep_ChangeModCounter // (Final|Native|Protected) // @ game+0x1657440
	void OnRep_ChangeConfigVariantCounter(); // Function Madness.MadItem.OnRep_ChangeConfigVariantCounter // (Final|Native|Protected) // @ game+0x1657420
	bool IsScrappable(); // Function Madness.MadItem.IsScrappable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16565d0
	bool IsRecent(); // Function Madness.MadItem.IsRecent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656580
	enum class EMadItemType GetType(); // Function Madness.MadItem.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16564a0
	void GetTextName(struct FText OutName); // Function Madness.MadItem.GetTextName // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16563d0
	struct FMadItemSkillData GetSkillData(); // Function Madness.MadItem.GetSkillData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656350
	struct FMadItemSaveData GetSaveData(); // Function Madness.MadItem.GetSaveData // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656290
	float GetRefinement(); // Function Madness.MadItem.GetRefinement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656260
	int32_t GetRating(); // Function Madness.MadItem.GetRating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656240
	enum class EMadItemRarity GetRarity(); // Function Madness.MadItem.GetRarity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1656220
	struct FMadCraftingModUIData GetModUIData(struct UMadSkillData* Mod, int32_t ItemLevel); // Function Madness.MadItem.GetModUIData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1656120
	void GetLoadedIcon(struct AMadPlayerCharacter* Observer, struct FDelegate IconLoaded); // Function Madness.MadItem.GetLoadedIcon // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1655fd0
	int32_t GetLevel(); // Function Madness.MadItem.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655e50
	struct FName GetKeyName(); // Function Madness.MadItem.GetKeyName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655e10
	struct FMadItemSaveData GetImprovePreview(int32_t AttributeId); // Function Madness.MadItem.GetImprovePreview // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655c40
	struct FString GetIconPath(struct AMadPlayerCharacter* Observer); // Function Madness.MadItem.GetIconPath // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655b60
	struct UTexture2D* GetIcon(struct AMadPlayerCharacter* Observer); // Function Madness.MadItem.GetIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655ac0
	struct FString GetFullName(); // Function Madness.MadItem.GetFullName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655a70
	int32_t GetFirepowerOrArmor(); // Function Madness.MadItem.GetFirepowerOrArmor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655a40
	struct FText GetDescription(); // Function Madness.MadItem.GetDescription // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16558d0
	enum class EMadItemSlot GetCurrentTargetEquipmentSlot(struct AMadInventory* ExternalInventory); // Function Madness.MadItem.GetCurrentTargetEquipmentSlot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655830
	struct FName GetCurrentSkin(); // Function Madness.MadItem.GetCurrentSkin // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16557f0
	struct FName GetCurrentPaint(); // Function Madness.MadItem.GetCurrentPaint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16557d0
	struct TArray<struct FMadAnomalyCrystal> GetCrystals(); // Function Madness.MadItem.GetCrystals // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655750
	struct FMadCraftingModUIData GetCraftingModUIData(int32_t ModSlotId); // Function Madness.MadItem.GetCraftingModUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655680
	struct FMadCraftingConfigVariantUIData GetCraftingConfigVariantUIData(); // Function Madness.MadItem.GetCraftingConfigVariantUIData // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655580
	struct FName GetConfigVariantName(); // Function Madness.MadItem.GetConfigVariantName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655540
	struct TArray<struct FMadAttribute> GetAttributes(); // Function Madness.MadItem.GetAttributes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1655430
	struct TArray<struct FMadCraftingModsTierUIData> DebugGetCraftingModsUIData(int32_t ModSlotId); // Function Madness.MadItem.DebugGetCraftingModsUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16552f0
	bool CanLevel(bool bCheckCost); // Function Madness.MadItem.CanLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16551a0
	bool CanImprove(int32_t AttributeId, bool bCheckCost); // Function Madness.MadItem.CanImprove // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1654fe0
	bool CanEnhance(bool bCheckCost); // Function Madness.MadItem.CanEnhance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1654f50
	struct FMadCraftingModAvailability CanChangeMod(struct FName AvailableModName, bool bCheckCost); // Function Madness.MadItem.CanChangeMod // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1654e10
	struct FMadCraftingConfigVariantAvailability CanChangeConfigVariant(struct FName ConfigVariantName, bool bCheckCost); // Function Madness.MadItem.CanChangeConfigVariant // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1654d20
};

// Class Madness.MadAmmo
// Size: 0x4c0 (Inherited: 0x4c0)
struct AMadAmmo : AMadItem {

	struct AMadAmmo* SpawnAmmo(struct UObject* WorldContextObject); // Function Madness.MadAmmo.SpawnAmmo // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1553b70
};

// Class Madness.MadAmmoChest
// Size: 0x340 (Inherited: 0x2f0)
struct AMadAmmoChest : AActor {
	struct USceneComponent* Scene; // 0x2f0(0x08)
	struct USkeletalMeshComponent* ChestMesh; // 0x2f8(0x08)
	struct UAnimMontage* CharAnim; // 0x300(0x08)
	struct UAnimMontage* ChestAnim; // 0x308(0x08)
	struct ULocalInteractionComponent* LocalInteractionComponent; // 0x310(0x08)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bCheckPlayerInArea : 1; // 0x318(0x01)
	char UnknownData_319[0x7]; // 0x319(0x07)
	struct AVolume* AreaVolume; // 0x320(0x08)
	char UnknownData_328_0 : 7; // 0x328(0x01)
	bool bShowMinimapIconOnPlayerEnterArea : 1; // 0x328(0x01)
	char UnknownData_329[0xf]; // 0x329(0x0f)
	struct UMinimapNodeComponent* CachedMinimapNodeComp; // 0x338(0x08)

	void OnOpen(); // Function Madness.MadAmmoChest.OnOpen // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnInteractionNotify(struct ABaseCharacter* InteractingPawn, struct ULocalInteractionComponent* InteractedWith, struct FName NotifyName); // Function Madness.MadAmmoChest.OnInteractionNotify // (Final|Native|Protected) // @ game+0x15534b0
	void OnInteractionAnimStarted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadAmmoChest.OnInteractionAnimStarted // (Final|Native|Protected) // @ game+0x15533f0
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadAmmoChest.OnInteracted // (Final|Native|Protected) // @ game+0x1553330
	void OnAreaEndOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadAmmoChest.OnAreaEndOverlap // (Final|Native|Protected) // @ game+0x1553110
	void OnAreaBeginOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadAmmoChest.OnAreaBeginOverlap // (Final|Native|Protected) // @ game+0x1553050
	void OnAnimationEnded(); // Function Madness.MadAmmoChest.OnAnimationEnded // (Final|Native|Protected) // @ game+0x1553030
};

// Class Madness.MadAngryStatusVisualComponent
// Size: 0x1b0 (Inherited: 0x180)
struct UMadAngryStatusVisualComponent : UActorComponent {
	struct FVector DefaultEmissiveValue; // 0x180(0x0c)
	struct FVector AngryEmissiveValue; // 0x18c(0x0c)
	struct FName EmissiveParamName; // 0x198(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x1a0(0x08)
	char bIsAngry : 1; // 0x1a8(0x01)
	char UnknownData_1A8_1 : 7; // 0x1a8(0x01)
	char UnknownData_1A9[0x7]; // 0x1a9(0x07)

	void OnRep_IsAngry(); // Function Madness.MadAngryStatusVisualComponent.OnRep_IsAngry // (Final|Native|Protected) // @ game+0x15536f0
};

// Class Madness.MadAnimationGlobals
// Size: 0x38 (Inherited: 0x30)
struct UMadAnimationGlobals : UDataAsset {
	struct UWeaponEquipAnimData* WeaponEquips; // 0x30(0x08)
};

// Class Madness.MadAnimationProxyDataPlayer
// Size: 0xc0 (Inherited: 0x28)
struct UMadAnimationProxyDataPlayer : UBaseAnimProxyData {
	float MoveForwardSpeed; // 0x28(0x04)
	float MoveRightSpeed; // 0x2c(0x04)
	float MoveSpeed; // 0x30(0x04)
	float MoveAngle; // 0x34(0x04)
	enum class EPlayerMovementSpeed MoveSpeedType; // 0x38(0x01)
	enum class ECoverMovementDirection CoverFacing; // 0x39(0x01)
	char UnknownData_3A_0 : 7; // 0x3a(0x01)
	bool bStrafing : 1; // 0x3a(0x01)
	char UnknownData_3B_0 : 7; // 0x3b(0x01)
	bool bBackward : 1; // 0x3b(0x01)
	float SideArcStrength; // 0x3c(0x04)
	char UnknownData_40_0 : 7; // 0x40(0x01)
	bool bInCombat : 1; // 0x40(0x01)
	char UnknownData_41_0 : 7; // 0x41(0x01)
	bool bNoWeapon : 1; // 0x41(0x01)
	char UnknownData_42_0 : 7; // 0x42(0x01)
	bool bTargeting : 1; // 0x42(0x01)
	char UnknownData_43_0 : 7; // 0x43(0x01)
	bool bWantsAndCanFire : 1; // 0x43(0x01)
	char UnknownData_44_0 : 7; // 0x44(0x01)
	bool bFiring : 1; // 0x44(0x01)
	enum class EWeaponState WeaponState; // 0x45(0x01)
	enum class ECombatState CombatState; // 0x46(0x01)
	char UnknownData_47_0 : 7; // 0x47(0x01)
	bool IsWeaponPostFiringDelayActive : 1; // 0x47(0x01)
	char UnknownData_48_0 : 7; // 0x48(0x01)
	bool bCharacterWantedToFireRecently : 1; // 0x48(0x01)
	char UnknownData_49_0 : 7; // 0x49(0x01)
	bool bDisableLooktAtCurveActive : 1; // 0x49(0x01)
	enum class EMadAimOffsetType AimOffsetType; // 0x4a(0x01)
	char UnknownData_4B[0x1]; // 0x4b(0x01)
	float GripMode; // 0x4c(0x04)
	float GroundIKMultiplierAlpha; // 0x50(0x04)
	float Slope; // 0x54(0x04)
	struct FVector2D Aim; // 0x58(0x08)
	struct FVector2D HeadAimOffset; // 0x60(0x08)
	float AimAlpha; // 0x68(0x04)
	char UnknownData_6C_0 : 7; // 0x6c(0x01)
	bool bShouldKeepFiringAimOffset : 1; // 0x6c(0x01)
	char UnknownData_6D_0 : 7; // 0x6d(0x01)
	bool bShouldKeepIdleAimOffset : 1; // 0x6d(0x01)
	char UnknownData_6E_0 : 7; // 0x6e(0x01)
	bool bShouldResetWeaponFiredRecently : 1; // 0x6e(0x01)
	char UnknownData_6F[0x1]; // 0x6f(0x01)
	float ScriptedLookAtAlpha; // 0x70(0x04)
	struct FVector ScriptedLookAtLocation; // 0x74(0x0c)
	struct FVector LocationInDirectionToCrosshair; // 0x80(0x0c)
	float PhysicalVelocity; // 0x8c(0x04)
	float MoveActionAngle; // 0x90(0x04)
	float MoveActionProgress; // 0x94(0x04)
	enum class None MoveActionSeed; // 0x98(0x01)
	enum class EPlayerMoveAction MoveAction; // 0x99(0x01)
	enum class EPlayerLocomotionState LocomotionState; // 0x9a(0x01)
	char UnknownData_9B_0 : 7; // 0x9b(0x01)
	bool bIsFalling : 1; // 0x9b(0x01)
	float FallingInitialZ; // 0x9c(0x04)
	float FallingMaxZDelta; // 0xa0(0x04)
	float FallingForceRatio; // 0xa4(0x04)
	char UnknownData_A8_0 : 7; // 0xa8(0x01)
	bool bIsSliding : 1; // 0xa8(0x01)
	char UnknownData_A9[0x3]; // 0xa9(0x03)
	float FallingForceRatioSliding; // 0xac(0x04)
	enum class EMadGender CharacterGender; // 0xb0(0x01)
	char UnknownData_B1[0xf]; // 0xb1(0x0f)

	bool WantsToMove(); // Function Madness.MadAnimationProxyDataPlayer.WantsToMove // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1553c10
};

// Class Madness.MadAnimationProxyDataPlayerCover
// Size: 0xd8 (Inherited: 0xc0)
struct UMadAnimationProxyDataPlayerCover : UMadAnimationProxyDataPlayer {
	char UnknownData_C0_0 : 7; // 0xc0(0x01)
	bool bInCover : 1; // 0xc0(0x01)
	enum class ECoverSlotType CoverHeight; // 0xc1(0x01)
	enum class ECoverMovementDirection WeaponAttachment; // 0xc2(0x01)
	enum class ECoverSlotPeekType CoverPeekType; // 0xc3(0x01)
	char UnknownData_C4_0 : 7; // 0xc4(0x01)
	bool bIsCoverPeeking : 1; // 0xc4(0x01)
	char UnknownData_C5_0 : 7; // 0xc5(0x01)
	bool bInBoundary : 1; // 0xc5(0x01)
	char UnknownData_C6_0 : 7; // 0xc6(0x01)
	bool bWantsToSprintOrRollOut : 1; // 0xc6(0x01)
	char UnknownData_C7_0 : 7; // 0xc7(0x01)
	bool bSprintingToCover : 1; // 0xc7(0x01)
	enum class ECoverToCoverMoveType CoverToCoverMoveType; // 0xc8(0x01)
	char UnknownData_C9[0x3]; // 0xc9(0x03)
	float DistanceToCover; // 0xcc(0x04)
	char UnknownData_D0_0 : 7; // 0xd0(0x01)
	bool bShouldLimitAimPitch : 1; // 0xd0(0x01)
	enum class ECoverMovementDirection LastWeaponUsageCoverDirection; // 0xd1(0x01)
	char UnknownData_D2[0x6]; // 0xd2(0x06)
};

// Class Madness.MadAnimInstance_AIBase
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMadAnimInstance_AIBase : UAnimInstance {
	char UnknownData_2C0[0x20]; // 0x2c0(0x20)

	void RegisterGameplayTagHandler(struct FGameplayTag Tag); // Function Madness.MadAnimInstance_AIBase.RegisterGameplayTagHandler // (Native|Protected|BlueprintCallable) // @ game+0x155a6f0
	void K2_RegisterGameplayTags(); // Function Madness.MadAnimInstance_AIBase.K2_RegisterGameplayTags // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnTagChanged(struct FGameplayTag InGameplayTag, int32_t InCount, bool WasTagRemoved); // Function Madness.MadAnimInstance_AIBase.K2_OnTagChanged // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	bool HasAnimatingAbility(); // Function Madness.MadAnimInstance_AIBase.HasAnimatingAbility // (Final|Native|Protected|BlueprintCallable) // @ game+0x155a570
};

// Class Madness.MadAnimInstance_AntFarm
// Size: 0xb20 (Inherited: 0xb10)
struct UMadAnimInstance_AntFarm : UPcfAnimInstance {
	enum class EIKAttachmentType IKAttachmentType; // 0xb10(0x01)
	char UnknownData_B11[0x3]; // 0xb11(0x03)
	float IKWeight; // 0xb14(0x04)
	float PartialAnimationWeight; // 0xb18(0x04)
	char bEnableFootIKLock : 1; // 0xb1c(0x01)
	char bEnableIKAttachmentForNPCs : 1; // 0xb1c(0x01)
	char bCanUseAimLocation : 1; // 0xb1c(0x01)
	char UnknownData_B1C_3 : 5; // 0xb1c(0x01)
	enum class EPcfLocomotionMovement CachedLocomotionState; // 0xb1d(0x01)
	char UnknownData_B1E[0x2]; // 0xb1e(0x02)
};

// Class Madness.MadAnimInstance_AntFarmSimple
// Size: 0x3e0 (Inherited: 0x3b0)
struct UMadAnimInstance_AntFarmSimple : UAnimInstanceWithLateral {
	struct UAnimSequenceBase* AntFarmActiveAnim; // 0x3a8(0x08)
	struct UAnimSequenceBase* AntFarmReactionAnim; // 0x3b0(0x08)
	float AntFarmActiveAnimStartPos; // 0x3b8(0x04)
	struct FVector AimLocation; // 0x3bc(0x0c)
	char UnknownData_3D0_0 : 7; // 0x3d0(0x01)
	bool bEnableAimOffset : 1; // 0x3c8(0x01)
	bool bReactionAnimIsPlaying : 1; // 0x3c9(0x01)
	bool bEnableIKAttachmentForNPCs : 1; // 0x3ca(0x01)
	enum class EIKAttachmentType IKAttachmentType; // 0x3cb(0x01)
	float IKWeight; // 0x3cc(0x04)
	bool bResetFlag : 1; // 0x3d0(0x01)
	char UnknownData_3D6[0xa]; // 0x3d6(0x0a)

	void SetReactionAnimIsPlaying(bool bIsPlaying); // Function Madness.MadAnimInstance_AntFarmSimple.SetReactionAnimIsPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x155a9b0
	void SetAntFarmReactionAnimation(struct UAnimSequenceBase* AntFarmAnim); // Function Madness.MadAnimInstance_AntFarmSimple.SetAntFarmReactionAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x155a880
	void SetAntFarmActiveAnimStartPos(float Pos); // Function Madness.MadAnimInstance_AntFarmSimple.SetAntFarmActiveAnimStartPos // (Final|Native|Public|BlueprintCallable) // @ game+0x155a800
	void SetActiveAntFarmAnimation(struct UAnimSequenceBase* AntFarmAnim); // Function Madness.MadAnimInstance_AntFarmSimple.SetActiveAntFarmAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x155a780
	struct UAnimSequenceBase* GetAntFarmReactionAnimation(); // Function Madness.MadAnimInstance_AntFarmSimple.GetAntFarmReactionAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a2a0
	struct UAnimSequenceBase* GetActiveAntFarmAnimation(); // Function Madness.MadAnimInstance_AntFarmSimple.GetActiveAntFarmAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a270
};

// Class Madness.MadAnimInstance_ConvoyTruck
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMadAnimInstance_ConvoyTruck : UAnimInstance {
	float TimeSeconds; // 0x2c0(0x04)
	char UnknownData_2C4[0xc]; // 0x2c4(0x0c)

	float Oscillate(float InputTime, float CycleTime, float Amplitude, float InitialPhase); // Function Madness.MadAnimInstance_ConvoyTruck.Oscillate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a5a0
};

// Class Madness.MadAnimInstance_CrawlerW
// Size: 0x2e0 (Inherited: 0x2e0)
struct UMadAnimInstance_CrawlerW : UMadAnimInstance_AIBase {
	float RootBoneCorrectionOffset; // 0x2d8(0x04)

	bool GetDotFromForward(struct FVector FocalPoint, float DotToFocal); // Function Madness.MadAnimInstance_CrawlerW.GetDotFromForward // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a2d0
};

// Class Madness.MadAnimInstance_CustomBipedal
// Size: 0x390 (Inherited: 0x2e0)
struct UMadAnimInstance_CustomBipedal : UMadAnimInstance_AIBase {
	struct UAnimSequenceBase* IdleAnimCombatRun; // 0x2d8(0x08)
	struct UAnimMontage* TurnInPlace[0x9]; // 0x2e0(0x48)
	struct UAnimMontage* StartMovement[0x9]; // 0x328(0x48)
	struct UBlendSpace* MovementLoopCombatRun[0x4]; // 0x370(0x20)

	struct UAnimMontage* GetTurnInPlace(enum class EDirectionalMontage Direction); // Function Madness.MadAnimInstance_CustomBipedal.GetTurnInPlace // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a4e0
	struct UBlendSpace* GetMovementLoop(int32_t MovementLoopIndex); // Function Madness.MadAnimInstance_CustomBipedal.GetMovementLoop // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a450
	struct UAnimMontage* GetGetStartMovement(enum class EDirectionalMontage Direction); // Function Madness.MadAnimInstance_CustomBipedal.GetGetStartMovement // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x155a3c0
};

// Class Madness.MadAnimReplication_DesertSciathan
// Size: 0x290 (Inherited: 0x260)
struct UMadAnimReplication_DesertSciathan : UPCFAnimReplication {
	char UnknownData_260_0 : 7; // 0x260(0x01)
	bool bIsGliding : 1; // 0x260(0x01)
	char UnknownData_261_0 : 7; // 0x261(0x01)
	bool bIsGlideDiving : 1; // 0x261(0x01)
	char UnknownData_262_0 : 7; // 0x262(0x01)
	bool bIsOnGround : 1; // 0x262(0x01)
	char UnknownData_263[0x1]; // 0x263(0x01)
	float GlideDiveHeightFraction; // 0x264(0x04)
	struct FRotator OverrideRotation; // 0x268(0x0c)
	struct FVector FocalPoint; // 0x274(0x0c)
	struct FVector CurrentPathDestination; // 0x280(0x0c)
	char UnknownData_28C[0x4]; // 0x28c(0x04)
};

// Class Madness.MadAnimInstance_DesertSciathan
// Size: 0xb60 (Inherited: 0xb10)
struct UMadAnimInstance_DesertSciathan : UPcfAnimInstance {
	char UnknownData_B10_0 : 7; // 0xb10(0x01)
	bool bIsGliding : 1; // 0xb10(0x01)
	char UnknownData_B11_0 : 7; // 0xb11(0x01)
	bool bIsOnGround : 1; // 0xb11(0x01)
	char UnknownData_B12[0x2]; // 0xb12(0x02)
	struct FRotator OverrideRotationSpeed; // 0xb14(0x0c)
	struct FRotator OverrideRotation; // 0xb20(0x0c)
	struct FVector FocalPoint; // 0xb2c(0x0c)
	struct FVector CurrentPathDestination; // 0xb38(0x0c)
	float MaxGlideRollAngle; // 0xb44(0x04)
	float MaxYawDifferenceToMaxRoll; // 0xb48(0x04)
	float RollChangeSpeed; // 0xb4c(0x04)
	float GlideRoll; // 0xb50(0x04)
	float GlideDiveHeightFraction; // 0xb54(0x04)
	float AdditiveReactionWeight; // 0xb58(0x04)
	char UnknownData_B5C_0 : 7; // 0xb5c(0x01)
	bool bIsGlideDiving : 1; // 0xb5c(0x01)
	enum class None DamageTakenReactionMin; // 0xb5d(0x01)
	enum class None DamageTakenReactionMax; // 0xb5e(0x01)
	enum class None DamageTakenReaction; // 0xb5f(0x01)

	void SetRandomDamageTakenReaction(); // Function Madness.MadAnimInstance_DesertSciathan.SetRandomDamageTakenReaction // (Final|Native|Public|BlueprintCallable) // @ game+0x155a990
};

// Class Madness.MadAnimInstance_EnemyWithFacial
// Size: 0xb40 (Inherited: 0xb10)
struct UMadAnimInstance_EnemyWithFacial : UPcfAnimInstance {
	char UnknownData_B10[0x8]; // 0xb10(0x08)
	struct UDNAContext* DNAContext; // 0xb18(0x08)
	char UnknownData_B20[0x20]; // 0xb20(0x20)
};

// Class Madness.MadAnimInstance_Lurker
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMadAnimInstance_Lurker : UAnimInstance {
	float RootBoneCorrectionOffset; // 0x2c0(0x04)
	char UnknownData_2C4[0xc]; // 0x2c4(0x0c)
};

// Class Madness.MadAnimInstance_LurkerBase
// Size: 0xb20 (Inherited: 0xb10)
struct UMadAnimInstance_LurkerBase : UPcfAnimInstance {
	float FootIKEnableBlendSpeed; // 0xb10(0x04)
	float AimOffsetEnableBlendSpeed; // 0xb14(0x04)
	float FootLockIKWeight; // 0xb18(0x04)
	float AimOffsetWeight; // 0xb1c(0x04)
};

// Class Madness.MadAnimReplication_SoldierBase
// Size: 0x268 (Inherited: 0x260)
struct UMadAnimReplication_SoldierBase : UPCFAnimReplication {
	struct UFWAIWeaponComponent* CachedWeaponComponent; // 0x260(0x08)
};

// Class Madness.MadAnimInstance_SoldierBase
// Size: 0xb90 (Inherited: 0xb40)
struct UMadAnimInstance_SoldierBase : UMadAnimInstance_EnemyWithFacial {
	struct FVector ActiveWeaponScale; // 0xb38(0x0c)
	struct FVector ActiveWeaponGripPosition; // 0xb44(0x0c)
	float CummulativeRecoilAdditiveWeight; // 0xb50(0x04)
	float CummulativeRecoilAdditiveWeightMax; // 0xb54(0x04)
	float CummulativeRecoilAdditiveBlendInSpeed; // 0xb58(0x04)
	float CummulativeRecoilAdditiveBlendOutSpeed; // 0xb5c(0x04)
	float AimOffsetBlendSpeed; // 0xb60(0x04)
	float AimOffsetWeight; // 0xb64(0x04)
	float FootLockBlendSpeed; // 0xb68(0x04)
	float MinFootLockWeight; // 0xb6c(0x04)
	float FootLockWeight; // 0xb70(0x04)
	struct FName CummulativeRecoilSlotName; // 0xb74(0x08)
	struct FName WeaponGripSocketName; // 0xb7c(0x08)
	enum class EFWAIWeaponSlot ActiveWeaponSlot; // 0xb84(0x01)
	char UnknownData_B8D_0 : 7; // 0xb8d(0x01)
	bool bShouldPlayCummulativeAdditveRecoil : 1; // 0xb85(0x01)
	bool bCummulativeAdditveRecoilIsPlaying : 1; // 0xb86(0x01)
	bool bAnyCoverActive : 1; // 0xb87(0x01)
	bool bShouldApplyWeaponGrip : 1; // 0xb88(0x01)
	bool bShouldUseFaceAnimation : 1; // 0xb89(0x01)
	char UnknownData_B8E[0x2]; // 0xb8e(0x02)
};

// Class Madness.MadAnimInstance_Tick
// Size: 0x2e0 (Inherited: 0x2e0)
struct UMadAnimInstance_Tick : UMadAnimInstance_AIBase {
	float PitchUpBlend; // 0x2d8(0x04)
	float PitchDownBlend; // 0x2dc(0x04)
};

// Class Madness.MadAnimInstance_VolcanoBoss
// Size: 0x300 (Inherited: 0x2c0)
struct UMadAnimInstance_VolcanoBoss : UAnimInstance {
	struct FVector LookAtTarget; // 0x2c0(0x0c)
	float LookAtClampAngle; // 0x2cc(0x04)
	char UnknownData_2D0_0 : 7; // 0x2d0(0x01)
	bool bUseIKForMeleeAttack : 1; // 0x2d0(0x01)
	char UnknownData_2D1_0 : 7; // 0x2d1(0x01)
	bool bWalkCycleTransitionOpen : 1; // 0x2d1(0x01)
	char UnknownData_2D2[0x2]; // 0x2d2(0x02)
	struct FVector MeleeAttackIKLocationLeft; // 0x2d4(0x0c)
	struct FVector MeleeAttackIKLocationRight; // 0x2e0(0x0c)
	struct FVector IKinemaSpineTargetLocation; // 0x2ec(0x0c)
	float CurrentTurnDegrees; // 0x2f8(0x04)
	float LegOffset; // 0x2fc(0x04)
};

// Class Madness.MadAnimReplication_WarzoneSciathan
// Size: 0x290 (Inherited: 0x290)
struct UMadAnimReplication_WarzoneSciathan : UMadAnimReplication_DesertSciathan {
};

// Class Madness.MadAnimInstance_WarzoneSciathan
// Size: 0xb60 (Inherited: 0xb60)
struct UMadAnimInstance_WarzoneSciathan : UMadAnimInstance_DesertSciathan {
};

// Class Madness.MadAnimInstance_Yagak
// Size: 0xba0 (Inherited: 0xb10)
struct UMadAnimInstance_Yagak : UPcfAnimInstance {
	char UnknownData_B10[0x8]; // 0xb10(0x08)
	char UnknownData_B18_0 : 7; // 0xb18(0x01)
	bool bInGroundedMode : 1; // 0xb18(0x01)
	char UnknownData_B19_0 : 7; // 0xb19(0x01)
	bool bIsRunning : 1; // 0xb19(0x01)
	char UnknownData_B1A_0 : 7; // 0xb1a(0x01)
	bool bHoldingChains : 1; // 0xb1a(0x01)
	char UnknownData_B1B_0 : 7; // 0xb1b(0x01)
	bool bCleaverIdleIsBackhandPose : 1; // 0xb1b(0x01)
	char UnknownData_B1C_0 : 7; // 0xb1c(0x01)
	bool bCleaverInFinisherPose : 1; // 0xb1c(0x01)
	char UnknownData_B1D_0 : 7; // 0xb1d(0x01)
	bool bInChainsCombo : 1; // 0xb1d(0x01)
	char UnknownData_B1E_0 : 7; // 0xb1e(0x01)
	bool bInChainsComboLeftPose : 1; // 0xb1e(0x01)
	char UnknownData_B1F_0 : 7; // 0xb1f(0x01)
	bool bSwordIdleIsBackHandPose : 1; // 0xb1f(0x01)
	char UnknownData_B20_0 : 7; // 0xb20(0x01)
	bool bSwordInFinisherPose : 1; // 0xb20(0x01)
	char UnknownData_B21_0 : 7; // 0xb21(0x01)
	bool bHeadLookAtEnabled : 1; // 0xb21(0x01)
	char UnknownData_B22[0x2]; // 0xb22(0x02)
	float LocomotionRunningRightValue; // 0xb24(0x04)
	float LocomotionRunningForwardValue; // 0xb28(0x04)
	float LeftChainLocationAlpha; // 0xb2c(0x04)
	float LookAtClampAngle; // 0xb30(0x04)
	struct FVector ChainRightAttachedLocation; // 0xb34(0x0c)
	struct FVector ChainLeftAttachedLocation; // 0xb40(0x0c)
	struct FVector LookAtTargetLocation; // 0xb4c(0x0c)
	struct FGameplayTag ChainsSnappedGameplayTag; // 0xb58(0x08)
	struct FGameplayTag CleaverIdleGameplayTag; // 0xb60(0x08)
	struct FGameplayTag CleaverFinisherGameplayTag; // 0xb68(0x08)
	struct FGameplayTag InChainsGameplayTag; // 0xb70(0x08)
	struct FGameplayTag InChainsLeftGameplayTag; // 0xb78(0x08)
	struct FVector ChainStretchTargetLocation; // 0xb80(0x0c)
	char UnknownData_B8C_0 : 7; // 0xb8c(0x01)
	bool bShouldStretchChain : 1; // 0xb8c(0x01)
	char UnknownData_B8D_0 : 7; // 0xb8d(0x01)
	bool bShouldAttachLeftChain : 1; // 0xb8d(0x01)
	char UnknownData_B8E_0 : 7; // 0xb8e(0x01)
	bool bShouldAttachRightChain : 1; // 0xb8e(0x01)
	char UnknownData_B8F_0 : 7; // 0xb8f(0x01)
	bool bChainsSnapped : 1; // 0xb8f(0x01)
	char UnknownData_B90_0 : 7; // 0xb90(0x01)
	bool bIsGroundHit : 1; // 0xb90(0x01)
	char UnknownData_B91[0x3]; // 0xb91(0x03)
	struct FVector ChainSnapTargetLocationWS; // 0xb94(0x0c)

	void SetChainStretchTargetLocation(struct FVector ChainStretchTargetLocationInWorldSpace); // Function Madness.MadAnimInstance_Yagak.SetChainStretchTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x155a900
	void EnableRightChainAttach(bool bEnable); // Function Madness.MadAnimInstance_Yagak.EnableRightChainAttach // (Final|Native|Public|BlueprintCallable) // @ game+0x155a1e0
	void EnableLeftChainAttach(bool bEnable); // Function Madness.MadAnimInstance_Yagak.EnableLeftChainAttach // (Final|Native|Public|BlueprintCallable) // @ game+0x155a150
	void EnableChainStretch(bool bEnable); // Function Madness.MadAnimInstance_Yagak.EnableChainStretch // (Final|Native|Public|BlueprintCallable) // @ game+0x155a0c0
};

// Class Madness.MadAnimMetaData_ControllerRot
// Size: 0x30 (Inherited: 0x28)
struct UMadAnimMetaData_ControllerRot : UAnimMetaData {
	char UnknownData_28_0 : 7; // 0x28(0x01)
	bool bShouldUseControllerRotation : 1; // 0x28(0x01)
	char UnknownData_29[0x7]; // 0x29(0x07)
};

// Class Madness.MadAnimNotify_EnableRagdoll
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotify_EnableRagdoll : UAnimNotify {
};

// Class Madness.MadAnimNotify_DropInventory
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotify_DropInventory : UAnimNotify {
};

// Class Madness.MadAnimNotify_MoverAction
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotify_MoverAction : UAnimNotify {
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bMoverOpen : 1; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAnimNotify_Ability
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotify_Ability : UAnimNotify {
	struct FName AbilityNotifyName; // 0x38(0x08)
};

// Class Madness.MadAnimNotifyState_Ability
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotifyState_Ability : UAnimNotifyState {
	struct FName AbilityNotifyName; // 0x38(0x08)
};

// Class Madness.MadAnimNotify_SmartObject
// Size: 0x48 (Inherited: 0x48)
struct UMadAnimNotify_SmartObject : UAnimNotify_SmartObject {
};

// Class Madness.MadAnimNotify_Chatter
// Size: 0x50 (Inherited: 0x38)
struct UMadAnimNotify_Chatter : UAnimNotify {
	struct FNameWrapper ChatterType; // 0x38(0x10)
	float VolumeMultiplier; // 0x48(0x04)
	float PitchMultiplier; // 0x4c(0x04)
};

// Class Madness.MadAnimNotify_AbilityTargeting
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotify_AbilityTargeting : UAnimNotify {
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bEnableTargeting : 1; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAnimNotifyState_AnimProxy
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotifyState_AnimProxy : UAnimNotifyState {
	struct FMadAnimProxyOverrideData ProxyOverride; // 0x38(0x03)
	char UnknownData_3B[0x5]; // 0x3b(0x05)
};

// Class Madness.MadAnimNotifyState_ForceFeedback
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotifyState_ForceFeedback : UAnimNotifyState {
	struct FName ForceFeedbackID; // 0x38(0x08)
};

// Class Madness.MadAnimNotifyState_Drilling
// Size: 0x50 (Inherited: 0x40)
struct UMadAnimNotifyState_Drilling : UMadAnimNotifyState_ForceFeedback {
	struct USkeletalMesh* DrillMesh; // 0x40(0x08)
	struct UAnimSequenceBase* DrillAnim; // 0x48(0x08)
};

// Class Madness.MadAnimNotifyState_StaticMesh
// Size: 0xd0 (Inherited: 0x38)
struct UMadAnimNotifyState_StaticMesh : UAnimNotifyState {
	struct UMadMeshShaderEffect* StartShaderEffect; // 0x38(0x08)
	struct UStaticMesh* Mesh; // 0x40(0x08)
	struct FName AttachmentSocket; // 0x48(0x08)
	struct FTransform MeshTransform; // 0x50(0x30)
	struct TMap<struct USkeletalMeshComponent*, struct FMadAnimNotify_StaticMeshDatas> MeshComponents; // 0x80(0x50)
};

// Class Madness.MadAnimNotifyState_Sound
// Size: 0x98 (Inherited: 0x38)
struct UMadAnimNotifyState_Sound : UAnimNotifyState {
	struct USoundCue* SoundToPlay; // 0x38(0x08)
	struct FName AttachmentSocket; // 0x40(0x08)
	struct TMap<struct USkeletalMeshComponent*, struct UAudioComponent*> AudioComponents; // 0x48(0x50)
};

// Class Madness.MadAnimNotify_Reload
// Size: 0x58 (Inherited: 0x38)
struct UMadAnimNotify_Reload : UAnimNotify {
	enum class EMadReloadAnimNotifyType Type; // 0x38(0x01)
	char UnknownData_39_0 : 7; // 0x39(0x01)
	bool bIsUsedForTwoGuns : 1; // 0x39(0x01)
	char UnknownData_3A_0 : 7; // 0x3a(0x01)
	bool bIsSecondClip : 1; // 0x3a(0x01)
	char UnknownData_3B[0x1]; // 0x3b(0x01)
	struct FVector AdditionalRelativeLocation; // 0x3c(0x0c)
	struct FVector RelativeRotation; // 0x48(0x0c)
	char UnknownData_54[0x4]; // 0x54(0x04)
};

// Class Madness.MadAnimNotify_Equip
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotify_Equip : UAnimNotify {
	enum class EMadEquipAnimNotifyType Type; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAnimNotify_StopGroup
// Size: 0x48 (Inherited: 0x38)
struct UMadAnimNotify_StopGroup : UAnimNotify {
	struct FName GroupName; // 0x38(0x08)
	float BlendOutDuration; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class Madness.MadAnimNotifyState_Fire
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotifyState_Fire : UAnimNotifyState {
};

// Class Madness.MadAnimNotifyState_CastBar
// Size: 0x50 (Inherited: 0x38)
struct UMadAnimNotifyState_CastBar : UAnimNotifyState {
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bIsChanneled : 1; // 0x38(0x01)
	char UnknownData_39_0 : 7; // 0x39(0x01)
	bool bUsedInAbility : 1; // 0x39(0x01)
	char UnknownData_3A[0x6]; // 0x3a(0x06)
	struct FString Skill; // 0x40(0x10)
};

// Class Madness.MadAnimNotifyState_AnomalyEnhancedWeaponTrail
// Size: 0x70 (Inherited: 0x38)
struct UMadAnimNotifyState_AnomalyEnhancedWeaponTrail : UAnimNotifyState {
	struct UParticleSystem* NonAnomalyParticle; // 0x38(0x08)
	struct UParticleSystem* AnomalyParticle; // 0x40(0x08)
	enum class ETrailWidthMode WidthScaleMode; // 0x48(0x01)
	char UnknownData_49[0x3]; // 0x49(0x03)
	struct FName TrailFirstSocket; // 0x4c(0x08)
	struct FName TrailSecondSocket; // 0x54(0x08)
	float TrailScale; // 0x5c(0x04)
	struct FName AnomalyBlackboardKey; // 0x60(0x08)
	enum class EHand WeaponToAttach; // 0x68(0x01)
	char UnknownData_69[0x7]; // 0x69(0x07)
};

// Class Madness.MadAnimNotifyState_MeleeAttackAnomalyEnhanced
// Size: 0xb0 (Inherited: 0x98)
struct UMadAnimNotifyState_MeleeAttackAnomalyEnhanced : UFWAnimNotifyState_MeleeAttack {
	struct UDamageType* AnomalyEnhancedDamageTypeClass; // 0x98(0x08)
	struct FName AnomalyBlackboardKey; // 0xa0(0x08)
	char UnknownData_A8[0x8]; // 0xa8(0x08)
};

// Class Madness.MadAnimNotifyState_SmokingCigarette
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotifyState_SmokingCigarette : UAnimNotifyState {
};

// Class Madness.MadAnimNotifyState_EatingWithRightHand
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotifyState_EatingWithRightHand : UAnimNotifyState {
	float IKWeight; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class Madness.MadAnimNotifyState_UpdateYagakChainStretchTarget
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotifyState_UpdateYagakChainStretchTarget : UAnimNotifyState {
};

// Class Madness.MadAnimNotifyState_AllowYagakChainsStretch
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotifyState_AllowYagakChainsStretch : UAnimNotifyState {
};

// Class Madness.MadAnimNotifyState_DisableYagakChainAttach
// Size: 0x40 (Inherited: 0x38)
struct UMadAnimNotifyState_DisableYagakChainAttach : UAnimNotifyState {
	enum class EAttachedChain AttachedChain; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
};

// Class Madness.MadAnimReplication_DrDetonator
// Size: 0x280 (Inherited: 0x268)
struct UMadAnimReplication_DrDetonator : UMadAnimReplication_SoldierBase {
	struct FVector AimLocationRaw; // 0x268(0x0c)
	struct FVector AimLocationOffset; // 0x274(0x0c)
};

// Class Madness.MadAnomalyBarrier
// Size: 0x460 (Inherited: 0x2f0)
struct AMadAnomalyBarrier : AActor {
	char UnknownData_2F0[0x18]; // 0x2f0(0x18)
	struct UBoxComponent* BoxCollision; // 0x308(0x08)
	struct UParticleSystemComponent* BarrierEffect; // 0x310(0x08)
	struct UParticleSystemComponent* HitEffect; // 0x318(0x08)
	float DeactivationLifeSpan; // 0x320(0x04)
	struct FName BarrierChargeParamName; // 0x324(0x08)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct UCurveFloat* BarrierChargeCurve; // 0x330(0x08)
	struct FScalableFloat DamageOnEnter; // 0x338(0x20)
	float BarrierDamageMultiplier; // 0x358(0x04)
	char UnknownData_35C[0x4]; // 0x35c(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedback; // 0x360(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x388(0x28)
	struct UCameraShake* CameraShakeClass; // 0x3b0(0x08)
	float CameraShakeInnerRadius; // 0x3b8(0x04)
	float CameraShakeOutterRadius; // 0x3bc(0x04)
	float CameraShakeFalloff; // 0x3c0(0x04)
	char UnknownData_3C4_0 : 7; // 0x3c4(0x01)
	bool bCameraShakeOrientTowardsEpicenter : 1; // 0x3c4(0x01)
	char UnknownData_3C5[0x3]; // 0x3c5(0x03)
	struct FGameplayTagContainer KnockbackCooldownTag; // 0x3c8(0x20)
	struct UDamageType* KnockbackDamageType; // 0x3e8(0x08)
	struct USoundCue* ImpactSound; // 0x3f0(0x08)
	struct UParticleSystem* ImpactParticle; // 0x3f8(0x08)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> KnockbackForceFeedback; // 0x400(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> KnockbackForceFeedbackAttenuation; // 0x428(0x28)
	struct UForceFeedbackComponent* ForceFeedbackSpawned; // 0x450(0x08)
	float BarrierChargeValue; // 0x458(0x04)
	char UnknownData_45C[0x4]; // 0x45c(0x04)

	void OnRep_BarrierCharge(); // Function Madness.MadAnomalyBarrier.OnRep_BarrierCharge // (Final|Native|Private) // @ game+0x1560450
	void OnPointDamageTaken(struct AActor* DamagedActor, float Damage, struct AController* InstigatedBy, struct FVector HitLocation, struct UPrimitiveComponent* FHitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct UDamageType* DamageType, struct AActor* DamageCauser); // Function Madness.MadAnomalyBarrier.OnPointDamageTaken // (Final|Native|Private|HasDefaults) // @ game+0x1560130
	void OnColliderBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadAnomalyBarrier.OnColliderBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x155f440
	void DeactivateBarrier(); // Function Madness.MadAnomalyBarrier.DeactivateBarrier // (Net|Native|Event|NetMulticast|Public) // @ game+0x1516bc0
	void ActivateHit(); // Function Madness.MadAnomalyBarrier.ActivateHit // (Net|Native|Event|NetMulticast|Public) // @ game+0x150ed00
};

// Class Madness.MadAnomalyBarrierProjectile
// Size: 0x678 (Inherited: 0x5f0)
struct AMadAnomalyBarrierProjectile : AMadNavmeshProjectile {
	struct UBoxComponent* BoxCollision; // 0x5f0(0x08)
	float ProjectileUpdateRate; // 0x5f8(0x04)
	struct FVector CollisionScaleMin; // 0x5fc(0x0c)
	struct FVector CollisionScaleMax; // 0x608(0x0c)
	char UnknownData_614[0x4]; // 0x614(0x04)
	struct FScalableFloat AnomalyExtraMaxBarrierDamage; // 0x618(0x20)
	struct FScalableFloat AnomalyBarrierDamage; // 0x638(0x20)
	struct UDamageType* DamageType; // 0x658(0x08)
	char UnknownData_660[0x18]; // 0x660(0x18)

	void OnColliderBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadAnomalyBarrierProjectile.OnColliderBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x155f6b0
	void OnBarrierChargeUpdated(float BarrierCharge); // Function Madness.MadAnomalyBarrierProjectile.OnBarrierChargeUpdated // (Final|Native|Private) // @ game+0x155f150
};

// Class Madness.MadAnomalyEnhancedProjectile
// Size: 0x5c8 (Inherited: 0x5c0)
struct AMadAnomalyEnhancedProjectile : AMadProjectile {
	struct FName MeshAttachmentSocketName; // 0x5c0(0x08)
};

// Class Madness.MadAnomalyShard
// Size: 0x340 (Inherited: 0x2f0)
struct AMadAnomalyShard : AActor {
	struct ULocalInteractionComponent* Interaction; // 0x2f0(0x08)
	struct USceneComponent* EffectHolderComp; // 0x2f8(0x08)
	struct UParticleSystemComponent* ShardActivePSC; // 0x300(0x08)
	struct UParticleSystemComponent* ShardInactivePSC; // 0x308(0x08)
	struct UAudioComponent* AmbientAC; // 0x310(0x08)
	struct UAudioComponent* DrainAC; // 0x318(0x08)
	struct UAnimMontage* CharacterAnim; // 0x320(0x08)
	struct UForceFeedbackEffect* DrainForceFeedback; // 0x328(0x08)
	float InteractionCameraPitch; // 0x330(0x04)
	float LifeSpanAfterDrain; // 0x334(0x04)
	enum class EMadLootRewardType RewardType; // 0x338(0x01)
	char UnknownData_339[0x7]; // 0x339(0x07)

	void ServerDrain(struct ABaseCharacter* InteractingPawn); // Function Madness.MadAnomalyShard.ServerDrain // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1560570
	void ReserveFor(struct APlayerController* PlayerController, enum class EMadLootRewardType InRewardType); // Function Madness.MadAnomalyShard.ReserveFor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15604b0
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadAnomalyShard.OnPlayerLogout // (Final|Native|Protected) // @ game+0x1560070
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadAnomalyShard.OnInteracted // (Final|Native|Protected) // @ game+0x155f9f0
	void OnInput(struct ABaseCharacter* InteractingPawn, bool bPressed); // Function Madness.MadAnomalyShard.OnInput // (Final|Native|Protected) // @ game+0x155f920
	void MulticastOnDrained(struct UMadSkillData* Skill); // Function Madness.MadAnomalyShard.MulticastOnDrained // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1516d80
};

// Class Madness.MadAnomalyTotem
// Size: 0x428 (Inherited: 0x2f0)
struct AMadAnomalyTotem : AActor {
	struct UDecalComponent* ProximityMarker; // 0x2f0(0x08)
	struct UMinimapNodeComponent* MinimapMarker; // 0x2f8(0x08)
	struct USceneComponent* EffectTarget; // 0x300(0x08)
	struct UStaticMeshComponent* PillarMesh; // 0x308(0x08)
	struct UParticleSystemComponent* PillarGemParticle; // 0x310(0x08)
	struct UParticleSystemComponent* IdleParticleLoop; // 0x318(0x08)
	struct UParticleSystemComponent* ChargingParticle; // 0x320(0x08)
	struct UParticleSystemComponent* ChargingParticleLoop; // 0x328(0x08)
	struct UParticleSystemComponent* FinishedParticle; // 0x330(0x08)
	struct FLinearColor DefaultEffectsColor; // 0x338(0x10)
	struct FLinearColor BlockedEffectsColor; // 0x348(0x10)
	struct FName SourceAngleParameterName; // 0x358(0x08)
	struct FName TargetAngleParameterName; // 0x360(0x08)
	struct FName TargetOffsetParameterName; // 0x368(0x08)
	struct FName BarrierAngleParameterName; // 0x370(0x08)
	struct FName PillarMeshChargingIdleParticleOffsetSocketName; // 0x378(0x08)
	struct FName PillarMeshFinishedParticleOffsetSocketName; // 0x380(0x08)
	struct FName PillarMeshGemSocketName; // 0x388(0x08)
	struct FName EffectsPulseParameterName; // 0x390(0x08)
	struct FName ColorParameterName; // 0x398(0x08)
	struct UAudioComponent* IdleAudioLoop; // 0x3a0(0x08)
	struct UAudioComponent* ChargingAudio; // 0x3a8(0x08)
	struct UAudioComponent* ChargingAudioLoop; // 0x3b0(0x08)
	struct UAudioComponent* BlockedAudio; // 0x3b8(0x08)
	struct UAudioComponent* FinishedAudio; // 0x3c0(0x08)
	struct UMadTotemStateMachine* TotemStateMachine; // 0x3c8(0x08)
	struct UCurveFloat* EffectsPulseCurve; // 0x3d0(0x08)
	float ProximityRadius; // 0x3d8(0x04)
	float PillarBaseChargingTime; // 0x3dc(0x04)
	float PillarMaxZPositionDelta; // 0x3e0(0x04)
	float PillarAdditionalPerPlayerSpeedPct; // 0x3e4(0x04)
	struct TArray<int32_t> PartProgressionThresholds; // 0x3e8(0x10)
	float PillarCurrentZPosition; // 0x3f8(0x04)
	char UnknownData_3FC[0x24]; // 0x3fc(0x24)
	struct UMaterialInstanceDynamic* ProximityMarkerDynamicMaterial; // 0x420(0x08)

	void OnRep_TotemStateMachine(); // Function Madness.MadAnomalyTotem.OnRep_TotemStateMachine // (Final|Native|Private) // @ game+0x1560490
	void OnRep_PillarCurrentZPosition(); // Function Madness.MadAnomalyTotem.OnRep_PillarCurrentZPosition // (Final|Native|Private) // @ game+0x1560470
	void OnRegionStarted(enum class ERegionStartedState RegionState); // Function Madness.MadAnomalyTotem.OnRegionStarted // (Final|Native|Private) // @ game+0x15603d0
	void OnPartProgressionComplete(int32_t InThreshold); // Function Madness.MadAnomalyTotem.OnPartProgressionComplete // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void MulticastOnInactive(bool bStarted); // Function Madness.MadAnomalyTotem.MulticastOnInactive // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155f0c0
	void MulticastOnIdle(bool bStarted); // Function Madness.MadAnomalyTotem.MulticastOnIdle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155f030
	void MulticastOnFinished(bool bStarted); // Function Madness.MadAnomalyTotem.MulticastOnFinished // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155efa0
	void MulticastOnCharging(bool bStarted); // Function Madness.MadAnomalyTotem.MulticastOnCharging // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155ef10
	void MulticastOnBlocked(bool bStarted); // Function Madness.MadAnomalyTotem.MulticastOnBlocked // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155ee80
	void K2_OnInactive(bool bStarted); // Function Madness.MadAnomalyTotem.K2_OnInactive // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnIdle(bool bStarted); // Function Madness.MadAnomalyTotem.K2_OnIdle // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnFinished(bool bStarted); // Function Madness.MadAnomalyTotem.K2_OnFinished // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnCharging(bool bStarted); // Function Madness.MadAnomalyTotem.K2_OnCharging // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnBlocked(bool bStarted); // Function Madness.MadAnomalyTotem.K2_OnBlocked // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadBaseTurretActor
// Size: 0x438 (Inherited: 0x3a8)
struct AMadBaseTurretActor : AMadActorWithPreview {
	char UnknownData_3A8[0x78]; // 0x3a8(0x78)
	float DeltaRelativeToFallbackAimLocation; // 0x420(0x04)
	struct FName LookFromBoneName; // 0x424(0x08)
	char UnknownData_42C[0x4]; // 0x42c(0x04)
	struct USkeletalMeshComponent* SkelMesh; // 0x430(0x08)

	void SetMaxHealth(float InMaxHealth); // Function Madness.MadBaseTurretActor.SetMaxHealth // (Native|Public|BlueprintCallable) // @ game+0x157fc10
	void SetHealth(float InHealth); // Function Madness.MadBaseTurretActor.SetHealth // (Native|Public|BlueprintCallable) // @ game+0x157fb90
	void OnCharacterDied(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadBaseTurretActor.OnCharacterDied // (Final|Native|Public) // @ game+0x157f100
	void K2_SetTeam(enum class ETeam NewTeam); // Function Madness.MadBaseTurretActor.K2_SetTeam // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x157ead0
	enum class ETeam K2_GetTeam(); // Function Madness.MadBaseTurretActor.K2_GetTeam // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x157eaa0
	float GetMaxHealth(); // Function Madness.MadBaseTurretActor.GetMaxHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x157e650
	struct FVector GetLookFromLocation(); // Function Madness.MadBaseTurretActor.GetLookFromLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e5e0
	float GetHealth(); // Function Madness.MadBaseTurretActor.GetHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x157e1f0
	struct FVector GetAimLocation(struct AActor* Target); // Function Madness.MadBaseTurretActor.GetAimLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x157dd30
	bool CanSeeTarget(struct AActor* Target); // Function Madness.MadBaseTurretActor.CanSeeTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157d9d0
};

// Class Madness.MadTurret
// Size: 0x4a0 (Inherited: 0x438)
struct AMadTurret : AMadBaseTurretActor {
	struct UCapsuleComponent* CapsuleComponent; // 0x438(0x08)
	struct UMadHealthBarComponent* HealthBar; // 0x440(0x08)
	struct FText ActorName; // 0x448(0x18)
	struct FScalableFloat MaxHealth; // 0x460(0x20)
	struct FVector DamageNumbersOffset; // 0x480(0x0c)
	float LifeTime; // 0x48c(0x04)
	float Health; // 0x490(0x04)
	float MaxHealthScaled; // 0x494(0x04)
	char UnknownData_498[0x8]; // 0x498(0x08)

	void OnRep_MaxHealth(); // Function Madness.MadTurret.OnRep_MaxHealth // (Final|Native|Protected) // @ game+0x16e5200
	void OnRep_Health(); // Function Madness.MadTurret.OnRep_Health // (Final|Native|Protected) // @ game+0x16e5200
};

// Class Madness.MadAnomalyTurret
// Size: 0x5c0 (Inherited: 0x4a0)
struct AMadAnomalyTurret : AMadTurret {
	struct UParticleSystemComponent* ParticleSystem; // 0x4a0(0x08)
	struct UAudioComponent* StationaryGunExplosion; // 0x4a8(0x08)
	struct UExplosionTemplate* SpawnExplosionClass; // 0x4b0(0x08)
	struct UCameraShake* SpawnShakeTemplate; // 0x4b8(0x08)
	struct UMadDamageType* TouchDamageType; // 0x4c0(0x08)
	struct UParticleSystem* DartParticleSystem; // 0x4c8(0x08)
	struct FScalableFloat DelayToFirstShot; // 0x4d0(0x20)
	struct FScalableFloat DelayBetweenShots; // 0x4f0(0x20)
	struct FScalableFloat DelayBetweenSeries; // 0x510(0x20)
	struct FScalableFloat VolleySize; // 0x530(0x20)
	struct FScalableFloat TouchDamage; // 0x550(0x20)
	struct UAudioComponent* RiftSoundLoop; // 0x570(0x08)
	struct UAudioComponent* RiftSoundEnd; // 0x578(0x08)
	char UnknownData_580[0x18]; // 0x580(0x18)
	struct AProjectile* ProjectileClass; // 0x598(0x08)
	char UnknownData_5A0[0x8]; // 0x5a0(0x08)
	struct TArray<struct ABaseCharacter*> Targets; // 0x5a8(0x10)
	char UnknownData_5B8[0x8]; // 0x5b8(0x08)

	void SpawnDestroyParticle(); // Function Madness.MadAnomalyTurret.SpawnDestroyParticle // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1560680
	void OnOwnerOrTargetKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadAnomalyTurret.OnOwnerOrTargetKilled // (Final|Native|Protected) // @ game+0x155fd20
	void OnCapsuleOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadAnomalyTurret.OnCapsuleOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x155f1d0
	void HideRiftParticle(); // Function Madness.MadAnomalyTurret.HideRiftParticle // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0xb14550
};

// Class Madness.MadAnomalyWaveNavmeshProjectile
// Size: 0x6d0 (Inherited: 0x5f0)
struct AMadAnomalyWaveNavmeshProjectile : AMadNavmeshProjectile {
	struct UBoxComponent* BoxCollider; // 0x5f0(0x08)
	struct UAudioComponent* AudioLoop; // 0x5f8(0x08)
	struct UDamageType* DamageType; // 0x600(0x08)
	float AudioFadeOutDuration; // 0x608(0x04)
	char UnknownData_60C[0x4]; // 0x60c(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedbackEffect; // 0x610(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x638(0x28)
	struct FVector StartScale; // 0x660(0x0c)
	struct FVector EndScale; // 0x66c(0x0c)
	float UpdateWaveScaleRate; // 0x678(0x04)
	char UnknownData_67C[0x4]; // 0x67c(0x04)
	struct FGameplayTagContainer DamageAvoidanceTags; // 0x680(0x20)
	struct TArray<struct AMadBaseCharacter*> HitTargets; // 0x6a0(0x10)
	struct UForceFeedbackComponent* ForceFeedback; // 0x6b0(0x08)
	char UnknownData_6B8[0x18]; // 0x6b8(0x18)

	void SetOverlapDamage(float NewOverlapDamage); // Function Madness.MadAnomalyWaveNavmeshProjectile.SetOverlapDamage // (Final|Native|Protected|BlueprintCallable) // @ game+0x1560600
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadAnomalyWaveNavmeshProjectile.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x155fab0
};

// Class Madness.MadAreaMapUIModel
// Size: 0xd0 (Inherited: 0x50)
struct UMadAreaMapUIModel : UBaseUIModel {
	char UnknownData_50[0x10]; // 0x50(0x10)
	struct FText regionname; // 0x60(0x18)
	struct FText PersistentName; // 0x78(0x18)
	struct FName RegionNameTag; // 0x90(0x08)
	struct TArray<struct FAreaNodeData> CurrentArenaNodes; // 0x98(0x10)
	char UnknownData_A8[0x18]; // 0xa8(0x18)
	struct AMadPlayerController* MadnessPC; // 0xc0(0x08)
	char UnknownData_C8[0x8]; // 0xc8(0x08)

	struct TArray<struct FQuestUIWrapper> GetQuestsForQuestGiverArea(struct FName AreaID); // Function Madness.MadAreaMapUIModel.GetQuestsForQuestGiverArea // (Final|Native|Public|Const) // @ game+0x155edb0
	struct TArray<struct FQuestUIWrapper> GetQuestsForArea(struct FName AreaID); // Function Madness.MadAreaMapUIModel.GetQuestsForArea // (Final|Native|Public|Const) // @ game+0x155ece0
};

// Class Madness.MadAreaNameVolume
// Size: 0x330 (Inherited: 0x328)
struct AMadAreaNameVolume : AVolume {
	struct FGameplayTag AreaNameTag; // 0x328(0x08)
};

// Class Madness.MadAreaNodes
// Size: 0x50 (Inherited: 0x30)
struct UMadAreaNodes : UDataAsset {
	char UnknownData_30_0 : 7; // 0x30(0x01)
	bool bAutoArrange : 1; // 0x30(0x01)
	char UnknownData_31[0x3]; // 0x31(0x03)
	struct FVector2D GridSize; // 0x34(0x08)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FAreaNodeData> Nodes; // 0x40(0x10)
};

// Class Madness.MadAreaNodesGlobals
// Size: 0x80 (Inherited: 0x30)
struct UMadAreaNodesGlobals : UDataAsset {
	struct TMap<struct FName, struct UMadAreaNodes*> RegionToNodes; // 0x30(0x50)
};

// Class Madness.MadArenaRetreatVolume
// Size: 0x3d0 (Inherited: 0x328)
struct AMadArenaRetreatVolume : AVolume {
	char UnknownData_328_0 : 7; // 0x328(0x01)
	bool bIsRetreatEnabled : 1; // 0x328(0x01)
	char UnknownData_329[0x7]; // 0x329(0x07)
	struct AFWWaveSpawningSystem* WaveSpawningSystem; // 0x330(0x08)
	char UnknownData_338[0x41]; // 0x338(0x41)
	enum class EMadArenaState LastSynchedStateType; // 0x379(0x01)
	char UnknownData_37A[0x56]; // 0x37a(0x56)

	void OnWSSShutdown(struct AFWWaveSpawningSystem* Wss); // Function Madness.MadArenaRetreatVolume.OnWSSShutdown // (Final|Native|Protected) // @ game+0x15676e0
	void OnWSSBeginWork(struct AFWWaveSpawningSystem* Wss); // Function Madness.MadArenaRetreatVolume.OnWSSBeginWork // (Final|Native|Protected) // @ game+0x1567660
	void OnRep_SynchedState(); // Function Madness.MadArenaRetreatVolume.OnRep_SynchedState // (Final|Native|Private) // @ game+0x1567640
	void OnNewUIStateReady(struct FName NewUIState); // Function Madness.MadArenaRetreatVolume.OnNewUIStateReady // (Final|Native|Protected|HasOutParms) // @ game+0x1567250
	void NetMulticastShowStartCountdownMsg(struct TArray<struct FString> PlayersNetIds, float TimeLeftSeconds); // Function Madness.MadArenaRetreatVolume.NetMulticastShowStartCountdownMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1567140
	void NetMulticastShowRetreatStartedMsg(struct TArray<struct FString> PlayersNetIds); // Function Madness.MadArenaRetreatVolume.NetMulticastShowRetreatStartedMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1567080
	void NetMulticastShowRetreatPlayerReturnedMsg(struct TArray<struct FString> PlayersNetIds, float TimeLeftSeconds); // Function Madness.MadArenaRetreatVolume.NetMulticastShowRetreatPlayerReturnedMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1566f70
	void NetMulticastShowRetreatFinishedMsg(struct TArray<struct FString> PlayersNetIds, float TimeLeftSeconds); // Function Madness.MadArenaRetreatVolume.NetMulticastShowRetreatFinishedMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1566e60
	void NetMulticastFadeCamera(bool bFadeIn, float ServerTimeToFinishFade); // Function Madness.MadArenaRetreatVolume.NetMulticastFadeCamera // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1566d90
};

// Class Madness.MadArmor
// Size: 0x4d8 (Inherited: 0x4c0)
struct AMadArmor : AMadItem {
	struct FName ArmorName; // 0x4c0(0x08)
	float Value; // 0x4c8(0x04)
	struct FName SkinName; // 0x4cc(0x08)
	char UnknownData_4D4_0 : 7; // 0x4d4(0x01)
	bool bShouldHideSideWeapons : 1; // 0x4d4(0x01)
	char UnknownData_4D5[0x3]; // 0x4d5(0x03)

	void OnRep_SkinName(); // Function Madness.MadArmor.OnRep_SkinName // (Final|Native|Protected) // @ game+0x1567620
	void OnRep_ArmorName(); // Function Madness.MadArmor.OnRep_ArmorName // (Final|Native|Protected) // @ game+0x15672e0
	struct FName GetItemSetName(); // Function Madness.MadArmor.GetItemSetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1566b40
	enum class EBodyArmorWeightType GetArmorWeight(); // Function Madness.MadArmor.GetArmorWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1566970
	enum class EMadArmorPart GetArmorPart(); // Function Madness.MadArmor.GetArmorPart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1566940
};

// Class Madness.MadArmorAssets
// Size: 0x288 (Inherited: 0x30)
struct UMadArmorAssets : UDataAsset {
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct UMadArmorAssets* ArmorSkins; // 0x38(0x08)
	float DefaultBackHolsetOffset; // 0x40(0x04)
	char UnknownData_44[0x4]; // 0x44(0x04)
	struct TMap<struct FName, struct FMadArmorCosmeticData> Headgear; // 0x48(0x50)
	struct TMap<struct FName, struct FMadArmorCosmeticData> UpperArmor; // 0x98(0x50)
	struct TMap<struct FName, struct FMadArmorCosmeticData> LowerArmor; // 0xe8(0x50)
	struct TMap<struct FName, struct FMadArmorCosmeticData> Gloves; // 0x138(0x50)
	struct TMap<struct FName, struct FMadArmorCosmeticData> Footgear; // 0x188(0x50)
	struct TArray<struct FMadArmorLoadDelegateData> ArmorsBeingLoaded; // 0x1d8(0x10)
	struct TMap<enum class ECustomizationSlotType, struct FMadArmorMaterialGroup> SlotMaterialGroups; // 0x1e8(0x50)
	struct TMap<enum class ECustomizationSlotType, struct UTexture2D*> SlotIcons; // 0x238(0x50)

	void GetLoadedIcon(struct FMadArmorCosmeticId ArmorId, struct FDelegate IconLoaded); // Function Madness.MadArmorAssets.GetLoadedIcon // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1566b80
	struct FString GetIconPath(struct FMadArmorCosmeticId ArmorId); // Function Madness.MadArmorAssets.GetIconPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1566a50
	struct UTexture2D* GetIcon(struct FMadArmorCosmeticId ArmorId); // Function Madness.MadArmorAssets.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15669a0
};

// Class Madness.MadWeapon
// Size: 0x1f30 (Inherited: 0x1d68)
struct AMadWeapon : AWeapon {
	struct FGameplayAttribute WeaponDamageModAttribute; // 0x1d68(0x38)
	char UnknownData_1DA0[0x4]; // 0x1da0(0x04)
	struct FName WeaponName; // 0x1da4(0x08)
	char UnknownData_1DAC[0x4]; // 0x1dac(0x04)
	struct FText WeaponFullName; // 0x1db0(0x18)
	struct FText Description; // 0x1dc8(0x18)
	struct FNameWrapper SubTypeNameLink; // 0x1de0(0x10)
	struct FMadConfigInitData ConfigInitData; // 0x1df0(0x0c)
	char UnknownData_1DFC[0x10]; // 0x1dfc(0x10)
	struct FName ConfigName; // 0x1e0c(0x08)
	char UnknownData_1E14[0x4]; // 0x1e14(0x04)
	struct AMadWeaponScheme* Scheme; // 0x1e18(0x08)
	char UnknownData_1E20_0 : 7; // 0x1e20(0x01)
	bool bDrawCrosshairOverlay : 1; // 0x1e20(0x01)
	char UnknownData_1E21_0 : 7; // 0x1e21(0x01)
	bool bIgnoreMuzzleFlash : 1; // 0x1e21(0x01)
	char UnknownData_1E22[0x2]; // 0x1e22(0x02)
	float CrosshairOverlayHeightOffset; // 0x1e24(0x04)
	float CrosshairOverlayAlphaDelay; // 0x1e28(0x04)
	char UnknownData_1E2C[0x4]; // 0x1e2c(0x04)
	struct UCameraShake* CrosshairOverlaySway; // 0x1e30(0x08)
	float Damage; // 0x1e38(0x04)
	int32_t Level; // 0x1e3c(0x04)
	char UnknownData_1E40_0 : 7; // 0x1e40(0x01)
	bool bHasSuperClips : 1; // 0x1e40(0x01)
	char UnknownData_1E41[0x7]; // 0x1e41(0x07)
	struct TArray<struct AMadWeaponScheme*> SchemeInstances; // 0x1e48(0x10)
	struct AMadBaseCharacter* MadCharacterOwner; // 0x1e58(0x08)
	struct AMadPlayerCharacter* MadPlayerOwner; // 0x1e60(0x08)
	float DPSFactor; // 0x1e68(0x04)
	char UnknownData_1E6C[0x1c]; // 0x1e6c(0x1c)
	uint32_t CurrShotInSeries; // 0x1e88(0x04)
	char UnknownData_1E8C[0xc]; // 0x1e8c(0x0c)
	struct TArray<struct UObject*> LoadedCrosshairAssets; // 0x1e98(0x10)
	struct FGameplayTagContainer AbilityTags; // 0x1ea8(0x20)
	struct FName SkinName; // 0x1ec8(0x08)
	struct FName PaintName; // 0x1ed0(0x08)
	char UnknownData_1ED8[0x1]; // 0x1ed8(0x01)
	char UnknownData_1ED9_0 : 7; // 0x1ed9(0x01)
	bool bNeedsInitialReload : 1; // 0x1ed9(0x01)
	char UnknownData_1EDA[0x2]; // 0x1eda(0x02)
	int32_t BlockDestroyCounter; // 0x1edc(0x04)
	char UnknownData_1EE0_0 : 7; // 0x1ee0(0x01)
	bool bUseAsyncTargetingCone : 1; // 0x1ee0(0x01)
	char UnknownData_1EE1[0x7]; // 0x1ee1(0x07)
	struct UStaticMesh* TargetingConeMesh; // 0x1ee8(0x08)
	struct FName DebugTargetingConeHighlightParam; // 0x1ef0(0x08)
	struct FLinearColor DebugTargetingConeHighlightOnColor; // 0x1ef8(0x10)
	struct FLinearColor DebugTargetingConeHighlightOffColor; // 0x1f08(0x10)
	struct UStaticMeshComponent* TargetingConeComp; // 0x1f18(0x08)
	struct TArray<struct AMadBaseCharacter*> EnemiesInsideCone; // 0x1f20(0x10)

	void ServerSetSkin(struct FName InSkinName); // Function Madness.MadWeapon.ServerSetSkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1709f20
	void OnRep_WeaponName(); // Function Madness.MadWeapon.OnRep_WeaponName // (Final|Native|Protected) // @ game+0x1709ca0
	void OnRep_SkinName(); // Function Madness.MadWeapon.OnRep_SkinName // (Final|Native|Protected) // @ game+0x1709c60
	void OnRep_ConfigInitData(); // Function Madness.MadWeapon.OnRep_ConfigInitData // (Final|Native|Protected) // @ game+0x1709c20
	void OnEnemyExitCone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadWeapon.OnEnemyExitCone // (Native|Public) // @ game+0x1709570
	void OnEnemyEnterCone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadWeapon.OnEnemyEnterCone // (Native|Public|HasOutParms) // @ game+0x1709310
	struct AMadWeapon* LoadWeaponClassSynchronous(struct UObject* WorldContextObject, SoftClassProperty WeaponClassToLoad); // Function Madness.MadWeapon.LoadWeaponClassSynchronous // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1708e40
	bool HasSuperClips(); // Function Madness.MadWeapon.HasSuperClips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1708e20
	struct FText GetSubTypeName(); // Function Madness.MadWeapon.GetSubTypeName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17088e0
	struct FName GetSubType(); // Function Madness.MadWeapon.GetSubType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17088a0
	float GetFirepower(); // Function Madness.MadWeapon.GetFirepower // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17087f0
	struct FName GetDamageRow(); // Function Madness.MadWeapon.GetDamageRow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622530
	float GetDamagePerSec(); // Function Madness.MadWeapon.GetDamagePerSec // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1708730
};

// Class Madness.MadAssaultWeapon
// Size: 0x1f38 (Inherited: 0x1f30)
struct AMadAssaultWeapon : AMadWeapon {
	enum class EMadAssaultWeaponType SubType; // 0x1f30(0x01)
	char UnknownData_1F31[0x7]; // 0x1f31(0x07)
};

// Class Madness.MadAttributeSet
// Size: 0x148 (Inherited: 0x30)
struct UMadAttributeSet : UAttributeSet {
	float Level; // 0x30(0x04)
	float CombatPower; // 0x34(0x04)
	float Experience; // 0x38(0x04)
	float UpgradePoints; // 0x3c(0x04)
	float ConvoyPoints; // 0x40(0x04)
	float Focus; // 0x44(0x04)
	float MaxFocus; // 0x48(0x04)
	float FocusGainedModifier; // 0x4c(0x04)
	float AbilityPower; // 0x50(0x04)
	float BonusFirepower; // 0x54(0x04)
	float MechanicalPower; // 0x58(0x04)
	float Health; // 0x5c(0x04)
	float MaxHealth; // 0x60(0x04)
	float HealthRegen; // 0x64(0x04)
	float HealthRegenPassive; // 0x68(0x04)
	float Shield; // 0x6c(0x04)
	float Armor; // 0x70(0x04)
	float ArmorPenetration; // 0x74(0x04)
	float Resistance; // 0x78(0x04)
	float ResistancePenetration; // 0x7c(0x04)
	float DarkMatterProtection; // 0x80(0x04)
	float LifeLeechWeapons; // 0x84(0x04)
	float LifeLeechWeaponsMax; // 0x88(0x04)
	float MaxLifeLeechWeaponsMultiplier; // 0x8c(0x04)
	float LifeLeechSkills; // 0x90(0x04)
	float LifeLeechSkillsMax; // 0x94(0x04)
	float MaxLifeLeechSkillsMultiplier; // 0x98(0x04)
	float EffectsReduction; // 0x9c(0x04)
	float PerseveranceHealth; // 0xa0(0x04)
	float LifeSteal; // 0xa4(0x04)
	float AbilityVamp; // 0xa8(0x04)
	float CritChance; // 0xac(0x04)
	float CritDamageMultiplier; // 0xb0(0x04)
	float InstigatorCritChanceMult; // 0xb4(0x04)
	float CDReduction; // 0xb8(0x04)
	float CCReduction; // 0xbc(0x04)
	float MovementSpeed; // 0xc0(0x04)
	float LootRarityModifier; // 0xc4(0x04)
	float DropChanceModAssault; // 0xc8(0x04)
	float DropChanceModShotgun; // 0xcc(0x04)
	float DropChanceModRifle; // 0xd0(0x04)
	float DropChanceModSidearm; // 0xd4(0x04)
	float DBNOStateTime; // 0xd8(0x04)
	float DBNODelayPenaltyPerSelfRevive; // 0xdc(0x04)
	float DBNOStateHealth; // 0xe0(0x04)
	float DBNOReviveTime; // 0xe4(0x04)
	float HealingReceivedBonus; // 0xe8(0x04)
	float ThreatLevel; // 0xec(0x04)
	float InCombatHealPeriod; // 0xf0(0x04)
	float InCombatHealPercent; // 0xf4(0x04)
	float InCombatHealTreshold; // 0xf8(0x04)
	float InCoverHealPeriod; // 0xfc(0x04)
	float InCoverHealPercent; // 0x100(0x04)
	float InCoverHealTreshold; // 0x104(0x04)
	float HasBeenDamagedDuration; // 0x108(0x04)
	float StatusResistance; // 0x10c(0x04)
	float DashCharges; // 0x110(0x04)
	float MaxDashCharges; // 0x114(0x04)
	float EnrageLevel; // 0x118(0x04)
	float StatusPower; // 0x11c(0x04)
	char UnknownData_120[0x28]; // 0x120(0x28)

	void OnRep_Shield(float LastShield); // Function Madness.MadAttributeSet.OnRep_Shield // (Final|Native|Public) // @ game+0x15675a0
	void OnRep_MaxHealth(float LastMaxHealth); // Function Madness.MadAttributeSet.OnRep_MaxHealth // (Final|Native|Public) // @ game+0x1567520
	void OnRep_Level(float OldLevel); // Function Madness.MadAttributeSet.OnRep_Level // (Final|Native|Public) // @ game+0x15674a0
	void OnRep_Health(float LastHealth); // Function Madness.MadAttributeSet.OnRep_Health // (Final|Native|Public) // @ game+0x1567420
	void OnRep_Focus(float LastFocus); // Function Madness.MadAttributeSet.OnRep_Focus // (Final|Native|Public) // @ game+0x15673a0
	void OnRep_Experience(float OldExpierence); // Function Madness.MadAttributeSet.OnRep_Experience // (Final|Native|Public) // @ game+0x1567320
	void OnRep_DashCharges(); // Function Madness.MadAttributeSet.OnRep_DashCharges // (Final|Native|Public) // @ game+0x1567300
};

// Class Madness.MadAudioGlobals
// Size: 0x340 (Inherited: 0x30)
struct UMadAudioGlobals : UDataAsset {
	struct TArray<struct FBaseSoundObjectDefinition> UISoundObjectDefinitions; // 0x30(0x10)
	struct USoundMix* CinematicSoundMix; // 0x40(0x08)
	struct USoundCue* LowHealthSoundCue; // 0x48(0x08)
	struct USoundCue* LowHealthFinishSoundCue; // 0x50(0x08)
	struct TArray<struct USoundMix*> OutputTypeSoundMixes; // 0x58(0x10)
	float StopSound2DFadeOutTime; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
	struct TSet<struct UAudioComponent*> LoopingSounds; // 0x70(0x50)
	struct TMap<struct USoundCue*, struct FPlayingAudioComponents> CurrentlyPlayingSounds; // 0xc0(0x50)
	struct TMap<struct FGameplayTag, int32_t> UISoundObjectDefinitionsHelperMap; // 0x110(0x50)
	char UnknownData_160_0 : 7; // 0x160(0x01)
	bool bAudioGlobalsInitialized : 1; // 0x160(0x01)
	char UnknownData_161[0x7]; // 0x161(0x07)
	struct TArray<struct USoundCue*> LoadedSounds; // 0x168(0x10)
	struct FMadAudioGlobals_Weapons Weapons; // 0x178(0x08)
	struct TMap<struct FName, struct FWeaponSoundsData> WeaponsSoundsData; // 0x180(0x50)
	struct TMap<struct FName, struct FAudioVersionsSet> WeaponsSoundsWithVersionsData; // 0x1d0(0x50)
	struct FMadAudioGlobals_Loot Loot; // 0x220(0x120)

	struct FWeaponSoundsData GetWeaponSounds(struct FName Name); // Function Madness.MadAudioGlobals.GetWeaponSounds // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1566ce0
};

// Class Madness.MadAuraComponent
// Size: 0x250 (Inherited: 0x180)
struct UMadAuraComponent : UActorComponent {
	char UnknownData_180_0 : 7; // 0x180(0x01)
	bool bDebug : 1; // 0x180(0x01)
	char UnknownData_181[0xf]; // 0x181(0x0f)
	struct TMap<struct UMadGameplayEffect*, struct FAuraData> ActiveAuraList; // 0x190(0x50)
	char UnknownData_1E0[0x70]; // 0x1e0(0x70)

	void ServerRemoveAura(struct UMadGameplayEffect* AuraToRemove); // Function Madness.MadAuraComponent.ServerRemoveAura // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x156e4a0
	void ServerInfectCharacter(struct AMadBaseCharacter* InTarget, struct FAuraData NewInfection); // Function Madness.MadAuraComponent.ServerInfectCharacter // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x156e3a0
	void ServerAddAura(struct FAuraData NewAura); // Function Madness.MadAuraComponent.ServerAddAura // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x156e2e0
	void RemoveAura(struct UMadGameplayEffect* AuraToRemove); // Function Madness.MadAuraComponent.RemoveAura // (Final|Native|Public|BlueprintCallable) // @ game+0x156df40
	void InfectCharacter(struct AMadBaseCharacter* InTarget, struct FAuraData NewInfection); // Function Madness.MadAuraComponent.InfectCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x156d9f0
	void AddAura(struct FAuraData NewAura); // Function Madness.MadAuraComponent.AddAura // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x156cf90
};

// Class Madness.MadBackendAccessor
// Size: 0x50 (Inherited: 0x28)
struct UMadBackendAccessor : UObject {
	char UnknownData_28[0x28]; // 0x28(0x28)

	void OnBoundToBackend(); // Function Madness.MadBackendAccessor.OnBoundToBackend // (Native|Protected) // @ game+0x156dca0
	void OnBindToBackendFailed(); // Function Madness.MadBackendAccessor.OnBindToBackendFailed // (Native|Protected) // @ game+0x156dc80
};

// Class Madness.MadBackendCurveTables
// Size: 0x1e0 (Inherited: 0x50)
struct UMadBackendCurveTables : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnCurveTableReceived; // 0x50(0x10)
	struct UCurveTable* AttributeInitterCurveTable; // 0x60(0x08)
	struct UCurveTable* ConstAttributeInitterCurveTable; // 0x68(0x08)
	struct TArray<struct UCurveTable*> PreloadedCurveTables; // 0x70(0x10)
	struct TMap<struct UCurveTable*, struct UCurveTable*> CachedCurveTables; // 0x80(0x50)
	char UnknownData_D0[0x110]; // 0xd0(0x110)

	struct UCurveTable* TryGetCachedTable(struct UCurveTable* LocalTable); // Function Madness.MadBackendCurveTables.TryGetCachedTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156e530
	bool RequestCurveTableFromBackend(struct UCurveTable* RequestedTable, struct FDelegate CurveTableReceivedDelegate, bool bForceRefresh); // Function Madness.MadBackendCurveTables.RequestCurveTableFromBackend // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x156dfc0
	void OnPreloadedCurveTableReceived(bool bSuccess, struct UCurveTable* ReceivedCurveTable, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadBackendCurveTables.OnPreloadedCurveTableReceived // (Final|Native|Private) // @ game+0x156dcc0
	void OnAllTablesPreloaded__DelegateSignature(); // DelegateFunction Madness.MadBackendCurveTables.OnAllTablesPreloaded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	bool IsTableCached(struct UCurveTable* LocalTable); // Function Madness.MadBackendCurveTables.IsTableCached // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156db60
	bool IsPreloadingTables(); // Function Madness.MadBackendCurveTables.IsPreloadingTables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156db00
	struct UCurveTable* GetConstAttributeInitterCurveTable(); // Function Madness.MadBackendCurveTables.GetConstAttributeInitterCurveTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d2b0
	struct UCurveTable* GetCachedCurveTable(struct UCurveTable* InCurveTable); // Function Madness.MadBackendCurveTables.GetCachedCurveTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x156d0f0
	struct UCurveTable* GetAttributeInitterCurveTable(); // Function Madness.MadBackendCurveTables.GetAttributeInitterCurveTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d090
};

// Class Madness.MadBackendDataTables
// Size: 0x258 (Inherited: 0x50)
struct UMadBackendDataTables : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnDataTableReceived; // 0x50(0x10)
	char UnknownData_60[0x50]; // 0x60(0x50)
	struct UDataTable* GlobalBackendDataTable; // 0xb0(0x08)
	struct UDataTable* RegionsDifficultyLevelTable; // 0xb8(0x08)
	struct UDataTable* EventDatas; // 0xc0(0x08)
	struct UDataTable* QuestRewardsDataTable; // 0xc8(0x08)
	struct UDataTable* AreaMapDefinitionsDataTable; // 0xd0(0x08)
	struct UDataTable* MatchMakingConfigDataTable; // 0xd8(0x08)
	struct UDataTable* EnochAccoladesRewardsDataTable; // 0xe0(0x08)
	struct UDataTable* EnochAccoladesLevelsDataTable; // 0xe8(0x08)
	struct UDataTable* EnochAccoladesBackendDataTable; // 0xf0(0x08)
	struct UDataTable* DestroyObjectDataTable; // 0xf8(0x08)
	struct UDataTable* WSSSetupDataTable; // 0x100(0x08)
	struct UDataTable* ChallengeDataTable; // 0x108(0x08)
	struct UDataTable* ChallengePickChanceDataTable; // 0x110(0x08)
	struct UDataTable* ChallengeChestRarityDataTable; // 0x118(0x08)
	struct UDataTable* AttributeSetDataTable; // 0x120(0x08)
	struct UDataTable* ArchetypeFactorsForTwoPlayersDT; // 0x128(0x08)
	struct UDataTable* ArchetypeFactorsForThreePlayersDT; // 0x130(0x08)
	struct TArray<struct UDataTable*> PreloadedDataTables; // 0x138(0x10)
	struct TMap<struct UDataTable*, struct UDataTable*> CachedDataTables; // 0x148(0x50)
	char UnknownData_198[0xc0]; // 0x198(0xc0)

	struct UDataTable* TryGetCachedTable(struct UDataTable* LocalTable); // Function Madness.MadBackendDataTables.TryGetCachedTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156e5c0
	bool RequestDataTableFromBackend(struct UDataTable* RequestedTable, struct FDelegate DataTableReceivedDelegate, bool bForceRefresh); // Function Madness.MadBackendDataTables.RequestDataTableFromBackend // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x156e150
	void OnPreloadedDataTableReceived(bool bSuccess, struct UDataTable* ReceivedDataTable, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadBackendDataTables.OnPreloadedDataTableReceived // (Final|Native|Private) // @ game+0x156de00
	void OnAllTablesPreloaded__DelegateSignature(); // DelegateFunction Madness.MadBackendDataTables.OnAllTablesPreloaded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	bool IsTableCached(struct UDataTable* LocalTable); // Function Madness.MadBackendDataTables.IsTableCached // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156dbf0
	bool IsPreloadingTables(); // Function Madness.MadBackendDataTables.IsPreloadingTables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156db30
	struct UDataTable* GetWSSSetupDataTable(); // Function Madness.MadBackendDataTables.GetWSSSetupDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d9c0
	struct UDataTable* GetRegionsDifficultyLevelTable(); // Function Madness.MadBackendDataTables.GetRegionsDifficultyLevelTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d990
	struct UDataTable* GetQuestRewardsDataTable(); // Function Madness.MadBackendDataTables.GetQuestRewardsDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d960
	struct UDataTable* GetMatchMakingConfigDataTable(); // Function Madness.MadBackendDataTables.GetMatchMakingConfigDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d930
	bool GetKeyAsString(struct FString InKeyName, struct FString OutString); // Function Madness.MadBackendDataTables.GetKeyAsString // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x156d7d0
	bool GetKeyAsInt(struct FString InKeyName, int32_t OutInt); // Function Madness.MadBackendDataTables.GetKeyAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x156d690
	bool GetKeyAsFloat(struct FString InKeyName, float OutFloat); // Function Madness.MadBackendDataTables.GetKeyAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x156d540
	bool GetKeyAsBool(struct FString InKeyName, bool OutBool); // Function Madness.MadBackendDataTables.GetKeyAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x156d400
	struct UDataTable* GetGlobalBackendDataTable(); // Function Madness.MadBackendDataTables.GetGlobalBackendDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d3d0
	struct UDataTable* GetEventDatas(); // Function Madness.MadBackendDataTables.GetEventDatas // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d3a0
	struct UDataTable* GetEnochAccoladesRewardsDataTable(); // Function Madness.MadBackendDataTables.GetEnochAccoladesRewardsDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d370
	struct UDataTable* GetEnochAccoladesLevelsDataTable(); // Function Madness.MadBackendDataTables.GetEnochAccoladesLevelsDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d340
	struct UDataTable* GetEnochAccoladesBackendDataTable(); // Function Madness.MadBackendDataTables.GetEnochAccoladesBackendDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d310
	struct UDataTable* GetDestroyObjectDataTable(); // Function Madness.MadBackendDataTables.GetDestroyObjectDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d2e0
	struct UDataTable* GetChallengePickChanceDataTable(); // Function Madness.MadBackendDataTables.GetChallengePickChanceDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d270
	struct UDataTable* GetChallengeDataTable(); // Function Madness.MadBackendDataTables.GetChallengeDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d230
	struct UDataTable* GetChallengeChestRarityDataTable(); // Function Madness.MadBackendDataTables.GetChallengeChestRarityDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d1f0
	struct UDataTable* GetCachedDataTable(struct UDataTable* InDataTable); // Function Madness.MadBackendDataTables.GetCachedDataTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x156d170
	struct UDataTable* GetAttributeSetDataTable(); // Function Madness.MadBackendDataTables.GetAttributeSetDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d0c0
	struct UDataTable* GetAreaMapDefinitionsDataTable(); // Function Madness.MadBackendDataTables.GetAreaMapDefinitionsDataTable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x156d060
};

// Class Madness.MadBackendEntitlements
// Size: 0x70 (Inherited: 0x50)
struct UMadBackendEntitlements : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnEntitlementsReceived; // 0x50(0x10)
	char UnknownData_60[0x10]; // 0x60(0x10)

	void MembershipEntitlementsSync(struct FDelegate OnFinishDelegate); // Function Madness.MadBackendEntitlements.MembershipEntitlementsSync // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1572ef0
	struct TArray<struct FEntitlementData> GetEntitlements(); // Function Madness.MadBackendEntitlements.GetEntitlements // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x15728b0
	bool EntitlementExists(enum class EStoreTypeData StoreType, struct FString Name); // Function Madness.MadBackendEntitlements.EntitlementExists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15725c0
};

// Class Madness.MadBackendEvents
// Size: 0x88 (Inherited: 0x50)
struct UMadBackendEvents : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnEventsReceived; // 0x50(0x10)
	struct FMulticastInlineDelegate EventResponseCallback; // 0x60(0x10)
	char UnknownData_70[0x18]; // 0x70(0x18)

	struct TArray<struct FBackendEventData> SortEvents(struct TArray<struct FBackendEventData> InEvents, bool bNewestFirst); // Function Madness.MadBackendEvents.SortEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1574080
	void RespondToEvent(struct FBackendEventData Event, enum class EMadBackendEventResponse response, struct FDelegate ResponseDelegate); // Function Madness.MadBackendEvents.RespondToEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1573eb0
	void RefreshCachedEvents(); // Function Madness.MadBackendEvents.RefreshCachedEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x1573cf0
	struct TArray<struct FBackendEventData> GetEvents(); // Function Madness.MadBackendEvents.GetEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15728f0
	bool FindEventByName(struct FName InName, struct FBackendEventData OutEvent); // Function Madness.MadBackendEvents.FindEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15726b0
};

// Class Madness.MadBackendHandle
// Size: 0x148 (Inherited: 0x28)
struct UMadBackendHandle : UObject {
	struct UDataTable* OneTimeRewards; // 0x28(0x08)
	struct UMadBackendDataTables* DataTableHandleClass; // 0x30(0x08)
	struct UMadBackendCurveTables* CurveTableHandleClass; // 0x38(0x08)
	char UnknownData_40[0x10]; // 0x40(0x10)
	struct UMadBackendEvents* BackendEvents; // 0x50(0x08)
	struct UMadInfoCastGlobals* InfoCastGlobals; // 0x58(0x08)
	struct UMadBackendDataTables* BackendDataTables; // 0x60(0x08)
	struct UMadBackendCurveTables* BackendCurveTables; // 0x68(0x08)
	struct UMadBackendItems* BackendItems; // 0x70(0x08)
	struct UMadBackendEntitlements* BackendEntitlements; // 0x78(0x08)
	char UnknownData_80[0x8]; // 0x80(0x08)
	struct FMulticastInlineDelegate OnConnectedToBackend; // 0x88(0x10)
	struct FMulticastInlineDelegate OnBindToBackendFailed; // 0x98(0x10)
	char UnknownData_A8[0x1c]; // 0xa8(0x1c)
	struct FName CurrentPresence; // 0xc4(0x08)
	char UnknownData_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct FOnlineFriendData> OnlineFriends; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPresenceChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnFriendListReceived; // 0xf0(0x10)
	char UnknownData_100[0x48]; // 0x100(0x48)

	void RequestAssetFromPath(struct FString Path, struct FDelegate AssetLoadedDelegate); // Function Madness.MadBackendHandle.RequestAssetFromPath // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1573d10
	void OnInfoCastsReady(); // Function Madness.MadBackendHandle.OnInfoCastsReady // (Final|Native|Private) // @ game+0x1573590
	void OnEventsReady(); // Function Madness.MadBackendHandle.OnEventsReady // (Final|Native|Private) // @ game+0x1573590
	void OnDataTablesPreloaded(); // Function Madness.MadBackendHandle.OnDataTablesPreloaded // (Final|Native|Public) // @ game+0x1573570
	void OnCurveTablesPreloaded(); // Function Madness.MadBackendHandle.OnCurveTablesPreloaded // (Final|Native|Public) // @ game+0x1573550
	bool IsBoundToBackend(); // Function Madness.MadBackendHandle.IsBoundToBackend // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1572e10
	struct UMadInfoCastGlobals* GetInfoCastGlobals(); // Function Madness.MadBackendHandle.GetInfoCastGlobals // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572930
	struct UMadBackendItems* GetBackendItems(); // Function Madness.MadBackendHandle.GetBackendItems // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572880
	struct UMadBackendEvents* GetBackendEvents(); // Function Madness.MadBackendHandle.GetBackendEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572850
	struct UMadBackendEntitlements* GetBackendEntitlements(); // Function Madness.MadBackendHandle.GetBackendEntitlements // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572820
	struct UMadBackendDataTables* GetBackendDataTables(); // Function Madness.MadBackendHandle.GetBackendDataTables // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x15727f0
	struct UMadBackendCurveTables* GetBackendCurveTables(); // Function Madness.MadBackendHandle.GetBackendCurveTables // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x15727c0
};

// Class Madness.MadBackendItems
// Size: 0xc0 (Inherited: 0x50)
struct UMadBackendItems : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnItemsReceived; // 0x50(0x10)
	struct FMulticastInlineDelegate OnItemFinishedRedeemCallback; // 0x60(0x10)
	char UnknownData_70[0x18]; // 0x70(0x18)
	struct FMulticastInlineDelegate OnItemOffersReceived; // 0x88(0x10)
	struct FMulticastInlineDelegate OnItemOffersFinishedAcceptCallback; // 0x98(0x10)
	char UnknownData_A8[0x18]; // 0xa8(0x18)

	void RedeemFromInbox(struct FOSDKObjectIdData ObjectIDData, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.RedeemFromInbox // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1573b70
	void RedeemFromEventParticipationResponseData(struct FEventParticipationResponseData EventParticipationResponseData, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.RedeemFromEventParticipationResponseData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1573900
	void RedeemFromEventParticipationData(struct FEventParticipationData EventParticipationData, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.RedeemFromEventParticipationData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15736b0
	bool ItemOfferExists(struct FString ItemOfferName); // Function Madness.MadBackendItems.ItemOfferExists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1572e40
	void GetItemOffersEx(int32_t ResultLimit, int32_t ResultOffset, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.GetItemOffersEx // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1572c90
	void GetItemOffersByName(struct TArray<struct FString> AllOfFilterLabels, int32_t ResultLimit, int32_t ResultOffset, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.GetItemOffersByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1572a90
	struct TArray<struct FItemOfferData> GetItemOffers(); // Function Madness.MadBackendItems.GetItemOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572a50
	struct FItemOfferData GetItemOfferByName(struct FString ItemOfferName); // Function Madness.MadBackendItems.GetItemOfferByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15729a0
	struct TArray<struct FItemData> GetItemDatas(); // Function Madness.MadBackendItems.GetItemDatas // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1572960
	void AcceptItemOffer(struct FItemOfferData ItemOfferData, struct FDelegate OnFinishDelegate); // Function Madness.MadBackendItems.AcceptItemOffer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1572390
};

// Class Madness.MadBackMenuUIModel
// Size: 0x80 (Inherited: 0x50)
struct UMadBackMenuUIModel : UBaseUIModel {
	char UnknownData_50[0x8]; // 0x50(0x08)
	struct TArray<struct FMadBackMenuOption> BackMenuOptions; // 0x58(0x10)
	char UnknownData_68[0x18]; // 0x68(0x18)

	void QuitGame(); // Function Madness.MadBackMenuUIModel.QuitGame // (Final|Native|Public) // @ game+0x1573690
};

// Class Madness.MadDamageType
// Size: 0x248 (Inherited: 0xe0)
struct UMadDamageType : UBaseDamageType {
	struct FGameplayTagContainer BlockingTags; // 0xe0(0x20)
	struct FGameplayTagContainer RemoveEffectsWithTags; // 0x100(0x20)
	char UnknownData_120_0 : 7; // 0x120(0x01)
	bool bForceExplosion : 1; // 0x120(0x01)
	char UnknownData_121_0 : 7; // 0x121(0x01)
	bool bConicalExplosion : 1; // 0x121(0x01)
	char UnknownData_122_0 : 7; // 0x122(0x01)
	bool bInvertDirection : 1; // 0x122(0x01)
	char UnknownData_123_0 : 7; // 0x123(0x01)
	bool bUseHitResultLocationAsOrigin : 1; // 0x123(0x01)
	float ConeHalfAngle; // 0x124(0x04)
	float MinImpulse; // 0x128(0x04)
	float MaxImpulse; // 0x12c(0x04)
	struct FVector ExplosionOffsetInLocalSpace; // 0x130(0x0c)
	enum class EExplosionOriginType ExplosionOrigin; // 0x13c(0x01)
	char UnknownData_13D_0 : 7; // 0x13d(0x01)
	bool bOverrideExplosionOrigin : 1; // 0x13d(0x01)
	char UnknownData_13E_0 : 7; // 0x13e(0x01)
	bool bForceHitReaction : 1; // 0x13e(0x01)
	char UnknownData_13F[0x1]; // 0x13f(0x01)
	struct FName BoneName; // 0x140(0x08)
	struct UMadGameplayEffect* EffectToApply; // 0x148(0x08)
	struct UMadGameplayEffect* EffectToApplyOnMidLevel; // 0x150(0x08)
	struct UMadGameplayEffect* EffectToApplyOnHighLevel; // 0x158(0x08)
	struct FGameplayTag EventTag; // 0x160(0x08)
	char UnknownData_168_0 : 7; // 0x168(0x01)
	bool bIsSkillDamage : 1; // 0x168(0x01)
	enum class EMadDamageCategory DamageCategory; // 0x169(0x01)
	char UnknownData_16A[0x6]; // 0x16a(0x06)
	struct FScalableFloat DamageProtectionMultiplier; // 0x170(0x20)
	struct FGameplayAttribute FlatDamageBonusAttribute; // 0x190(0x38)
	char UnknownData_1C8_0 : 7; // 0x1c8(0x01)
	bool bIsMeleeDamage : 1; // 0x1c8(0x01)
	char UnknownData_1C9_0 : 7; // 0x1c9(0x01)
	bool bShouldUseLightImpact : 1; // 0x1c9(0x01)
	char UnknownData_1CA[0x2]; // 0x1ca(0x02)
	float KnockbackDistanceMultiplier; // 0x1cc(0x04)
	struct TArray<struct FGameplayTag> AuxiliaryEventTags; // 0x1d0(0x10)
	struct TArray<struct UMadGameplayEffect*> AuxiliaryEffects; // 0x1e0(0x10)
	struct FGameplayAttribute KnockbackDistanceBackingAttribute; // 0x1f0(0x38)
	struct FNameWrapper MetricSystemDamageID; // 0x228(0x10)
	struct FMadBlastProgram BlastProgram; // 0x238(0x10)

	struct FName GetMetricSystemDamageID(); // Function Madness.MadDamageType.GetMetricSystemDamageID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15f55d0
};

// Class Madness.MadBackpackSelfExplodeDamageType
// Size: 0x248 (Inherited: 0x248)
struct UMadBackpackSelfExplodeDamageType : UMadDamageType {
};

// Class Madness.MadBannerFlag
// Size: 0x380 (Inherited: 0x2f0)
struct AMadBannerFlag : AActor {
	struct UMadSkeletalMeshComponent* FlagpoleMesh; // 0x2f0(0x08)
	struct USphereComponent* ClothSphereComponent; // 0x2f8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> Materials; // 0x300(0x10)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bAllowHighlightOnStart : 1; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct AMadConvoy* Convoy; // 0x318(0x08)
	float TimeAfterLastRenderToDisableClothOverlap; // 0x320(0x04)
	char UnknownData_324[0x24]; // 0x324(0x24)
	enum class EMadBannerUsage BannerUsage; // 0x348(0x01)
	char UnknownData_349[0x37]; // 0x349(0x37)

	void TryBindToUI(); // Function Madness.MadBannerFlag.TryBindToUI // (Final|Native|Private) // @ game+0x15743a0
	struct AMadBannerFlag* Spawn(struct AMadConvoy* Convoy, enum class EMadBannerUsage Usage); // Function Madness.MadBannerFlag.Spawn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15742e0
	void OnUIStateChangedHandler(struct FName StateName); // Function Madness.MadBannerFlag.OnUIStateChangedHandler // (Final|Native|Private) // @ game+0x1573610
	void OnPlayerRespawned(); // Function Madness.MadBannerFlag.OnPlayerRespawned // (Final|Native|Protected) // @ game+0x15735d0
	void OnMeshVisibilityChangedHandler(); // Function Madness.MadBannerFlag.OnMeshVisibilityChangedHandler // (Final|Native|Protected) // @ game+0x15735b0
	void OnClothSphereOverlapEnd(struct AActor* OtherActor); // Function Madness.MadBannerFlag.OnClothSphereOverlapEnd // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnClothSphereOverlapBegin(struct AActor* OtherActor); // Function Madness.MadBannerFlag.OnClothSphereOverlapBegin // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnClothSphereEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadBannerFlag.OnClothSphereEndOverlap // (Final|Native|Protected) // @ game+0x1573410
	void OnClothSphereBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadBannerFlag.OnClothSphereBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x15731a0
	void OnBannerChangedHandler(struct FMadBannerFlagModel NewModel); // Function Madness.MadBannerFlag.OnBannerChangedHandler // (Final|Native|Protected) // @ game+0x15730f0
	void AddToHighlighter(struct TScriptInterface<None> Highlighter); // Function Madness.MadBannerFlag.AddToHighlighter // (Final|Native|Public|BlueprintCallable) // @ game+0x1572520
};

// Class Madness.MadBarrier
// Size: 0x3f8 (Inherited: 0x2f0)
struct AMadBarrier : AActor {
	struct FMulticastInlineDelegate OnBarrierTriggerred; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnBarrierLifted; // 0x300(0x10)
	struct FMulticastInlineDelegate OnBarrierReset; // 0x310(0x10)
	struct FMulticastInlineDelegate OnNarrativeChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnConditionBeganTracking; // 0x330(0x10)
	struct FMulticastInlineDelegate OnConditionMet; // 0x340(0x10)
	int32_t NarrativeIndex; // 0x350(0x04)
	char UnknownData_354_0 : 7; // 0x354(0x01)
	bool bCurrentBarrierSet : 1; // 0x354(0x01)
	char UnknownData_355[0x3]; // 0x355(0x03)
	struct TArray<struct UMadBarrierConditionBase*> BarrierConditions; // 0x358(0x10)
	struct FWeakObjectPtr<struct AActor> PhysicalBarrier; // 0x368(0x08)
	struct FWeakObjectPtr<struct AFWWaveSpawningSystem> WaveSpawningSystem; // 0x370(0x08)
	float NavLineStartQueryRadiusOverride; // 0x378(0x04)
	float NavLineEndQueryRadiusOverride; // 0x37c(0x04)
	char UnknownData_380[0x10]; // 0x380(0x10)
	struct FMulticastInlineDelegate OnEncounterClosure; // 0x390(0x10)
	struct TSet<struct UMadBarrierConditionBase*> EncounterRelatedConditions; // 0x3a0(0x50)
	char UnknownData_3F0[0x8]; // 0x3f0(0x08)

	void ResetBarrier(); // Function Madness.MadBarrier.ResetBarrier // (Final|Native|Public|BlueprintCallable) // @ game+0x157a300
	void OnRep_NarrativeIndex(); // Function Madness.MadBarrier.OnRep_NarrativeIndex // (Final|Native|Private) // @ game+0x1579e60
	void OnRep_CurrentBarrierSet(); // Function Madness.MadBarrier.OnRep_CurrentBarrierSet // (Final|Native|Private) // @ game+0x1579e00
	void OnNarrativeUpdated(struct UMadBarrierConditionBase* InCondition); // Function Madness.MadBarrier.OnNarrativeUpdated // (Final|Native|Private) // @ game+0x1579c80
	void MulticastTriggerBarrier(); // Function Madness.MadBarrier.MulticastTriggerBarrier // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1579510
	void MulticastResetBarrier(); // Function Madness.MadBarrier.MulticastResetBarrier // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1516bc0
	void MulticastLiftBarrier(); // Function Madness.MadBarrier.MulticastLiftBarrier // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1522260
	void MulticastEncounterClosure(); // Function Madness.MadBarrier.MulticastEncounterClosure // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x150ed00
	bool IsInteractionActorUsedByConditions(struct AActor* Actor); // Function Madness.MadBarrier.IsInteractionActorUsedByConditions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578f90
	bool HasBarrierBeenTriggered(); // Function Madness.MadBarrier.HasBarrierBeenTriggered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578ee0
	struct AActor* GetPhysicalBarrier(); // Function Madness.MadBarrier.GetPhysicalBarrier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578e90
	struct FText GetCurrentNarrative(); // Function Madness.MadBarrier.GetCurrentNarrative // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578c60
	struct TSoftObjectPtr<struct UTexture2D> GetCurrentHUDIcon(); // Function Madness.MadBarrier.GetCurrentHUDIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578ba0
	struct AMadBarrier* GetCurrentBarrier(); // Function Madness.MadBarrier.GetCurrentBarrier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1578b70
	struct UObject* GetConditionClassAtIndex(int32_t ConditionIndex); // Function Madness.MadBarrier.GetConditionClassAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578aa0
	struct AFWWaveSpawningSystem* FindWaveSpawningSystem(); // Function Madness.MadBarrier.FindWaveSpawningSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578a70
	void CompleteBarrierCondition(struct UMadBarrierConditionBase* InCondition); // Function Madness.MadBarrier.CompleteBarrierCondition // (Final|Native|Private) // @ game+0x1578820
	bool CanTriggerBarrier(); // Function Madness.MadBarrier.CanTriggerBarrier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15787f0
	bool AreAllConditionsMet(); // Function Madness.MadBarrier.AreAllConditionsMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15785c0
};

// Class Madness.MadBarrierActivateComponent
// Size: 0x300 (Inherited: 0x2d0)
struct UMadBarrierActivateComponent : USceneComponent {
	float CustomBarrierMarkerSize; // 0x2c8(0x04)
	struct FMulticastInlineDelegate OnSetBarrierActivated; // 0x2d0(0x10)
	struct UTexture2D* MarkerTexture; // 0x2e0(0x08)
	enum class EBarrierIconTypes IconType; // 0x2e8(0x01)
	char UnknownData_2ED[0x3]; // 0x2ed(0x03)
	struct AMadPlayerController* MadPC; // 0x2f0(0x08)
	char UnknownData_2F8[0x8]; // 0x2f8(0x08)

	void OnRep_BarrierActivated(); // Function Madness.MadBarrierActivateComponent.OnRep_BarrierActivated // (Final|Native|Private) // @ game+0x1579dc0
	void DrawHUD(struct ABaseHud* HUD, struct UCanvas* Canvas, struct UCanvas* DebugCanvas); // Function Madness.MadBarrierActivateComponent.DrawHUD // (Final|Native|Protected) // @ game+0x1578950
};

// Class Madness.MadCameraComponent
// Size: 0x8b0 (Inherited: 0x890)
struct UMadCameraComponent : UCameraComponent {
	char UnknownData_890[0x20]; // 0x890(0x20)
};

// Class Madness.MadBarrierCameraComponent
// Size: 0x8b0 (Inherited: 0x8b0)
struct UMadBarrierCameraComponent : UMadCameraComponent {
	char UnknownData_8B0_0 : 7; // 0x8b0(0x01)
	bool bForceSameFOVAsPlayers : 1; // 0x8a8(0x01)
};

// Class Madness.MadBarrierConditionBase
// Size: 0x98 (Inherited: 0x28)
struct UMadBarrierConditionBase : UObject {
	char UnknownData_28_0 : 7; // 0x28(0x01)
	bool bUseBarrierIcons : 1; // 0x28(0x01)
	char UnknownData_29[0x27]; // 0x29(0x27)
	struct FNameWrapper NarrativeKey; // 0x50(0x10)
	struct FText Narrative; // 0x60(0x18)
	int32_t Priority; // 0x78(0x04)
	char UnknownData_7C_0 : 7; // 0x7c(0x01)
	bool FinishBattleMusic : 1; // 0x7c(0x01)
	char UnknownData_7D[0x3]; // 0x7d(0x03)
	struct AFWWaveSpawningSystem* WaveSpawningSystem; // 0x80(0x08)
	int32_t ConditionRequirementValue; // 0x88(0x04)
	int32_t ConditionProgressValue; // 0x8c(0x04)
	char UnknownData_90_0 : 7; // 0x90(0x01)
	bool bOverrideQuestTracker : 1; // 0x90(0x01)
	char UnknownData_91[0x7]; // 0x91(0x07)

	void SetConditionRequirementValue(int32_t InValue); // Function Madness.MadBarrierConditionBase.SetConditionRequirementValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x157a4a0
	void SetConditionProgressValue(int32_t InValue); // Function Madness.MadBarrierConditionBase.SetConditionProgressValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x157a420
	void SetConditionAsMet(); // Function Madness.MadBarrierConditionBase.SetConditionAsMet // (Final|Native|Protected|BlueprintCallable) // @ game+0x157a400
	void OnRep_RequirementValue(); // Function Madness.MadBarrierConditionBase.OnRep_RequirementValue // (Final|Native|Private) // @ game+0x1579ea0
	void OnRep_ProgressValue(); // Function Madness.MadBarrierConditionBase.OnRep_ProgressValue // (Final|Native|Private) // @ game+0x1579ea0
	bool IsConditionMet(); // Function Madness.MadBarrierConditionBase.IsConditionMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578f40
	struct AFWWaveSpawningSystem* GetWaveSpawningSystem(); // Function Madness.MadBarrierConditionBase.GetWaveSpawningSystem // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578ec0
	enum class EMadBarrierConditionState GetCurrentState(); // Function Madness.MadBarrierConditionBase.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578d80
	int32_t GetConditionRequirementValue(); // Function Madness.MadBarrierConditionBase.GetConditionRequirementValue // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578b50
	int32_t GetConditionProgressValue(); // Function Madness.MadBarrierConditionBase.GetConditionProgressValue // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578b30
};

// Class Madness.MadBarrierConditionWaveKilled
// Size: 0x98 (Inherited: 0x98)
struct UMadBarrierConditionWaveKilled : UMadBarrierConditionBase {

	void OnWaveKilled(struct AFWWaveSpawningSystem* Wss, int32_t WaveIndex, struct FName WaveName, int32_t NumWavesKilled, struct ABaseCharacter* KilledCharacter); // Function Madness.MadBarrierConditionWaveKilled.OnWaveKilled // (Native|Protected) // @ game+0x157a0d0
};

// Class Madness.MadBarrierConditionBlueprint
// Size: 0xa0 (Inherited: 0x98)
struct UMadBarrierConditionBlueprint : UMadBarrierConditionBase {
	enum class EBarrierIconTypes BarrierIconTypeOverride; // 0x98(0x01)
	char UnknownData_99[0x7]; // 0x99(0x07)

	void OnSetConditionAsMet(struct UObject* WorldContextObject); // Function Madness.MadBarrierConditionBlueprint.OnSetConditionAsMet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnResetCondition(struct UObject* WorldContextObject); // Function Madness.MadBarrierConditionBlueprint.OnResetCondition // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnInitializeCondition(struct UObject* WorldContextObject); // Function Madness.MadBarrierConditionBlueprint.OnInitializeCondition // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnBeginTrackingCondition(struct UObject* WorldContextObject); // Function Madness.MadBarrierConditionBlueprint.OnBeginTrackingCondition // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadBarrierConditionDestroyObject
// Size: 0xc0 (Inherited: 0x98)
struct UMadBarrierConditionDestroyObject : UMadBarrierConditionBase {
	struct FWeakObjectPtr<struct AMadBarrierDestroyObject> DestroyObjects[0x3]; // 0x98(0x18)
	struct TArray<struct FWeakObjectPtr<struct AMadBarrierDestroyObject>> DestroyTargets; // 0xb0(0x10)

	void OnObjectDestroyed(); // Function Madness.MadBarrierConditionDestroyObject.OnObjectDestroyed // (Final|Native|Private) // @ game+0x1579d00
};

// Class Madness.MadBarrierConditionFixObject
// Size: 0xc8 (Inherited: 0x98)
struct UMadBarrierConditionFixObject : UMadBarrierConditionBase {
	struct FWeakObjectPtr<struct AActor> InteractionObjects[0x3]; // 0x98(0x18)
	char UnknownData_B0[0x10]; // 0xb0(0x10)
	struct FWeakObjectPtr<struct AActor> InteractionObject; // 0xc0(0x08)

	void OnInteractionEnded(struct UMadMultiInteractionComponent* InteractedWith); // Function Madness.MadBarrierConditionFixObject.OnInteractionEnded // (Final|Native|Private) // @ game+0x15799a0
};

// Class Madness.MadBarrierConditionInteraction
// Size: 0xc8 (Inherited: 0x98)
struct UMadBarrierConditionInteraction : UMadBarrierConditionBase {
	struct FWeakObjectPtr<struct AActor> InteractionObjects[0x3]; // 0x98(0x18)
	char UnknownData_B0[0x10]; // 0xb0(0x10)
	struct FWeakObjectPtr<struct AActor> InteractionObject; // 0xc0(0x08)

	void OnInteractionMontageEnded(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadBarrierConditionInteraction.OnInteractionMontageEnded // (Final|Native|Private) // @ game+0x1579a20
	void OnInteractionAnimStarted(struct ABaseCharacter* InteractingPawn); // Function Madness.MadBarrierConditionInteraction.OnInteractionAnimStarted // (Final|Native|Private) // @ game+0x1579920
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadBarrierConditionInteraction.OnInteracted // (Final|Native|Private) // @ game+0x1579860
};

// Class Madness.MadBarrierConditionKillTarget
// Size: 0xc8 (Inherited: 0x98)
struct UMadBarrierConditionKillTarget : UMadBarrierConditionWaveKilled {
	struct FName BossWaves[0x3]; // 0x98(0x18)
	struct TArray<struct FName> SupportingWaves; // 0xb0(0x10)
	struct FName BossWave; // 0xc0(0x08)

	void OnCharacterSpawned(struct AFWWaveSpawningSystem* Wss, int32_t WaveIndex, struct FName WaveName, struct ABaseCharacter* character); // Function Madness.MadBarrierConditionKillTarget.OnCharacterSpawned // (Final|Native|Private) // @ game+0x15796e0
};

// Class Madness.MadBarrierConditionObtainItem
// Size: 0x130 (Inherited: 0x98)
struct UMadBarrierConditionObtainItem : UMadBarrierConditionBase {
	struct FObtainItemDetails Items[0x3]; // 0x98(0x90)
	char UnknownData_128[0x8]; // 0x128(0x08)

	void OnWaveKilled(struct AFWWaveSpawningSystem* Wss, int32_t InWaveIndex, struct FName WaveName, int32_t NumWavesKilled, struct ABaseCharacter* KilledCharacter); // Function Madness.MadBarrierConditionObtainItem.OnWaveKilled // (Final|Native|Private) // @ game+0x1579f40
};

// Class Madness.MadBarrierConditionSecureArea
// Size: 0xa8 (Inherited: 0x98)
struct UMadBarrierConditionSecureArea : UMadBarrierConditionWaveKilled {
	struct TArray<struct FName> WaveNames; // 0x98(0x10)
};

// Class Madness.MadBarrierDestroyObject
// Size: 0x360 (Inherited: 0x2f0)
struct AMadBarrierDestroyObject : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct UMadSimpleHealthBarComponent* HealthBarComponent; // 0x2f8(0x08)
	struct FMulticastInlineDelegate OnObjectDestroyed; // 0x300(0x10)
	struct UStaticMeshComponent* MeshComponent; // 0x310(0x08)
	struct UMadTresholdBasedParticlesComponent* ParticlesComponent; // 0x318(0x08)
	struct UMinimapNodeComponent* MinimapNodeComponent; // 0x320(0x08)
	struct UMadBarrierActivateComponent* BarrierActivateComp; // 0x328(0x08)
	enum class BarrierDestroyObjectType ObjectType; // 0x330(0x01)
	char UnknownData_331[0x3]; // 0x331(0x03)
	float DurabilityMod; // 0x334(0x04)
	char UnknownData_338_0 : 7; // 0x338(0x01)
	bool bCanSelfHeal : 1; // 0x338(0x01)
	char UnknownData_339[0x3]; // 0x339(0x03)
	float Health; // 0x33c(0x04)
	float MaxHealth; // 0x340(0x04)
	char UnknownData_344[0x2]; // 0x344(0x02)
	char UnknownData_346_0 : 7; // 0x346(0x01)
	bool bChangeMaterialWithProgress : 1; // 0x346(0x01)
	char UnknownData_347[0x1]; // 0x347(0x01)
	struct TArray<struct FBlastMaterialProperty> Materials; // 0x348(0x10)
	char UnknownData_358[0x8]; // 0x358(0x08)

	void SetMaxHealth(float InMaxHealth); // Function Madness.MadBarrierDestroyObject.SetMaxHealth // (Native|Public|BlueprintCallable) // @ game+0x157a5a0
	void SetHealth(float InHealth); // Function Madness.MadBarrierDestroyObject.SetHealth // (Native|Public|BlueprintCallable) // @ game+0x157a520
	void OnRep_MaxHealth(); // Function Madness.MadBarrierDestroyObject.OnRep_MaxHealth // (Final|Native|Private) // @ game+0x1579e40
	void OnRep_Health(); // Function Madness.MadBarrierDestroyObject.OnRep_Health // (Final|Native|Private) // @ game+0x1579e20
	float GetMaxHealth(); // Function Madness.MadBarrierDestroyObject.GetMaxHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1578e50
	float GetHealth(); // Function Madness.MadBarrierDestroyObject.GetHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1578e10
};

// Class Madness.MadKaczuszka
// Size: 0x370 (Inherited: 0x2f0)
struct AMadKaczuszka : AActor {
	char UnknownData_2F0[0x78]; // 0x2f0(0x78)
	char bAutoActivate : 1; // 0x368(0x01)
	char UnknownData_368_1 : 7; // 0x368(0x01)
	char UnknownData_369[0x7]; // 0x369(0x07)

	void SetMaxHealth(float InMaxHealth); // Function Madness.MadKaczuszka.SetMaxHealth // (Native|Public|BlueprintCallable) // @ game+0x16630c0
	void SetHealth(float InHealth); // Function Madness.MadKaczuszka.SetHealth // (Native|Public|BlueprintCallable) // @ game+0x1663040
	void SetActive(bool bNewActive); // Function Madness.MadKaczuszka.SetActive // (Native|Public|BlueprintCallable) // @ game+0x155ef10
	void K2_SetTeam(enum class ETeam NewTeam); // Function Madness.MadKaczuszka.K2_SetTeam // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x157ead0
	enum class ETeam K2_GetTeam(); // Function Madness.MadKaczuszka.K2_GetTeam // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x157eaa0
	bool IsActive(); // Function Madness.MadKaczuszka.IsActive // (Native|Public|BlueprintCallable) // @ game+0x1661240
	float GetMaxHealth(); // Function Madness.MadKaczuszka.GetMaxHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1660b60
	float GetHealth(); // Function Madness.MadKaczuszka.GetHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16609e0
};

// Class Madness.MadBarrierInteractionObject
// Size: 0x3b0 (Inherited: 0x370)
struct AMadBarrierInteractionObject : AMadKaczuszka {
	struct UMadSimpleHealthBarComponent* HealthBarComponent; // 0x370(0x08)
	struct UMadBarrierActivateComponent* BarrierActivateComp; // 0x378(0x08)
	float DamageToProgressConverion; // 0x380(0x04)
	char UnknownData_384_0 : 7; // 0x384(0x01)
	bool bChangeMaterialWithProgress : 1; // 0x384(0x01)
	char UnknownData_385[0x3]; // 0x385(0x03)
	struct TArray<struct FBlastMaterialProperty> Materials; // 0x388(0x10)
	struct UMadMultiInteractionComponent* InteractionComponent; // 0x398(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x3a0(0x08)
	struct UMadTresholdBasedParticlesComponent* ParticlesComponent; // 0x3a8(0x08)

	void OnProgressChanged(struct UMadMultiInteractionComponent* InteractedWith); // Function Madness.MadBarrierInteractionObject.OnProgressChanged // (Final|Native|Public) // @ game+0x1579d20
};

// Class Madness.MadRandomlyAvailableActor
// Size: 0x2f8 (Inherited: 0x2f0)
struct AMadRandomlyAvailableActor : AActor {
	char UnknownData_2F0_0 : 7; // 0x2f0(0x01)
	bool bWasLoadedFromFacts : 1; // 0x2f0(0x01)
	char UnknownData_2F1[0x7]; // 0x2f1(0x07)
};

// Class Madness.MadLootChest
// Size: 0x3c0 (Inherited: 0x2f8)
struct AMadLootChest : AMadRandomlyAvailableActor {
	struct FMulticastInlineDelegate OnOpened; // 0x2f8(0x10)
	struct USceneComponent* Scene; // 0x308(0x08)
	struct USkeletalMeshComponent* ChestSkeletalMesh; // 0x310(0x08)
	struct TMap<enum class EMadItemRarity, struct FMadChest> ChestTypes; // 0x318(0x50)
	struct UAnimSequence* CloseChestAnim; // 0x368(0x08)
	struct FName DefaultLootName; // 0x370(0x08)
	float InteractionHoldTime; // 0x378(0x04)
	char UnknownData_37C_0 : 7; // 0x37c(0x01)
	bool bAlwaysSpawn : 1; // 0x37c(0x01)
	char UnknownData_37D_0 : 7; // 0x37d(0x01)
	bool bCustomLootOverride : 1; // 0x37d(0x01)
	enum class EMadItemRarity CustomRarity; // 0x37e(0x01)
	char UnknownData_37F[0x1]; // 0x37f(0x01)
	struct FNameWrapper CustomLootName; // 0x380(0x10)
	enum class EMadItemRarity ChestRarity; // 0x390(0x01)
	char UnknownData_391[0x7]; // 0x391(0x07)
	struct UStaticMeshComponent* LidMesh; // 0x398(0x08)
	struct UStaticMeshComponent* BaseMesh; // 0x3a0(0x08)
	char UnknownData_3A8_0 : 7; // 0x3a8(0x01)
	bool bOpened : 1; // 0x3a8(0x01)
	char UnknownData_3A9_0 : 7; // 0x3a9(0x01)
	bool bDisabled : 1; // 0x3a9(0x01)
	char UnknownData_3AA_0 : 7; // 0x3aa(0x01)
	bool bWasLootDropped : 1; // 0x3aa(0x01)
	char UnknownData_3AB[0xd]; // 0x3ab(0x0d)
	struct UInteractionComponent* InteractionComponent; // 0x3b8(0x08)

	struct AMadLootChest* SpawnCustomChest(struct UObject* WCO, struct AMadLootChest* ChestClass, struct FTransform Transform, struct FName Loot, enum class EMadItemRarity Rarity); // Function Madness.MadLootChest.SpawnCustomChest // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1672d30
	void SetEnabled(bool bEnabled); // Function Madness.MadLootChest.SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15c2580
	void OnRep_Opened(); // Function Madness.MadLootChest.OnRep_Opened // (Final|Native|Private) // @ game+0x1672770
	void OnRep_Disabled(); // Function Madness.MadLootChest.OnRep_Disabled // (Native|Protected) // @ game+0x1607b60
	void OnRep_ChestRarity(); // Function Madness.MadLootChest.OnRep_ChestRarity // (Final|Native|Protected) // @ game+0x1672750
	void OnLootChestOpened(); // Function Madness.MadLootChest.OnLootChestOpened // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnInteractionNotify(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith, struct FName NotifyName); // Function Madness.MadLootChest.OnInteractionNotify // (Final|Native|Protected) // @ game+0x1672650
	void OnInteractionInterrupted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadLootChest.OnInteractionInterrupted // (Final|Native|Protected) // @ game+0x1672590
	void OnInteractionAnimStarted(struct ABaseCharacter* InteractingPawn); // Function Madness.MadLootChest.OnInteractionAnimStarted // (Final|Native|Protected) // @ game+0x1672510
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadLootChest.OnInteracted // (Final|Native|Protected) // @ game+0x1672390
	void OnAnimationEnded(); // Function Madness.MadLootChest.OnAnimationEnded // (Final|Native|Private) // @ game+0x1671c90
};

// Class Madness.MadBarrierLootChest
// Size: 0x3d0 (Inherited: 0x3c0)
struct AMadBarrierLootChest : AMadLootChest {
	struct UMadBarrierActivateComponent* BarrierActivateComp; // 0x3c0(0x08)
	struct UMinimapNodeComponent* MinimapNode; // 0x3c8(0x08)

	void HideBarrierActivation(); // Function Madness.MadBarrierLootChest.HideBarrierActivation // (Final|Native|Private) // @ game+0x1578f00
};

// Class Madness.MadBarrierUIModel
// Size: 0xa0 (Inherited: 0x50)
struct UMadBarrierUIModel : UBaseUIModel {
	struct FText CurrentBarrierNarative; // 0x50(0x18)
	struct FString CurrentBarrierHUDIcon; // 0x68(0x10)
	char UnknownData_78[0x28]; // 0x78(0x28)

	void OnNarrativeChanged(struct FText InNarrative); // Function Madness.MadBarrierUIModel.OnNarrativeChanged // (Final|Native|Public) // @ game+0x1579ba0
	void OnBarrierEnded(struct AMadBarrier* Barrier); // Function Madness.MadBarrierUIModel.OnBarrierEnded // (Final|Native|Public) // @ game+0x1579660
	void OnBarrierActivated(struct AMadBarrier* Barrier); // Function Madness.MadBarrierUIModel.OnBarrierActivated // (Final|Native|Public) // @ game+0x15795e0
};

// Class Madness.MadBaseCharacter
// Size: 0x1400 (Inherited: 0xfd0)
struct AMadBaseCharacter : ABaseCharacter {
	char UnknownData_FD0[0xc]; // 0xfd0(0x0c)
	struct FGameplayTag WeaponUsageBlockedTag; // 0xfdc(0x08)
	char UnknownData_FE4[0x4]; // 0xfe4(0x04)
	struct FNameWrapper MetricSystemCharID; // 0xfe8(0x10)
	struct FRotator CachedActorRotation; // 0xff8(0x0c)
	char UnknownData_1004[0x4]; // 0x1004(0x04)
	struct UMadAttributeSet* AttributeSet; // 0x1008(0x08)
	struct UMadDamageAttributeSet* DamageAttributeSet; // 0x1010(0x08)
	struct FMulticastInlineDelegate OnDamageAdjusted; // 0x1018(0x10)
	struct FMulticastInlineDelegate OnRefreshLateralData; // 0x1028(0x10)
	struct FMulticastInlineDelegate OnEquipWeaponAnimFinished; // 0x1038(0x10)
	struct FName CachedAttributeSetInitialGroupName; // 0x1048(0x08)
	struct UCharacterCustomizationComponent* CharacterCustomizationComponent; // 0x1050(0x08)
	struct FMulticastInlineDelegate OnDamageDone; // 0x1058(0x10)
	struct FMulticastInlineDelegate OnDamageTaken; // 0x1068(0x10)
	struct FMulticastInlineDelegate OnEnemyKilled; // 0x1078(0x10)
	struct FMulticastInlineDelegate OnFocusChanged; // 0x1088(0x10)
	struct FMulticastInlineDelegate OnMaxHealthChanged; // 0x1098(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0x10a8(0x10)
	struct FMulticastInlineDelegate OnArmorChanged; // 0x10b8(0x10)
	struct FMulticastInlineDelegate OnResistanceChanged; // 0x10c8(0x10)
	struct FMulticastInlineDelegate OnHeal; // 0x10d8(0x10)
	struct FMulticastInlineDelegate OnChestOpened; // 0x10e8(0x10)
	struct FMulticastInlineDelegate OnFakeDeath; // 0x10f8(0x10)
	struct FMulticastInlineDelegate OnEnemyKilledByFakeDeath; // 0x1108(0x10)
	struct FMulticastInlineDelegate OnEnemyActivatedAbilityFromEvent; // 0x1118(0x10)
	char UnknownData_1128_0 : 7; // 0x1128(0x01)
	bool bBlocksDeathEvent : 1; // 0x1128(0x01)
	char UnknownData_1129[0x7]; // 0x1129(0x07)
	struct TArray<struct FMadTimeDilationHelper> TimeDilationModifiers; // 0x1130(0x10)
	float DeathTimeDilation; // 0x1140(0x04)
	char UnknownData_1144[0x4c]; // 0x1144(0x4c)
	struct USoundCue* HitByMeleeDefaultCue; // 0x1190(0x08)
	struct UImpactEffectWeapon* HitByLightMeleeTemplate; // 0x1198(0x08)
	struct UImpactEffectWeapon* HitByHeavyMeleeTemplate; // 0x11a0(0x08)
	struct UPhysicalMaterial* DefaultPhysMat; // 0x11a8(0x08)
	struct UPhysicalMaterial* ShaderPhysMat; // 0x11b0(0x08)
	struct UPhysicalMaterial* CurrentPhysMat; // 0x11b8(0x08)
	char UnknownData_11C0[0x8]; // 0x11c0(0x08)
	struct UHealthBarComponent* HealthBarComponent; // 0x11c8(0x08)
	char UnknownData_11D0[0x18]; // 0x11d0(0x18)
	struct TArray<struct FGameplayTag> ActiveStatuses; // 0x11e8(0x10)
	char UnknownData_11F8[0x10]; // 0x11f8(0x10)
	char bNoGore : 1; // 0x1208(0x01)
	char UnknownData_1208_1 : 7; // 0x1208(0x01)
	char UnknownData_1209[0x7]; // 0x1209(0x07)
	struct UGoreComponent* GoreComponent; // 0x1210(0x08)
	struct UMadAuraComponent* AuraComponent; // 0x1218(0x08)
	struct FMulticastInlineDelegate OnAbilityNotifyBegin; // 0x1220(0x10)
	struct FMulticastInlineDelegate OnAbilityNotifyEnd; // 0x1230(0x10)
	char UnknownData_1240[0x18]; // 0x1240(0x18)
	struct ASkeletalMeshActor* ExtraEquipActor; // 0x1258(0x08)
	char UnknownData_1260[0x8]; // 0x1260(0x08)
	struct FGameplayTagContainer WeaponTags; // 0x1268(0x20)
	char UnknownData_1288[0x4]; // 0x1288(0x04)
	float HealthLostRecently; // 0x128c(0x04)
	struct UReactionDataAsset* ReactionDataAsset; // 0x1290(0x08)
	struct TArray<struct FMadWeakSpot> WeakSpots; // 0x1298(0x10)
	char UnknownData_12A8[0x10]; // 0x12a8(0x10)
	char UnknownData_12B8_0 : 7; // 0x12b8(0x01)
	bool bIsFrozen : 1; // 0x12b8(0x01)
	char UnknownData_12B9[0x7]; // 0x12b9(0x07)
	struct TArray<struct FAbilityHandleWithPriority> DeathAbilityPriorityStack; // 0x12c0(0x10)
	char UnknownData_12D0_0 : 7; // 0x12d0(0x01)
	bool bKilledByDeathAbility : 1; // 0x12d0(0x01)
	char UnknownData_12D1[0x3]; // 0x12d1(0x03)
	struct FGameplayAbilitySpecHandle ChosenDeathAbility; // 0x12d4(0x04)
	struct AController* DeathAbilityInstigator; // 0x12d8(0x08)
	struct AActor* DeathAbilityCauser; // 0x12e0(0x08)
	char UnknownData_12E8_0 : 7; // 0x12e8(0x01)
	bool bBlocksDeathAbilities : 1; // 0x12e8(0x01)
	char UnknownData_12E9[0x7]; // 0x12e9(0x07)
	struct UMadAbilitySystemComponent* AbilitySystemComponent; // 0x12f0(0x08)
	struct UMadAbilitySet* AbilitySetForPlayer; // 0x12f8(0x08)
	struct UMadAbilitySet* AbilitySet; // 0x1300(0x08)
	struct UMadAbilitySet* AutoAbilitySet; // 0x1308(0x08)
	char UnknownData_1310[0x28]; // 0x1310(0x28)
	char UnknownData_1338_0 : 7; // 0x1338(0x01)
	bool bBroadcastKillToast : 1; // 0x1338(0x01)
	char UnknownData_1339[0x7]; // 0x1339(0x07)
	struct TMap<struct FGameplayTag, struct UParticleSystem*> GameplayCueEffects; // 0x1340(0x50)
	char UnknownData_1390[0x70]; // 0x1390(0x70)

	bool WillDamageKillMe(float Damage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.WillDamageKillMe // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x157fd60
	void UpdateHealthWidget(); // Function Madness.MadBaseCharacter.UpdateHealthWidget // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void UpdateBlastMeshComponentsHealth(struct UCurveTable* ComponentsHealthCurveTable); // Function Madness.MadBaseCharacter.UpdateBlastMeshComponentsHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x157fce0
	void UnblockShooting(); // Function Madness.MadBaseCharacter.UnblockShooting // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x157fcc0
	bool ThermalBombDontGib(); // Function Madness.MadBaseCharacter.ThermalBombDontGib // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157fc90
	void ServerModifyGameplayAttribute(struct FGameplayAttribute AttributeToModify, float ModifyByValue); // Function Madness.MadBaseCharacter.ServerModifyGameplayAttribute // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x157f8f0
	void ServerInitAttributeSets(struct FName InGroupName, int32_t InLevel, bool bInitialInit); // Function Madness.MadBaseCharacter.ServerInitAttributeSets // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x157f7b0
	void ServerEquipWeapon(struct FEquipParams Params); // Function Madness.MadBaseCharacter.ServerEquipWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x157f710
	void ServerChangeTeam(enum class ETeam NewTeam); // Function Madness.MadBaseCharacter.ServerChangeTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x157f690
	void ResetHealthLostRecently(); // Function Madness.MadBaseCharacter.ResetHealthLostRecently // (Native|Public|BlueprintCallable) // @ game+0x157f670
	void ResetAttributesForLevel(int32_t InLevel); // Function Madness.MadBaseCharacter.ResetAttributesForLevel // (Native|Public|BlueprintCallable) // @ game+0x157f5e0
	void ReleaseBlockDeathAbilities(struct FString Reason); // Function Madness.MadBaseCharacter.ReleaseBlockDeathAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0x157f540
	void RaiseBackFromPhoenixEffect(float Health); // Function Madness.MadBaseCharacter.RaiseBackFromPhoenixEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x157f4c0
	void OnHealthBarWidgetCreated(struct UWidget* NewWidget); // Function Madness.MadBaseCharacter.OnHealthBarWidgetCreated // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void NotifyEnemyActivatedAbilityEvent(struct FGameplayEventData EventData); // Function Madness.MadBaseCharacter.NotifyEnemyActivatedAbilityEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x157ef10
	void MulticastSetCustomTimeDilation(float InTimeDilation); // Function Madness.MadBaseCharacter.MulticastSetCustomTimeDilation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x157ee90
	void MulticastPostInitAttributeSets(struct FPostInitAttributeSetsData InData); // Function Madness.MadBaseCharacter.MulticastPostInitAttributeSets // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x157edf0
	void ModifyGameplayAttribute(struct FGameplayAttribute AttributeToModify, float ModifyByValue); // Function Madness.MadBaseCharacter.ModifyGameplayAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0x157eb50
	void MadAbilityAnimNotifyDelegate__DelegateSignature(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // DelegateFunction Madness.MadBaseCharacter.MadAbilityAnimNotifyDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	bool IsReactionAnimDataValid(struct FMadReactionAnimData InReactionAnimData); // Function Madness.MadBaseCharacter.IsReactionAnimDataValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e9e0
	bool ImpaleDissolveBody(); // Function Madness.MadBaseCharacter.ImpaleDissolveBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e9b0
	struct FRotator GetWeaponRotationAdjustment(); // Function Madness.MadBaseCharacter.GetWeaponRotationAdjustment // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e960
	struct UAnimMontage* GetTremorMontage(); // Function Madness.MadBaseCharacter.GetTremorMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e930
	struct UAnimMontage* GetThermalBombedMontage(); // Function Madness.MadBaseCharacter.GetThermalBombedMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e900
	struct UAnimMontage* GetStunnedMontage(); // Function Madness.MadBaseCharacter.GetStunnedMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e8d0
	struct UAnimMontage* GetStoneExplosionMontage(); // Function Madness.MadBaseCharacter.GetStoneExplosionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e8a0
	void GetReactionAnimData(struct FMadReactionAnimData OutReactionAnimData, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.GetReactionAnimData // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e790
	void GetMeleeReactionAnimData(struct FMadReactionAnimData OutMeleeReactionAnimData, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.GetMeleeReactionAnimData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e690
	struct AMadInventory* GetMadnessInventory(); // Function Madness.MadBaseCharacter.GetMadnessInventory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e620
	float GetKnockdownMultiplier(); // Function Madness.MadBaseCharacter.GetKnockdownMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e5b0
	struct FName GetKnockdownImpulseBone(); // Function Madness.MadBaseCharacter.GetKnockdownImpulseBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e580
	void GetKnockdownAnimData(struct FMadReactionAnimData OutKnockdownAnimData, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.GetKnockdownAnimData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e480
	float GetKnockbackDistance(struct UDamageType* DamageTypeClass, struct AMadBaseCharacter* InstigatorPawn); // Function Madness.MadBaseCharacter.GetKnockbackDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e3c0
	void GetKnockbackAnimData(struct FMadReactionAnimData OutKnockbackAnimData, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.GetKnockbackAnimData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e2c0
	struct UAnimMontage* GetInFireMontage(); // Function Madness.MadBaseCharacter.GetInFireMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e290
	struct UAnimMontage* GetImpaleMontage(); // Function Madness.MadBaseCharacter.GetImpaleMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157e260
	struct USoundCue* GetHitByMeleeCue(); // Function Madness.MadBaseCharacter.GetHitByMeleeCue // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x157e230
	struct FGameplayCueOverrides GetGameplayCueOverrides(struct FGameplayTag InGameplayCueTag); // Function Madness.MadBaseCharacter.GetGameplayCueOverrides // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x157dfe0
	struct UParticleSystem* GetGameplayCueEffect(struct FGameplayTag InGameplayCueTag); // Function Madness.MadBaseCharacter.GetGameplayCueEffect // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x157df40
	bool GetCustomReactions(struct FMadReactionAnimData OutReactionAnimData, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseCharacter.GetCustomReactions // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x157de30
	struct UAnimMontage* GetBlackbodyMontage(); // Function Madness.MadBaseCharacter.GetBlackbodyMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157de00
	struct UAnimMontage* GetBlackbodyMainMontage(); // Function Madness.MadBaseCharacter.GetBlackbodyMainMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157ddd0
	struct TArray<struct FName> GetActiveStatusesIconsPaths(); // Function Madness.MadBaseCharacter.GetActiveStatusesIconsPaths // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157dcb0
	struct TArray<struct FGameplayTag> GetActiveStatuses(); // Function Madness.MadBaseCharacter.GetActiveStatuses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157dbf0
	struct FRotator ConvertRotationToAimOffset(struct FRotator InRotation, float AimOffsetLimit); // Function Madness.MadBaseCharacter.ConvertRotationToAimOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x157db00
	void ClientShowHpBar(); // Function Madness.MadBaseCharacter.ClientShowHpBar // (Net|Native|Event|Public|NetClient) // @ game+0x157dae0
	void ChangeTeam(enum class ETeam NewTeam); // Function Madness.MadBaseCharacter.ChangeTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x157da60
	bool CanPlayReaction(float Damage, struct UDamageType* DamageTypeClass, struct AController* InstigatorController); // Function Madness.MadBaseCharacter.CanPlayReaction // (Native|Public|BlueprintCallable) // @ game+0x157d8c0
	void BlockShooting(); // Function Madness.MadBaseCharacter.BlockShooting // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x157d8a0
	void AddBlockDeathAbilities(struct FString Reason); // Function Madness.MadBaseCharacter.AddBlockDeathAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0x157d800
};

// Class Madness.MadBaseAICharacter
// Size: 0x1710 (Inherited: 0x1400)
struct AMadBaseAICharacter : AMadBaseCharacter {
	char UnknownData_1400[0x28]; // 0x1400(0x28)
	struct FName PreferredTargetBone; // 0x1428(0x08)
	float OnTargetRangeMultiplier; // 0x1430(0x04)
	float InnerRangeMultiplier; // 0x1434(0x04)
	struct FVector LocationOffset; // 0x1438(0x0c)
	float CollisionHeightMultiplier; // 0x1444(0x04)
	float CollisionRadiusMultiplier; // 0x1448(0x04)
	char UnknownData_144C[0x5c]; // 0x144c(0x5c)
	struct TArray<struct FAITargetMarkerUpdateData> TargetMarkerUpdateData; // 0x14a8(0x10)
	char UnknownData_14B8[0x8]; // 0x14b8(0x08)
	struct FAIWeaponInfo AIWeaponInfo; // 0x14c0(0x10)
	char UnknownData_14D0[0x8]; // 0x14d0(0x08)
	struct TArray<struct FName> BonesTargetableByAbilities; // 0x14d8(0x10)
	char UnknownData_14E8[0xd]; // 0x14e8(0x0d)
	char UnknownData_14F5_0 : 7; // 0x14f5(0x01)
	bool bEnableDamageMultiplier : 1; // 0x14f5(0x01)
	char UnknownData_14F6[0x2]; // 0x14f6(0x02)
	struct FString DamageHitBoneName; // 0x14f8(0x10)
	float HitHalfAngle; // 0x1508(0x04)
	float DamageMultiplier; // 0x150c(0x04)
	struct Acharacter* DamageInstigatorCharacter; // 0x1510(0x08)
	char UnknownData_1518_0 : 7; // 0x1518(0x01)
	bool bEnablePostDeathAnim : 1; // 0x1518(0x01)
	char UnknownData_1519[0x7]; // 0x1519(0x07)
	struct UAnimMontage* PostDeathAnim; // 0x1520(0x08)
	char UnknownData_1528[0xd]; // 0x1528(0x0d)
	enum class EMadEnvironmentType EnvironmentType; // 0x1535(0x01)
	char UnknownData_1536[0x2]; // 0x1536(0x02)
	struct UBaseAnimProxyData* AnimationProxyData; // 0x1538(0x08)
	struct FGameplayTag ForceNoCoverTag; // 0x1540(0x08)
	char bIsResurrected : 1; // 0x1548(0x01)
	char UnknownData_1548_1 : 7; // 0x1548(0x01)
	char UnknownData_1549[0x7]; // 0x1549(0x07)
	struct UBehaviorTree* AbilityBehaviorTree; // 0x1550(0x08)
	struct UBehaviorTree* CustomCoverActionBehaviorTree; // 0x1558(0x08)
	struct UMadAbilitySet* SkillSet; // 0x1560(0x08)
	struct UMadTraversalAnimData* TraversalAnimData; // 0x1568(0x08)
	struct UMadAbilitySet* RandomPoolSkillSet; // 0x1570(0x08)
	struct UMadCategorizedAbilitySet* RandomCategorizedPoolSkillSet; // 0x1578(0x08)
	char bUseRandomSkills : 1; // 0x1580(0x01)
	char UnknownData_1580_1 : 7; // 0x1580(0x01)
	char UnknownData_1581[0x3]; // 0x1581(0x03)
	int32_t NumberOfRandomSkills; // 0x1584(0x04)
	char UnknownData_1588[0x18]; // 0x1588(0x18)
	struct TArray<struct FMadWeightedName> Loots; // 0x15a0(0x10)
	float LootDropChancePct; // 0x15b0(0x04)
	float AmmoDropChancePct; // 0x15b4(0x04)
	float LootDropImpulseMult; // 0x15b8(0x04)
	char UnknownData_15BC_0 : 7; // 0x15bc(0x01)
	bool bLootEnabled : 1; // 0x15bc(0x01)
	char UnknownData_15BD[0x7]; // 0x15bd(0x07)
	char UnknownData_15C4_0 : 7; // 0x15c4(0x01)
	bool bShouldUseFaceAnimation : 1; // 0x15c4(0x01)
	char UnknownData_15C5[0x3]; // 0x15c5(0x03)
	struct TSoftObjectPtr<struct UAnimSequence> DefaultFaceAnimation; // 0x15c8(0x28)
	struct UAnimSequence* FaceAnimation; // 0x15f0(0x08)
	char bAllowIKForCharacter : 1; // 0x15f8(0x01)
	char UnknownData_15F8_1 : 7; // 0x15f8(0x01)
	char UnknownData_15F9[0x3]; // 0x15f9(0x03)
	float DangerLevel; // 0x15fc(0x04)
	struct UDataTable* SkillsDefinitionsDataTable; // 0x1600(0x08)
	char UnknownData_1608[0x10]; // 0x1608(0x10)
	struct UMadHealthBarComponent* MadHealthBarComponent; // 0x1618(0x08)
	struct UBase3DWidgetComponent* OffScreenCastIndicator; // 0x1620(0x08)
	char UnknownData_1628[0x54]; // 0x1628(0x54)
	float CastingProgress; // 0x167c(0x04)
	char UnknownData_1680[0x4]; // 0x1680(0x04)
	struct FPostInitAttributeSetsData PostInitAttributeSetsData; // 0x1684(0x3c)
	char UnknownData_16C0[0x8]; // 0x16c0(0x08)
	struct USkeletalMeshSocket* SocketToFollow; // 0x16c8(0x08)
	char UnknownData_16D0_0 : 7; // 0x16d0(0x01)
	bool bBlockedPhysHitReactions : 1; // 0x16d0(0x01)
	char UnknownData_16D1_0 : 7; // 0x16d1(0x01)
	bool bGetActualNavLocation : 1; // 0x16d1(0x01)
	char UnknownData_16D2[0x1e]; // 0x16d2(0x1e)
	struct UParticleSystemComponent* PhantomStabberMarkPSC; // 0x16f0(0x08)
	char UnknownData_16F8[0x8]; // 0x16f8(0x08)
	struct TArray<struct UPrimitiveComponent*> CachedPrimitiveComponents; // 0x1700(0x10)

	bool WasResurrected(); // Function Madness.MadBaseAICharacter.WasResurrected // (Final|Native|Public|BlueprintCallable) // @ game+0x157acc0
	void UpdateHealthBarResistance(float OldValue, float CurrentValue); // Function Madness.MadBaseAICharacter.UpdateHealthBarResistance // (Final|Native|Private) // @ game+0x157ac00
	void UpdateHealthBarMode(enum class EMadHealthBarMode InMode); // Function Madness.MadBaseAICharacter.UpdateHealthBarMode // (Final|Native|Private) // @ game+0x157ab80
	void UpdateHealthBarHealth(float OldValue, float CurrentValue); // Function Madness.MadBaseAICharacter.UpdateHealthBarHealth // (Final|Native|Private) // @ game+0x157aac0
	void UpdateHealthBarArmor(float OldValue, float CurrentValue); // Function Madness.MadBaseAICharacter.UpdateHealthBarArmor // (Final|Native|Private) // @ game+0x157aa00
	void TryDropLootDelayed(); // Function Madness.MadBaseAICharacter.TryDropLootDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x157a9e0
	void StartFaceAnimation(); // Function Madness.MadBaseAICharacter.StartFaceAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x157a9c0
	int32_t SpawnTargetMarker(struct FMadAITargetMarker MarkerObject, struct FTransform SpawnTransform, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, struct FVector NewScale); // Function Madness.MadBaseAICharacter.SpawnTargetMarker // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x157a790
	void ShowCastBar(struct UGameplayAbility* InAbility, float InCastTime, bool bInIsChanneled); // Function Madness.MadBaseAICharacter.ShowCastBar // (Final|Native|Public|BlueprintCallable) // @ game+0x157a680
	bool ShouldUseFaceAnimation(); // Function Madness.MadBaseAICharacter.ShouldUseFaceAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x157a650
	bool ShouldStopAIMovementDuringAbilityTask(); // Function Madness.MadBaseAICharacter.ShouldStopAIMovementDuringAbilityTask // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x157a620
	void SetAsResurrected(); // Function Madness.MadBaseAICharacter.SetAsResurrected // (Final|Native|Public|BlueprintCallable) // @ game+0x157a3e0
	void RunTestAbility(struct FGameplayTagContainer GameplayTagContainer); // Function Madness.MadBaseAICharacter.RunTestAbility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x157a320
	void ReplicatePendingWeapon(struct AWeapon* NewWeapon); // Function Madness.MadBaseAICharacter.ReplicatePendingWeapon // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x157a270
	void ReinitializeHealthBar(); // Function Madness.MadBaseAICharacter.ReinitializeHealthBar // (Native|Protected|BlueprintCallable) // @ game+0x157a250
	void OnTargetMarkerDeactivated(struct UActorComponent* Component); // Function Madness.MadBaseAICharacter.OnTargetMarkerDeactivated // (Final|Native|Private) // @ game+0x1579ec0
	void OnRep_PostInitAttributeSetsData(); // Function Madness.MadBaseAICharacter.OnRep_PostInitAttributeSetsData // (Final|Native|Private) // @ game+0x1579e80
	void OnRep_CastingProgress(); // Function Madness.MadBaseAICharacter.OnRep_CastingProgress // (Final|Native|Private) // @ game+0x1579de0
	void OnRep_AIWeaponInfo(); // Function Madness.MadBaseAICharacter.OnRep_AIWeaponInfo // (Final|Native|Private) // @ game+0x1579da0
	void OnMeshLoaded(struct USkeletalMesh* SkeletalMesh, struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Madness.MadBaseAICharacter.OnMeshLoaded // (Final|Native|Protected) // @ game+0x1579ae0
	void OnHealthBarShown(); // Function Madness.MadBaseAICharacter.OnHealthBarShown // (Final|Native|Private) // @ game+0x1579840
	void OnComponentSliceRequestsDone(); // Function Madness.MadBaseAICharacter.OnComponentSliceRequestsDone // (Final|Native|Public) // @ game+0x1579820
	void MulticastSpawnTargetMarker_Internal(struct FMadAITargetMarker MarkerObject, int32_t MarkerID, struct FTransform SpawnTransform, struct FVector NewScale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod); // Function Madness.MadBaseAICharacter.MulticastSpawnTargetMarker_Internal // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x15792e0
	void MulticastShowCastBar(struct FString InAbilityName, float InCastTime, bool bInIsChanneled); // Function Madness.MadBaseAICharacter.MulticastShowCastBar // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15791c0
	void MulticastHideCastBar(); // Function Madness.MadBaseAICharacter.MulticastHideCastBar // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15791a0
	void MulticastEnableRotatingLineTargetMarker(struct AActor* TargetActor, int32_t MarkerID); // Function Madness.MadBaseAICharacter.MulticastEnableRotatingLineTargetMarker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15790d0
	void MulticastDisableRotatingLineTargetMarker(int32_t MarkerID); // Function Madness.MadBaseAICharacter.MulticastDisableRotatingLineTargetMarker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1579040
	void LookReactionStart(); // Function Madness.MadBaseAICharacter.LookReactionStart // (Native|Event|Protected|BlueprintEvent) // @ game+0x1579020
	bool IsIKForCharacterEnabled(); // Function Madness.MadBaseAICharacter.IsIKForCharacterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1578f60
	void HideCastBar(); // Function Madness.MadBaseAICharacter.HideCastBar // (Final|Native|Public|BlueprintCallable) // @ game+0x1578f20
	struct FTransform GetDropPickupTransform(); // Function Madness.MadBaseAICharacter.GetDropPickupTransform // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1578da0
	struct TArray<struct FName> GetCurrentSkillNames(); // Function Madness.MadBaseAICharacter.GetCurrentSkillNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1578d00
	void EnableIKForCharacter(); // Function Madness.MadBaseAICharacter.EnableIKForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1578a50
	void DisableIKForCharacter(); // Function Madness.MadBaseAICharacter.DisableIKForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1578930
	void DestroyTargetMarker(int32_t MarkerID); // Function Madness.MadBaseAICharacter.DestroyTargetMarker // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15788a0
	bool CanPlayHitReactionEvent(float Damage, struct UDamageType* DamageTypeClass); // Function Madness.MadBaseAICharacter.CanPlayHitReactionEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x1578720
	void AsyncLoadFaceAnimation(struct TSoftObjectPtr<struct UAnimSequence> Animation); // Function Madness.MadBaseAICharacter.AsyncLoadFaceAnimation // (Final|Native|Protected) // @ game+0x15785f0
};

// Class Madness.MadBaseAura
// Size: 0x330 (Inherited: 0x2f0)
struct AMadBaseAura : AActor {
	struct UParticleSystem* ParticleTemplate; // 0x2f0(0x08)
	struct UMadGameplayEffect* AuraEffect; // 0x2f8(0x08)
	struct UGameplayEffect* CasterEffect; // 0x300(0x08)
	float DURATION; // 0x308(0x04)
	float Radius; // 0x30c(0x04)
	enum class ETeamAttitude TeamAffectedByAura; // 0x310(0x01)
	char UnknownData_311_0 : 7; // 0x311(0x01)
	bool bAffectsOwner : 1; // 0x311(0x01)
	char UnknownData_312[0x6]; // 0x312(0x06)
	struct UParticleSystemComponent* Particle; // 0x318(0x08)
	char UnknownData_320[0x10]; // 0x320(0x10)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadBaseAura.OnOwnerKilled // (Native|Protected) // @ game+0x157f340
};

// Class Madness.MadBeamTrapMarker
// Size: 0x2f0 (Inherited: 0x2f0)
struct AMadBeamTrapMarker : AActor {

	void Start(); // Function Madness.MadBeamTrapMarker.Start // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void End(); // Function Madness.MadBeamTrapMarker.End // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadBeamTrap
// Size: 0x300 (Inherited: 0x2f0)
struct AMadBeamTrap : AActor {
	struct USceneComponent* CentreBase; // 0x2f0(0x08)
	struct USceneComponent* BeamBase; // 0x2f8(0x08)
};

// Class Madness.MadBeamTrapManager
// Size: 0x398 (Inherited: 0x2f0)
struct AMadBeamTrapManager : AActor {
	struct AMadBeamTrap* BeamTrapActor; // 0x2f0(0x08)
	float GrowBeamDuration; // 0x2f8(0x04)
	float FullBeamDuration; // 0x2fc(0x04)
	float ShrinkBeamDuration; // 0x300(0x04)
	float ShrinkCentreDuration; // 0x304(0x04)
	float DamageFrequency; // 0x308(0x04)
	float DamageEmitterFrequency; // 0x30c(0x04)
	struct UParticleSystem* DamageEmitter; // 0x310(0x08)
	struct FName DamageEmitterBoneName; // 0x318(0x08)
	struct FRotator DamageEmitterRotation; // 0x320(0x0c)
	float RotationSpeed; // 0x32c(0x04)
	struct UDamageType* DamageType; // 0x330(0x08)
	struct TArray<struct AMadBeamTrap*> Traps; // 0x338(0x10)
	struct AFWAIController* InstigatorController; // 0x348(0x08)
	struct TArray<struct FVector> Locations; // 0x350(0x10)
	struct TArray<float> Yaws; // 0x360(0x10)
	char UnknownData_370[0x28]; // 0x370(0x28)

	void SpawnDamageEmitter(struct ABaseCharacter* character); // Function Madness.MadBeamTrapManager.SpawnDamageEmitter // (Net|Native|Event|NetMulticast|Protected|Const) // @ game+0x1516d80
	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadBeamTrapManager.OnOwnerKilled // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x157f340
	void OnOwnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Madness.MadBeamTrapManager.OnOwnerEndPlay // (Final|Native|Private) // @ game+0x157f280
};

// Class Madness.MadBlanket
// Size: 0x350 (Inherited: 0x2f0)
struct AMadBlanket : AActor {
	struct AActor* Target; // 0x2f0(0x08)
	char UnknownData_2F8_0 : 7; // 0x2f8(0x01)
	bool bIsBlanketActivated : 1; // 0x2f8(0x01)
	char UnknownData_2F9[0x3]; // 0x2f9(0x03)
	float TravelSpeed; // 0x2fc(0x04)
	float DURATION; // 0x300(0x04)
	struct FName AttachPointName; // 0x304(0x08)
	char UnknownData_30C[0x4]; // 0x30c(0x04)
	struct UDamageType* DamageTypeClass; // 0x310(0x08)
	struct UGameplayEffect* DamageEffectClass; // 0x318(0x08)
	struct UParticleSystem* EmitterTemplate; // 0x320(0x08)
	struct FGameplayTag DamageTag; // 0x328(0x08)
	struct UMadAiAbility_Guardian_LightBlank* Ability; // 0x330(0x08)
	struct TArray<struct AActor*> PossibleTargets; // 0x338(0x10)
	char UnknownData_348[0x8]; // 0x348(0x08)

	void StartSequence(); // Function Madness.MadBlanket.StartSequence // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnTargetKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadBlanket.OnTargetKilled // (Final|Native|Private) // @ game+0x1589d70
	void DamagePlayers(struct UPrimitiveComponent* Trigger, struct AActor* ClassFilter); // Function Madness.MadBlanket.DamagePlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x1585b20
	void Activate(float InDuration, float InDamageOverTime); // Function Madness.MadBlanket.Activate // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15834d0
};

// Class Madness.MadBlastBaseComponent
// Size: 0xac0 (Inherited: 0xab0)
struct UMadBlastBaseComponent : UBlastMeshComponent {
	enum class EBlastHealthObjectType ObjectType; // 0xab0(0x01)
	char UnknownData_AB1[0x3]; // 0xab1(0x03)
	float DurabilityMod; // 0xab4(0x04)
	struct UCurveFloat* LevelModifier; // 0xab8(0x08)

	void DamageMeshBounds_Multicast(struct TArray<enum class None> ChunksDamaged, float DamageNormalized); // Function Madness.MadBlastBaseComponent.DamageMeshBounds_Multicast // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1585a40
	void AddRadialImpulse_Cheaper(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Madness.MadBlastBaseComponent.AddRadialImpulse_Cheaper // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x15845c0
	void AddImpulseFromAsyncOverlap_Cheaper_Multicast(struct FCollisionShapeBPWrapper CollisionShape, struct FVector Origin, struct FQuat Rotation, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Madness.MadBlastBaseComponent.AddImpulseFromAsyncOverlap_Cheaper_Multicast // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x15843d0
	void AddImpulseFromAsyncOverlap_Cheaper(struct FCollisionShapeBPWrapper CollisionShape, struct FVector Origin, struct FQuat Rotation, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Madness.MadBlastBaseComponent.AddImpulseFromAsyncOverlap_Cheaper // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15841d0
	void AddDamageFromAsyncOverlap_Cheaper(struct FCollisionShapeBPWrapper CollisionShape, struct FVector Origin, struct FQuat Rotation, float Damage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Madness.MadBlastBaseComponent.AddDamageFromAsyncOverlap_Cheaper // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1583f90
};

// Class Madness.MadBlastComponent
// Size: 0xaf0 (Inherited: 0xac0)
struct UMadBlastComponent : UMadBlastBaseComponent {
	char UnknownData_AC0[0x10]; // 0xac0(0x10)
	enum class None AttachmentIndex; // 0xad0(0x01)
	enum class None MeshIndex; // 0xad1(0x01)
	char UnknownData_AD2[0x2]; // 0xad2(0x02)
	float DamageSoakFactor; // 0xad4(0x04)
	char UnknownData_AD8_0 : 7; // 0xad8(0x01)
	bool bIgnoreDamageSoakFactorOnSelf : 1; // 0xad8(0x01)
	char UnknownData_AD9[0x3]; // 0xad9(0x03)
	float CurrentHealth; // 0xadc(0x04)
	float MaxHealth; // 0xae0(0x04)
	char UnknownData_AE4_0 : 7; // 0xae4(0x01)
	bool Shattered : 1; // 0xae4(0x01)
	char UnknownData_AE5_0 : 7; // 0xae5(0x01)
	bool bCollisionEnabled : 1; // 0xae5(0x01)
	char UnknownData_AE6[0xa]; // 0xae6(0x0a)

	void SetMaxHealth(float InMaxHealth); // Function Madness.MadBlastComponent.SetMaxHealth // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x158b7d0
	void SetDamageSoakFactor(float InDamageSoakFactor); // Function Madness.MadBlastComponent.SetDamageSoakFactor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x158b420
	void OnRep_MaxHealth(float OldMaxHealth); // Function Madness.MadBlastComponent.OnRep_MaxHealth // (Final|Native|Protected) // @ game+0x1589cf0
	void OnRep_CustomizationData(); // Function Madness.MadBlastComponent.OnRep_CustomizationData // (Final|Native|Protected) // @ game+0x1589cd0
	void OnRep_CollisionData(); // Function Madness.MadBlastComponent.OnRep_CollisionData // (Final|Native|Protected) // @ game+0x1589cb0
};

// Class Madness.MadBlastMeshActor
// Size: 0x310 (Inherited: 0x310)
struct AMadBlastMeshActor : ABlastMeshActor {
};

// Class Madness.MadBlockerComponent
// Size: 0x1b8 (Inherited: 0x180)
struct UMadBlockerComponent : UActorComponent {
	char UnknownData_180[0x30]; // 0x180(0x30)
	enum class None BlockBitmask; // 0x1b0(0x01)
	char UnknownData_1B1[0x7]; // 0x1b1(0x07)

	void OnRep_BlockBitmask(); // Function Madness.MadBlockerComponent.OnRep_BlockBitmask // (Final|Native|Protected) // @ game+0x1589c90
};

// Class Madness.MadBlockingVolume
// Size: 0x348 (Inherited: 0x328)
struct AMadBlockingVolume : ABlockingVolume {
	struct FFactExpression DisabledFactExp; // 0x328(0x18)
	char UnknownData_340[0x8]; // 0x340(0x08)

	void SyncWithFacts(); // Function Madness.MadBlockingVolume.SyncWithFacts // (Final|Native|Protected) // @ game+0x158ca80
};

// Class Madness.MadVolume
// Size: 0x348 (Inherited: 0x328)
struct AMadVolume : ATriggerVolume {
	struct FFactExpression EnabledFactExp; // 0x328(0x18)
	char UnknownData_340_0 : 7; // 0x340(0x01)
	bool bInterruptsPlayerAbilities : 1; // 0x340(0x01)
	char UnknownData_341_0 : 7; // 0x341(0x01)
	bool bBlocksPlayerAbilities : 1; // 0x341(0x01)
	char UnknownData_342_0 : 7; // 0x342(0x01)
	bool bEnabled : 1; // 0x342(0x01)
	char UnknownData_343[0x5]; // 0x343(0x05)

	void OnRep_Enabled(); // Function Madness.MadVolume.OnRep_Enabled // (Final|Native|Protected) // @ game+0x1702cf0
};

// Class Madness.MadBlockJoinVolume
// Size: 0x348 (Inherited: 0x348)
struct AMadBlockJoinVolume : AMadVolume {
};

// Class Madness.MadBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMadBlueprintLibrary : UFrameworkBlueprintLibrary {

	void UseActiveCameraSubsettings(struct UObject* WorldContextObject, struct APlayerController* InController, int32_t SettingsIdx); // Function Madness.MadBlueprintLibrary.UseActiveCameraSubsettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158d7f0
	void UseActiveCameraDefaultSettings(struct UObject* WorldContextObject, struct APlayerController* InController, float BlendInTime, enum class EAlphaBlendOption BlendType); // Function Madness.MadBlueprintLibrary.UseActiveCameraDefaultSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158d6b0
	void UpdateShaderForMesh(struct USkeletalMeshComponent* MeshComponent, struct FName ShaderParamName, float ShaderParamValue); // Function Madness.MadBlueprintLibrary.UpdateShaderForMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158d5b0
	void UpdateShaderForCharacter(struct ABaseCharacter* InCharacter, struct FWeaponSelector WeaponSelector, struct FName ShaderParamName, float ShaderParamValue); // Function Madness.MadBlueprintLibrary.UpdateShaderForCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158d460
	void UnlockQuestPoolForPlayer(struct ABasePlayerController* BasePC, struct UMadQuestPool* Pool); // Function Madness.MadBlueprintLibrary.UnlockQuestPoolForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158d3b0
	void UnlockAchievementForPlayer(struct AMadPlayerController* PlayerController, struct FName AchievementID); // Function Madness.MadBlueprintLibrary.UnlockAchievementForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158d300
	void UnlockAchievementForAllPlayers(struct UObject* WorldContextObject, struct FName AchievementID); // Function Madness.MadBlueprintLibrary.UnlockAchievementForAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158d250
	void TryUnlockChallengeTierByWorldLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.TryUnlockChallengeTierByWorldLevel // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158d1e0
	void TryEnterNearestCoverAllPlayers(struct UObject* WorldContextObject, struct FCoverSearchParams CoverSearchParams, bool bPlayAnimation, bool bForce); // Function Madness.MadBlueprintLibrary.TryEnterNearestCoverAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158d000
	void ToggleTrackPartyQuest(struct ABasePlayerController* BasePC); // Function Madness.MadBlueprintLibrary.ToggleTrackPartyQuest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158cf90
	void ToggleCoherentUIFocus(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ToggleCoherentUIFocus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158cf20
	struct FCoverPickInfo ToCoverPickInfo(struct UObject* WorldContextObject, struct FOccupiedCoverInfo InOccupiedCoverInfo, struct FVector InEnterLocation); // Function Madness.MadBlueprintLibrary.ToCoverPickInfo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x158cd50
	void TeleportToTown(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.TeleportToTown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158cce0
	void TeleportPlayerToHost(struct AMadPlayerCharacter* PlayerToTeleport); // Function Madness.MadBlueprintLibrary.TeleportPlayerToHost // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158cc70
	void TeamSetUIState(struct UObject* WorldContextObject, struct FName StateName, bool bNoFadeOut, bool bNoFadeIn, struct FString Params); // Function Madness.MadBlueprintLibrary.TeamSetUIState // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158caa0
	void StopChallengeTimeCounter(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.StopChallengeTimeCounter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158ca10
	void StartVoteTeleportToRegion(struct UObject* WorldContextObject, struct FName regionname); // Function Madness.MadBlueprintLibrary.StartVoteTeleportToRegion // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158c950
	void StartVoteTeleportToNode(struct UObject* WorldContextObject, struct FVector NodeLocation); // Function Madness.MadBlueprintLibrary.StartVoteTeleportToNode // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x158c890
	void StartSkipMovieVote(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.StartSkipMovieVote // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158c820
	void StartCustomVote(struct UObject* WorldContextObject, bool bOutSuccess, struct AMadPlayerState* RequestingPlayer, struct FCustomVoteNameWrapper DescriptionKey, struct FLatentActionInfo LatentInfo); // Function Madness.MadBlueprintLibrary.StartCustomVote // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158c650
	void StartChallenge(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.StartChallenge // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583b30
	struct AActor* SpawnThrowableActor(struct UObject* WorldContextObject, struct AActor* ThrowableActorClass, struct FVector Origin, struct FVector Direction, struct APawn* Instigator, struct AActor* Owner); // Function Madness.MadBlueprintLibrary.SpawnThrowableActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x158c480
	void SpawnNPCWithCustomization(struct UObject* WorldContextObject, struct AMadCharAI* Class, struct FVector Location, struct TArray<enum class None> MeshIndexs, struct TArray<enum class None> CustomMeshesIndexes, struct TArray<enum class None> AttachmentsIndex); // Function Madness.MadBlueprintLibrary.SpawnNPCWithCustomization // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x158c250
	struct AMadWeapon* SpawnDummyWeapon(struct UObject* WorldContextObject, struct FWeaponNameWrapper WeaponName, struct FVector StartLocation, struct FVector TargetLocation, struct FGameplayAttribute WeaponDamageModAttribute, int32_t Level, bool bStartFire, enum class ETeam Team, struct APawn* Instigator); // Function Madness.MadBlueprintLibrary.SpawnDummyWeapon // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x158bf30
	struct AActor* SpawnActorFromClassDeferred(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform Transform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct APawn* Instigator, struct AActor* Owner, bool bMustFinishOnNextFrame); // Function Madness.MadBlueprintLibrary.SpawnActorFromClassDeferred // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x158bce0
	struct TArray<struct FString> SortStringArray(struct TArray<struct FString> Array); // Function Madness.MadBlueprintLibrary.SortStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158bb70
	void SetUIURL(struct UObject* WorldContextObject, struct FString URL); // Function Madness.MadBlueprintLibrary.SetUIURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158ba60
	void SetUIState(struct UObject* WorldContextObject, struct FName StateName, struct FString Params); // Function Madness.MadBlueprintLibrary.SetUIState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b910
	void SetToastsEnabled(struct UObject* WorldContextObject, bool bEnabled); // Function Madness.MadBlueprintLibrary.SetToastsEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b850
	void SetHUDElementVisibility(struct UObject* WorldContextObject, enum class EMadHUDElement HUDElement, bool bVisible); // Function Madness.MadBlueprintLibrary.SetHUDElementVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b6d0
	void SetGlobalCombatModeAllowed(struct UObject* WorldContextObject, bool bAllowed); // Function Madness.MadBlueprintLibrary.SetGlobalCombatModeAllowed // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158b610
	void SetGlobalCombatMode(struct UObject* WorldContextObject, enum class ECombatModePermit CombatMode); // Function Madness.MadBlueprintLibrary.SetGlobalCombatMode // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158b560
	void SetForceFeedback(struct UObject* WorldContextObject, bool bForceFeedbackEnabled); // Function Madness.MadBlueprintLibrary.SetForceFeedback // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b4a0
	void SetCurrentRegion(struct UObject* WorldContextObject, struct FName NewRegion); // Function Madness.MadBlueprintLibrary.SetCurrentRegion // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158b370
	void SetControlParamsForActiveCameraState(struct UObject* WorldContextObject, struct APlayerController* InController, struct FCameraControlParameters CameraControlParams); // Function Madness.MadBlueprintLibrary.SetControlParamsForActiveCameraState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b210
	void SetCombatTextExp(struct UObject* WorldContextObject, bool bNewShowExp); // Function Madness.MadBlueprintLibrary.SetCombatTextExp // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b150
	void SetCombatTextDmg(struct UObject* WorldContextObject, bool bNewShowDmg); // Function Madness.MadBlueprintLibrary.SetCombatTextDmg // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158b090
	void SetCombatText(struct UObject* WorldContextObject, bool bNewShowExp, bool bNewShowDmg); // Function Madness.MadBlueprintLibrary.SetCombatText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158af80
	void SetAutoLootMinRarityOverride(enum class EMadItemRarity MinRarity); // Function Madness.MadBlueprintLibrary.SetAutoLootMinRarityOverride // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158af10
	void SetAllHUDElementsVisibility(struct UObject* WorldContextObject, bool bVisible); // Function Madness.MadBlueprintLibrary.SetAllHUDElementsVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158ae50
	void SelectPlayerPath(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function Madness.MadBlueprintLibrary.SelectPlayerPath // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158ad70
	void SaveOnlineUserSettings(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.SaveOnlineUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158ad00
	void SaveDifficultyLevel(int32_t InDifficultyLevel); // Function Madness.MadBlueprintLibrary.SaveDifficultyLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158ac90
	void SaveCheckpoint(struct UObject* WorldContextObject, enum class ESaveCheckpointType CheckpointType); // Function Madness.MadBlueprintLibrary.SaveCheckpoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158abe0
	void Ricochet(struct AMadBaseCharacter* MainTarget, float Range, int32_t Neighbors, bool bSortByDistance, bool bEffectsFromInstigator, bool bEffectsInSequence, bool bIgnoreMainTarget, struct UMadGameplayEffect* EffectToApply, float Damage, struct UMadDamageType* DamageType, struct AController* Instigator, struct UMadGameplayEffect* EffectFromInstigator, float EffectsInSequenceDelay, float DamageDelay); // Function Madness.MadBlueprintLibrary.Ricochet // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158a810
	void ResetQuestPoolForPlayer(struct ABasePlayerController* BasePC, struct UMadQuestPool* Pool); // Function Madness.MadBlueprintLibrary.ResetQuestPoolForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158a760
	void ResetArenasFactsForQuest(struct UObject* WorldContextObject, struct UBaseQuest* quest); // Function Madness.MadBlueprintLibrary.ResetArenasFactsForQuest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158a6b0
	void ResetAllArenasFacts(struct UObject* WorldContextObject, struct FString Reason); // Function Madness.MadBlueprintLibrary.ResetAllArenasFacts // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158a5e0
	void RequestSkillBarRefresh(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.RequestSkillBarRefresh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158a570
	void RequestExplorerFlagsTravel(struct APlayerController* PlayerController, struct FName StartPoint, struct FName EndPoint); // Function Madness.MadBlueprintLibrary.RequestExplorerFlagsTravel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x158a480
	void RequestDeadBodyHidding(struct Acharacter* DeadBody); // Function Madness.MadBlueprintLibrary.RequestDeadBodyHidding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158a3f0
	void RequestDeadBodyDestruction(struct Acharacter* DeadBody); // Function Madness.MadBlueprintLibrary.RequestDeadBodyDestruction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158a360
	void RequestActorShadowSwitchOff(struct AActor* Target); // Function Madness.MadBlueprintLibrary.RequestActorShadowSwitchOff // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x158a2d0
	void QuestTrackerTagOverride(struct UObject* WorldContextObject, bool bOverride); // Function Madness.MadBlueprintLibrary.QuestTrackerTagOverride // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x158a210
	void PaintExplosionAlphaGradient(struct UObject* WorldContextObject, struct FVector Center, float GradientStartRadius, float GradientEndRadius); // Function Madness.MadBlueprintLibrary.PaintExplosionAlphaGradient // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x158a0c0
	void MadSendDamageEventExtended(struct AActor* ReceivingActor, struct FGameplayTag EventTag, float Damage, struct UMadDamageType* DamageType, struct FVector DamageDirection, struct AController* DamageInstigator, struct AActor* DamageCauser); // Function Madness.MadBlueprintLibrary.MadSendDamageEventExtended // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1589a90
	void MadSendDamageEvent(struct AActor* ReceivingActor, struct FGameplayTag EventTag, float Damage, struct UMadDamageType* DamageType, struct AController* DamageInstigator, struct AActor* DamageCauser); // Function Madness.MadBlueprintLibrary.MadSendDamageEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15898e0
	void MadOnIconLoaded(struct TSoftObjectPtr<struct UTexture2D> LoadedIcon, struct FDelegate OnIconLoaded); // Function Madness.MadBlueprintLibrary.MadOnIconLoaded // (Final|Native|Static|Private) // @ game+0x1589730
	void MadLoadIcon(struct TSoftObjectPtr<struct UTexture2D> IconToLoad, struct FDelegate OnIconLoaded); // Function Madness.MadBlueprintLibrary.MadLoadIcon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1589580
	void MadForEachIndexLoop(int32_t FirstIndex, int32_t LastIndex, struct FDelegate OnEachIndexCallback); // Function Madness.MadBlueprintLibrary.MadForEachIndexLoop // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1589410
	void MadForEachActor(struct TArray<struct AActor*> InActors, struct FDelegate OnEachActorCallback); // Function Madness.MadBlueprintLibrary.MadForEachActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x15892b0
	void MadDestroyAttachedActors(struct AActor* InParentActor, bool bNetForce, bool bShouldModifyLevel); // Function Madness.MadBlueprintLibrary.MadDestroyAttachedActors // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15891a0
	void MadDestroyActors(struct TArray<struct AActor*> InActors, bool bNetForce, bool bShouldModifyLevel); // Function Madness.MadBlueprintLibrary.MadDestroyActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1589070
	void MadDestroyActor(struct AActor* InActor, bool bNetForce, bool bShouldModifyLevel); // Function Madness.MadBlueprintLibrary.MadDestroyActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588f60
	struct TArray<int32_t> MadAddStepInstances(struct UInstancedStaticMeshComponent* Owner, int32_t Steps, struct FVector BaseRelativeLocation, struct FVector StepOffset); // Function Madness.MadBlueprintLibrary.MadAddStepInstances // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1588db0
	bool LocalPlayerHasSelectedPath(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.LocalPlayerHasSelectedPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588d30
	bool LoadGameForPreviewCharacter(struct UObject* WorldContextObject, struct FString SaveName, struct AMadPlayerCharacter* InCharacter); // Function Madness.MadBlueprintLibrary.LoadGameForPreviewCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588c10
	void LoadCheckpoint(struct UObject* WorldContextObject, struct FString PlayerName); // Function Madness.MadBlueprintLibrary.LoadCheckpoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588b40
	bool IsQuestShareable(struct UObject* WorldContextObject, struct UBaseQuest* Inquest); // Function Madness.MadBlueprintLibrary.IsQuestShareable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588a80
	bool IsPlayerInCombat(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.IsPlayerInCombat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588a00
	bool IsLocalPlayerInRandomSquad(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.IsLocalPlayerInRandomSquad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588980
	bool IsDebugSettingsEnabled(); // Function Madness.MadBlueprintLibrary.IsDebugSettingsEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588950
	bool IsCollectibleCollected(struct APlayerController* Player, struct FName CollectibleKey); // Function Madness.MadBlueprintLibrary.IsCollectibleCollected // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588890
	bool IsChallengeMapFailed(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.IsChallengeMapFailed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588810
	bool IsChallengeActive(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.IsChallengeActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588790
	void IncreaseDifficultyLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.IncreaseDifficultyLevel // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1588720
	struct UFrameworkSequencePlayer* HACK_CreateDialogueSequencePlayer(struct UObject* WorldContextObject, struct ABasePlayerController* PC, struct ULevelSequence* InLevelSequence); // Function Madness.MadBlueprintLibrary.HACK_CreateDialogueSequencePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588630
	struct UWidget* GetWidgetForComponent(struct UObject* WorldContextObject, struct UBase3DWidgetComponent* Component); // Function Madness.MadBlueprintLibrary.GetWidgetForComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1588570
	bool GetWhichSidePointLiesOn(struct APawn* MyPawn, struct FVector FocalPoint, bool Side); // Function Madness.MadBlueprintLibrary.GetWhichSidePointLiesOn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1588450
	enum class EMadVoteReason GetVoteReasonAsEnum(int32_t InVoteReason); // Function Madness.MadBlueprintLibrary.GetVoteReasonAsEnum // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15883d0
	struct UVOManager* GetVOManager(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetVOManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1588350
	struct UMadTutorialManager* GetTutorialManager(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetTutorialManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15882d0
	enum class EThrowType GetThrowData(struct AController* PC, struct FVector OutOrigin, struct FVector OutDirection, float OutSpeed, enum class EMadOrientation OutRelDir); // Function Madness.MadBlueprintLibrary.GetThrowData // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15880e0
	struct TSoftObjectPtr<struct UObject> GetSoftObjectPtrFromAssetRef(struct FString ObjectAssetRef); // Function Madness.MadBlueprintLibrary.GetSoftObjectPtrFromAssetRef // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587fc0
	bool GetShowTeammateHealthBars(); // Function Madness.MadBlueprintLibrary.GetShowTeammateHealthBars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587f90
	bool GetShowNpcIcons(); // Function Madness.MadBlueprintLibrary.GetShowNpcIcons // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587f60
	struct TArray<struct UBaseQuest*> GetShareableQuestsFor(struct UObject* WorldContextObject, struct ABasePlayerController* PC); // Function Madness.MadBlueprintLibrary.GetShareableQuestsFor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587e60
	int32_t GetSavedDifficultyLevel(); // Function Madness.MadBlueprintLibrary.GetSavedDifficultyLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587e30
	struct AMadPlayerController* GetRandomPlayerController(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetRandomPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587db0
	struct FText GetPlayerClassText(enum class EMadnessSkillPath PlayerSkillPath); // Function Madness.MadBlueprintLibrary.GetPlayerClassText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587cd0
	enum class EObjectiveStatus GetObjectiveStatusFromFact(struct UObject* WorldContextObject, struct FName FactName, struct ABasePlayerController* PC); // Function Madness.MadBlueprintLibrary.GetObjectiveStatusFromFact // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587be0
	bool GetNearestAngleToFocalPoint(struct APawn* MyPawn, struct FVector FocalPoint, struct TArray<struct FTurnAnimationAngle> AnimationAngleTable, int32_t NearestIndex, float AngleBetween); // Function Madness.MadBlueprintLibrary.GetNearestAngleToFocalPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15879e0
	struct UMadGameUserSettings* GetMadGameUserSettings(); // Function Madness.MadBlueprintLibrary.GetMadGameUserSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15879b0
	enum class EMadnessSkillPath GetLocalPlayerSelectedPath(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetLocalPlayerSelectedPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1587930
	struct AMadPlayerController* GetLocalPlayerController(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetLocalPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15878b0
	void GetListOfChallenges(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetListOfChallenges // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583b30
	bool GetLateralDataWithDelayedSetup(struct AActor* Actor, struct UDNAContext* Context, struct FString DNA, int32_t ID); // Function Madness.MadBlueprintLibrary.GetLateralDataWithDelayedSetup // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1587740
	bool GetLateralData(struct AActor* Actor, struct FString DNA, int32_t ID); // Function Madness.MadBlueprintLibrary.GetLateralData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1587610
	struct FText GetKeywordName(struct FGameplayTag InTag); // Function Madness.MadBlueprintLibrary.GetKeywordName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1587530
	bool GetIsForceFeedbackEnabled(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetIsForceFeedbackEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15874b0
	float GetHUDScaleValue(); // Function Madness.MadBlueprintLibrary.GetHUDScaleValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587480
	enum class ECombatModePermit GetGlobalCombatMode(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetGlobalCombatMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587400
	struct UBaseFactManager* GetFactManager(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetFactManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587380
	struct AMadEnochAccoladesController* GetEnochAccoladesController(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetEnochAccoladesController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587300
	enum class EMadHealthBarMode GetEnemyHealthBarsMode(); // Function Madness.MadBlueprintLibrary.GetEnemyHealthBarsMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15872d0
	bool GetDotFromVelocity(struct APawn* MyPawn, struct FVector FocalPoint, float DotToFocal); // Function Madness.MadBlueprintLibrary.GetDotFromVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15871b0
	bool GetDotFromForward(struct APawn* MyPawn, struct FVector FocalPoint, float DotToFocal); // Function Madness.MadBlueprintLibrary.GetDotFromForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1587090
	bool GetDisplayCombatTextExp(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetDisplayCombatTextExp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1587010
	bool GetDisplayCombatTextDmg(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetDisplayCombatTextDmg // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586f90
	struct FName GetCustomizationUIDataEntryName(enum class EMadCustomizationElement Element, enum class None Index); // Function Madness.MadBlueprintLibrary.GetCustomizationUIDataEntryName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586ed0
	struct FText GetCustomizationCategoryDisplayName(enum class EMadCustomizationElement Category, enum class EMadGender Gender); // Function Madness.MadBlueprintLibrary.GetCustomizationCategoryDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586db0
	struct FName GetCurrentRegionNoPrefix(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCurrentRegionNoPrefix // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586d20
	struct FName GetCurrentRegion(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCurrentRegion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586c90
	int32_t GetCurrentMaxWorldLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCurrentMaxWorldLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586c10
	int32_t GetCurrentDifficultyLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCurrentDifficultyLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586b90
	bool GetCrosshairEnabled(); // Function Madness.MadBlueprintLibrary.GetCrosshairEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586b60
	struct UCoherentUIGTWidget* GetCoherentWidget(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCoherentWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1586ae0
	struct UChatterManager* GetChatterManager(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetChatterManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586a60
	struct FGameplayTagContainer GetChallengeMapFact(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetChallengeMapFact // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15869b0
	struct AMadChallengeController* GetChallengeController(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetChallengeController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586930
	struct UMadChallengeDataAsset* GetChallengeAssetFromID(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetChallengeAssetFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x15868b0
	struct TArray<struct FMadExplorerFlagsCapturePointStatus> GetCapturePointsStatusForCurrentRegion(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetCapturePointsStatusForCurrentRegion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15867e0
	struct TArray<struct FGameplayTag> GetAllRegions(); // Function Madness.MadBlueprintLibrary.GetAllRegions // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586760
	void GetAIBlueprints(struct TArray<struct FString> ClassNames, struct TArray<struct AMadCharAI*> DefaultObjects); // Function Madness.MadBlueprintLibrary.GetAIBlueprints // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1586430
	struct FVector2D GetActorLocationOnMap(struct AActor* Actor, struct FMapAnchor AnchorA, struct FMapAnchor AnchorB); // Function Madness.MadBlueprintLibrary.GetActorLocationOnMap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x15865e0
	int32_t GetActiveChallengeMonsterLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.GetActiveChallengeMonsterLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1586560
	void ForceCameraFromAnimPositionUpdate(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ForceCameraFromAnimPositionUpdate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583b30
	bool ForbiddenGore(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ForbiddenGore // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15863b0
	void ExitToMainMenuAsParty(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ExitToMainMenuAsParty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1586340
	void ExitToMainMenu(struct UObject* WorldContextObject, struct FName MainMenuLevelName, bool bAbsolute, struct FString Options, bool bExitWithParty); // Function Madness.MadBlueprintLibrary.ExitToMainMenu // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1586170
	void EquipPostPrologueItems(struct AMadPlayerCharacter* Player, bool bClearInventory); // Function Madness.MadBlueprintLibrary.EquipPostPrologueItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15860b0
	void EquipBuggyRideItems(struct AMadPlayerCharacter* Player, bool bClearInventory); // Function Madness.MadBlueprintLibrary.EquipBuggyRideItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585ff0
	void EndChallengeSuccess(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.EndChallengeSuccess // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1585f80
	void EndChallengeFail(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.EndChallengeFail // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1585f10
	void EaglePeaksPortalHACK_Start(struct UObject* WorldContextObject, struct FGameplayTag PortalToCheckTag, struct FGameplayTag BackPortalTag); // Function Madness.MadBlueprintLibrary.EaglePeaksPortalHACK_Start // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585e20
	void EaglePeaksPortalHACK_Reset(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.EaglePeaksPortalHACK_Reset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585db0
	void EaglePeaksPortalHACK_Load(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.EaglePeaksPortalHACK_Load // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585d40
	void Debug_SaveCharacterOnly(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.Debug_SaveCharacterOnly // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585cd0
	void DeactivateGlobalCameraState(struct UObject* WorldContextObject, struct UCameraState_Global* InGlobalStateClass, struct APlayerController* InController); // Function Madness.MadBlueprintLibrary.DeactivateGlobalCameraState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585be0
	void DamageDestructiblesInCone(float Damage, struct UMadDamageType* DmgType, struct AMadPlayerCharacter* DmgInstigator, float ConeLength, float ConeAngle, bool bOnlyYaw, float ConeBackOffset, bool bUseCameraAsOrigin); // Function Madness.MadBlueprintLibrary.DamageDestructiblesInCone // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1585800
	struct FBaseSoundObject CreateSoundObject(struct FGameplayTag SoundObjectId, struct FName SoundInfoName, int32_t SoundInfo); // Function Madness.MadBlueprintLibrary.CreateSoundObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585700
	void CollectCollectibleForAllPlayers(struct UObject* WorldContextObject, struct FName CollectibleKey); // Function Madness.MadBlueprintLibrary.CollectCollectibleForAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1585650
	void CollectCollectible(struct APlayerController* Player, struct FName CollectibleKey); // Function Madness.MadBlueprintLibrary.CollectCollectible // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15855a0
	void CloseAllWindowsForLocalPlayer(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.CloseAllWindowsForLocalPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585530
	void CloseAllWindowsForAllPlayers(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.CloseAllWindowsForAllPlayers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15854c0
	bool CanTeleportToTown(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.CanTeleportToTown // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585440
	bool CanStartChallenge(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.CanStartChallenge // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15853c0
	int32_t CalculateEnemyLevel(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.CalculateEnemyLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585340
	void BlendCameraToGameplay(struct UObject* WorldContextObject, struct APlayerController* InController, float BlendTime, enum class EAlphaBlendOption BlendType, bool bBlendAspectRatio, bool bDisableInput); // Function Madness.MadBlueprintLibrary.BlendCameraToGameplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1585190
	void ApplyShield(struct AMadBaseCharacter* InTarget, float InValue, bool bInIsPercentValue); // Function Madness.MadBlueprintLibrary.ApplyShield // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1585090
	void ApplySaveDataToCharacter(struct AMadPlayerCharacter* character, struct FCharacterCustomiationData CustomizationData, struct FMadInventorySaveData InventorySave, struct AMadPlayerCharacter* ClassToSync, enum class EMadInventoryCustomizationUpdateFilter UpdateFilter); // Function Madness.MadBlueprintLibrary.ApplySaveDataToCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1584b40
	float ApplyHeal(struct AMadBaseCharacter* InCauser, struct AMadBaseCharacter* InTarget, float InValue, bool bInIsPercentValue, bool bInShowCue); // Function Madness.MadBlueprintLibrary.ApplyHeal // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15849b0
	bool AnyPlayerHasFact(struct UObject* WorldContextObject, struct FFactExpression FactExpr); // Function Madness.MadBlueprintLibrary.AnyPlayerHasFact // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1584890
	bool AllPlayersHaveFact(struct UObject* WorldContextObject, struct FFactExpression FactExpr); // Function Madness.MadBlueprintLibrary.AllPlayersHaveFact // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1584770
	bool ActorHasGameplayTag(struct AActor* InActor, struct FGameplayTag InTag); // Function Madness.MadBlueprintLibrary.ActorHasGameplayTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1583ed0
	void ActivateGlobalCameraStateWithControlParams(struct UObject* WorldContextObject, struct UCameraState_Global* InGlobalStateClass, struct APlayerController* InController, struct FCameraControlParameters CameraControlParams); // Function Madness.MadBlueprintLibrary.ActivateGlobalCameraStateWithControlParams // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583d40
	void ActivateGlobalCameraState(struct UObject* WorldContextObject, struct UCameraState_Global* InGlobalStateClass, struct APlayerController* InController); // Function Madness.MadBlueprintLibrary.ActivateGlobalCameraState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583c50
	void ActivateDefaultCameraStateMachine(struct UObject* WorldContextObject, struct APlayerController* InController); // Function Madness.MadBlueprintLibrary.ActivateDefaultCameraStateMachine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583ba0
	void ActivateChallengeTimer(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ActivateChallengeTimer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1583b30
	void ActivateChallengeFinalStage(struct UObject* WorldContextObject); // Function Madness.MadBlueprintLibrary.ActivateChallengeFinalStage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583ac0
	void ActivateCameraStateMachine(struct UObject* WorldContextObject, struct APlayerController* InController, struct UCameraStateMachine* InStateMachineClass); // Function Madness.MadBlueprintLibrary.ActivateCameraStateMachine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15839d0
	void ActivateCameraLookAtForAllPlayers(struct UObject* WorldContextObject, struct FLookAtParams LookAtParams); // Function Madness.MadBlueprintLibrary.ActivateCameraLookAtForAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1583870
	void ActivateCameraLookAt(struct UObject* WorldContextObject, struct APlayerController* InController, struct FLookAtParams LookAtParams); // Function Madness.MadBlueprintLibrary.ActivateCameraLookAt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x15836e0
	void ActivateCameraFromMontage(struct UObject* WorldContextObject, struct AMadPlayerCharacter* InPlayer, struct FCameraFromMontage InCameraSettings); // Function Madness.MadBlueprintLibrary.ActivateCameraFromMontage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15835a0
	void AbortWaitingOnRemotePlayerData(struct UAbilityTask* Task); // Function Madness.MadBlueprintLibrary.AbortWaitingOnRemotePlayerData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1583460
};

// Class Madness.MadBM_DissolveComponent
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMadBM_DissolveComponent : USceneComponent {
	struct UMaterialParameterCollection* DissolveMaterial; // 0x2c8(0x08)
};

// Class Madness.MadRifle
// Size: 0x1f38 (Inherited: 0x1f30)
struct AMadRifle : AMadWeapon {
	enum class EMadRifleType SubType; // 0x1f30(0x01)
	char UnknownData_1F31[0x7]; // 0x1f31(0x07)
};

// Class Madness.MadBoltAction
// Size: 0x1f80 (Inherited: 0x1f38)
struct AMadBoltAction : AMadRifle {
	float AimToFlickerTimeRatio; // 0x1f38(0x04)
	float LaserStartTraceOffset; // 0x1f3c(0x04)
	struct UParticleSystem* LaserParticleClass; // 0x1f40(0x08)
	struct UParticleSystemComponent* LaserParticle; // 0x1f48(0x08)
	char UnknownData_1F50[0x10]; // 0x1f50(0x10)
	char UnknownData_1F60_0 : 7; // 0x1f60(0x01)
	bool bLaserEnabled : 1; // 0x1f60(0x01)
	char UnknownData_1F61_0 : 7; // 0x1f61(0x01)
	bool bUseRespirationEffect : 1; // 0x1f61(0x01)
	char UnknownData_1F62[0x2]; // 0x1f62(0x02)
	struct FVector RespirationDistance; // 0x1f64(0x0c)
	struct FVector RespirationSpeed; // 0x1f70(0x0c)
	char UnknownData_1F7C[0x4]; // 0x1f7c(0x04)

	void StartLaserFlicker(float TimeToFlicker); // Function Madness.MadBoltAction.StartLaserFlicker // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void SetLaserEnabled(bool bEnabled); // Function Madness.MadBoltAction.SetLaserEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15919a0
	void OnRep_LaserEnabled(); // Function Madness.MadBoltAction.OnRep_LaserEnabled // (Final|Native|Protected) // @ game+0x15917a0
};

// Class Madness.MadBossHealthBarComponent
// Size: 0xa0 (Inherited: 0x28)
struct UMadBossHealthBarComponent : UObject {
	char UnknownData_28[0x78]; // 0x28(0x78)

	void OnMaxHealthChanged(float LastMaxHealth, float CurrentMaxHealth); // Function Madness.MadBossHealthBarComponent.OnMaxHealthChanged // (Final|Native|Public) // @ game+0x15916e0
	void Initialize(struct TArray<struct AMadBaseCharacter*> Bosses, int32_t CurrentPhase, int32_t MaxPhases, bool bShowStatuses); // Function Madness.MadBossHealthBarComponent.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1591320
	void Deinitialize(struct TArray<struct AMadBaseCharacter*> Bosses); // Function Madness.MadBossHealthBarComponent.Deinitialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1591270
};

// Class Madness.MadBossHPBarWidget
// Size: 0x2c0 (Inherited: 0x230)
struct UMadBossHPBarWidget : UUserWidget {
	struct UHorizontalBox* NameAndLevelHorizontalBox; // 0x230(0x08)
	struct UTextBlock* NameTextBlock; // 0x238(0x08)
	struct UTextBlock* LevelTextBlock; // 0x240(0x08)
	struct UProgressBar* HealthProgressBar; // 0x248(0x08)
	struct UHorizontalBox* DoubleBar; // 0x250(0x08)
	struct UProgressBar* HealthProgressBarDouble0; // 0x258(0x08)
	struct UProgressBar* HealthProgressBarDouble1; // 0x260(0x08)
	struct UHorizontalBox* TripleBar; // 0x268(0x08)
	struct UProgressBar* HealthProgressBarTriple0; // 0x270(0x08)
	struct UProgressBar* HealthProgressBarTriple1; // 0x278(0x08)
	struct UProgressBar* HealthProgressBarTriple2; // 0x280(0x08)
	struct UMadStatusBarWidget* MadStatusBarWidget; // 0x288(0x08)
	struct UProgressBar* CurrentHealthSegment; // 0x290(0x08)
	char UnknownData_298_0 : 7; // 0x298(0x01)
	bool bUseHUDScale : 1; // 0x298(0x01)
	char UnknownData_299[0x7]; // 0x299(0x07)
	struct UScaleBox* HUDScaleBox; // 0x2a0(0x08)
	char UnknownData_2A8[0x18]; // 0x2a8(0x18)

	void OnUpdateStatusBarData(struct FMadStatusBarData InStatusBarData); // Function Madness.MadBossHPBarWidget.OnUpdateStatusBarData // (Final|Native|Private|HasOutParms) // @ game+0x15918e0
	void OnUpdateLevel(float Level); // Function Madness.MadBossHPBarWidget.OnUpdateLevel // (Final|Native|Private) // @ game+0x1591860
	void OnUpdateHealth(float Percentage); // Function Madness.MadBossHPBarWidget.OnUpdateHealth // (Final|Native|Private) // @ game+0x15917e0
	void OnInitialize(struct FText BossName, int32_t CurrentPhase, int32_t MaxPhases); // Function Madness.MadBossHPBarWidget.OnInitialize // (Final|Native|Private|HasOutParms) // @ game+0x1591590
};

// Class Madness.MadBT_ExecuteRandomAbility
// Size: 0x88 (Inherited: 0x78)
struct UMadBT_ExecuteRandomAbility : UBTTask_GameplayTaskBase {
	struct UFWAITask_ExecuteGameplayAbility* AITask; // 0x78(0x08)
	char UnknownData_80_0 : 7; // 0x80(0x01)
	bool bLockLogic : 1; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
};

// Class Madness.MadBTContext_AntFarmSettings
// Size: 0x70 (Inherited: 0x70)
struct UMadBTContext_AntFarmSettings : UFWBTService_ContextOverride {
};

// Class Madness.MadBTDecorator_CanBreakFromFlying
// Size: 0xa0 (Inherited: 0x68)
struct UMadBTDecorator_CanBreakFromFlying : UBTDecorator {
	struct FBlackboardKeySelector TargetKey; // 0x68(0x28)
	enum class ECollisionChannel TraceChannel; // 0x90(0x01)
	char UnknownData_91[0x3]; // 0x91(0x03)
	float MinDistanceToBreak; // 0x94(0x04)
	float MaxDistanceToBreak; // 0x98(0x04)
	float DotTolerance; // 0x9c(0x04)
};

// Class Madness.MadBTDecorator_CanExecuteRandomAbility
// Size: 0x98 (Inherited: 0x68)
struct UMadBTDecorator_CanExecuteRandomAbility : UBTDecorator {
	struct FBlackboardKeySelector Target; // 0x68(0x28)
	float TimeInterval; // 0x90(0x04)
	char UnknownData_94_0 : 7; // 0x94(0x01)
	bool bUseTarget : 1; // 0x94(0x01)
	char UnknownData_95[0x3]; // 0x95(0x03)
};

// Class Madness.MadBTDecorator_CanPerformDash
// Size: 0xa8 (Inherited: 0x68)
struct UMadBTDecorator_CanPerformDash : UBTDecorator {
	struct FBlackboardKeySelector TargetKey; // 0x68(0x28)
	enum class ECollisionChannel TraceChannel; // 0x90(0x01)
	char UnknownData_91[0x3]; // 0x91(0x03)
	float MinDistanceToDash; // 0x94(0x04)
	float MaxDistanceToDash; // 0x98(0x04)
	float TraceHeightOffset; // 0x9c(0x04)
	float TraceCapsuleHeightModifier; // 0xa0(0x04)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
};

// Class Madness.MadBTDecorator_DS_DamagedEnough
// Size: 0x70 (Inherited: 0x68)
struct UMadBTDecorator_DS_DamagedEnough : UBTDecorator {
	float TestDuration; // 0x68(0x04)
	float DamageFraction; // 0x6c(0x04)
};

// Class Madness.MadBTDecorator_DS_SlamOrFlee
// Size: 0x70 (Inherited: 0x68)
struct UMadBTDecorator_DS_SlamOrFlee : UBTDecorator {
	float TestDuration; // 0x68(0x04)
	float MaxDistance; // 0x6c(0x04)
};

// Class Madness.MadBTDecorator_DS_IsOnGround
// Size: 0x68 (Inherited: 0x68)
struct UMadBTDecorator_DS_IsOnGround : UBTDecorator {
};

// Class Madness.MadBTDecorator_DS_IsOnNavmesh
// Size: 0x68 (Inherited: 0x68)
struct UMadBTDecorator_DS_IsOnNavmesh : UBTDecorator {
};

// Class Madness.MadBTDecorator_HasAttributeRequiredLevel
// Size: 0xa8 (Inherited: 0x68)
struct UMadBTDecorator_HasAttributeRequiredLevel : UBTDecorator {
	float AttributeValue; // 0x68(0x04)
	enum class EAttributeTest TestType; // 0x6c(0x01)
	char UnknownData_6D[0x3]; // 0x6d(0x03)
	struct FGameplayAttribute Attribute; // 0x70(0x38)
};

// Class Madness.MadBTDecorator_HasDirectPathTo
// Size: 0xa8 (Inherited: 0x68)
struct UMadBTDecorator_HasDirectPathTo : UBTDecorator {
	struct FBlackboardKeySelector TargetKey; // 0x68(0x28)
	float PredictionTime; // 0x90(0x04)
	float PredictionMaxDistance; // 0x94(0x04)
	struct FVector ExtraExtent; // 0x98(0x0c)
	char UnknownData_A4[0x4]; // 0xa4(0x04)
};

// Class Madness.MadBTDecorator_PA_MinionsAttackingTarget
// Size: 0xa0 (Inherited: 0x68)
struct UMadBTDecorator_PA_MinionsAttackingTarget : UBTDecorator {
	struct FBlackboardKeySelector TargetKey; // 0x68(0x28)
	enum class EFWArithmeticOperation Condition; // 0x90(0x01)
	char UnknownData_91[0x3]; // 0x91(0x03)
	int32_t MinionsCount; // 0x94(0x04)
	struct UFWAIArchetype* MinionsArchetype; // 0x98(0x08)
};

// Class Madness.MadBTDecorator_PA_HasGland
// Size: 0x68 (Inherited: 0x68)
struct UMadBTDecorator_PA_HasGland : UBTDecorator {
};

// Class Madness.MadBTService_AnomalyEnhancedWeapon
// Size: 0xd0 (Inherited: 0x70)
struct UMadBTService_AnomalyEnhancedWeapon : UBTService {
	float CoolDownTime; // 0x70(0x04)
	float AnomalyDuration; // 0x74(0x04)
	struct FBlackboardKeySelector AEWBlackboardKey; // 0x78(0x28)
	struct FBlackboardKeySelector AEWRequestBlackboardKey; // 0xa0(0x28)
	struct UFWAISemaphoreGroupClass* Semaphore; // 0xc8(0x08)
};

// Class Madness.MadBTService_BaileySpawnProjectiles
// Size: 0x98 (Inherited: 0x70)
struct UMadBTService_BaileySpawnProjectiles : UBTService {
	float SpawnInterval; // 0x70(0x04)
	struct FName ThrowSocketName; // 0x74(0x08)
	char UnknownData_7C[0x4]; // 0x7c(0x04)
	struct AProjectile* ProjectileToSpawn; // 0x80(0x08)
	int32_t NumberOfProjectilesToSpawn; // 0x88(0x04)
	float ProjectileGroundSpeed; // 0x8c(0x04)
	float ProjectileExtraHeight; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)
};

// Class Madness.MadBTService_DS_SuppressHeightControl
// Size: 0x70 (Inherited: 0x70)
struct UMadBTService_DS_SuppressHeightControl : UBTService {
};

// Class Madness.MadBTService_DisableForceKnockbackLurker
// Size: 0x70 (Inherited: 0x70)
struct UMadBTService_DisableForceKnockbackLurker : UFWBTService_ContextOverride {
};

// Class Madness.MadBTService_DisableSniperTargeting
// Size: 0x70 (Inherited: 0x70)
struct UMadBTService_DisableSniperTargeting : UBTService {
};

// Class Madness.MadBTService_FetchPerceptionInfo
// Size: 0x128 (Inherited: 0x70)
struct UMadBTService_FetchPerceptionInfo : UBTService {
	struct FBlackboardKeySelector PerceivedActorBlackboardKey; // 0x70(0x28)
	struct UAISense* PerceptionSense; // 0x98(0x08)
	struct FBlackboardKeySelector PerceptionLocationBlackboardKey; // 0xa0(0x28)
	struct FBlackboardKeySelector PerceptionAgeBlackboardKey; // 0xc8(0x28)
	struct FBlackboardKeySelector PerceptionActiveBlackboardKey; // 0xf0(0x28)
	char UnknownData_118_0 : 7; // 0x118(0x01)
	bool bClearIfStimuliInvalid : 1; // 0x118(0x01)
	char UnknownData_119[0xf]; // 0x119(0x0f)
};

// Class Madness.MadBTService_HandleAngryStatusVisual
// Size: 0x70 (Inherited: 0x70)
struct UMadBTService_HandleAngryStatusVisual : UBTService {
};

// Class Madness.MadBTService_MonitorSciathanDash
// Size: 0x98 (Inherited: 0x70)
struct UMadBTService_MonitorSciathanDash : UBTService {
	float BlockDetectionDistanceTreshold; // 0x70(0x04)
	float BlockDetectionInterval; // 0x74(0x04)
	int32_t BlockDetectionSamplesCount; // 0x78(0x04)
	float CapsuleHeightZOffset; // 0x7c(0x04)
	float CapsuleHeightMultiplier; // 0x80(0x04)
	float LookAheadDistance; // 0x84(0x04)
	struct FVector ProjectionQueryExtent; // 0x88(0x0c)
	enum class ECollisionChannel TraceChannel; // 0x94(0x01)
	char UnknownData_95[0x3]; // 0x95(0x03)
};

// Class Madness.MadBTService_PerforoRunawayTimer
// Size: 0xa8 (Inherited: 0x70)
struct UMadBTService_PerforoRunawayTimer : UBTService {
	float MinimalVelocity; // 0x70(0x04)
	float MaxRunawayDuration; // 0x74(0x04)
	float MaxRunawayPauseDuration; // 0x78(0x04)
	char UnknownData_7C[0x4]; // 0x7c(0x04)
	struct FBlackboardKeySelector TimeExceededBlackboardKey; // 0x80(0x28)
};

// Class Madness.MadBTService_SetWalkBackwardsFocus
// Size: 0x78 (Inherited: 0x70)
struct UMadBTService_SetWalkBackwardsFocus : UBTService {
	float DotToTerminateMove; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
};

// Class Madness.MadBTTask_AlteredDemonSetNukeShieldTier
// Size: 0x70 (Inherited: 0x70)
struct UMadBTTask_AlteredDemonSetNukeShieldTier : UBTTaskNode {
};

// Class Madness.MadBTTask_Bailey_SpawnProjectiles
// Size: 0xb8 (Inherited: 0x70)
struct UMadBTTask_Bailey_SpawnProjectiles : UBTTaskNode {
	struct UAnimMontage* AnimationMontage; // 0x70(0x08)
	struct FName ThrowSocketName; // 0x78(0x08)
	struct AProjectile* ProjectileToSpawn; // 0x80(0x08)
	int32_t NumberOfProjectilesToSpawn; // 0x88(0x04)
	float ProjectileGroundSpeed; // 0x8c(0x04)
	float ProjectileExtraHeight; // 0x90(0x04)
	char UnknownData_94[0x4]; // 0x94(0x04)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0x98(0x08)
	char UnknownData_A0[0x18]; // 0xa0(0x18)

	void OnAnimNotify(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadBTTask_Bailey_SpawnProjectiles.OnAnimNotify // (Final|Native|Protected) // @ game+0x1591490
};

// Class Madness.MadBTTask_ChangeWeapon
// Size: 0x88 (Inherited: 0x70)
struct UMadBTTask_ChangeWeapon : UBTTaskNode {
	char UnknownData_70_0 : 7; // 0x70(0x01)
	bool bPlayEquipAnimation : 1; // 0x70(0x01)
	char UnknownData_71_0 : 7; // 0x71(0x01)
	bool bWaitForAnimationFinish : 1; // 0x71(0x01)
	char UnknownData_72[0x1]; // 0x72(0x01)
	enum class EFWAIWeaponSlot WeaponSlot; // 0x73(0x01)
	char UnknownData_74[0x4]; // 0x74(0x04)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0x78(0x08)
	char UnknownData_80[0x8]; // 0x80(0x08)

	void WeaponChangeFinished(); // Function Madness.MadBTTask_ChangeWeapon.WeaponChangeFinished // (Final|Native|Private) // @ game+0x1591a30
};

// Class Madness.MadBTTask_CrawlerAddTargetFail
// Size: 0x70 (Inherited: 0x70)
struct UMadBTTask_CrawlerAddTargetFail : UBTTaskNode {
};

// Class Madness.MadBTTask_DS_ForceHeightDefaults
// Size: 0x70 (Inherited: 0x70)
struct UMadBTTask_DS_ForceHeightDefaults : UBTTaskNode {
};

// Class Madness.MadBTTask_DS_SetGlideState
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_DS_SetGlideState : UBTTaskNode {
	char UnknownData_70_0 : 7; // 0x70(0x01)
	bool bIsGliding : 1; // 0x70(0x01)
	char UnknownData_71[0x7]; // 0x71(0x07)
};

// Class Madness.MadBTTask_DS_SetOnGroundState
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_DS_SetOnGroundState : UBTTaskNode {
	char UnknownData_70_0 : 7; // 0x70(0x01)
	bool bOnGround : 1; // 0x70(0x01)
	char UnknownData_71[0x7]; // 0x71(0x07)
};

// Class Madness.MadBTTask_DS_ReturnToNavmesh
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_DS_ReturnToNavmesh : UBTTaskNode {
	float MaxTime; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
};

// Class Madness.MadBTTask_DodgeTeleport
// Size: 0x158 (Inherited: 0x70)
struct UMadBTTask_DodgeTeleport : UBTTaskNode {
	float MinAngleDeviation; // 0x70(0x04)
	float MaxAngleDeviation; // 0x74(0x04)
	float MinDodgeDistance; // 0x78(0x04)
	float MaxDodgeDistance; // 0x7c(0x04)
	float TeleportDelay; // 0x80(0x04)
	enum class EDodgeDirection DodgeDirection; // 0x84(0x01)
	char UnknownData_85_0 : 7; // 0x85(0x01)
	bool bEnableRePath : 1; // 0x85(0x01)
	char UnknownData_86[0x2]; // 0x86(0x02)
	struct UMadCharacterShaderEffect* CharacterTeleportShaderEffect; // 0x88(0x08)
	struct UMadWeaponShaderEffect* WeaponTeleportShaderEffect; // 0x90(0x08)
	struct UMadMeshShaderEffect* PrimaryMeshTeleportShaderEffect; // 0x98(0x08)
	struct UMadMeshShaderEffect* SecondaryMeshTeleportShaderEffect; // 0xa0(0x08)
	struct FGameplayTag ShaderEffectGameplayTag; // 0xa8(0x08)
	struct FFWParticleSetup BeginTeleportParticle; // 0xb0(0x30)
	struct FFWParticleSetup EndTeleportParticle; // 0xe0(0x30)
	struct FName SocketName; // 0x110(0x08)
	struct UBehaviorTreeComponent* OwnerComponent; // 0x118(0x08)
	struct TArray<struct UMadShaderEffect*> AppliedShaderEffects; // 0x120(0x10)
	char UnknownData_130[0x28]; // 0x130(0x28)

	void OnTimerEnd(); // Function Madness.MadBTTask_DodgeTeleport.OnTimerEnd // (Final|Native|Private) // @ game+0x15917c0
};

// Class Madness.MadBTTask_EnterEnrageState
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_EnterEnrageState : UBTTaskNode {
	struct UMadGameplayEffect* EnrageGameplayEffect; // 0x70(0x08)
};

// Class Madness.MadBTTask_EquipWeapon
// Size: 0x88 (Inherited: 0x88)
struct UMadBTTask_EquipWeapon : UMadBTTask_ChangeWeapon {
};

// Class Madness.MadBTTask_ForestBoss_SelectCombatState
// Size: 0x88 (Inherited: 0x70)
struct UMadBTTask_ForestBoss_SelectCombatState : UBTTaskNode {
	struct TArray<struct FAttractorLocationToCombatState> AttractorToCombatState; // 0x70(0x10)
	enum class EMadForestBossCombatState DefaultCombatState; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
};

// Class Madness.MadBTTask_ForestBoss_SelectPunchLocation
// Size: 0x88 (Inherited: 0x70)
struct UMadBTTask_ForestBoss_SelectPunchLocation : UBTTaskNode {
	struct TArray<struct FCombatStateToAttractors> CombatStateToAttractors; // 0x70(0x10)
	char UnknownData_80_0 : 7; // 0x80(0x01)
	bool bValidateCombatState : 1; // 0x80(0x01)
	char UnknownData_81[0x3]; // 0x81(0x03)
	int32_t DefaultPunchLocationIdx; // 0x84(0x04)
};

// Class Madness.MadBTTask_RotateToFaceTarget
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_RotateToFaceTarget : UBTTaskNode {
	char UnknownData_70[0x8]; // 0x70(0x08)
};

// Class Madness.MadBTTask_AllowStrafe
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_AllowStrafe : UBTTaskNode {
	char UnknownData_70_0 : 7; // 0x70(0x01)
	bool bAllowStrafe : 1; // 0x70(0x01)
	char UnknownData_71[0x7]; // 0x71(0x07)
};

// Class Madness.MadBTTask_SetMovementMood
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_SetMovementMood : UBTTaskNode {
	enum class EMovementMood NewMovementMood; // 0x70(0x01)
	char UnknownData_71[0x7]; // 0x71(0x07)
};

// Class Madness.MadBTTask_SetPointOfInterest
// Size: 0xa0 (Inherited: 0x70)
struct UMadBTTask_SetPointOfInterest : UBTTaskNode {
	struct FBlackboardKeySelector LocationKey; // 0x70(0x28)
	float AddedRandom; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
};

// Class Madness.MadBTTask_SniperCoverAction
// Size: 0xa0 (Inherited: 0x70)
struct UMadBTTask_SniperCoverAction : UBTTaskNode {
	struct UBehaviorTreeComponent* MyOwnerComp; // 0x70(0x08)
	struct UAnimMontage* AnimMontage; // 0x78(0x08)
	char UnknownData_80[0x14]; // 0x80(0x14)
	float AimingMultiplier; // 0x94(0x04)
	float LasetBounceOffset; // 0x98(0x04)
	float VisibilityDelayToShoot; // 0x9c(0x04)

	void OnNotifyBegin(struct FName NotifyName, struct FBranchingPointNotifyPayload BranchingPointPayload); // Function Madness.MadBTTask_SniperCoverAction.OnNotifyBegin // (Final|Native|Protected|HasOutParms) // @ game+0x1595640
};

// Class Madness.MadBTTask_ThrowProjectile
// Size: 0xd8 (Inherited: 0x70)
struct UMadBTTask_ThrowProjectile : UBTTaskNode {
	struct TArray<struct FMadAI_ThrowAnimData> ThrowProjectilesAnims; // 0x70(0x10)
	char UnknownData_80_0 : 7; // 0x80(0x01)
	bool bHideWeapon : 1; // 0x80(0x01)
	char UnknownData_81_0 : 7; // 0x81(0x01)
	bool bUseWeaponMesh : 1; // 0x81(0x01)
	char UnknownData_82[0x6]; // 0x82(0x06)
	struct AProjectile* ProjectileToThrow; // 0x88(0x08)
	struct FName LeftHandSocketName; // 0x90(0x08)
	struct FName RightHandSocketName; // 0x98(0x08)
	float ProjectileGroundSpeed; // 0xa0(0x04)
	float ProjectileExtraHeight; // 0xa4(0x04)
	struct FRotator ProjectileInitialRotation; // 0xa8(0x0c)
	struct FVector ProjectileTargetOffset; // 0xb4(0x0c)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0xc0(0x08)
	char UnknownData_C8[0x10]; // 0xc8(0x10)

	void OnAnimNotify(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadBTTask_ThrowProjectile.OnAnimNotify // (Final|Native|Private) // @ game+0x15950b0
};

// Class Madness.MadBTTask_UnequipWeapon
// Size: 0x88 (Inherited: 0x88)
struct UMadBTTask_UnequipWeapon : UMadBTTask_ChangeWeapon {
};

// Class Madness.MadBTTask_UpdateAnomalyEnhancedWeapon
// Size: 0xe0 (Inherited: 0x70)
struct UMadBTTask_UpdateAnomalyEnhancedWeapon : UBTTaskNode {
	struct UAnimMontage* AEWActivationAnimation; // 0x70(0x08)
	struct UAnimMontage* AEWDeactivationAnimation; // 0x78(0x08)
	struct FBlackboardKeySelector AnomalyBlackboardKey; // 0x80(0x28)
	struct FBlackboardKeySelector RequestAEWChange; // 0xa8(0x28)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0xd0(0x08)
	char UnknownData_D8[0x8]; // 0xd8(0x08)

	void OnAnimNotify(struct FName NotifyName, struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Madness.MadBTTask_UpdateAnomalyEnhancedWeapon.OnAnimNotify // (Final|Native|Private) // @ game+0x15951b0
};

// Class Madness.MadBTTask_VolcanoBoss_CheckForPhaseTransition
// Size: 0x70 (Inherited: 0x70)
struct UMadBTTask_VolcanoBoss_CheckForPhaseTransition : UBTTaskNode {
};

// Class Madness.MadBTTask_VolcanoBoss_DrinkLava
// Size: 0x128 (Inherited: 0x70)
struct UMadBTTask_VolcanoBoss_DrinkLava : UBTTaskNode {
	struct FBlackboardKeySelector TargetActorKey; // 0x70(0x28)
	struct FGameplayTagContainer ForbiddenGameplayTags; // 0x98(0x20)
	struct FGameplayTagContainer EffectsWithGrantedTagsToRemove; // 0xb8(0x20)
	struct UAnimMontage* DrinkLavaMontage; // 0xd8(0x08)
	struct FGameplayTag SecondPhaseGameplayTag; // 0xe0(0x08)
	struct TArray<struct FName> PhaseSections; // 0xe8(0x10)
	struct UGameplayEffect* CooldownGameplayEffect; // 0xf8(0x08)
	float LegHeatingDelay; // 0x100(0x04)
	char UnknownData_104[0x4]; // 0x104(0x04)
	struct UBehaviorTreeComponent* OwnerComponent; // 0x108(0x08)
	struct AMadCharAI_VolcanoBoss* VolcanoBoss; // 0x110(0x08)
	char UnknownData_118[0x10]; // 0x118(0x10)
};

// Class Madness.MadBTTask_VolcanoBoss_JumpAndRotate
// Size: 0x3b0 (Inherited: 0x70)
struct UMadBTTask_VolcanoBoss_JumpAndRotate : UBTTaskNode {
	float JumpMinDistance; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
	struct FBlackboardKeySelector JumpTargetActorKey; // 0x78(0x28)
	struct FBlackboardKeySelector CenterPointOfArea; // 0xa0(0x28)
	struct UMadGameplayEffect* CooldownEffect; // 0xc8(0x08)
	char UnknownData_D0_0 : 7; // 0xd0(0x01)
	bool bAllowOnlyRotation : 1; // 0xd0(0x01)
	char UnknownData_D1[0x3]; // 0xd1(0x03)
	float MaxDistanceFromAreaCenter; // 0xd4(0x04)
	float EndGravityScale; // 0xd8(0x04)
	char UnknownData_DC[0x4]; // 0xdc(0x04)
	struct AMadCharAI_VolcanoBoss* VolcanoBoss; // 0xe0(0x08)
	struct UBehaviorTreeComponent* OwnerComponent; // 0xe8(0x08)
	char UnknownData_F0[0x10]; // 0xf0(0x10)
	struct UGameplayEffect* ApplyGameplayEffectOnBegin; // 0x100(0x08)
	struct FGameplayTagContainer RemoveTagsOnBegin; // 0x108(0x20)
	struct FGameplayTagContainer RemoveTagsOnEnd; // 0x128(0x20)
	char UnknownData_148_0 : 7; // 0x148(0x01)
	bool bUseTargetPrediction : 1; // 0x148(0x01)
	char UnknownData_149[0x7]; // 0x149(0x07)
	struct UNavigationQueryFilter* FindTargetNavQueryFilter; // 0x150(0x08)
	struct FVector FindTargetQueryExtent; // 0x158(0x0c)
	char UnknownData_164[0x4]; // 0x164(0x04)
	struct FLandingShakeData LandingShakeData; // 0x168(0x30)
	float MinimumAngle; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
	struct FRotateTowardsTargetData RotateTowardsTargetData; // 0x1a0(0x78)
	char UnknownData_218[0x8]; // 0x218(0x08)
	char UnknownData_220_0 : 7; // 0x220(0x01)
	bool bMoveToExactLocation : 1; // 0x220(0x01)
	char UnknownData_221[0x7]; // 0x221(0x07)
	struct FMoveTowardsTargetData MoveTowardsTargetData; // 0x228(0x18)
	char UnknownData_240_0 : 7; // 0x240(0x01)
	bool bUseTargetRotationYawOfActor : 1; // 0x240(0x01)
	char UnknownData_241[0x7]; // 0x241(0x07)
	struct FJumpData JumpData; // 0x248(0x130)
	char UnknownData_378[0x38]; // 0x378(0x38)

	void Landed(struct FHitResult Hit); // Function Madness.MadBTTask_VolcanoBoss_JumpAndRotate.Landed // (Final|Native|Private|HasOutParms) // @ game+0x1594f70
};

// Class Madness.MadBTTask_VolcanoBoss_QuickTransition
// Size: 0xa0 (Inherited: 0x70)
struct UMadBTTask_VolcanoBoss_QuickTransition : UBTTaskNode {
	struct UMadGameplayEffect* CooldownGameplayEffect; // 0x70(0x08)
	struct FBlackboardKeySelector TeleportTargetActorKey; // 0x78(0x28)
};

// Class Madness.MadBTTask_VolcanoBoss_StartWalkCycle
// Size: 0xf0 (Inherited: 0x70)
struct UMadBTTask_VolcanoBoss_StartWalkCycle : UBTTaskNode {
	struct FBlackboardKeySelector TargetActorKey; // 0x70(0x28)
	float MinDotToTarget; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
	struct FGameplayTagContainer GrantedGameplayTagsToRemove; // 0xa0(0x20)
	struct UGameplayEffect* GameplayEffectToApply; // 0xc0(0x08)
	struct FGameplayTag SelectMontageGameplayTag; // 0xc8(0x08)
	struct TArray<struct FName> MontageSection; // 0xd0(0x10)
	struct TArray<enum class EMovementMood> MovementMood; // 0xe0(0x10)
};

// Class Madness.MadBTTask_WaitForCrawlerAnimStop
// Size: 0x78 (Inherited: 0x70)
struct UMadBTTask_WaitForCrawlerAnimStop : UBTTaskNode {
	struct UAnimSequence* AnimSequence; // 0x70(0x08)
};

// Class Madness.MadBulletGameplayAbility
// Size: 0x570 (Inherited: 0x4b8)
struct UMadBulletGameplayAbility : UMadGameplayAbility {
	enum class EMadBulletSkillType BulletSkillType; // 0x4b8(0x01)
	char UnknownData_4B9[0x7]; // 0x4b9(0x07)
	struct FScalableFloat BeamRadius; // 0x4c0(0x20)
	char UnknownData_4E0_0 : 7; // 0x4e0(0x01)
	bool bDebug : 1; // 0x4e0(0x01)
	char UnknownData_4E1[0x3]; // 0x4e1(0x03)
	float DebugTime; // 0x4e4(0x04)
	struct AWeapon* AbilityWeapon; // 0x4e8(0x08)
	int32_t EnemiesKilled; // 0x4f0(0x04)
	float PainfulBulletsSummaryDamage; // 0x4f4(0x04)
	struct TArray<struct FMadTargetCondition> FilteringConditions; // 0x4f8(0x10)
	int32_t AmmoBefore; // 0x508(0x04)
	int32_t AdditionalClips; // 0x50c(0x04)
	int32_t AmmoPerKill; // 0x510(0x04)
	float MaxHealthPercentOnKill; // 0x514(0x04)
	char UnknownData_518_0 : 7; // 0x518(0x01)
	bool bIncludeFirstDirectTarget : 1; // 0x518(0x01)
	char UnknownData_519[0x3]; // 0x519(0x03)
	float DamageToApplyOnDirectTargets; // 0x51c(0x04)
	struct UMadDamageType* DamageTypeToApplyOnDirectTargets; // 0x520(0x08)
	struct TArray<struct FGameplayEffectSpecHandle> EffectsToApplyOnDirectTargets; // 0x528(0x10)
	struct TArray<struct FGameplayEffectSpecHandle> EffectsToApplyOnAllTargets; // 0x538(0x10)
	float RicochetRange; // 0x548(0x04)
	int32_t RicochetNeighbors; // 0x54c(0x04)
	struct UMadGameplayEffect* RicochetEffectToApply; // 0x550(0x08)
	float RicochetDamage; // 0x558(0x04)
	char UnknownData_55C[0x4]; // 0x55c(0x04)
	struct UMadDamageType* RicochetDamageType; // 0x560(0x08)
	struct UMadGameplayEffect* RicochetEffectFromInstigator; // 0x568(0x08)

	void OnWeaponFired(struct FHitResult Trace, struct TArray<struct ABaseCharacter*> EnemiesHit, enum class EHitMarkerType HitMarkerType); // Function Madness.MadBulletGameplayAbility.OnWeaponFired // (Final|Native|Private|HasOutParms) // @ game+0x1595740
	void OnReload(); // Function Madness.MadBulletGameplayAbility.OnReload // (Final|Native|Private) // @ game+0x1595720
	void OnNewWeaponEquipped(); // Function Madness.MadBulletGameplayAbility.OnNewWeaponEquipped // (Final|Native|Private) // @ game+0x1595620
	void OnDamageDone(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadBulletGameplayAbility.OnDamageDone // (Final|Native|Private) // @ game+0x15952b0
	void GetRicochetParams(float OutRange, int32_t OutNeighbors, struct UMadGameplayEffect* OutEffectToApply, float OutDamage, struct UMadDamageType* OutDamageType, struct UMadGameplayEffect* OutEffectFromInstigator); // Function Madness.MadBulletGameplayAbility.GetRicochetParams // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1594d40
	int32_t GetNumberOfClips(); // Function Madness.MadBulletGameplayAbility.GetNumberOfClips // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1594d10
	float GetMaxHealthPercentOnKill(); // Function Madness.MadBulletGameplayAbility.GetMaxHealthPercentOnKill // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1594cd0
	void GetEffectsToApplyOnDirectTargets(struct TArray<struct FGameplayEffectSpecHandle> OutEffects); // Function Madness.MadBulletGameplayAbility.GetEffectsToApplyOnDirectTargets // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1594bd0
	void GetEffectsToApplyOnAllTargets(struct TArray<struct FGameplayEffectSpecHandle> OutEffects); // Function Madness.MadBulletGameplayAbility.GetEffectsToApplyOnAllTargets // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1594ad0
	void GetDamageToApplyOnDirectTargets(float OutDamage, struct UMadDamageType* OutDamageType, bool OutIncludeFirst); // Function Madness.MadBulletGameplayAbility.GetDamageToApplyOnDirectTargets // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x15949a0
	float GetBeamRadius(float Level); // Function Madness.MadBulletGameplayAbility.GetBeamRadius // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1594910
	int32_t GetAdditionalAmmoPerKill(); // Function Madness.MadBulletGameplayAbility.GetAdditionalAmmoPerKill // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x15948e0
	void DoEndBulletAbility(); // Function Madness.MadBulletGameplayAbility.DoEndBulletAbility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadCameraLookAt
// Size: 0x2f0 (Inherited: 0x2f0)
struct AMadCameraLookAt : AActor {
};

// Class Madness.MadCameraManager
// Size: 0x2bd0 (Inherited: 0x2ac0)
struct AMadCameraManager : ABaseCameraManager {
	struct UCameraState_Global* DBNO_CameraState; // 0x2ac0(0x08)
	struct FMulticastInlineDelegate OnLookAtFinished; // 0x2ac8(0x10)
	struct TMap<enum class ECoverToCoverMoveType, struct UCameraState_Global*> AdvancedCoverEnterCameraMap; // 0x2ad8(0x50)
	float ViewPitchLimitInCover; // 0x2b28(0x04)
	char UnknownData_2B2C[0x1c]; // 0x2b2c(0x1c)
	struct UMadCameraState_Targeting* ActiveTargetingState; // 0x2b48(0x08)
	char UnknownData_2B50[0x50]; // 0x2b50(0x50)
	struct AMadCameraVolume* ActiveCameraVolume; // 0x2ba0(0x08)
	struct UMadLookAtControllerComponent* LookAtController; // 0x2ba8(0x08)
	char UnknownData_2BB0[0x20]; // 0x2bb0(0x20)

	void OnFadeOutInEvent(); // Function Madness.MadCameraManager.OnFadeOutInEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1595600
	void DumpCameraLog(); // Function Madness.MadCameraManager.DumpCameraLog // (Final|Exec|Native|Public) // @ game+0x15948c0
	void DeactivateGlobalCameraState(struct UCameraState_Global* InGlobalStateClass); // Function Madness.MadCameraManager.DeactivateGlobalCameraState // (Final|Native|Public|BlueprintCallable) // @ game+0x1594840
	struct UCameraState_Global* ActivateGlobalCameraState(struct UCameraState_Global* InGlobalStateClass); // Function Madness.MadCameraManager.ActivateGlobalCameraState // (Final|Native|Public|BlueprintCallable) // @ game+0x15947b0
	void ActivateFadeOutIn(); // Function Madness.MadCameraManager.ActivateFadeOutIn // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadCameraState_Ability
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMadCameraState_Ability : UCameraState_Global {
};

// Class Madness.MadCameraState_BlendCinematic
// Size: 0x8b0 (Inherited: 0x2d0)
struct UMadCameraState_BlendCinematic : UCameraState_Global {
	char UnknownData_2D0[0x5e0]; // 0x2d0(0x5e0)
};

// Class Madness.MadCameraState_Targeting
// Size: 0x3d0 (Inherited: 0x2c0)
struct UMadCameraState_Targeting : UCameraState {
	float NearTransitionRegionAlpha; // 0x2c0(0x04)
	float DoFBlurSize; // 0x2c4(0x04)
	struct FFOscillator WeaponSwayPitch; // 0x2c8(0x0c)
	struct FFOscillator WeaponSwayYaw; // 0x2d4(0x0c)
	char UnknownData_2E0_0 : 7; // 0x2e0(0x01)
	bool bTargetingDoF : 1; // 0x2e0(0x01)
	char UnknownData_2E1[0xbf]; // 0x2e1(0xbf)
	struct AMadWeapon* CurrentWeapon; // 0x3a0(0x08)
	struct FVector SniperRifleOverlayTargetingSocketOffset; // 0x3a8(0x0c)
	char UnknownData_3B4[0x1c]; // 0x3b4(0x1c)
};

// Class Madness.MadCameraState_PeekTargeting
// Size: 0x3d0 (Inherited: 0x3d0)
struct UMadCameraState_PeekTargeting : UMadCameraState_Targeting {
};

// Class Madness.MadCameraState_PeekSideTargeting
// Size: 0x3d0 (Inherited: 0x3d0)
struct UMadCameraState_PeekSideTargeting : UMadCameraState_PeekTargeting {
};

// Class Madness.MadCameraState_BlindFire
// Size: 0x3d8 (Inherited: 0x3d0)
struct UMadCameraState_BlindFire : UMadCameraState_PeekSideTargeting {
	float TimeToActivate; // 0x3d0(0x04)
	char UnknownData_3D4[0x4]; // 0x3d4(0x04)
};

// Class Madness.MadCameraState_BuggyRide
// Size: 0x390 (Inherited: 0x2d0)
struct UMadCameraState_BuggyRide : UCameraState_Global {
	float PitchLimit; // 0x2d0(0x04)
	float YawLimit; // 0x2d4(0x04)
	float SmoothTargetRotation; // 0x2d8(0x04)
	char UnknownData_2DC[0xb4]; // 0x2dc(0xb4)
};

// Class Madness.MadCameraState_ChargingBeam
// Size: 0x318 (Inherited: 0x2d0)
struct UMadCameraState_ChargingBeam : UMadCameraState_Ability {
	char UnknownData_2D0_0 : 7; // 0x2d0(0x01)
	bool bUseCustomPitchLimit : 1; // 0x2d0(0x01)
	char UnknownData_2D1[0x3]; // 0x2d1(0x03)
	struct FCameraChargingBeamAngleLimits CustomPitchLimits; // 0x2d4(0x1c)
	char UnknownData_2F0_0 : 7; // 0x2f0(0x01)
	bool bUseCustomYawLimit : 1; // 0x2f0(0x01)
	char UnknownData_2F1[0x3]; // 0x2f1(0x03)
	struct FCameraChargingBeamAngleLimits CustomYawLimits; // 0x2f4(0x1c)
	char UnknownData_310[0x8]; // 0x310(0x08)
};

// Class Madness.MadCameraState_Cover
// Size: 0x388 (Inherited: 0x2c0)
struct UMadCameraState_Cover : UCameraState {
	float WorldInterpolationThreshold; // 0x2c0(0x04)
	char UnknownData_2C4[0x4]; // 0x2c4(0x04)
	struct AMadPlayerCharacter* MadPlayer; // 0x2c8(0x08)
	char UnknownData_2D0[0xb8]; // 0x2d0(0xb8)
};

// Class Madness.MadCameraState_CoverPeekSide
// Size: 0x388 (Inherited: 0x388)
struct UMadCameraState_CoverPeekSide : UMadCameraState_Cover {
};

// Class Madness.MadCameraState_MoveAction
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMadCameraState_MoveAction : UCameraState_Global {
};

// Class Madness.MadCameraState_Sprint
// Size: 0x378 (Inherited: 0x2d0)
struct UMadCameraState_Sprint : UMadCameraState_MoveAction {
	struct UCameraShake* OnFootDownShake; // 0x2d0(0x08)
	float SpringArmOffsetRunningToCamera; // 0x2d8(0x04)
	float ArmOffsetChangeInterpSpeed; // 0x2dc(0x04)
	char UnknownData_2E0[0x98]; // 0x2e0(0x98)
};

// Class Madness.MadCameraState_CoverSwap
// Size: 0x388 (Inherited: 0x378)
struct UMadCameraState_CoverSwap : UMadCameraState_Sprint {
	float DistanceToCover; // 0x378(0x04)
	char UnknownData_37C[0x4]; // 0x37c(0x04)
	struct AMadPlayerCharacter* MadPlayer; // 0x380(0x08)
};

// Class Madness.MadCameraState_Dash
// Size: 0x2f0 (Inherited: 0x2d0)
struct UMadCameraState_Dash : UMadCameraState_Ability {
	struct UCameraShake* EndShake; // 0x2d0(0x08)
	struct FVector SocketOffset; // 0x2d8(0x0c)
	float CameraToVelocityDotThreshold; // 0x2e4(0x04)
	float FOVOffset; // 0x2e8(0x04)
	char UnknownData_2EC[0x4]; // 0x2ec(0x04)

	void OnMoveImpact(struct FHitResult HitResult); // Function Madness.MadCameraState_Dash.OnMoveImpact // (Final|Native|Public) // @ game+0x159a300
};

// Class Madness.MadCameraState_DBNO
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMadCameraState_DBNO : UCameraState_Global {
};

// Class Madness.MadCameraState_Death
// Size: 0x2d8 (Inherited: 0x2d0)
struct UMadCameraState_Death : UCameraState_Global {
	char UnknownData_2D0[0x8]; // 0x2d0(0x08)
};

// Class Madness.MadCameraState_FirstPerson
// Size: 0x2d8 (Inherited: 0x2d0)
struct UMadCameraState_FirstPerson : UCameraState_Global {
	char UnknownData_2D0[0x8]; // 0x2d0(0x08)
};

// Class Madness.MadCameraState_FromAnimation
// Size: 0x360 (Inherited: 0x2d0)
struct UMadCameraState_FromAnimation : UCameraState_Global {
	char UnknownData_2D0[0x88]; // 0x2d0(0x88)
	struct AMadPlayerCharacter* MadPlayer; // 0x358(0x08)
};

// Class Madness.MadCameraState_GravityJump
// Size: 0x308 (Inherited: 0x2d0)
struct UMadCameraState_GravityJump : UMadCameraState_Ability {
	char UnknownData_2D0_0 : 7; // 0x2d0(0x01)
	bool bUseDefaultPitchLimit : 1; // 0x2d0(0x01)
	char UnknownData_2D1[0x3]; // 0x2d1(0x03)
	float BaseCameraPitchAngle; // 0x2d4(0x04)
	float AdditivePitchMaxLimit; // 0x2d8(0x04)
	float AdditivePitchMinLimit; // 0x2dc(0x04)
	char UnknownData_2E0_0 : 7; // 0x2e0(0x01)
	bool bAutoRotateToInitialTarget : 1; // 0x2e0(0x01)
	char UnknownData_2E1[0x3]; // 0x2e1(0x03)
	float AutoRotateInterpSpeed; // 0x2e4(0x04)
	char UnknownData_2E8[0x20]; // 0x2e8(0x20)
};

// Class Madness.MadCameraState_Grenade
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMadCameraState_Grenade : UMadCameraState_Ability {
};

// Class Madness.MadCameraState_HuntThePrey
// Size: 0x2e0 (Inherited: 0x2d0)
struct UMadCameraState_HuntThePrey : UMadCameraState_Ability {
	char UnknownData_2D0[0x10]; // 0x2d0(0x10)
};

// Class Madness.MadCameraState_Idle
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMadCameraState_Idle : UCameraState {
	struct UCurveFloat* SocketAlphaCurve; // 0x2c0(0x08)
	struct FVector CameraSocketOffset; // 0x2c8(0x0c)
	char UnknownData_2D4[0x1c]; // 0x2d4(0x1c)
};

// Class Madness.MadCameraState_KeepAspectRatio
// Size: 0x980 (Inherited: 0x2d0)
struct UMadCameraState_KeepAspectRatio : UCameraState_Global {
	char UnknownData_2D0_0 : 7; // 0x2d0(0x01)
	bool bDisableAfterCutscene : 1; // 0x2d0(0x01)
	char UnknownData_2D1_0 : 7; // 0x2d1(0x01)
	bool bDisableCameraActorAspectConstraint : 1; // 0x2d1(0x01)
	char UnknownData_2D2_0 : 7; // 0x2d2(0x01)
	bool bCalculateConstaintsOnce : 1; // 0x2d2(0x01)
	char UnknownData_2D3_0 : 7; // 0x2d3(0x01)
	bool bUseRatioAxisConstraint : 1; // 0x2d3(0x01)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x2d4(0x01)
	char UnknownData_2D5[0x6a3]; // 0x2d5(0x6a3)
	struct UCameraComponent* StartingCameraComp; // 0x978(0x08)

	void DrawHUD(struct ABaseHud* HUD, struct UCanvas* Canvas, struct UCanvas* DebugCanvas); // Function Madness.MadCameraState_KeepAspectRatio.DrawHUD // (Final|Native|Protected) // @ game+0x1599ce0
};

// Class Madness.MadCameraState_LookAReturnFade
// Size: 0x2f0 (Inherited: 0x2d0)
struct UMadCameraState_LookAReturnFade : UCameraState_Global {
	char UnknownData_2D0[0x20]; // 0x2d0(0x20)
};

// Class Madness.MadCameraState_LookAt
// Size: 0x348 (Inherited: 0x2d0)
struct UMadCameraState_LookAt : UCameraState_Global {
	char UnknownData_2D0[0x30]; // 0x2d0(0x30)
	struct AMadCameraManager* MadCameraManager; // 0x300(0x08)
	struct UMadLookAtControllerComponent* LookAtController; // 0x308(0x08)
	char UnknownData_310[0x38]; // 0x310(0x38)
};

// Class Madness.MadCameraState_PrimalCharge
// Size: 0x2e0 (Inherited: 0x2d0)
struct UMadCameraState_PrimalCharge : UMadCameraState_Ability {
	float FOVBlendTime; // 0x2d0(0x04)
	float FOVValue; // 0x2d4(0x04)
	char UnknownData_2D8[0x8]; // 0x2d8(0x08)
};

// Class Madness.MadCameraState_Roll
// Size: 0x380 (Inherited: 0x2d0)
struct UMadCameraState_Roll : UMadCameraState_MoveAction {
	float ForwardRollArmLengthOffset; // 0x2d0(0x04)
	float ForwardBlendTime; // 0x2d4(0x04)
	enum class EAlphaBlendOption ForwardBlendType; // 0x2d8(0x01)
	char UnknownData_2D9[0xa7]; // 0x2d9(0xa7)
};

// Class Madness.MadCameraState_Run
// Size: 0x370 (Inherited: 0x2c0)
struct UMadCameraState_Run : UCameraState {
	float MaxOffset; // 0x2c0(0x04)
	float MirrorStrModifier; // 0x2c4(0x04)
	float BackToBaseMirrorPositionSpeed; // 0x2c8(0x04)
	char UnknownData_2CC[0xa4]; // 0x2cc(0xa4)
};

// Class Madness.MadCameraState_RunToCover
// Size: 0x378 (Inherited: 0x378)
struct UMadCameraState_RunToCover : UMadCameraState_Sprint {
};

// Class Madness.MadCameraState_Slide
// Size: 0x300 (Inherited: 0x2d0)
struct UMadCameraState_Slide : UMadCameraState_MoveAction {
	struct FRotator DeltaRotation; // 0x2d0(0x0c)
	float DistanceToCoverSlot; // 0x2dc(0x04)
	struct AMadPlayerCharacter* MadPlayer; // 0x2e0(0x08)
	struct UMadPlayerCoverMovementComponent* MoveComp; // 0x2e8(0x08)
	char UnknownData_2F0[0x10]; // 0x2f0(0x10)
};

// Class Madness.MadCameraStateInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadCameraStateInterface : UInterface {
};

// Class Madness.MadCameraStateMachine
// Size: 0x1c0 (Inherited: 0x1a8)
struct UMadCameraStateMachine : UCameraStateMachine {
	struct TArray<struct FMadCameraPreset> CameraMachinePresets; // 0x1a8(0x10)
	char UnknownData_1B8[0x8]; // 0x1b8(0x08)
};

// Class Madness.MadCameraTransitionFromTargeting
// Size: 0x50 (Inherited: 0x50)
struct UMadCameraTransitionFromTargeting : UCameraTransitionRules {
};

// Class Madness.MadCameraVolume
// Size: 0x340 (Inherited: 0x328)
struct AMadCameraVolume : AVolume {
	struct FCameraVolumeSettings CameraVolumeSettings; // 0x328(0x18)
};

// Class Madness.MadCampfire
// Size: 0x3c8 (Inherited: 0x2f0)
struct AMadCampfire : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FFactExpression IsVisibleFactExp; // 0x2f8(0x18)
	struct UDataTable* GlobalVOList; // 0x310(0x08)
	struct UDataTable* LevelVOList; // 0x318(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> LevelSequence; // 0x320(0x28)
	struct TSoftObjectPtr<struct UWorld> DialogueLevel; // 0x348(0x28)
	struct ULocalInteractionComponent* InteractionComponent; // 0x370(0x08)
	struct FQuestMarkerIcon LevelVOMarkerIcon; // 0x378(0x18)
	struct FQuestMarkerIcon GlobalVOMarkerIcon; // 0x390(0x18)
	struct FQuestMarkerIcon NoVOToBePlayedMarkerIcon; // 0x3a8(0x18)
	char UnknownData_3C0[0x8]; // 0x3c0(0x08)

	void UpdateIcon(); // Function Madness.MadCampfire.UpdateIcon // (Final|Native|Protected|BlueprintCallable) // @ game+0x159a5b0
	void OnInteracted(struct ABasePlayerController* PC, struct ULocalInteractionComponent* InteractedComp); // Function Madness.MadCampfire.OnInteracted // (Final|Native|Protected) // @ game+0x159a180
};

// Class Madness.CaptainAbilityHelpers
// Size: 0x28 (Inherited: 0x28)
struct UCaptainAbilityHelpers : UBlueprintFunctionLibrary {

	struct TArray<struct FVector> FindBeamTrapsSpawnLocations(struct UMadAIGameplayAbility* OwningAbility, int32_t FindCount, float DesiredDistanceFromTarget, float InitialRotationOffset); // Function Madness.CaptainAbilityHelpers.FindBeamTrapsSpawnLocations // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1599de0
};

// Class Madness.MadChallengeController
// Size: 0x588 (Inherited: 0x2f0)
struct AMadChallengeController : AInfo {
	struct UDataTable* ChallengeDataTable; // 0x2f0(0x08)
	struct UDataTable* ChallengePickChanceDataTable; // 0x2f8(0x08)
	struct UDataTable* ChallengeChestRarityDataTable; // 0x300(0x08)
	struct FNameWrapper ChallengeCurrency; // 0x308(0x10)
	struct TMap<struct FNameWrapper, struct UDataTable*> ResourceRewards; // 0x318(0x50)
	struct FMadResourceSwapper ResourceSwap; // 0x368(0x20)
	float CountdownTime; // 0x388(0x04)
	float Slomo; // 0x38c(0x04)
	float SlomoDuration; // 0x390(0x04)
	struct FMadChallengeRewardDropLogic RewardDropLogic; // 0x394(0x14)
	struct TArray<struct FName> ChallengeDisplayedAsMQ; // 0x3a8(0x10)
	char UnknownData_3B8[0x50]; // 0x3b8(0x50)
	struct TScriptInterface<None> VoteObj; // 0x408(0x10)
	char UnknownData_418[0x50]; // 0x418(0x50)
	struct AMadChallengeHideout* ChallengeHideout; // 0x468(0x08)
	struct AMadChallengeMapInfo* ChallengeMap; // 0x470(0x08)
	struct UMadChallengeConvoyComponent* ChallengeConvoyComponent; // 0x478(0x08)
	struct TArray<struct UMadChallengeDataTableHelper*> ActiveDataTableHelpers; // 0x480(0x10)
	char UnknownData_490_0 : 7; // 0x490(0x01)
	bool bWasChallengeInCoop : 1; // 0x490(0x01)
	char UnknownData_491[0x1f]; // 0x491(0x1f)
	struct FMulticastInlineDelegate OnChallengeFinished; // 0x4b0(0x10)
	struct FMulticastInlineDelegate ChallengeStarted; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnChallengeTierUnlocked; // 0x4d0(0x10)
	char UnknownData_4E0[0xa0]; // 0x4e0(0xa0)
	struct AMadChallengeLootChest* ChallengeChest; // 0x580(0x08)

	void TryBindOnQuestChanged(); // Function Madness.MadChallengeController.TryBindOnQuestChanged // (Final|Native|Protected) // @ game+0x159a590
	void TravelToChallengeHideout(); // Function Madness.MadChallengeController.TravelToChallengeHideout // (Final|Native|Public|BlueprintCallable) // @ game+0x159a570
	void RetryChallenge(); // Function Madness.MadChallengeController.RetryChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x159a550
	bool IsOnChallengeMap(); // Function Madness.MadChallengeController.IsOnChallengeMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x159a150
	bool IsChallengePlayable(int32_t ChallengeID); // Function Madness.MadChallengeController.IsChallengePlayable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x159a0c0
	int32_t GetNumberOfRetries(); // Function Madness.MadChallengeController.GetNumberOfRetries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x159a090
	struct TMap<int32_t, struct FMadChallengeAbsoluteData> GetChallengeMap(); // Function Madness.MadChallengeController.GetChallengeMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1599ff0
	struct TArray<int32_t> GetAvailableChallenges(); // Function Madness.MadChallengeController.GetAvailableChallenges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1599f70
	void ActivateChallenge(int32_t ChallengeID); // Function Madness.MadChallengeController.ActivateChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x1599c60
};

// Class Madness.MadConvoyElementComponent
// Size: 0x330 (Inherited: 0x2d0)
struct UMadConvoyElementComponent : USceneComponent {
	struct FFactExpression EnabledFactExp; // 0x2c8(0x18)
	struct UStaticMeshComponent* MeshComp; // 0x2e0(0x08)
	struct ULocalInteractionComponent* InteractionComp; // 0x2e8(0x08)
	char UnknownData_2F8_0 : 7; // 0x2f8(0x01)
	bool bBlockUnderageUser : 1; // 0x2f0(0x01)
	bool bBlockInteractionInDemo : 1; // 0x2f1(0x01)
	struct FNameWrapper InteractionBlockedInDemoTextKey; // 0x2f8(0x10)
	bool bOverrideDesiredMaxDrawDistance : 1; // 0x308(0x01)
	char UnknownData_309[0x3]; // 0x309(0x03)
	float DesiredMaxDrawDistanceOverride; // 0x30c(0x04)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bUseTutorial : 1; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct FMadTutorialConvoyElementData TutorialData; // 0x318(0x10)
	char UnknownData_328[0x8]; // 0x328(0x08)

	void OnPlayerInRange(bool bInRange, bool bCanInteract); // Function Madness.MadConvoyElementComponent.OnPlayerInRange // (Final|Native|Protected) // @ game+0x15d9d10
};

// Class Madness.MadChallengeConvoyComponent
// Size: 0x340 (Inherited: 0x330)
struct UMadChallengeConvoyComponent : UMadConvoyElementComponent {
	char UnknownData_330_0 : 7; // 0x330(0x01)
	bool bHostEnableValue : 1; // 0x330(0x01)
	char UnknownData_331[0xf]; // 0x331(0x0f)

	void OnRep_HostEnabledValue(); // Function Madness.MadChallengeConvoyComponent.OnRep_HostEnabledValue // (Final|Native|Protected) // @ game+0x159a530
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadChallengeConvoyComponent.OnInteracted // (Final|Native|Protected) // @ game+0x159a240
};

// Class Madness.MadChallengeDataAsset
// Size: 0x120 (Inherited: 0x30)
struct UMadChallengeDataAsset : UDataAsset {
	int32_t ChallengeID; // 0x30(0x04)
	char UnknownData_34[0x4]; // 0x34(0x04)
	struct FText ChallengeName; // 0x38(0x18)
	struct FText ChallengeDescription; // 0x50(0x18)
	struct UBaseQuest* ChallengeQuest; // 0x68(0x08)
	struct FGameplayTag ChallengeRegion; // 0x70(0x08)
	struct FGameplayTagContainer SpawnPointTags; // 0x78(0x20)
	struct FGameplayTagContainer MapInfoFact; // 0x98(0x20)
	struct FVector2D IconLocation; // 0xb8(0x08)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0xc0(0x28)
	struct TSoftObjectPtr<struct UTexture2D> Photo; // 0xe8(0x28)
	char UnknownData_110_0 : 7; // 0x110(0x01)
	bool bIsHUB : 1; // 0x110(0x01)
	char UnknownData_111[0x3]; // 0x111(0x03)
	int32_t TitlePosition; // 0x114(0x04)
	enum class EMadChallengeEnviroType EnviroType; // 0x118(0x01)
	char UnknownData_119[0x7]; // 0x119(0x07)
};

// Class Madness.MadChallengeDataTableHelper
// Size: 0x48 (Inherited: 0x28)
struct UMadChallengeDataTableHelper : UObject {
	struct AMadChallengeController* ChallengeController; // 0x28(0x08)
	char UnknownData_30[0x18]; // 0x30(0x18)

	void OnConnectedToDataBackend(); // Function Madness.MadChallengeDataTableHelper.OnConnectedToDataBackend // (Final|Native|Protected) // @ game+0x15a3870
	void OnChallengeDataTableLoaded(bool bSuccess, struct UDataTable* InDataTable, int32_t NewConfigStatus, int32_t BackendFailureCode); // Function Madness.MadChallengeDataTableHelper.OnChallengeDataTableLoaded // (Final|Native|Protected) // @ game+0x15a3710
};

// Class Madness.MadChallengeFinalStageTrigger
// Size: 0x328 (Inherited: 0x328)
struct AMadChallengeFinalStageTrigger : ATriggerVolume {
};

// Class Madness.MadChallengeGlobals
// Size: 0x128 (Inherited: 0x30)
struct UMadChallengeGlobals : UDataAsset {
	struct FGameplayTag ChallengeHideoutRegion; // 0x30(0x08)
	SoftClassProperty ChallengeControllerClass; // 0x38(0x28)
	struct TArray<struct UMadChallengeDataAsset*> Challenges; // 0x60(0x10)
	struct FFactExpression IsEndGame; // 0x70(0x18)
	struct TArray<struct TSoftObjectPtr<struct UMadChallengeModDataAsset>> ChallengeMods; // 0x88(0x10)
	int32_t DefaultTierEnemyLevelIncrease; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
	struct TArray<int32_t> TierEnemyLevelIncreases; // 0xa0(0x10)
	struct TArray<int32_t> WorldLevelToChallengeTier; // 0xb0(0x10)
	struct TArray<struct FMadChallengeEnviroData> ChallengeEnviros; // 0xc0(0x10)
	struct UCurveTable* ChallengeTiers_LRM; // 0xd0(0x08)
	struct TMap<enum class EMadChallengeTimeBracket, int32_t> DefaultTierProgression; // 0xd8(0x50)
};

// Class Madness.MadChallengeHideout
// Size: 0x2f0 (Inherited: 0x2f0)
struct AMadChallengeHideout : AInfo {
};

// Class Madness.MadChallengeLootChest
// Size: 0x3c0 (Inherited: 0x3c0)
struct AMadChallengeLootChest : AMadLootChest {

	void ConnectToChallengeController(); // Function Madness.MadChallengeLootChest.ConnectToChallengeController // (Final|Native|Protected) // @ game+0x15a2e90
};

// Class Madness.MadChallengeMapInfo
// Size: 0x368 (Inherited: 0x2f0)
struct AMadChallengeMapInfo : AInfo {
	struct ACoopSyncActor* StartCoopSync; // 0x2f0(0x08)
	struct AMadDropPod* DropPod; // 0x2f8(0x08)
	struct AMadExitFlag* ExitFlag; // 0x300(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> EnterSequence; // 0x308(0x28)
	struct FMadChallengeVOSettings OnTeamWipeVO; // 0x330(0x10)
	char UnknownData_340[0x28]; // 0x340(0x28)

	void StartChallenge(); // Function Madness.MadChallengeMapInfo.StartChallenge // (Final|Native|Protected) // @ game+0x15a39b0
};

// Class Madness.MadChallengeModDataAsset
// Size: 0x68 (Inherited: 0x30)
struct UMadChallengeModDataAsset : UDataAsset {
	struct FText Description; // 0x30(0x18)
	struct TArray<struct UMadChallengeModData*> ModificationData; // 0x48(0x10)
	struct TArray<struct FUniversalReward> ExtraRewards; // 0x58(0x10)

	void GetModificationDataOfClass(struct UMadChallengeModData* InUserDataClass, struct TArray<struct UMadChallengeModData*> OutArray); // Function Madness.MadChallengeModDataAsset.GetModificationDataOfClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15a3080
};

// Class Madness.MadChallengesUIModel
// Size: 0x198 (Inherited: 0x50)
struct UMadChallengesUIModel : UBaseUIModel {
	char UnknownData_50[0xf0]; // 0x50(0xf0)
	struct FMadChallengeSystemUIData ChallengeSystemData; // 0x140(0x28)
	struct FMadPreviousChallengeSummaryUIData ChallengeStats; // 0x168(0x10)
	char UnknownData_178[0x20]; // 0x178(0x20)

	void UpdateResource(struct FName Name, int32_t Delta); // Function Madness.MadChallengesUIModel.UpdateResource // (Final|Native|Protected) // @ game+0x15a3a70
	void TransformResource(); // Function Madness.MadChallengesUIModel.TransformResource // (Final|Native|Public) // @ game+0x15a3a50
	void StartChallenge(int32_t ChallengeID); // Function Madness.MadChallengesUIModel.StartChallenge // (Final|Native|Public) // @ game+0x15a39d0
	void ShowChallengeMap(); // Function Madness.MadChallengesUIModel.ShowChallengeMap // (Final|Native|Public) // @ game+0x15a3990
	void SetPlayerTier(int32_t Tier); // Function Madness.MadChallengesUIModel.SetPlayerTier // (Final|Native|Public) // @ game+0x15a3910
	void ReturnToLobby(); // Function Madness.MadChallengesUIModel.ReturnToLobby // (Final|Native|Public) // @ game+0x15a38f0
	void ReturnToChallengeHideout(); // Function Madness.MadChallengesUIModel.ReturnToChallengeHideout // (Final|Native|Public) // @ game+0x15a38d0
	void RetryChallenge(); // Function Madness.MadChallengesUIModel.RetryChallenge // (Final|Native|Public) // @ game+0x15a38b0
	void RefreshChallengesData(); // Function Madness.MadChallengesUIModel.RefreshChallengesData // (Final|Native|Public) // @ game+0x15a3890
	void OnChallengeUIExit(); // Function Madness.MadChallengesUIModel.OnChallengeUIExit // (Final|Native|Public) // @ game+0x15a3850
	void LeaveParty(); // Function Madness.MadChallengesUIModel.LeaveParty // (Final|Native|Public) // @ game+0x15a36f0
	bool IsOnChallengeMap(); // Function Madness.MadChallengesUIModel.IsOnChallengeMap // (Final|Native|Public|Const) // @ game+0x15a36c0
	bool IsInChallengeHideout(); // Function Madness.MadChallengesUIModel.IsInChallengeHideout // (Final|Native|Public|Const) // @ game+0x15a3690
	bool IsChallengeTimeBased(int32_t ChallengeID); // Function Madness.MadChallengesUIModel.IsChallengeTimeBased // (Final|Native|Public|Const) // @ game+0x15a3600
	bool IsChallengeStarted(); // Function Madness.MadChallengesUIModel.IsChallengeStarted // (Final|Native|Public|Const) // @ game+0x15a35d0
	bool IsChallengeCountdownActive(); // Function Madness.MadChallengesUIModel.IsChallengeCountdownActive // (Final|Native|Public|Const) // @ game+0x15a35a0
	bool IsChallengeActive(); // Function Madness.MadChallengesUIModel.IsChallengeActive // (Final|Native|Public|Const) // @ game+0x15a3570
	bool IsActiveChallengeTimeBased(); // Function Madness.MadChallengesUIModel.IsActiveChallengeTimeBased // (Final|Native|Public|Const) // @ game+0x15a3540
	bool HasChallengeControllerAuthority(); // Function Madness.MadChallengesUIModel.HasChallengeControllerAuthority // (Final|Native|Public|Const) // @ game+0x15a3510
	int32_t GetTierProgression(enum class EMadChallengeTimeBracket TimeBracket, int32_t ChallengeID, int32_t Tier); // Function Madness.MadChallengesUIModel.GetTierProgression // (Final|Native|Public|Const) // @ game+0x15a3410
	struct FMadPostChallengeUIData GetPostChallengeData(); // Function Madness.MadChallengesUIModel.GetPostChallengeData // (Final|Native|Public|Const) // @ game+0x15a3260
	int32_t GetNumberOfRetries(); // Function Madness.MadChallengesUIModel.GetNumberOfRetries // (Final|Native|Public|Const) // @ game+0x15a3230
	int32_t GetMonsterLevel(int32_t ChallengeID, int32_t Tier); // Function Madness.MadChallengesUIModel.GetMonsterLevel // (Final|Native|Public|Const) // @ game+0x15a3170
	int32_t GetLastTier(); // Function Madness.MadChallengesUIModel.GetLastTier // (Final|Native|Public|Const) // @ game+0x15a3050
	int32_t GetCurrentTier(); // Function Madness.MadChallengesUIModel.GetCurrentTier // (Final|Native|Public|Const) // @ game+0x15a3020
	float GetChallengeCountdownTime(); // Function Madness.MadChallengesUIModel.GetChallengeCountdownTime // (Final|Native|Public|Const) // @ game+0x15a2ff0
	float GetActiveChallengeTime(); // Function Madness.MadChallengesUIModel.GetActiveChallengeTime // (Final|Native|Public|Const) // @ game+0x15a2fc0
	struct TArray<struct FMadChallengeRarityRewardUIData> FindRarityRewards(enum class EMadChallengeTimeBracket TimeBracket, int32_t Tier); // Function Madness.MadChallengesUIModel.FindRarityRewards // (Final|Native|Public|Const) // @ game+0x15a2eb0
	bool CanRetryChallenge(); // Function Madness.MadChallengesUIModel.CanRetryChallenge // (Final|Native|Public|Const) // @ game+0x15a2e60
	bool AreChallengesEnabled(); // Function Madness.MadChallengesUIModel.AreChallengesEnabled // (Final|Native|Public) // @ game+0x15a2e30
};

// Class Madness.MadChallengeSyncComponent
// Size: 0x188 (Inherited: 0x180)
struct UMadChallengeSyncComponent : UActorComponent {
	char UnknownData_180[0x8]; // 0x180(0x08)
};

// Class Madness.MadChallengeSubSystemInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeSubSystemInterface : UInterface {
};

// Class Madness.MadChallengeMapPickerInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeMapPickerInterface : UInterface {
};

// Class Madness.MadChallengeTollInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeTollInterface : UInterface {
};

// Class Madness.MadChallengeTierInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeTierInterface : UInterface {
};

// Class Madness.MadChallengeLoopInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeLoopInterface : UInterface {
};

// Class Madness.MadChallengeTimeInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeTimeInterface : UInterface {
};

// Class Madness.MadChallengeResourceInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeResourceInterface : UInterface {
};

// Class Madness.MadChallengeChestRewardInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeChestRewardInterface : UInterface {
};

// Class Madness.MadChallengeVoteInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeVoteInterface : UInterface {
};

// Class Madness.MadChallengeMapObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeMapObjectInterface : UInterface {
};

// Class Madness.MadChallengeFinalStageInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeFinalStageInterface : UInterface {
};

// Class Madness.MadChallengeUIInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeUIInterface : UInterface {
};

// Class Madness.MadChallengeModInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengeModInterface : UInterface {
};

// Class Madness.MadChallengePrepRoomInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadChallengePrepRoomInterface : UInterface {
};

// Class Madness.MadChallengeTimeTrigger
// Size: 0x328 (Inherited: 0x328)
struct AMadChallengeTimeTrigger : ATriggerVolume {
};

// Class Madness.MadChallengeUIComponent
// Size: 0x200 (Inherited: 0x180)
struct UMadChallengeUIComponent : UActorComponent {
	char UnknownData_180[0x80]; // 0x180(0x80)

	void MulticastStopUITimer(); // Function Madness.MadChallengeUIComponent.MulticastStopUITimer // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x15a7380
	void MulticastChallengeEnded(int32_t ChallengeID, enum class EMadChallengeEndReason EndReason, int32_t ChallengeTime); // Function Madness.MadChallengeUIComponent.MulticastChallengeEnded // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x15a7220
	void MulticastChallengeActivated(int32_t ChallengeID); // Function Madness.MadChallengeUIComponent.MulticastChallengeActivated // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x15a7190
};

// Class Madness.MadChar_Ally
// Size: 0x1730 (Inherited: 0x1710)
struct AMadChar_Ally : AMadBaseAICharacter {
	struct UFWAIWeaponComponent* FWAIWeapon; // 0x1710(0x08)
	struct UWidgetComponent* HealthBarWidget; // 0x1718(0x08)
	struct FName LookReactionStartVOTag; // 0x1720(0x08)
	char UnknownData_1728[0x8]; // 0x1728(0x08)

	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadChar_Ally.OnFrameworkSequenceStart // (Final|Native|Private|HasOutParms) // @ game+0x15a73e0
	void OnFrameworkSequenceEnd(); // Function Madness.MadChar_Ally.OnFrameworkSequenceEnd // (Final|Native|Private) // @ game+0x15a73c0
};

// Class Madness.MadCharacterMovementComponent
// Size: 0xa30 (Inherited: 0xa30)
struct UMadCharacterMovementComponent : UBaseCharacterMovementComponent {
};

// Class Madness.MadCharacterScreenCamera
// Size: 0x920 (Inherited: 0x890)
struct UMadCharacterScreenCamera : UCameraComponent {
	char UnknownData_890[0x8]; // 0x890(0x08)
	struct FRuntimeFloatCurve DOFCurve; // 0x898(0x88)
};

// Class Madness.MadCharacterScreenCameraActor
// Size: 0x870 (Inherited: 0x870)
struct AMadCharacterScreenCameraActor : ACameraActor {
};

// Class Madness.MadShaderEffect
// Size: 0x1b0 (Inherited: 0x28)
struct UMadShaderEffect : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct AActor* OwningActor; // 0x30(0x08)
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bEndPlayOnCustomFinish : 1; // 0x38(0x01)
	char UnknownData_39_0 : 7; // 0x39(0x01)
	bool bCustomFinish : 1; // 0x39(0x01)
	char UnknownData_3A_0 : 7; // 0x3a(0x01)
	bool bFinishedPlaying : 1; // 0x3a(0x01)
	char UnknownData_3B_0 : 7; // 0x3b(0x01)
	bool bIsActive : 1; // 0x3b(0x01)
	char UnknownData_3C[0x14]; // 0x3c(0x14)
	struct TArray<struct UMeshComponent*> MeshArray; // 0x50(0x10)
	char UnknownData_60[0x6]; // 0x60(0x06)
	char UnknownData_66_0 : 7; // 0x66(0x01)
	bool bDeactivating : 1; // 0x66(0x01)
	char UnknownData_67_0 : 7; // 0x67(0x01)
	bool bActivating : 1; // 0x67(0x01)
	char UnknownData_68[0x148]; // 0x68(0x148)

	void RequestFinishEffect(); // Function Madness.MadShaderEffect.RequestFinishEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x16c7280
	void PlayShaderVectorTransition(struct FDelegate OnCompleted, struct FName ParamName, bool bDetectStartValue, bool bAdjustDuration, struct FLinearColor StartValue, struct FLinearColor EndValue, float TransitionDuration, enum class EDecalParameterBlendType InBlendType); // Function Madness.MadShaderEffect.PlayShaderVectorTransition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x16c6fe0
	void PlayShaderScalarTransition(struct FDelegate OnCompleted, struct FName ParamName, bool bDetectStartValue, bool bAdjustDuration, float StartValue, float EndValue, float TransitionDuration, enum class EDecalParameterBlendType InBlendType); // Function Madness.MadShaderEffect.PlayShaderScalarTransition // (Final|Native|Public|BlueprintCallable) // @ game+0x16c6d50
	void OnTick(float DeltaTime); // Function Madness.MadShaderEffect.OnTick // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnEndPlay(); // Function Madness.MadShaderEffect.OnEndPlay // (Native|Event|Public|BlueprintEvent) // @ game+0x16c68a0
	void OnDeactivated(); // Function Madness.MadShaderEffect.OnDeactivated // (Native|Event|Public|BlueprintEvent) // @ game+0x156dca0
	void OnBeginPlay(); // Function Madness.MadShaderEffect.OnBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnActivated(); // Function Madness.MadShaderEffect.OnActivated // (Native|Event|Public|BlueprintEvent) // @ game+0x156dc80
	void InitVectorParams(struct TMap<struct FName, struct FLinearColor> InParams); // Function Madness.MadShaderEffect.InitVectorParams // (Final|Native|Public|BlueprintCallable) // @ game+0x16c6560
	void InitFloatParams(struct TMap<struct FName, float> InParams); // Function Madness.MadShaderEffect.InitFloatParams // (Final|Native|Public|BlueprintCallable) // @ game+0x16c63a0
	float GetParamValue(float Normal, float Fast); // Function Madness.MadShaderEffect.GetParamValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16c5e60
	struct AMadBaseCharacter* GetCharacter(); // Function Madness.MadShaderEffect.GetCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16c5c80
	enum class EDecalParameterBlendType GetBlendType(enum class EDecalParameterBlendType Normal, enum class EDecalParameterBlendType Fast); // Function Madness.MadShaderEffect.GetBlendType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16c5bb0
	void FinishDeactivate(); // Function Madness.MadShaderEffect.FinishDeactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x16c5b00
	void CustomFinish(); // Function Madness.MadShaderEffect.CustomFinish // (Final|Native|Public|BlueprintCallable) // @ game+0x16c5ae0
};

// Class Madness.MadLiteShaderEffect
// Size: 0x230 (Inherited: 0x1b0)
struct UMadLiteShaderEffect : UMadShaderEffect {
	char UnknownData_1B0_0 : 7; // 0x1b0(0x01)
	bool bApplyOnDeadCharacters : 1; // 0x1b0(0x01)
	char UnknownData_1B1_0 : 7; // 0x1b1(0x01)
	bool bReturnToDefaultGroupWhenDead : 1; // 0x1b1(0x01)
	char UnknownData_1B2_0 : 7; // 0x1b2(0x01)
	bool bLockMaterialGroup : 1; // 0x1b2(0x01)
	char UnknownData_1B3_0 : 7; // 0x1b3(0x01)
	bool bPlayDeactivateIfDead : 1; // 0x1b3(0x01)
	char UnknownData_1B4_0 : 7; // 0x1b4(0x01)
	bool bInstantApply : 1; // 0x1b4(0x01)
	char UnknownData_1B5_0 : 7; // 0x1b5(0x01)
	bool bFinishOtherEffectsFromGroup : 1; // 0x1b5(0x01)
	char UnknownData_1B6_0 : 7; // 0x1b6(0x01)
	bool bIndependent : 1; // 0x1b6(0x01)
	char UnknownData_1B7[0x1]; // 0x1b7(0x01)
	struct FGameplayTag ShaderTag; // 0x1b8(0x08)
	struct FGameplayTagContainer TagsToDeactivateOnBeginPlay; // 0x1c0(0x20)
	struct FGameplayTagContainer TagsToActivateOnEndPlay; // 0x1e0(0x20)
	struct UPhysicalMaterial* PhysicalMaterialOverride; // 0x200(0x08)
	char UnknownData_208[0x28]; // 0x208(0x28)

	void OnComponentsMaterialGroupChanged(struct UMeshComponent* MeshComponent, struct FName GroupName, enum class ECustomizationSlotType SlotType); // Function Madness.MadLiteShaderEffect.OnComponentsMaterialGroupChanged // (Final|Native|Public) // @ game+0x166c200
};

// Class Madness.MadCharacterShaderEffect
// Size: 0x238 (Inherited: 0x230)
struct UMadCharacterShaderEffect : UMadLiteShaderEffect {
	char UnknownData_230_0 : 7; // 0x230(0x01)
	bool bIncludeBlast : 1; // 0x230(0x01)
	char UnknownData_231[0x7]; // 0x231(0x07)

	void OnBoneGibbed(); // Function Madness.MadCharacterShaderEffect.OnBoneGibbed // (Final|Native|Private) // @ game+0x15a73a0
};

// Class Madness.MadBlastShaderEffect
// Size: 0x238 (Inherited: 0x238)
struct UMadBlastShaderEffect : UMadCharacterShaderEffect {
};

// Class Madness.MadCharAI
// Size: 0x1790 (Inherited: 0x1710)
struct AMadCharAI : AMadBaseAICharacter {
	char UnknownData_1710_0 : 7; // 0x1710(0x01)
	bool bAllowFalterReactionInCover : 1; // 0x1710(0x01)
	char UnknownData_1711_0 : 7; // 0x1711(0x01)
	bool bAllowPushBackReactionInCover : 1; // 0x1711(0x01)
	char UnknownData_1712[0x2]; // 0x1712(0x02)
	float DamageReactionMultiplier; // 0x1714(0x04)
	struct UMadGameplayEffect* EnrageStatusGameplayEffect; // 0x1718(0x08)
	char UnknownData_1720[0x8]; // 0x1720(0x08)
	char UnknownData_1728_0 : 7; // 0x1728(0x01)
	bool bInfiniteAmmo : 1; // 0x1728(0x01)
	char UnknownData_1729_0 : 7; // 0x1729(0x01)
	bool bSupportsRunaway : 1; // 0x1729(0x01)
	enum class EAnomalyBreakerVisState AnomalyBreakerVisState; // 0x172a(0x01)
	char UnknownData_172B[0xd]; // 0x172b(0x0d)
	struct UWidgetComponent* Widget; // 0x1738(0x08)
	struct UTexture2D* MarkerIconTexture; // 0x1740(0x08)
	float MarkerIconSize; // 0x1748(0x04)
	float ShowMarkerRadius; // 0x174c(0x04)
	char UnknownData_1750_0 : 7; // 0x1750(0x01)
	bool bRenderMarkerIcon : 1; // 0x1750(0x01)
	char UnknownData_1751[0x1b]; // 0x1751(0x1b)
	char UnknownData_176C_0 : 7; // 0x176c(0x01)
	bool bBarrierActivated : 1; // 0x176c(0x01)
	char UnknownData_176D[0x3]; // 0x176d(0x03)
	struct UMadAITask_RunAway* RunAwayTask; // 0x1770(0x08)
	struct TArray<struct UGameplayEffect*> InitialGameplayEffectsToApply; // 0x1778(0x10)
	char UnknownData_1788[0x8]; // 0x1788(0x08)

	void TriggerRunaway(struct UObject* WorldContextObject, float MaxDetectionDistanceFromPath, float MaxAttackPathCheckLength, float InnerRadius, float ExtraRadius); // Function Madness.MadCharAI.TriggerRunaway // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15a7e60
	void ToggleCastBarVisibility(bool ShowCastBar); // Function Madness.MadCharAI.ToggleCastBarVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7880
	void SpawnDecal(struct UMaterialInterface* DecalMaterial, float SizeMin, float SizeMax, float DecalSizeZ, struct FName InSocketName, float RotationYawMin, float RotationYawMax, float FadeOutStartDelay, float FadeOutDuration); // Function Madness.MadCharAI.SpawnDecal // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7a00
	void SetRenderMarkerIconFromLogic(bool Val); // Function Madness.MadCharAI.SetRenderMarkerIconFromLogic // (Final|Net|NetReliableNative|Event|NetMulticast|Private|BlueprintCallable) // @ game+0x15a7970
	void SetRankIndicator(); // Function Madness.MadCharAI.SetRankIndicator // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void SetPawnAbilityTurnInPlace(bool Allow); // Function Madness.MadCharAI.SetPawnAbilityTurnInPlace // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7880
	void SetHPWidgetRef(); // Function Madness.MadCharAI.SetHPWidgetRef // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void SetEnemyLevel(int32_t Level); // Function Madness.MadCharAI.SetEnemyLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x157f5e0
	void SetEnemyArmor(int32_t Level); // Function Madness.MadCharAI.SetEnemyArmor // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7880
	void SetChannelingAbility(float castTimeTotal, struct FText AbilityName); // Function Madness.MadCharAI.SetChannelingAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7750
	void SetCastingAbility(float castTimeTotal, struct FText ablityName); // Function Madness.MadCharAI.SetCastingAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7750
	void SetCastBarVisibility(); // Function Madness.MadCharAI.SetCastBarVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void SetCaptainTitle(); // Function Madness.MadCharAI.SetCaptainTitle // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void SetAttributeToBeAt(int32_t ValueToSet, int32_t CurrentValue, struct UGameplayEffect* EffectPlus, struct UGameplayEffect* EffectMinus); // Function Madness.MadCharAI.SetAttributeToBeAt // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7610
	void SendUsableAbiltiesToWidget(); // Function Madness.MadCharAI.SendUsableAbiltiesToWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void OnRep_BarrierActivated(); // Function Madness.MadCharAI.OnRep_BarrierActivated // (Final|Native|Protected) // @ game+0x15a7530
	void OnRep_AnomalyBreakerVisState(); // Function Madness.MadCharAI.OnRep_AnomalyBreakerVisState // (Final|Native|Private) // @ game+0x15a7510
	void InterruptCasting(); // Function Madness.MadCharAI.InterruptCasting // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	void HideCastingBar(); // Function Madness.MadCharAI.HideCastingBar // (Final|Native|Public|BlueprintCallable) // @ game+0x15a70c0
	bool GetPawnAbilityTurnInPlace(); // Function Madness.MadCharAI.GetPawnAbilityTurnInPlace // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7070
};

// Class Madness.MadCharAI_AlienShamanOasis
// Size: 0x1790 (Inherited: 0x1790)
struct AMadCharAI_AlienShamanOasis : AMadCharAI {
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1788(0x08)
};

// Class Madness.MadCharAI_AlteredDemon
// Size: 0x17b0 (Inherited: 0x1790)
struct AMadCharAI_AlteredDemon : AMadCharAI {
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1788(0x08)
	struct UParticleSystemComponent* TeleportBeamComponent; // 0x1790(0x08)
	struct UMadGameplayEffect* ActivationBlockingEffect; // 0x1798(0x08)
	char UnknownData_17A8[0x8]; // 0x17a8(0x08)

	void MulticastInitializeBossHealthBar(); // Function Madness.MadCharAI_AlteredDemon.MulticastInitializeBossHealthBar // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15a7360
	void MulticastDeinitializeBossHealthBar(); // Function Madness.MadCharAI_AlteredDemon.MulticastDeinitializeBossHealthBar // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15a7340
	void MulticastCleanupTeleportBeam(); // Function Madness.MadCharAI_AlteredDemon.MulticastCleanupTeleportBeam // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15a7320
	void MulticastActivateTeleportBeam(struct FVector StartPoint, struct FVector EndPoint); // Function Madness.MadCharAI_AlteredDemon.MulticastActivateTeleportBeam // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults|BlueprintCallable) // @ game+0x15a70e0
	enum class ENukeShieldTier GetCurrentNukeShiledTier(); // Function Madness.MadCharAI_AlteredDemon.GetCurrentNukeShiledTier // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x15a6ff0
};

// Class Madness.MadCharAI_Bailey
// Size: 0x1970 (Inherited: 0x1790)
struct AMadCharAI_Bailey : AMadCharAI {
	struct FMulticastInlineDelegate OnStoneShardsActorSpawned; // 0x1788(0x10)
	struct FMulticastInlineDelegate OnStoneShardsSpawnFailed; // 0x1798(0x10)
	struct UParticleSystemComponent* RockStormRotatingShardsParticleSystemComponent; // 0x17a8(0x08)
	struct UParticleSystemComponent* RockStormEndParticles; // 0x17b0(0x08)
	struct UCapsuleComponent* RockStormCollider; // 0x17b8(0x08)
	struct UFWAIWeaponComponent* FWAIWeapon; // 0x17c0(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17c8(0x08)
	struct UMadSpikeComponent* GroundSpikeComponents[0x12]; // 0x17d0(0x90)
	struct FGroundSpikeData SpikesData; // 0x1860(0x58)
	float DistanceToPushEnemiesAwayWhileShieldIsActive; // 0x18b8(0x04)
	float RockStormShieldLifespan; // 0x18bc(0x04)
	float RockStormShieldTickRate; // 0x18c0(0x04)
	struct FScalableFloat ShieldHealth; // 0x18c8(0x20)
	struct UMadGameplayEffect* CooldownGameplayEffect; // 0x18e8(0x08)
	struct FGameplayTagContainer PlayerKnockbackCooldownContainer; // 0x18f0(0x20)
	struct FGameplayTag EventTechnicalKnockbackTag; // 0x1910(0x08)
	struct AAIController* AIController; // 0x1918(0x08)
	struct UAIPerceptionComponent* PerceptionComponent; // 0x1920(0x08)
	char UnknownData_192C[0x44]; // 0x192c(0x44)

	void StartSpawningSpikes(enum class EAvailableSkills SelectedSkill); // Function Madness.MadCharAI_Bailey.StartSpawningSpikes // (Final|Native|Public|BlueprintCallable) // @ game+0x15a7de0
	void SpawnStoneShardsActor(struct UObject* ActorClass, struct FTransform SpawnTransform); // Function Madness.MadCharAI_Bailey.SpawnStoneShardsActor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15a7ca0
	void SpawnRockStormShield(); // Function Madness.MadCharAI_Bailey.SpawnRockStormShield // (Final|Native|Protected|BlueprintCallable) // @ game+0x15a7c80
	void SetGameplayEffectHandle(struct FActiveGameplayEffectHandle EffectHandle); // Function Madness.MadCharAI_Bailey.SetGameplayEffectHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x15a78f0
	void OnStoneShardsActorFullySpawned(struct AActor* ShoneShardsActor); // Function Madness.MadCharAI_Bailey.OnStoneShardsActorFullySpawned // (Final|Native|Private) // @ game+0x15a7590
	void MulticastShowRockStormShield(); // Function Madness.MadCharAI_Bailey.MulticastShowRockStormShield // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15a7360
	void MulticastHideRockStormShield(); // Function Madness.MadCharAI_Bailey.MulticastHideRockStormShield // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15a7340
};

// Class Madness.MadCharAI_Infantry
// Size: 0x17a0 (Inherited: 0x1790)
struct AMadCharAI_Infantry : AMadCharAI {
	struct UFWAIWeaponComponent* FWAIWeapon; // 0x1788(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1790(0x08)
};

// Class Madness.MadCharAI_Behemot
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_Behemot : AMadCharAI_Infantry {
};

// Class Madness.MadCharAI_BehemotDesertMinigun
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_BehemotDesertMinigun : AMadCharAI_Behemot {
};

// Class Madness.MadCharAI_BehemotForestMinigun
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_BehemotForestMinigun : AMadCharAI_Behemot {
};

// Class Madness.MadCharAI_BehemotNoMansLandFlamethrower
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_BehemotNoMansLandFlamethrower : AMadCharAI_Behemot {
	struct UMadFlamerBackpackComponent* FlamerBackpackComponent; // 0x1798(0x08)
};

// Class Madness.MadCharAI_BehemotWarzoneFlamethrower
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_BehemotWarzoneFlamethrower : AMadCharAI_Behemot {
	struct UMadFlamerBackpackComponent* FlamerBackpack; // 0x1798(0x08)
};

// Class Madness.MadCharAI_BehemotWarzoneMinigun
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_BehemotWarzoneMinigun : AMadCharAI_Behemot {
};

// Class Madness.MadCharAI_Berserker
// Size: 0x17d0 (Inherited: 0x1790)
struct AMadCharAI_Berserker : AMadCharAI {
	struct UMeshComponent* LeftWeapon; // 0x1790(0x08)
	struct UMeshComponent* RightWeapon; // 0x1798(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17a0(0x08)
	char UnknownData_17A8[0x10]; // 0x17a8(0x10)
	struct TArray<struct UStaticMesh*> WeaponMeshes; // 0x17b8(0x10)
	char UnknownData_17C8[0x8]; // 0x17c8(0x08)
};

// Class Madness.MadCharAI_Berserker_Dodging
// Size: 0x17f0 (Inherited: 0x17d0)
struct AMadCharAI_Berserker_Dodging : AMadCharAI_Berserker {
	struct UAnimMontage* MontageToBlockHitReaction; // 0x17c8(0x08)
	struct TArray<struct UMadDamageType*> DamageTypesBlockingHitReactionEvent; // 0x17d0(0x10)
	char UnknownData_17E8[0x8]; // 0x17e8(0x08)
};

// Class Madness.MadCharAI_Berserker_Den
// Size: 0x17f0 (Inherited: 0x17f0)
struct AMadCharAI_Berserker_Den : AMadCharAI_Berserker_Dodging {
};

// Class Madness.MadCharAI_Berserker_Desert
// Size: 0x1830 (Inherited: 0x17f0)
struct AMadCharAI_Berserker_Desert : AMadCharAI_Berserker_Dodging {
	struct UParticleSystemComponent* AnomalyEnhancedWeaponParticleLeft; // 0x17f0(0x08)
	struct UParticleSystemComponent* AnomalyEnhancedWeaponParticleRight; // 0x17f8(0x08)
	struct UParticleSystemComponent* WeaponTrailLeft; // 0x1800(0x08)
	struct UParticleSystemComponent* WeaponTrailRight; // 0x1808(0x08)
	struct FName WeaponSocketName; // 0x1810(0x08)
	struct UFWAIWeaponComponent* WeaponComponent; // 0x1818(0x08)
	char UnknownData_1820[0x10]; // 0x1820(0x10)
};

// Class Madness.MadCharAI_Berserker_DesertAlpha
// Size: 0x1830 (Inherited: 0x1830)
struct AMadCharAI_Berserker_DesertAlpha : AMadCharAI_Berserker_Desert {
	struct UGameplayEffect* GameplayEffectToApplyOnDeath; // 0x1828(0x08)
};

// Class Madness.MadCharAI_Berserker_Forest
// Size: 0x17f0 (Inherited: 0x17f0)
struct AMadCharAI_Berserker_Forest : AMadCharAI_Berserker_Dodging {
};

// Class Madness.MadCharAI_Berserker_NoMansLand
// Size: 0x17f0 (Inherited: 0x17f0)
struct AMadCharAI_Berserker_NoMansLand : AMadCharAI_Berserker_Dodging {
};

// Class Madness.MadCharAI_Berserker_Warzone
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_Berserker_Warzone : AMadCharAI_Berserker {
	float MinimalMultiplierToWeaponForceOnDeath; // 0x17c8(0x04)
	float MaximalMultiplierToWeaponForceOnDeath; // 0x17cc(0x04)
};

// Class Madness.MadCharAI_BossBase
// Size: 0x1800 (Inherited: 0x1790)
struct AMadCharAI_BossBase : AMadCharAI {
	struct TArray<struct FName> AttractorsBones; // 0x1790(0x10)
	struct FMulticastInlineDelegate OnBossKilled; // 0x17a0(0x10)
	struct FMulticastInlineDelegate OnBossFightPhaseChanged; // 0x17b0(0x10)
	struct TArray<struct FMadBossFightPhase> BossFightPhases; // 0x17c0(0x10)
	struct FFactNameFromList BossFightPhaseFact; // 0x17d0(0x08)
	int32_t Debug_PhaseNumberToStartFrom; // 0x17d8(0x04)
	char UnknownData_17DC_0 : 7; // 0x17dc(0x01)
	bool bDontUseBossInitterNames : 1; // 0x17dc(0x01)
	char UnknownData_17DD[0x3]; // 0x17dd(0x03)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17e0(0x08)
	char UnknownData_17E8_0 : 7; // 0x17e8(0x01)
	bool bIsBetweenPhases : 1; // 0x17e8(0x01)
	char UnknownData_17E9[0x3]; // 0x17e9(0x03)
	int32_t CurrentPhaseNumber; // 0x17ec(0x04)
	char UnknownData_17F0_0 : 7; // 0x17f0(0x01)
	bool bShouldStayInCombatBetweenPhases : 1; // 0x17f0(0x01)
	char UnknownData_17F1[0xf]; // 0x17f1(0x0f)

	void StartBossFightPhase(); // Function Madness.MadCharAI_BossBase.StartBossFightPhase // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15a7dc0
	void OnRep_PhaseNumberChanged(); // Function Madness.MadCharAI_BossBase.OnRep_PhaseNumberChanged // (Native|Protected) // @ game+0x15a7570
	void OnRep_IsBetweenPhases(); // Function Madness.MadCharAI_BossBase.OnRep_IsBetweenPhases // (Native|Protected) // @ game+0x15a7550
	bool HasGroundAttractorLocation(); // Function Madness.MadCharAI_BossBase.HasGroundAttractorLocation // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15a7090
	struct FVector GetGroundAttractorLocation(); // Function Madness.MadCharAI_BossBase.GetGroundAttractorLocation // (BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15a7030
	int32_t GetCurrentPhaseNumber(); // Function Madness.MadCharAI_BossBase.GetCurrentPhaseNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15a7010
	void DebugReset(); // Function Madness.MadCharAI_BossBase.DebugReset // (Final|Native|Public|BlueprintCallable) // @ game+0x15a6fd0
};

// Class Madness.MadCharAI_CoveringInfantry
// Size: 0x17c0 (Inherited: 0x17a0)
struct AMadCharAI_CoveringInfantry : AMadCharAI_Infantry {
	struct UFWCoveringComponent* FWCovering; // 0x17a0(0x08)
	struct TArray<struct FName> AttractorsBones; // 0x17a8(0x10)
	char UnknownData_17B8[0x8]; // 0x17b8(0x08)
};

// Class Madness.MadCharAI_Crawler
// Size: 0x17b0 (Inherited: 0x1790)
struct AMadCharAI_Crawler : AMadCharAI {
	struct USphereComponent* HeadSphere; // 0x1788(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1790(0x08)
	struct UMadQuestIndicatorComponent* QuestIndicatorComponent; // 0x1798(0x08)
	char UnknownData_17A8_0 : 7; // 0x17a8(0x01)
	bool bIsOnGround : 1; // 0x17a0(0x01)
	float HoveringHeightOffset; // 0x17a4(0x04)
	char UnknownData_17AD[0x3]; // 0x17ad(0x03)

	void SetIsOnGround(bool bOnGround); // Function Madness.MadCharAI_Crawler.SetIsOnGround // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15ab040
	void OnRep_bIsOnGround(); // Function Madness.MadCharAI_Crawler.OnRep_bIsOnGround // (Final|Native|Private) // @ game+0x15aaec0
};

// Class Madness.MadCharAI_Shotgunner
// Size: 0x17d0 (Inherited: 0x17c0)
struct AMadCharAI_Shotgunner : AMadCharAI_CoveringInfantry {
	struct UMadShotgunnerBackpackComponent* Backpack; // 0x17b8(0x08)
	char UnknownData_17C8_0 : 7; // 0x17c8(0x01)
	bool bDropProjectileOnDeathAllowed : 1; // 0x17c0(0x01)
	float DropProjectileMinDistance; // 0x17c4(0x04)
	float DropProjectileMaxDistance; // 0x17c8(0x04)
	float DropProjectileExtraHeight; // 0x17cc(0x04)
};

// Class Madness.MadCharAI_ShotgunnerCaptainBase
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerCaptainBase : AMadCharAI_Shotgunner {
};

// Class Madness.MadCharAI_ShotgunnerWarzoneCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerWarzoneCaptain : AMadCharAI_ShotgunnerCaptainBase {
};

// Class Madness.MadCharAI_DrDetonator
// Size: 0x17e0 (Inherited: 0x17d0)
struct AMadCharAI_DrDetonator : AMadCharAI_ShotgunnerWarzoneCaptain {
	char UnknownData_17D0_0 : 7; // 0x17d0(0x01)
	bool bAllowGridDetonation : 1; // 0x17d0(0x01)
	char UnknownData_17D1_0 : 7; // 0x17d1(0x01)
	bool bAllowClusterBomb : 1; // 0x17d1(0x01)
	char UnknownData_17D2_0 : 7; // 0x17d2(0x01)
	bool bAllowShrapnelGrenade : 1; // 0x17d2(0x01)
	char UnknownData_17D3_0 : 7; // 0x17d3(0x01)
	bool bAllowDeployTurrets : 1; // 0x17d3(0x01)
	char UnknownData_17D4[0xc]; // 0x17d4(0x0c)
};

// Class Madness.MadCharAI_ForestBoss
// Size: 0x1ba0 (Inherited: 0x1800)
struct AMadCharAI_ForestBoss : AMadCharAI_BossBase {
	struct UParticleSystem* HandDustEffect; // 0x17f8(0x08)
	struct FGameplayTag LeftHandOnGroundTag; // 0x1800(0x08)
	struct FName LeftHandBone; // 0x1808(0x08)
	struct FGameplayTag RightHandOnGroundTag; // 0x1810(0x08)
	struct FName RightHandBone; // 0x1818(0x08)
	struct USceneComponent* LootDropLocation; // 0x1820(0x08)
	struct FName CombatStateBBKey; // 0x1828(0x08)
	struct UMadAbilitySet* IntroAbilitySet; // 0x1830(0x08)
	struct FGameplayTagContainer TagsToAddAtStart; // 0x1838(0x20)
	struct FScalableFloat WeakSpotDamageMultScale; // 0x1858(0x20)
	struct AForestBoss_MonsterAttractor* StageMonsterAttractor; // 0x1878(0x08)
	char UnknownData_1888_0 : 7; // 0x1888(0x01)
	bool DragonfliesSpawned : 1; // 0x1880(0x01)
	bool bInSecondPhase : 1; // 0x1881(0x01)
	struct FMulticastInlineDelegate OnHandDustSpawned; // 0x1888(0x10)
	struct AActor* GrowlMarker; // 0x1898(0x08)
	char UnknownData_18A1[0xb]; // 0x18a1(0x0b)
	enum class EMadForestBossCombatState CurrentCombatState; // 0x18ac(0x01)
	char UnknownData_18AD[0x3]; // 0x18ad(0x03)
	struct TMap<struct FName, int32_t> HitMap; // 0x18b0(0x50)
	struct TArray<struct FDamagableGroupConfig> DamageGroups; // 0x1900(0x10)
	struct TArray<struct FString> SubMeshMaterialList; // 0x1910(0x10)
	struct TArray<struct FString> WingsMaterialList; // 0x1920(0x10)
	struct UParticleSystem* WeakSpotDestroyFX; // 0x1930(0x08)
	struct USoundCue* WeakSpotDestroySound; // 0x1938(0x08)
	struct FName WeakSpotMaterialScalar; // 0x1940(0x08)
	char UnknownData_1948_0 : 7; // 0x1948(0x01)
	bool bAllowWingDamage : 1; // 0x1948(0x01)
	char UnknownData_1949[0x3]; // 0x1949(0x03)
	float InitialGlowLevel; // 0x194c(0x04)
	float MaxGlowLevel; // 0x1950(0x04)
	float GlowIncrement; // 0x1954(0x04)
	struct FScalableFloat DefaultPieceHealth; // 0x1958(0x20)
	float DefaultWingHealth; // 0x1978(0x04)
	char UnknownData_197C[0x14]; // 0x197c(0x14)
	struct UParticleSystem* PhaseOneGrowl; // 0x1990(0x08)
	struct UParticleSystem* PhaseTwoGrowl; // 0x1998(0x08)
	struct UParticleSystem* PhaseOneGrowlImpact; // 0x19a0(0x08)
	struct UParticleSystem* PhaseTwoGrowlImpact; // 0x19a8(0x08)
	struct FMulticastInlineDelegate OnGrowlStarted; // 0x19b0(0x10)
	struct FMulticastInlineDelegate OnGrowlStopped; // 0x19c0(0x10)
	struct FMulticastInlineDelegate OnInhalationStarted; // 0x19d0(0x10)
	struct FMulticastInlineDelegate OnInhalationEnded; // 0x19e0(0x10)
	struct TArray<struct ATargetPoint*> GrowlAttackTargets; // 0x19f0(0x10)
	struct UParticleSystemComponent* GrowlEffect; // 0x1a00(0x08)
	struct AProjectile* StoneProjectile; // 0x1a08(0x08)
	enum class EMadnessAIForestBossStoneSource StoneSourceState; // 0x1a10(0x01)
	char UnknownData_1A11[0x3]; // 0x1a11(0x03)
	float StoneArcHeight; // 0x1a14(0x04)
	float StoneGroundSpeed; // 0x1a18(0x04)
	float StoneOffsetMin; // 0x1a1c(0x04)
	float StoneOffsetMax; // 0x1a20(0x04)
	float StoneArcHeightPhase1Min; // 0x1a24(0x04)
	float StoneArcHeightPhase1Max; // 0x1a28(0x04)
	float StoneGroundSpeedPhase1; // 0x1a2c(0x04)
	float StoneOffsetMinPhase1; // 0x1a30(0x04)
	float StoneOffsetMaxPhase1; // 0x1a34(0x04)
	struct TArray<struct AActor*> StoneSourceLocations; // 0x1a38(0x10)
	struct UParticleSystem* OverrideDecalPhase1; // 0x1a48(0x08)
	char UnknownData_1A50[0x20]; // 0x1a50(0x20)
	struct AActor* PunchMarkerClass; // 0x1a70(0x08)
	struct TArray<struct UAnimMontage*> PunchAttackMontages; // 0x1a78(0x10)
	struct TArray<struct AActor*> PunchMarker; // 0x1a88(0x10)
	int32_t PunchLocationIdx; // 0x1a98(0x04)
	int32_t FirstPhaseIntroPunchIdx; // 0x1a9c(0x04)
	struct TArray<struct ATargetPoint*> PunchAttackTargets; // 0x1aa0(0x10)
	struct UCurveFloat* WingsHighlightCurve; // 0x1ab0(0x08)
	float WingsUpdateDelta; // 0x1ab8(0x04)
	char UnknownData_1ABC[0x4]; // 0x1abc(0x04)
	struct TArray<struct UMaterialInstanceDynamic*> WingMaterials; // 0x1ac0(0x10)
	char UnknownData_1AD0[0x18]; // 0x1ad0(0x18)
	struct USceneComponent* MarkerIconLocation; // 0x1ae8(0x08)
	struct FName MinimapNodeSocket; // 0x1af0(0x08)
	struct UStaticMeshComponent* BossEyeLeft; // 0x1af8(0x08)
	struct UStaticMeshComponent* BossEyeRight; // 0x1b00(0x08)
	struct UCameraShake* CameraShakeClass; // 0x1b08(0x08)
	struct FMulticastInlineDelegate OnStartFall; // 0x1b10(0x10)
	struct FMulticastInlineDelegate OnSmashDown; // 0x1b20(0x10)
	struct FMulticastInlineDelegate OnDestroyRock; // 0x1b30(0x10)
	struct FMulticastInlineDelegate OnRockExplosion; // 0x1b40(0x10)
	struct FMulticastInlineDelegate OnDestroyShelf; // 0x1b50(0x10)
	struct FMulticastInlineDelegate OnThrowRocks; // 0x1b60(0x10)
	struct FMulticastInlineDelegate OnDeathHit; // 0x1b70(0x10)
	struct FMulticastInlineDelegate OnInitialized; // 0x1b80(0x10)
	char UnknownData_1B90[0x10]; // 0x1b90(0x10)

	void ThrowStoneOffset(struct FVector Source, struct FVector Target, float OffsetMin, float OffsetMax, float ArcHeight, float GroundSpeed, struct UParticleSystem* OverrideDecal); // Function Madness.MadCharAI_ForestBoss.ThrowStoneOffset // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x15ab970
	void ThrowStoneClusterPhase1(struct FVector Source, float ThrowDelay, int32_t NumExtraStones, struct UParticleSystem* OverrideDecal); // Function Madness.MadCharAI_ForestBoss.ThrowStoneClusterPhase1 // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15ab810
	void ThrowStoneCluster(float ThrowDelay, int32_t NumExtraStones); // Function Madness.MadCharAI_ForestBoss.ThrowStoneCluster // (Final|Native|Protected|BlueprintCallable) // @ game+0x15ab740
	void ThrowStoneAtClosestPlayer(struct FVector Source, float ArcHeight, float GroundSpeed); // Function Madness.MadCharAI_ForestBoss.ThrowStoneAtClosestPlayer // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x15ab630
	void ThrowStone(struct FVector Source, struct FVector Target, float ArcHeight, float GroundSpeed, struct UParticleSystem* OverrideDecal); // Function Madness.MadCharAI_ForestBoss.ThrowStone // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x15ab490
	void StartUpdateGrowlMarker(struct AActor* Marker, int32_t BoneIndex, float Z); // Function Madness.MadCharAI_ForestBoss.StartUpdateGrowlMarker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15ab390
	void StartNextPhase(); // Function Madness.MadCharAI_ForestBoss.StartNextPhase // (Final|Native|Public|BlueprintCallable) // @ game+0x15ab370
	void SpawnPunchMarker(int32_t LocationIdx, int32_t MarkerIdx); // Function Madness.MadCharAI_ForestBoss.SpawnPunchMarker // (Final|Native|Protected|BlueprintCallable) // @ game+0x15ab2b0
	void SpawnHandDustEffect(bool bLeftHand); // Function Madness.MadCharAI_ForestBoss.SpawnHandDustEffect // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15ab220
	void SpawnGrowlImpact(struct FVector Location); // Function Madness.MadCharAI_ForestBoss.SpawnGrowlImpact // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x15ab190
	void SpawnGrowlEffect(); // Function Madness.MadCharAI_ForestBoss.SpawnGrowlEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15ab170
	void SetStoneSource(enum class EMadnessAIForestBossStoneSource TargetSourceState); // Function Madness.MadCharAI_ForestBoss.SetStoneSource // (Final|Native|Protected|BlueprintCallable) // @ game+0x15ab0d0
	void SetCombatState(enum class EMadForestBossCombatState NewCombatState); // Function Madness.MadCharAI_ForestBoss.SetCombatState // (Final|Native|Public|BlueprintCallable) // @ game+0x15aafc0
	void PlayCameraShake(); // Function Madness.MadCharAI_ForestBoss.PlayCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0x15aafa0
	void PhaseStart(); // Function Madness.MadCharAI_ForestBoss.PhaseStart // (Final|Native|Public|BlueprintCallable) // @ game+0x15aaf80
	void PhaseOneSwitchSides(); // Function Madness.MadCharAI_ForestBoss.PhaseOneSwitchSides // (Final|Native|Public|BlueprintCallable) // @ game+0x15aaf60
	void PhaseChanged(int32_t NewPhaseNumber); // Function Madness.MadCharAI_ForestBoss.PhaseChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x15aaee0
	void OnPointDamageTaken(struct AActor* DamagedActor, float Damage, struct AController* InstigatedBy, struct FVector HitLocation, struct UPrimitiveComponent* FHitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct UDamageType* DamageType, struct AActor* DamageCauser); // Function Madness.MadCharAI_ForestBoss.OnPointDamageTaken // (Final|Native|Private|HasDefaults) // @ game+0x15aac20
	void OnMeshBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_ForestBoss.OnMeshBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x15aa9b0
	void NotifyStartFall(); // Function Madness.MadCharAI_ForestBoss.NotifyStartFall // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa970
	void NotifyRocksThrow(bool bLeftSide); // Function Madness.MadCharAI_ForestBoss.NotifyRocksThrow // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa8e0
	void NotifyRockExplosion(int32_t RockEventIdx); // Function Madness.MadCharAI_ForestBoss.NotifyRockExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa860
	void NotifyDestroyShelf(); // Function Madness.MadCharAI_ForestBoss.NotifyDestroyShelf // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa840
	void NotifyDestroyRock(int32_t RockEventIdx); // Function Madness.MadCharAI_ForestBoss.NotifyDestroyRock // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa7c0
	void NotifyDeathHit(); // Function Madness.MadCharAI_ForestBoss.NotifyDeathHit // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa7a0
	void MulticastChangeHealthbarVisibility(bool bHide, int32_t Phase); // Function Madness.MadCharAI_ForestBoss.MulticastChangeHealthbarVisibility // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15aa5b0
	void KillBoss(); // Function Madness.MadCharAI_ForestBoss.KillBoss // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa590
	void IncrementMeshGroupGlow(int32_t Group, float IncAmount); // Function Madness.MadCharAI_ForestBoss.IncrementMeshGroupGlow // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa4c0
	int32_t GetPhaseFromCurrentCombatState(); // Function Madness.MadCharAI_ForestBoss.GetPhaseFromCurrentCombatState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15aa490
	struct FVector GetNewStoneSourceVector(); // Function Madness.MadCharAI_ForestBoss.GetNewStoneSourceVector // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x15aa450
	struct AFWWaveSpawningSystem* GetMinionSpawnSystem(); // Function Madness.MadCharAI_ForestBoss.GetMinionSpawnSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15aa420
	enum class EMadForestBossCombatState GetCombatState(); // Function Madness.MadCharAI_ForestBoss.GetCombatState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15aa400
	void GetAreaToAttack(); // Function Madness.MadCharAI_ForestBoss.GetAreaToAttack // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa3e0
	void EndUpdateGrowlMarker(); // Function Madness.MadCharAI_ForestBoss.EndUpdateGrowlMarker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15aa3c0
	void DestroyGrowlEffect(); // Function Madness.MadCharAI_ForestBoss.DestroyGrowlEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15aa3a0
	void DestroyAllPunchMarkers(); // Function Madness.MadCharAI_ForestBoss.DestroyAllPunchMarkers // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa380
	void DamagePiece(int32_t Group, float DamageAmount); // Function Madness.MadCharAI_ForestBoss.DamagePiece // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa230
	void Client_DestroyMeshPiece(int32_t GroundIndex); // Function Madness.MadCharAI_ForestBoss.Client_DestroyMeshPiece // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15aa1a0
	void Client_ApplySubMeshScalar(int32_t GroupIndex, float NewValue); // Function Madness.MadCharAI_ForestBoss.Client_ApplySubMeshScalar // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x15aa0d0
	void CallGrowlStopped(); // Function Madness.MadCharAI_ForestBoss.CallGrowlStopped // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa0b0
	void CallGrowlStarted(); // Function Madness.MadCharAI_ForestBoss.CallGrowlStarted // (Final|Native|Public|BlueprintCallable) // @ game+0x15aa090
	bool AreWingsDestroyed(); // Function Madness.MadCharAI_ForestBoss.AreWingsDestroyed // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa060
	void ApplyDamageToSubgroup(struct FName HitMapName, float Damage); // Function Madness.MadCharAI_ForestBoss.ApplyDamageToSubgroup // (Final|Native|Protected|BlueprintCallable) // @ game+0x15a9f90
	void AddWeakSpot(struct FName BoneName, bool bPropagateToChilden, bool bForceCrit); // Function Madness.MadCharAI_ForestBoss.AddWeakSpot // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15a9e80
	void ActivateWingLights(bool bActivate); // Function Madness.MadCharAI_ForestBoss.ActivateWingLights // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15a9df0
};

// Class Madness.MadCharAI_Guardian
// Size: 0x17f0 (Inherited: 0x1790)
struct AMadCharAI_Guardian : AMadCharAI {
	struct TArray<struct FName> AttractorBones; // 0x1790(0x10)
	struct UGameplayEffect* HoverEffect; // 0x17a0(0x08)
	struct FVector CapeLocationOffset; // 0x17a8(0x0c)
	struct FRotator CapeRotationOffset; // 0x17b4(0x0c)
	struct FVector CapeScale; // 0x17c0(0x0c)
	char UnknownData_17CC[0x4]; // 0x17cc(0x04)
	struct AActor* CapeClass; // 0x17d0(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17d8(0x08)
	char UnknownData_17E0[0x10]; // 0x17e0(0x10)

	void SpawnCape(); // Function Madness.MadCharAI_Guardian.SpawnCape // (Final|Native|Protected|BlueprintCallable) // @ game+0x15ab150
	void OnHideHealthBar(); // Function Madness.MadCharAI_Guardian.OnHideHealthBar // (Final|Native|Private) // @ game+0x15aa990
	void MulticastSetHoverState(bool bIsHovering); // Function Madness.MadCharAI_Guardian.MulticastSetHoverState // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15aa710
	void MulticastEnableFlyingMode(bool bEnable); // Function Madness.MadCharAI_Guardian.MulticastEnableFlyingMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15aa680
	void DelayHealthBar(float Delay); // Function Madness.MadCharAI_Guardian.DelayHealthBar // (Final|Native|Protected|BlueprintCallable) // @ game+0x15aa300
};

// Class Madness.MadCharAI_HeavygunnerWarzone
// Size: 0x17a0 (Inherited: 0x17a0)
struct AMadCharAI_HeavygunnerWarzone : AMadCharAI_Infantry {
};

// Class Madness.MadCharAI_LurkerBase
// Size: 0x17c0 (Inherited: 0x1790)
struct AMadCharAI_LurkerBase : AMadCharAI {
	float DefaultRangeParameter; // 0x1788(0x04)
	float DefaultBrightnessParameter; // 0x178c(0x04)
	float AngryRangeParameter; // 0x1790(0x04)
	float AngryBrightnessParameter; // 0x1794(0x04)
	float EmmissiveChangeTime; // 0x1798(0x04)
	struct UMadAngryStatusVisualComponent* AngryStatusVisualComponent; // 0x17a0(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17a8(0x08)
	struct UMadQuestIndicatorComponent* QuestIndicatorComponent; // 0x17b0(0x08)
	struct FAngryStatusValueStruct AngryEffectValues; // 0x17b8(0x04)

	void OnRep_Angry(); // Function Madness.MadCharAI_LurkerBase.OnRep_Angry // (Final|Native|Protected) // @ game+0x15b0d30
};

// Class Madness.MadCharAI_Lurker
// Size: 0x1900 (Inherited: 0x17c0)
struct AMadCharAI_Lurker : AMadCharAI_LurkerBase {
	struct FMulticastInlineDelegate OnLurkerChargeStarted; // 0x17c0(0x10)
	struct FMulticastInlineDelegate OnLurkerChargeEnded; // 0x17d0(0x10)
	struct FScalableFloat HeavyDamageMultiplier; // 0x17e0(0x20)
	struct FScalableFloat InTimeValue; // 0x1800(0x20)
	struct UMadGameplayEffect* SynergyGameplayEffect; // 0x1820(0x08)
	struct TArray<struct FName> SocketNames; // 0x1828(0x10)
	struct UCapsuleComponent* PhysicalLayerDetectionCollisionCapsule; // 0x1838(0x08)
	struct TArray<struct UBlastMeshComponent*> OverlappingBlastMeshes; // 0x1840(0x10)
	struct AActor* TargetActor; // 0x1850(0x08)
	struct UDataTable* MovementSpeedData; // 0x1858(0x08)
	struct TArray<struct UMadDamageType*> DamageTypesBlockingHitReactionEvent; // 0x1860(0x10)
	char UnknownData_1870[0x90]; // 0x1870(0x90)

	void SetTargetActor(struct AActor* InTargetActor); // Function Madness.MadCharAI_Lurker.SetTargetActor // (Final|Native|Public|BlueprintCallable) // @ game+0x15b1010
	void SetManualBlashMeshCollisionDetection(bool bEnabled); // Function Madness.MadCharAI_Lurker.SetManualBlashMeshCollisionDetection // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0f80
	void OnCollisionComponentOverlapCallback(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_Lurker.OnCollisionComponentOverlapCallback // (Final|Native|Protected|HasOutParms) // @ game+0x15b0690
	void OnCollisionComponentEndOverlapCallback(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadCharAI_Lurker.OnCollisionComponentEndOverlapCallback // (Final|Native|Protected) // @ game+0x15b0550
	struct AActor* GetTargetActor(); // Function Madness.MadCharAI_Lurker.GetTargetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b0530
	void EventLurkerChargeStarted(); // Function Madness.MadCharAI_Lurker.EventLurkerChargeStarted // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0410
	void EventLurkerChargeEnded(); // Function Madness.MadCharAI_Lurker.EventLurkerChargeEnded // (Final|Native|Public|BlueprintCallable) // @ game+0x15b03e0
	void DisableForceKnockbackWithPawn(bool bDisable); // Function Madness.MadCharAI_Lurker.DisableForceKnockbackWithPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0350
};

// Class Madness.MadCharAI_Lurker_Desert
// Size: 0x1900 (Inherited: 0x1900)
struct AMadCharAI_Lurker_Desert : AMadCharAI_Lurker {
};

// Class Madness.MadCharAI_Lurker_Forest
// Size: 0x1900 (Inherited: 0x1900)
struct AMadCharAI_Lurker_Forest : AMadCharAI_Lurker {
};

// Class Madness.MadCharAI_Lurker_Prologue
// Size: 0x1930 (Inherited: 0x1900)
struct AMadCharAI_Lurker_Prologue : AMadCharAI_Lurker {
	struct FMulticastInlineDelegate OnLowHealth; // 0x1900(0x10)
	struct UCapsuleComponent* HeadCollisionComponent; // 0x1910(0x08)
	float LowHealthThreasholdScale; // 0x1918(0x04)
	char UnknownData_191C_0 : 7; // 0x191c(0x01)
	bool WasLowOnHealth : 1; // 0x191c(0x01)
	char UnknownData_191D[0x3]; // 0x191d(0x03)
	struct AActor* RunAwayActor; // 0x1920(0x08)
	char UnknownData_1928[0x8]; // 0x1928(0x08)

	void OnHealthChanged(float OldValue, float CurrentValue); // Function Madness.MadCharAI_Lurker_Prologue.OnHealthChanged // (Final|Native|Private) // @ game+0x15b0900
};

// Class Madness.MadCharAI_Lurker_Warzone
// Size: 0x1900 (Inherited: 0x1900)
struct AMadCharAI_Lurker_Warzone : AMadCharAI_Lurker {
};

// Class Madness.MadCharAI_Perforo
// Size: 0x17d0 (Inherited: 0x1790)
struct AMadCharAI_Perforo : AMadCharAI {
	struct TArray<struct FMadReactionAnimData> SprintPoseAnimationData; // 0x1788(0x10)
	struct UGameplayAbility* DodgeAbility; // 0x1798(0x08)
	float HitReactionMinDistance; // 0x17a0(0x04)
	float ChanceToPlayDodgeAsHitReaction; // 0x17a4(0x04)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17a8(0x08)
	char UnknownData_17B8[0x18]; // 0x17b8(0x18)

	void SetHitReactionBlocked(bool bInValue); // Function Madness.MadCharAI_Perforo.SetHitReactionBlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0e70
};

// Class Madness.MadCharAI_Perforo_Alpha
// Size: 0x17c0 (Inherited: 0x1790)
struct AMadCharAI_Perforo_Alpha : AMadCharAI {
	struct FGameplayTagContainer AnomalySheildTag; // 0x1788(0x20)
	struct UMadAlphaPerforoBackpackComponent* BackpackComponent; // 0x17a8(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17b0(0x08)
	struct UMadQuestIndicatorComponent* QuestIndicatorComponent; // 0x17b8(0x08)
};

// Class Madness.MadCharAI_Perforo_Alpha_CaveElder
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_Perforo_Alpha_CaveElder : AMadCharAI_Perforo_Alpha {
};

// Class Madness.MadCharAI_PerforoHunter
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_PerforoHunter : AMadCharAI_Perforo {
};

// Class Madness.MadCharAI_PerforoSpitter
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_PerforoSpitter : AMadCharAI_Perforo {
	struct UFWAIWeaponComponent* FWAIWeapon; // 0x17c8(0x08)
};

// Class Madness.MadCharAI_PerforoStalker
// Size: 0x17f0 (Inherited: 0x17d0)
struct AMadCharAI_PerforoStalker : AMadCharAI_Perforo {
	struct UCurveFloat* FloatCurve; // 0x17c8(0x08)
	struct FName MaterialGlowParameterName; // 0x17d0(0x08)
	struct FVector MaximumBrightGlow; // 0x17d8(0x0c)
	char UnknownData_17EC[0x4]; // 0x17ec(0x04)
};

// Class Madness.MadCharAI_Sniper
// Size: 0x17d0 (Inherited: 0x17c0)
struct AMadCharAI_Sniper : AMadCharAI_CoveringInfantry {
	char UnknownData_17C0[0x10]; // 0x17c0(0x10)

	void SetIsTargeting(bool bTargeting); // Function Madness.MadCharAI_Sniper.SetIsTargeting // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0ef0
};

// Class Madness.MadCharAI_RadioTelegraphist
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_RadioTelegraphist : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_RadioTelegraphistDesert
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_RadioTelegraphistDesert : AMadCharAI_RadioTelegraphist {
};

// Class Madness.MadCharAI_RadioTelegraphistForest
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_RadioTelegraphistForest : AMadCharAI_RadioTelegraphist {
};

// Class Madness.MadCharAI_RadioTelegraphistWarzone
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_RadioTelegraphistWarzone : AMadCharAI_RadioTelegraphist {
};

// Class Madness.MadCharAI_Rifleman
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_Rifleman : AMadCharAI_CoveringInfantry {
};

// Class Madness.MadCharAI_RiflemanCaptainBase
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanCaptainBase : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanDen
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanDen : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanDesert
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanDesert : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanDesertCaptain
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanDesertCaptain : AMadCharAI_RiflemanCaptainBase {
};

// Class Madness.MadCharAI_RiflemanForest
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanForest : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanForestCaptain
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanForestCaptain : AMadCharAI_RiflemanCaptainBase {
};

// Class Madness.MadCharAI_RiflemanNoMansLand
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanNoMansLand : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanWarzone
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanWarzone : AMadCharAI_Rifleman {
};

// Class Madness.MadCharAI_RiflemanWarzoneCaptain
// Size: 0x17c0 (Inherited: 0x17c0)
struct AMadCharAI_RiflemanWarzoneCaptain : AMadCharAI_RiflemanCaptainBase {
};

// Class Madness.MadCharAI_Sciathan
// Size: 0x17b0 (Inherited: 0x1790)
struct AMadCharAI_Sciathan : AMadCharAI {
	char UnknownData_1790_0 : 7; // 0x1790(0x01)
	bool bIsScriptedFlying : 1; // 0x1788(0x01)
	bool bIsGlideActive : 1; // 0x1789(0x01)
	struct FVector FlyWorldVelocity; // 0x178c(0x0c)
	float bIsMoving2D; // 0x1798(0x04)
	struct FVector GlideToLocation; // 0x179c(0x0c)
	char UnknownData_17AD[0x3]; // 0x17ad(0x03)

	void RemoveBindingWithSequenceActor(struct ALevelSequenceActor* SequenceActor); // Function Madness.MadCharAI_Sciathan.RemoveBindingWithSequenceActor // (Final|Native|Public|BlueprintCallable) // @ game+0x15b0df0
	void BindWithSequenceActor(struct ALevelSequenceActor* SequenceActor); // Function Madness.MadCharAI_Sciathan.BindWithSequenceActor // (Final|Native|Public|BlueprintCallable) // @ game+0x15b02d0
};

// Class Madness.MadCharAI_SciathanBase
// Size: 0x17b0 (Inherited: 0x1790)
struct AMadCharAI_SciathanBase : AMadCharAI {
	char UnknownData_1790_0 : 7; // 0x1790(0x01)
	bool bAllowTwitchOffGround : 1; // 0x1788(0x01)
	bool bResetDamageWhenLanding : 1; // 0x1789(0x01)
	float KilledGravityScale; // 0x178c(0x04)
	struct UMadDSHeightComponent* HeightComponent; // 0x1790(0x08)
	struct UFWAIWeaponComponent* AIWeaponComponent; // 0x1798(0x08)
	struct UParticleSystemComponent* ParticleSysComponent; // 0x17a0(0x08)
	struct UMadQuestIndicatorComponent* QuestIndicatorComponent; // 0x17a8(0x08)
};

// Class Madness.MadCharAI_Sciathan_Desert
// Size: 0x17b0 (Inherited: 0x17b0)
struct AMadCharAI_Sciathan_Desert : AMadCharAI_SciathanBase {
};

// Class Madness.MadCharAI_Sciathan_Forest
// Size: 0x17a0 (Inherited: 0x1790)
struct AMadCharAI_Sciathan_Forest : AMadCharAI {
	struct UFWAIWeaponComponent* AIWeaponComponent; // 0x1788(0x08)
	struct UParticleSystemComponent* LeftWingFX; // 0x1790(0x08)
	struct UParticleSystemComponent* RightWingFX; // 0x1798(0x08)
};

// Class Madness.MadCharAI_Sciathan_Warzone
// Size: 0x17b0 (Inherited: 0x17b0)
struct AMadCharAI_Sciathan_Warzone : AMadCharAI_SciathanBase {
};

// Class Madness.MeshComponent_Shotgunner_Desert
// Size: 0x690 (Inherited: 0x580)
struct UMeshComponent_Shotgunner_Desert : UStaticMeshComponent {
	float ShieldVisibilityAppearDuration; // 0x578(0x04)
	float ShieldVisibilityDisappearDuration; // 0x57c(0x04)
	char UnknownData_588[0x4]; // 0x588(0x04)
	float DefaultHealth; // 0x58c(0x04)
	struct FScalableFloat MaxHealthMultiplierScale; // 0x590(0x20)
	struct FScalableFloat HealthMultiplierScale1; // 0x5b0(0x20)
	struct FScalableFloat HealthMultiplierScale2; // 0x5d0(0x20)
	struct FScalableFloat HealthMultiplierScale3; // 0x5f0(0x20)
	struct FScalableFloat HealthRegenSpeedScale; // 0x610(0x20)
	char UnknownData_630[0x8]; // 0x630(0x08)
	struct FScalableFloat HealthRegenAfterDamageIntervalScale; // 0x638(0x20)
	char UnknownData_658[0x8]; // 0x658(0x08)
	struct FScalableFloat SkillDamageMultiplierScale; // 0x660(0x20)
	char UnknownData_680[0x8]; // 0x680(0x08)
	enum class EDesertShotgunnerShieldState CurrentState; // 0x688(0x01)
	char UnknownData_689[0x7]; // 0x689(0x07)

	void OnRep_CurrentState(enum class EDesertShotgunnerShieldState InPreviousState); // Function Madness.MeshComponent_Shotgunner_Desert.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x15b0d50
};

// Class Madness.MadCharAI_Shotgunner_Desert
// Size: 0x1820 (Inherited: 0x17d0)
struct AMadCharAI_Shotgunner_Desert : AMadCharAI_Shotgunner {
	struct UMeshComponent_Shotgunner_Desert* EnergyShieldComponent; // 0x17d0(0x08)
	float ShieldOffset; // 0x17d8(0x04)
	char UnknownData_17DC[0x4]; // 0x17dc(0x04)
	struct AActor* TargetActor; // 0x17e0(0x08)
	char UnknownData_17E8[0x38]; // 0x17e8(0x38)
};

// Class Madness.MadCharAI_ShotgunnerDen
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerDen : AMadCharAI_Shotgunner {
};

// Class Madness.MadCharAI_ShotgunnerDesertCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerDesertCaptain : AMadCharAI_ShotgunnerCaptainBase {
};

// Class Madness.MadCharAI_ShotgunnerForest
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerForest : AMadCharAI_Shotgunner {
};

// Class Madness.MadCharAI_ShotgunnerForestCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerForestCaptain : AMadCharAI_ShotgunnerCaptainBase {
};

// Class Madness.MadCharAI_ShotgunnerNoMansLand
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerNoMansLand : AMadCharAI_Shotgunner {
};

// Class Madness.MadCharAI_ShotgunnerWarzone
// Size: 0x17e0 (Inherited: 0x17d0)
struct AMadCharAI_ShotgunnerWarzone : AMadCharAI_Shotgunner {
	struct UAudioComponent* AudioTransmission; // 0x17d0(0x08)
	float AudioFadeOutDuration; // 0x17d8(0x04)
	char UnknownData_17DC[0x4]; // 0x17dc(0x04)
};

// Class Madness.MadCharAI_SniperCaptainBase
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperCaptainBase : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_SniperDesert
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperDesert : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_SniperDesertCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperDesertCaptain : AMadCharAI_SniperCaptainBase {
};

// Class Madness.MadCharAI_SniperForest
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperForest : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_SniperForestCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperForestCaptain : AMadCharAI_SniperCaptainBase {
};

// Class Madness.MadCharAI_SniperNoMansLand
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperNoMansLand : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_SniperWarzone
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperWarzone : AMadCharAI_Sniper {
};

// Class Madness.MadCharAI_SniperWarzoneCaptain
// Size: 0x17d0 (Inherited: 0x17d0)
struct AMadCharAI_SniperWarzoneCaptain : AMadCharAI_SniperCaptainBase {
};

// Class Madness.MadTickCharacter
// Size: 0x1840 (Inherited: 0x1790)
struct AMadTickCharacter : AMadCharAI {
	struct FMulticastInlineDelegate OnTargetReached; // 0x1788(0x10)
	struct FMulticastInlineDelegate OnLifeTimeout; // 0x1798(0x10)
	float LifeTimeSeconds; // 0x17a8(0x04)
	char UnknownData_17B4_0 : 7; // 0x17b4(0x01)
	bool bStopLifeTimeUpdateWhenTargetIsValid : 1; // 0x17ac(0x01)
	float TargetReachedRadious; // 0x17b0(0x04)
	struct AActor* AttackTarget; // 0x17b8(0x08)
	struct FTickSinusoidalMovementParams SinusoidalMovementParams; // 0x17c0(0x10)
	struct FTickAutoAttackParams AutoAttackParams; // 0x17d0(0x38)
	float WalkingSurfaceLossPanicSeconds; // 0x1808(0x04)
	float LifeTimeSecondsLeft; // 0x180c(0x04)
	struct UMadSpiderMovementComponent* SpiderMovement; // 0x1810(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1818(0x08)
	char UnknownData_1821[0x1f]; // 0x1821(0x1f)

	void SetLifeTime(float Seconds); // Function Madness.MadTickCharacter.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x16df0f0
	void OnTargetReached_Internal(); // Function Madness.MadTickCharacter.OnTargetReached_Internal // (Final|Native|Protected) // @ game+0x16def70
	void OnLifeTimeout_Internal(); // Function Madness.MadTickCharacter.OnLifeTimeout_Internal // (Final|Native|Protected) // @ game+0x16de550
	void OnBurrowed(); // Function Madness.MadTickCharacter.OnBurrowed // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x15a7340
	bool IsLifeTimeOver(); // Function Madness.MadTickCharacter.IsLifeTimeOver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16de1f0
};

// Class Madness.MadCharAI_Tick
// Size: 0x18e0 (Inherited: 0x1840)
struct AMadCharAI_Tick : AMadTickCharacter {
	struct FMulticastInlineDelegate OnLifetimeFinished; // 0x1840(0x10)
	struct UAudioComponent* AudioComponent; // 0x1850(0x08)
	float TickScale; // 0x1858(0x04)
	char UnknownData_185C[0x4]; // 0x185c(0x04)
	struct UParticleSystem* HideEffect; // 0x1860(0x08)
	struct UParticleSystem* KillEffect; // 0x1868(0x08)
	float EatingDuration; // 0x1870(0x04)
	float DeathLifeSpanDelay; // 0x1874(0x04)
	struct FTickSoundData AttacksSound; // 0x1878(0x10)
	struct FTickSoundData MovementSound; // 0x1888(0x10)
	struct FTickSoundData EatingStartSound; // 0x1898(0x10)
	struct FTickSoundData EatingEndSound; // 0x18a8(0x10)
	struct FTickSoundData DeathSound; // 0x18b8(0x10)
	float SoundFadeDuration; // 0x18c8(0x04)
	char UnknownData_18CC[0x14]; // 0x18cc(0x14)

	void OnTickHidden(); // Function Madness.MadCharAI_Tick.OnTickHidden // (Final|Native|Protected) // @ game+0x15b0dd0
	void OnHitPerformed(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadCharAI_Tick.OnHitPerformed // (Final|Native|Protected) // @ game+0x15b09e0
	void OnHideStarted(); // Function Madness.MadCharAI_Tick.OnHideStarted // (Final|Native|Protected) // @ game+0x15b09c0
	void GetAttackSoundData(struct USoundBase* AttackSound, float VolumeMultiplier); // Function Madness.MadCharAI_Tick.GetAttackSoundData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15b0440
};

// Class Madness.MadCharAI_Tick_Desert
// Size: 0x18e0 (Inherited: 0x18e0)
struct AMadCharAI_Tick_Desert : AMadCharAI_Tick {
};

// Class Madness.MadCharAI_Tick_Forest
// Size: 0x18e0 (Inherited: 0x18e0)
struct AMadCharAI_Tick_Forest : AMadCharAI_Tick {
};

// Class Madness.MadCharAI_Tick_Warzone
// Size: 0x18e0 (Inherited: 0x18e0)
struct AMadCharAI_Tick_Warzone : AMadCharAI_Tick {
};

// Class Madness.MadCharAI_VolcanoBoss
// Size: 0x1f00 (Inherited: 0x1800)
struct AMadCharAI_VolcanoBoss : AMadCharAI_BossBase {
	struct FMulticastInlineDelegate ActivateBubblingFX; // 0x17f8(0x10)
	struct FMulticastInlineDelegate DeactivateBubblingFX; // 0x1808(0x10)
	struct FMulticastInlineDelegate TriggerMinionsSpawn; // 0x1818(0x10)
	struct FMulticastInlineDelegate TriggerBigRockCollapse; // 0x1828(0x10)
	struct FMulticastInlineDelegate LavaSpikeManager_Spawn; // 0x1838(0x10)
	struct FMulticastInlineDelegate LavaSpikeManager_Setup; // 0x1848(0x10)
	struct USceneComponent* DropPoint; // 0x1858(0x08)
	struct UTileFloorInfluenceComponent* TileFloorInfluenceComponent; // 0x1860(0x08)
	struct FCollisionResponseContainer CapsuleAfterSpawnResponses; // 0x1868(0x20)
	float FocalPointOffset; // 0x1888(0x04)
	float InitWeakSpotsDelay; // 0x188c(0x04)
	float InitAttractorBonesDelay; // 0x1890(0x04)
	struct UDamageType* DamageTypeToIgnore; // 0x1898(0x08)
	char UnknownData_18A4[0xc]; // 0x18a4(0x0c)
	struct FIKLegsTurningData IKLegsTurningLeftData; // 0x18b0(0x0c)
	struct FIKLegsTurningData IKLegsTurningRightData; // 0x18bc(0x0c)
	float SideOffset; // 0x18c8(0x04)
	float ZOffset; // 0x18cc(0x04)
	float ActorLocationZOffset; // 0x18d0(0x04)
	float HeadLookAtSpeed; // 0x18d4(0x04)
	struct FStateData StateData; // 0x18d8(0x18)
	struct FMulticastInlineDelegate UpdateHealthbar; // 0x18f0(0x10)
	struct FMulticastInlineDelegate StartDeathSequence; // 0x1900(0x10)
	struct FGameplayAttribute HealthAttribute; // 0x1910(0x38)
	struct UTileFloorWaveForce* TileImpulseForceClass; // 0x1948(0x08)
	struct UTileFloorWaveForce* WaveForce; // 0x1950(0x08)
	struct FVector Phase03CharacterLocation; // 0x1958(0x0c)
	char UnknownData_1964[0xc]; // 0x1964(0x0c)
	struct FTransform RelocationTransformForPhase1; // 0x1970(0x30)
	struct FTransform RelocationTransformForPhase2; // 0x19a0(0x30)
	struct FMulticastInlineDelegate SwitchPhase; // 0x19d0(0x10)
	struct FMulticastInlineDelegate OnPhaseMusicEnd; // 0x19e0(0x10)
	struct FMulticastInlineDelegate OnStartPhase; // 0x19f0(0x10)
	struct TArray<struct FPhaseData> PhaseData; // 0x1a00(0x10)
	char UnknownData_1A10[0x10]; // 0x1a10(0x10)
	char UnknownData_1A20_0 : 7; // 0x1a20(0x01)
	bool bIsBeforePhaseMeshSwitch : 1; // 0x1a20(0x01)
	char UnknownData_1A21[0x3]; // 0x1a21(0x03)
	struct FVector Phase2MeshHiddenLocation; // 0x1a24(0x0c)
	struct FVector Phase2MeshVisibleLocation; // 0x1a30(0x0c)
	char UnknownData_1A3C[0x4]; // 0x1a3c(0x04)
	struct USphereComponent* ChargeAttackArea; // 0x1a40(0x08)
	struct FChargeAttackData ChargeAttackData; // 0x1a48(0x30)
	struct FPhase3HitDamage Phase3HitDamageData; // 0x1a78(0x30)
	char UnknownData_1AA8_0 : 7; // 0x1aa8(0x01)
	bool bPhase3HitDamageEnabled : 1; // 0x1aa8(0x01)
	char UnknownData_1AA9[0x7]; // 0x1aa9(0x07)
	struct FMeltedStateData MeltedStateData; // 0x1ab0(0x80)
	struct AActor* JumpAttackLandingMarker; // 0x1b30(0x08)
	struct FRotationAttackData RotationAttackData; // 0x1b38(0x68)
	struct UParticleSystemComponent* RotationAttackParticles1; // 0x1ba0(0x08)
	struct UParticleSystemComponent* RotationAttackParticles2; // 0x1ba8(0x08)
	struct UParticleSystemComponent* RotationAttackParticles3; // 0x1bb0(0x08)
	struct UParticleSystemComponent* RotationAttackParticles4; // 0x1bb8(0x08)
	struct UBoxComponent* RotationAttackCollision1; // 0x1bc0(0x08)
	struct UBoxComponent* RotationAttackCollision2; // 0x1bc8(0x08)
	struct UBoxComponent* RotationAttackCollision3; // 0x1bd0(0x08)
	struct UBoxComponent* RotationAttackCollision4; // 0x1bd8(0x08)
	struct FMulticastInlineDelegate LavaSprayAttackStarted; // 0x1be0(0x10)
	struct FMulticastInlineDelegate LavaSprayAttackFinished; // 0x1bf0(0x10)
	struct USceneComponent* SwingAttackAreaPivot; // 0x1c00(0x08)
	struct USphereComponent* SwingAttackArea; // 0x1c08(0x08)
	struct UParticleSystemComponent* LavaSprayParticles; // 0x1c10(0x08)
	struct FSwingAttackData SwingAttackData; // 0x1c18(0x78)
	struct FBlastMeshRegenerationData RegenerationData; // 0x1c90(0xb8)
	struct UStaticMeshComponent* LaserAttackCollision; // 0x1d48(0x08)
	struct FLaserAttackData LaserAttackData; // 0x1d50(0x70)
	struct FKnockbackData KnockbackData; // 0x1dc0(0x88)
	char UnknownData_1E48[0x8]; // 0x1e48(0x08)
	struct TArray<struct UPrimitiveComponent*> CollisionsToTurnOn; // 0x1e50(0x10)
	char UnknownData_1E60[0x8]; // 0x1e60(0x08)
	struct FHighWallJumpData HighWallJumpData; // 0x1e68(0x48)
	struct UStaticMeshComponent* WallMarker; // 0x1eb0(0x08)
	char UnknownData_1EB8[0x8]; // 0x1eb8(0x08)
	struct USphereComponent* ProximityKnockbackArea; // 0x1ec0(0x08)
	struct FProximityKnockbackData ProximityKnockbackData; // 0x1ec8(0x30)
	char UnknownData_1EF8[0x8]; // 0x1ef8(0x08)

	void UpdateWeakSpots(int32_t InPhaseIdx); // Function Madness.MadCharAI_VolcanoBoss.UpdateWeakSpots // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b6f30
	void UpdateMovementMood(enum class EMovementMood InNewMood); // Function Madness.MadCharAI_VolcanoBoss.UpdateMovementMood // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b6eb0
	void UpdateMeshMulticast(int32_t InPhaseIdx); // Function Madness.MadCharAI_VolcanoBoss.UpdateMeshMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6e20
	void UpdateLookAtTargetMulticast(struct FVector InLookAtTarget); // Function Madness.MadCharAI_VolcanoBoss.UpdateLookAtTargetMulticast // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x15b6da0
	void UpdateLegOffsetMulticast(float InCurrentTurnDegrees); // Function Madness.MadCharAI_VolcanoBoss.UpdateLegOffsetMulticast // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6d20
	void UpdateBlastMeshes(int32_t InPhaseIdx); // Function Madness.MadCharAI_VolcanoBoss.UpdateBlastMeshes // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b6ca0
	void UpdateAttractorBones(int32_t InPhaseIdx); // Function Madness.MadCharAI_VolcanoBoss.UpdateAttractorBones // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b6c20
	void TryToRestoreCollision(struct TArray<struct UPrimitiveComponent*> Collisions); // Function Madness.MadCharAI_VolcanoBoss.TryToRestoreCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6b40
	void TriggerMeleeIKMulticast(struct AActor* InPotentialActor); // Function Madness.MadCharAI_VolcanoBoss.TriggerMeleeIKMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6ab0
	void StoreLookAtTarget(); // Function Madness.MadCharAI_VolcanoBoss.StoreLookAtTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6a90
	void StartSprayMeshSize(bool bInSizeUp); // Function Madness.MadCharAI_VolcanoBoss.StartSprayMeshSize // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6a00
	void StartMovingSwingAttackDamageAreaMulticast(); // Function Madness.MadCharAI_VolcanoBoss.StartMovingSwingAttackDamageAreaMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b69e0
	void StartMeshRegenerationMulticast(struct UBlastMeshComponent* InBlastMeshComponent); // Function Madness.MadCharAI_VolcanoBoss.StartMeshRegenerationMulticast // (Net|Native|Event|NetMulticast|Protected) // @ game+0x15b6950
	void StartKnockbackToRestoreCollision(); // Function Madness.MadCharAI_VolcanoBoss.StartKnockbackToRestoreCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6930
	void StartConstantKnockback(); // Function Madness.MadCharAI_VolcanoBoss.StartConstantKnockback // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6910
	void SpawnJumpAttackLandingMarker(struct FVector InLandingLocation, float InLifespan, float InRadius); // Function Madness.MadCharAI_VolcanoBoss.SpawnJumpAttackLandingMarker // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15b6800
	void SetRotationAttackStateMulticast(enum class EAttackState InNewAttackState); // Function Madness.MadCharAI_VolcanoBoss.SetRotationAttackStateMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6780
	void SetLaserAttackStateMulticast(enum class EAttackState InNewAttackState); // Function Madness.MadCharAI_VolcanoBoss.SetLaserAttackStateMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6700
	void SetChargeAttackState(enum class EAttackState InNewAttackState); // Function Madness.MadCharAI_VolcanoBoss.SetChargeAttackState // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6680
	void SetBlastMeshVisibility(bool bInNewVisibility); // Function Madness.MadCharAI_VolcanoBoss.SetBlastMeshVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b65f0
	void ResetReadyForTransition(int32_t InPhase); // Function Madness.MadCharAI_VolcanoBoss.ResetReadyForTransition // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6570
	void ResetPhaseEndLock(); // Function Madness.MadCharAI_VolcanoBoss.ResetPhaseEndLock // (Final|Native|Public|BlueprintCallable) // @ game+0x15b6550
	void ResetBossLogicMulticast(); // Function Madness.MadCharAI_VolcanoBoss.ResetBossLogicMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b6530
	void ReinitHealthBar(); // Function Madness.MadCharAI_VolcanoBoss.ReinitHealthBar // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b6510
	void PlayKnockbackReactionMulticast(struct FVector InIKTargetLocationInComponentSpace); // Function Madness.MadCharAI_VolcanoBoss.PlayKnockbackReactionMulticast // (Net|Native|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x15b6490
	void OnRotationAttackEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadCharAI_VolcanoBoss.OnRotationAttackEndOverlap // (Final|Native|Private) // @ game+0x15b6350
	void OnRotationAttackBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_VolcanoBoss.OnRotationAttackBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x15b60e0
	void OnProximityAreaBeginOverlap(struct UPrimitiveComponent* InOverlappedComponent, struct AActor* InOtherActor, struct UPrimitiveComponent* InOtherComp, int32_t InOtherBodyIndex, bool bInFromSweep, struct FHitResult InSweepResult); // Function Madness.MadCharAI_VolcanoBoss.OnProximityAreaBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x15b5e70
	void OnPhase2HideMulticast(bool bInHide); // Function Madness.MadCharAI_VolcanoBoss.OnPhase2HideMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b5de0
	void OnMeshComponentHit(struct UPrimitiveComponent* InHitComponent, struct AActor* InOtherActor, struct UPrimitiveComponent* InOtherComp, struct FVector InNormalImpulse, struct FHitResult InHit); // Function Madness.MadCharAI_VolcanoBoss.OnMeshComponentHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x15b5bb0
	void OnLaserAttackOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_VolcanoBoss.OnLaserAttackOverlap // (Final|Native|Private|HasOutParms) // @ game+0x15b5940
	void OnDamage(struct FTakeHitInfo TakeHitInfo); // Function Madness.MadCharAI_VolcanoBoss.OnDamage // (Final|Native|Private) // @ game+0x15b5640
	void OnChargeAreaBeginOverlap(struct UPrimitiveComponent* InOverlappedComponent, struct AActor* InOtherActor, struct UPrimitiveComponent* InOtherComp, int32_t InOtherBodyIndex, bool bInFromSweep, struct FHitResult InSweepResult); // Function Madness.MadCharAI_VolcanoBoss.OnChargeAreaBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x15b53d0
	void OnBlastMeshLoaded(struct UBlastMesh* BlastMesh, struct UBlastMeshComponent* BlastMeshComponent, enum class None DataIndex); // Function Madness.MadCharAI_VolcanoBoss.OnBlastMeshLoaded // (Final|Native|Private) // @ game+0x15b52d0
	void OnBlastMeshDestroyed(struct UBlastMeshComponent* InBlastMeshComponent); // Function Madness.MadCharAI_VolcanoBoss.OnBlastMeshDestroyed // (Final|Native|Private) // @ game+0x15b5250
	void KillBoss(struct AMadBaseCharacter* PlayerInstigator); // Function Madness.MadCharAI_VolcanoBoss.KillBoss // (Final|Native|Protected|BlueprintCallable) // @ game+0x15b51d0
	bool IsTargetInFront(float InDotMarginFromMiddle, bool bOutIsValid); // Function Madness.MadCharAI_VolcanoBoss.IsTargetInFront // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b50f0
	bool IsReadyForPhaseTransition(); // Function Madness.MadCharAI_VolcanoBoss.IsReadyForPhaseTransition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b50c0
	void InitializeWaveForce(struct ATileFloorActor* InTileFloorActor); // Function Madness.MadCharAI_VolcanoBoss.InitializeWaveForce // (Final|Native|Public|BlueprintCallable) // @ game+0x15b5040
	void InitializeHighWallJumpSpots(struct AActor* InStartPointCustom, struct TArray<struct AActor*> InStartPoints, struct TArray<struct AActor*> InMirrorStartPoints); // Function Madness.MadCharAI_VolcanoBoss.InitializeHighWallJumpSpots // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15b4ee0
	void InitializeHealthBarMulticast(); // Function Madness.MadCharAI_VolcanoBoss.InitializeHealthBarMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b4ec0
	void HideMeshAfterDeathMulticast(); // Function Madness.MadCharAI_VolcanoBoss.HideMeshAfterDeathMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b4ea0
	struct FTransform GetTransformForPhase(int32_t InPhase); // Function Madness.MadCharAI_VolcanoBoss.GetTransformForPhase // (Native|Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x15b4de0
	struct FVector GetTargetActorLocation(bool bOutIsValid); // Function Madness.MadCharAI_VolcanoBoss.GetTargetActorLocation // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b4d30
	enum class EFWDiscreteDistance GetDiscreteDistanceToTarget(); // Function Madness.MadCharAI_VolcanoBoss.GetDiscreteDistanceToTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b4d00
	struct UAnimMontage* GetCurrentPhaseWalkCycleAnimMontage(bool bInRunMontage); // Function Madness.MadCharAI_VolcanoBoss.GetCurrentPhaseWalkCycleAnimMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b4c60
	void EnableWallMarkerMulticast(bool bInEnable, float InDelay); // Function Madness.MadCharAI_VolcanoBoss.EnableWallMarkerMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b4b90
	void EnableMeltedStateWeakSpotsMulticast(); // Function Madness.MadCharAI_VolcanoBoss.EnableMeltedStateWeakSpotsMulticast // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15b4b70
	void EnableMeltedState(bool bInEnable); // Function Madness.MadCharAI_VolcanoBoss.EnableMeltedState // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x15b4ab0
	void EnableCollisionMulticast(bool bEnable); // Function Madness.MadCharAI_VolcanoBoss.EnableCollisionMulticast // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15b4a20
	void DisableMeleeIKAnimStateMulticast(); // Function Madness.MadCharAI_VolcanoBoss.DisableMeleeIKAnimStateMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b4a00
	void DisableHeathBarMulticast(); // Function Madness.MadCharAI_VolcanoBoss.DisableHeathBarMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b49e0
	void ClearMeltedStateTimeout(); // Function Madness.MadCharAI_VolcanoBoss.ClearMeltedStateTimeout // (Final|Native|Public|BlueprintCallable) // @ game+0x15b49c0
	void CheckDotToPlayer(); // Function Madness.MadCharAI_VolcanoBoss.CheckDotToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x15b49a0
	void ChangeLookAtClampAngleMulticast(float InLookAtClampAngle); // Function Madness.MadCharAI_VolcanoBoss.ChangeLookAtClampAngleMulticast // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15b4920
	void ChangeBossState(enum class EVolcanoBossState InNewState); // Function Madness.MadCharAI_VolcanoBoss.ChangeBossState // (Final|Native|Public|BlueprintCallable) // @ game+0x15b48a0
	void ChangeBossCombatState(enum class EVolcanoBossCombatState InNewState); // Function Madness.MadCharAI_VolcanoBoss.ChangeBossCombatState // (Final|Native|Public|BlueprintCallable) // @ game+0x15b4820
	void AssignHighWallJumpActorHelper(); // Function Madness.MadCharAI_VolcanoBoss.AssignHighWallJumpActorHelper // (Final|Native|Public|BlueprintCallable) // @ game+0x15b4800
	void ApplyTileImpulse(struct FVector InLocation, float InSpeed, float InImpulseWidth, float InImpulseAmount, float InRange); // Function Madness.MadCharAI_VolcanoBoss.ApplyTileImpulse // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15b4660
	void AddWeakSpots(struct FWeakSpots InWeakSpotData); // Function Madness.MadCharAI_VolcanoBoss.AddWeakSpots // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x15b45a0
};

// Class Madness.MadCharAI_VolcanoSpider
// Size: 0x1820 (Inherited: 0x1790)
struct AMadCharAI_VolcanoSpider : AMadCharAI {
	struct UMadExplosionTemplate* ExplosionTemplate; // 0x1788(0x08)
	char UnknownData_1798_0 : 7; // 0x1798(0x01)
	bool bShouldHide : 1; // 0x1790(0x01)
	struct FName ExplodeBoneName; // 0x1794(0x08)
	struct FGameplayTagContainer SupressExplosionTags; // 0x17a0(0x20)
	struct UMadOrientToGroundComponent* OrientToGroundComp; // 0x17c0(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17c8(0x08)
	bool bCanPlayLandingAnimation : 1; // 0x17d0(0x01)
	char UnknownData_17D1[0x3]; // 0x17d1(0x03)
	struct FRotator PostLandingRotationRate; // 0x17d4(0x0c)
	struct FMontageAssetSelector LandingMontage; // 0x17e0(0x20)
	struct UAnimMontage* InitialWalkingDownMotange; // 0x1800(0x08)
	char UnknownData_1808_0 : 7; // 0x1808(0x01)
	bool bHasSuppressedExplosionTags : 1; // 0x1808(0x01)
	char UnknownData_1809[0x17]; // 0x1809(0x17)

	void UpdateSupressExplosion(); // Function Madness.MadCharAI_VolcanoSpider.UpdateSupressExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x15bac20
	bool SpawnSpiderExplosion(); // Function Madness.MadCharAI_VolcanoSpider.SpawnSpiderExplosion // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15ba4d0
	void HideAfterDeath(); // Function Madness.MadCharAI_VolcanoSpider.HideAfterDeath // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15a7340
	struct FVector GetExplosionLocation(); // Function Madness.MadCharAI_VolcanoSpider.GetExplosionLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8d50
};

// Class Madness.MadCharAI_VolcanoSpider_Minion
// Size: 0x18e0 (Inherited: 0x1840)
struct AMadCharAI_VolcanoSpider_Minion : AMadTickCharacter {
	struct FMontageAssetSelector LandingMontage; // 0x1840(0x20)
	struct FRotator DefaultRotationRate; // 0x1860(0x0c)
	float SplineMovementSpeed; // 0x186c(0x04)
	float MaxHealth; // 0x1870(0x04)
	float SplineMovementUpdateDelta; // 0x1874(0x04)
	struct UParticleSystem* InitialParticlesTemplate; // 0x1878(0x08)
	struct UParticleSystem* HideParticlesTemplate; // 0x1880(0x08)
	float HideEffectsDelay; // 0x1888(0x04)
	char UnknownData_188C[0x4]; // 0x188c(0x04)
	struct UExplosionTemplate* ExplosionTemplate; // 0x1890(0x08)
	struct FMulticastInlineDelegate OnMinionFinished; // 0x1898(0x10)
	struct USplineComponent* SplineComponent; // 0x18a8(0x08)
	char UnknownData_18B0[0x30]; // 0x18b0(0x30)

	void SpawnEffectParticles(bool bOnSpawn); // Function Madness.MadCharAI_VolcanoSpider_Minion.SpawnEffectParticles // (Net|Native|Event|NetMulticast|Protected) // @ game+0x15aa680
	void OnMinionKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadCharAI_VolcanoSpider_Minion.OnMinionKilled // (Final|Native|Private) // @ game+0x15b93e0
	void OnLifetimeEnded(); // Function Madness.MadCharAI_VolcanoSpider_Minion.OnLifetimeEnded // (Final|Native|Private) // @ game+0x15b93c0
	void OnExplode(); // Function Madness.MadCharAI_VolcanoSpider_Minion.OnExplode // (Final|Native|Private) // @ game+0x15b93a0
	bool IsUsingSpline(); // Function Madness.MadCharAI_VolcanoSpider_Minion.IsUsingSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8f90
	void Initialize(enum class EMinionInitType InitType, struct FMinionInitData InitData); // Function Madness.MadCharAI_VolcanoSpider_Minion.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8e90
};

// Class Madness.MadCharAI_Yagak
// Size: 0x1b00 (Inherited: 0x1800)
struct AMadCharAI_Yagak : AMadCharAI_BossBase {
	struct TArray<struct AActor*> RiftWyrmTargets; // 0x1800(0x10)
	char UnknownData_1810[0x8]; // 0x1810(0x08)
	struct TArray<struct AMadPlayerCharacter*> CleaverOverlappedPlayers; // 0x1818(0x10)
	struct TArray<struct AMadPlayerCharacter*> ChainDamagedPlayers; // 0x1828(0x10)
	struct TArray<struct AMadPlayerCharacter*> AlreadyHitPlayers; // 0x1838(0x10)
	struct TArray<int32_t> BossFightPhaseOrder; // 0x1848(0x10)
	float FlyingAdditiveMontagePlayRate; // 0x1858(0x04)
	float FlyingAdditiveMontageBlendOutTime; // 0x185c(0x04)
	struct UAnimMontage* FlyingAdditiveMontage; // 0x1860(0x08)
	struct FName FlyingAdditiveMontageStartingSection; // 0x1868(0x08)
	struct UStaticMeshComponent* SM_ChainsHookLeft; // 0x1870(0x08)
	struct UStaticMeshComponent* SM_ChainsHookRight; // 0x1878(0x08)
	struct UStaticMeshComponent* Cleaver; // 0x1880(0x08)
	struct UCapsuleComponent* CleaverDamageArea; // 0x1888(0x08)
	struct USplineChainComponent* SplineChainRight; // 0x1890(0x08)
	struct USplineChainComponent* SplineChainLeft; // 0x1898(0x08)
	struct UMaterialInterface* CleaverSourceMaterial; // 0x18a0(0x08)
	struct UAnimMontage* FlyingHitReactionLight; // 0x18a8(0x08)
	struct UAnimMontage* FlyingHitReactionHeavy; // 0x18b0(0x08)
	struct UGameplayEffect* FlyingHitReactionEffect; // 0x18b8(0x08)
	struct FName FlyingHitSectionRight; // 0x18c0(0x08)
	struct FName FlyingHitSectionLeft; // 0x18c8(0x08)
	struct FName CleaverParentSocket; // 0x18d0(0x08)
	struct FName ChainsHookRightParentSocket; // 0x18d8(0x08)
	struct FName ChainsHookLeftParentSocket; // 0x18e0(0x08)
	struct UMaterialInterface* CleaverMaterial; // 0x18e8(0x08)
	struct UMaterialInterface* HeadMaterial; // 0x18f0(0x08)
	struct UMaterialInterface* BodyMaterial; // 0x18f8(0x08)
	struct FGameplayTag FlyingHitReactionTag; // 0x1900(0x08)
	char UnknownData_1908_0 : 7; // 0x1908(0x01)
	bool bInGroundedMode : 1; // 0x1908(0x01)
	char UnknownData_1909_0 : 7; // 0x1909(0x01)
	bool bHoldingChains : 1; // 0x1909(0x01)
	char UnknownData_190A[0x2]; // 0x190a(0x02)
	struct FName LeftCapsuleSocketA; // 0x190c(0x08)
	struct FName LeftCapsuleSocketB; // 0x1914(0x08)
	float LeftCapsuleRadius; // 0x191c(0x04)
	struct FName RightCapsuleSocketA; // 0x1920(0x08)
	struct FName RightCapsuleSocketB; // 0x1928(0x08)
	float RightCapsuleRadius; // 0x1930(0x04)
	char UnknownData_1934[0x4]; // 0x1934(0x04)
	struct UDamageType* CleaverLightDamageType; // 0x1938(0x08)
	struct UDamageType* CleaverHeavyDamageType; // 0x1940(0x08)
	struct UDamageType* ChainsLightDamageType; // 0x1948(0x08)
	struct UDamageType* ChainsHeavyDamageType; // 0x1950(0x08)
	struct USoundMix* SilentSoundMix; // 0x1958(0x08)
	float CleaverLightDamage; // 0x1960(0x04)
	float CleaverHeavyDamage; // 0x1964(0x04)
	float ChainsLightDamage; // 0x1968(0x04)
	float ChainsHeavyDamage; // 0x196c(0x04)
	struct UAnimMontage* ChainsTurnLeft; // 0x1970(0x08)
	struct UAnimMontage* ChainsTurnRight; // 0x1978(0x08)
	struct UAnimMontage* ChainsTurnLeftAdditive; // 0x1980(0x08)
	struct UAnimMontage* ChainsTurnRightAdditive; // 0x1988(0x08)
	struct FName TurnMontage45; // 0x1990(0x08)
	struct FName TurnMontage90; // 0x1998(0x08)
	struct FName TurnMontage135; // 0x19a0(0x08)
	struct FName TurnMontage180; // 0x19a8(0x08)
	struct UParticleSystemComponent* pYagakBeam; // 0x19b0(0x08)
	struct UTimelineComponent* CleaverEmissiveAlphaTimeline; // 0x19b8(0x08)
	struct UCurveFloat* CleaverEmissiveAlphaCurve; // 0x19c0(0x08)
	struct UTimelineComponent* SandShockwaveAlphaTimeline; // 0x19c8(0x08)
	struct UCurveFloat* SandShockwaveAlphaCurve; // 0x19d0(0x08)
	struct AYagakAVWaveProjectile* WaveProjectile; // 0x19d8(0x08)
	struct UMaterialInstanceDynamic* CleaverDynamicMaterial; // 0x19e0(0x08)
	struct UMaterialInstanceDynamic* HeadDynamicMaterial; // 0x19e8(0x08)
	struct UMaterialInstanceDynamic* BodyDynamicMaterial; // 0x19f0(0x08)
	struct UMaterialParameterCollectionInstance* SandMaterialCollection; // 0x19f8(0x08)
	struct FTimerHandle DeformTimer; // 0x1a00(0x08)
	struct FGameplayTagContainer HeavyDamageTags; // 0x1a08(0x20)
	struct AMadBaseCharacter* ChainsCatchedCharacter; // 0x1a28(0x08)
	struct UMadAnimInstance_Yagak* AnimBPRef; // 0x1a30(0x08)
	char UnknownData_1A38_0 : 7; // 0x1a38(0x01)
	bool Phase03IsInRageModeLevel01 : 1; // 0x1a38(0x01)
	char UnknownData_1A39_0 : 7; // 0x1a39(0x01)
	bool Phase03IsInRageModeLevel02 : 1; // 0x1a39(0x01)
	char UnknownData_1A3A[0x6]; // 0x1a3a(0x06)
	struct TArray<struct AChainsCrossAreaSingleLine*> ChainsCrossFireAreaReferences; // 0x1a40(0x10)
	struct FMulticastInlineDelegate Phase02SpawnMinions; // 0x1a50(0x10)
	struct FMulticastInlineDelegate Phase02AllMinionsDead; // 0x1a60(0x10)
	struct FMulticastInlineDelegate BossDied; // 0x1a70(0x10)
	struct FName CleaverMaterialStrength; // 0x1a80(0x08)
	struct FName CleaverMaterialStrengthExt; // 0x1a88(0x08)
	float StrengthLow; // 0x1a90(0x04)
	float StrengthHigh; // 0x1a94(0x04)
	float StrengthExtLow; // 0x1a98(0x04)
	float StrengthExtHigh; // 0x1a9c(0x04)
	float SwordEmissiveAlphaLength; // 0x1aa0(0x04)
	struct FName HitLocationSocket; // 0x1aa4(0x08)
	struct FName SandLocationParameter; // 0x1aac(0x08)
	struct FName SandSpreadParameter; // 0x1ab4(0x08)
	char UnknownData_1ABC[0x14]; // 0x1abc(0x14)
	struct TArray<struct AMadAnomalyTurret*> SpawnedTurrets; // 0x1ad0(0x10)
	struct AYagakRiftEnergy* RiftEnergy; // 0x1ae0(0x08)
	char UnknownData_1AE8[0x8]; // 0x1ae8(0x08)
	struct UMadGameplayEffect* GlobalCooldownClass; // 0x1af0(0x08)
	char UnknownData_1AF8[0x8]; // 0x1af8(0x08)

	void UpdateCleaverVisibility(bool bHide); // Function Madness.MadCharAI_Yagak.UpdateCleaverVisibility // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x15bab90
	void UpdateChainsVisibility(bool bHide); // Function Madness.MadCharAI_Yagak.UpdateChainsVisibility // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x15bab00
	void TurnCharacterToTargetEnemy(float TurningRotationSpeedScale, bool bUseAdditive); // Function Madness.MadCharAI_Yagak.TurnCharacterToTargetEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x15baa30
	void TakePointDamageHandler(struct AActor* DamagedActor, float Damage, struct AController* InstigatedBy, struct FVector HitLocation, struct UPrimitiveComponent* FHitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct UDamageType* DamageType, struct AActor* DamageCauser); // Function Madness.MadCharAI_Yagak.TakePointDamageHandler // (Final|Native|Protected|HasDefaults) // @ game+0x15ba760
	void StopSandDeformation(); // Function Madness.MadCharAI_Yagak.StopSandDeformation // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba740
	void StartSandShockwaveEffect(); // Function Madness.MadCharAI_Yagak.StartSandShockwaveEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15ba720
	void StartSandDeformation(); // Function Madness.MadCharAI_Yagak.StartSandDeformation // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba700
	void StartCleaverEmissiveEffect(); // Function Madness.MadCharAI_Yagak.StartCleaverEmissiveEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15ba6e0
	void SpawnWaveProjectile(struct UParticleSystem* WaveParticle, struct AMadNavmeshProjectile* ProjectileClass, struct FVector Ground, struct FVector Direction, float HpDamage, float MultiplierDamage); // Function Madness.MadCharAI_Yagak.SpawnWaveProjectile // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x15ba500
	void SpawnChainLightEffect(struct UParticleSystem* BeamEmitter, struct AActor* Target); // Function Madness.MadCharAI_Yagak.SpawnChainLightEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15ba400
	void SetSandWyrmSpawnVolumes(struct TArray<struct AVolume*> Volumes); // Function Madness.MadCharAI_Yagak.SetSandWyrmSpawnVolumes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15ba300
	void SetRiftWyrmTargets(struct TArray<struct AActor*> Targets); // Function Madness.MadCharAI_Yagak.SetRiftWyrmTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba220
	void SetMeleeDamageOpen(bool bValue, bool bUp); // Function Madness.MadCharAI_Yagak.SetMeleeDamageOpen // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba150
	void SandShockwaveAlphaUpdate(float Alpha); // Function Madness.MadCharAI_Yagak.SandShockwaveAlphaUpdate // (Final|Native|Public) // @ game+0x15b9ed0
	void SandShockwaveAlphaFinish(); // Function Madness.MadCharAI_Yagak.SandShockwaveAlphaFinish // (Final|Native|Public) // @ game+0x15b9eb0
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadCharAI_Yagak.OnOverlapEnd // (Final|Native|Protected) // @ game+0x15b99a0
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_Yagak.OnOverlapBegin // (Final|Native|Protected|HasOutParms) // @ game+0x15b9730
	void OnChainDamageEnd(struct USplineChainComponent* SourceChain, struct Acharacter* DamagedCharacter); // Function Madness.MadCharAI_Yagak.OnChainDamageEnd // (Final|Native|Protected) // @ game+0x15b9070
	void OnChainDamageBegin(struct USplineChainComponent* SourceChain, struct Acharacter* DamagedCharacter); // Function Madness.MadCharAI_Yagak.OnChainDamageBegin // (Final|Native|Protected) // @ game+0x15b8fb0
	bool GetMeleeDamageUpOpen(); // Function Madness.MadCharAI_Yagak.GetMeleeDamageUpOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8e10
	bool GetMeleeDamageOpen(); // Function Madness.MadCharAI_Yagak.GetMeleeDamageOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8de0
	bool GetIsHoldingChains(); // Function Madness.MadCharAI_Yagak.GetIsHoldingChains // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8d90
	struct UCapsuleComponent* GetCleaverDamageArea(); // Function Madness.MadCharAI_Yagak.GetCleaverDamageArea // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8ce0
	struct UStaticMeshComponent* GetChainHookRight(); // Function Madness.MadCharAI_Yagak.GetChainHookRight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8cb0
	struct UStaticMeshComponent* GetChainHookLeft(); // Function Madness.MadCharAI_Yagak.GetChainHookLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8c80
	void DestroyWaveProjectile(); // Function Madness.MadCharAI_Yagak.DestroyWaveProjectile // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15aa3a0
	void DestroyChainLightEffect(); // Function Madness.MadCharAI_Yagak.DestroyChainLightEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15b8c60
	void CleaverEmissiveAlphaUpdate(float Alpha); // Function Madness.MadCharAI_Yagak.CleaverEmissiveAlphaUpdate // (Final|Native|Public) // @ game+0x15b8be0
	void BackWeakSpotUpdate(bool bHideFur); // Function Madness.MadCharAI_Yagak.BackWeakSpotUpdate // (Net|Native|Event|NetMulticast|Protected) // @ game+0x15b8b20
	void ApplySilentSoundMix(bool bApply); // Function Madness.MadCharAI_Yagak.ApplySilentSoundMix // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8a90
	void AddDeformation(); // Function Madness.MadCharAI_Yagak.AddDeformation // (Final|Native|Protected) // @ game+0x15b8a70
};

// Class Madness.MadCharAI_Yagak_Chains
// Size: 0x1b50 (Inherited: 0x1b00)
struct AMadCharAI_Yagak_Chains : AMadCharAI_Yagak {
	struct UParticleSystemComponent* ParticleYagakHookLeft; // 0x1af8(0x08)
	struct UParticleSystemComponent* ParticleYagakHookRight; // 0x1b00(0x08)
	struct FScalableFloat ChainsLightDmg; // 0x1b08(0x20)
	struct FScalableFloat ChainsHeavyDmg; // 0x1b28(0x20)
};

// Class Madness.MadCharAI_Yagak_Cleaver
// Size: 0x1bb0 (Inherited: 0x1b00)
struct AMadCharAI_Yagak_Cleaver : AMadCharAI_Yagak {
	struct TArray<struct AMadPlayerCharacter*> TackleOverlappedPlayers; // 0x1af8(0x10)
	struct UCapsuleComponent* TackleDamageArea; // 0x1b08(0x08)
	struct UDamageType* TackleDamageType; // 0x1b10(0x08)
	struct UDamageType* MeleeDamageTypeClass; // 0x1b18(0x08)
	struct FGameplayTagContainer GameplayTagsToRemoveOnHit; // 0x1b20(0x20)
	struct FScalableFloat MeleeAttackBaseDamage; // 0x1b40(0x20)
	int32_t MinComboToPlayFinisher; // 0x1b60(0x04)
	float TackleDamage; // 0x1b64(0x04)
	float HostilesPathRefreshFrequency; // 0x1b68(0x04)
	float PredictionTime; // 0x1b6c(0x04)
	float MaxPredictionDistance; // 0x1b70(0x04)
	char UnknownData_1B7C_0 : 7; // 0x1b7c(0x01)
	bool bCleaverDamageEnabled : 1; // 0x1b74(0x01)
	char UnknownData_1B7D[0x23]; // 0x1b7d(0x23)
	struct TArray<struct FYagakHostileData> CurrentHostiles; // 0x1ba0(0x10)

	void ToggleLastAttackEndedInFront(); // Function Madness.MadCharAI_Yagak_Cleaver.ToggleLastAttackEndedInFront // (Final|Native|Public|BlueprintCallable) // @ game+0x15baa00
	void SetLastAttackEndedInFront(bool bInValue); // Function Madness.MadCharAI_Yagak_Cleaver.SetLastAttackEndedInFront // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba0d0
	void SetConsecutiveStrikesMissed(int32_t Count); // Function Madness.MadCharAI_Yagak_Cleaver.SetConsecutiveStrikesMissed // (Final|Native|Public|BlueprintCallable) // @ game+0x15ba050
	void SetConsecutiveStrikesHit(int32_t Count); // Function Madness.MadCharAI_Yagak_Cleaver.SetConsecutiveStrikesHit // (Final|Native|Public|BlueprintCallable) // @ game+0x15b9fd0
	void SetCleaverDamageEnabled(bool bEnabled); // Function Madness.MadCharAI_Yagak_Cleaver.SetCleaverDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x15b9f50
	void ResetComboCounter(); // Function Madness.MadCharAI_Yagak_Cleaver.ResetComboCounter // (Final|Native|Public|BlueprintCallable) // @ game+0x15b9e90
	void OnTackleDamageEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadCharAI_Yagak_Cleaver.OnTackleDamageEnd // (Final|Native|Protected) // @ game+0x15b9d50
	void OnTackleDamageBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_Yagak_Cleaver.OnTackleDamageBegin // (Final|Native|Protected|HasOutParms) // @ game+0x15b9ae0
	void OnCleaverOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCharAI_Yagak_Cleaver.OnCleaverOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x15b9130
	void IncreaseComboCounter(); // Function Madness.MadCharAI_Yagak_Cleaver.IncreaseComboCounter // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8e70
	struct UCapsuleComponent* GetTackleDamageArea(); // Function Madness.MadCharAI_Yagak_Cleaver.GetTackleDamageArea // (Final|Native|Public|BlueprintCallable) // @ game+0x15b8e40
	bool GetLastAttackEndedInFront(); // Function Madness.MadCharAI_Yagak_Cleaver.GetLastAttackEndedInFront // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8dc0
	int32_t GetConsecutiveStrikesMissed(); // Function Madness.MadCharAI_Yagak_Cleaver.GetConsecutiveStrikesMissed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8d30
	int32_t GetConsecutiveStrikesHit(); // Function Madness.MadCharAI_Yagak_Cleaver.GetConsecutiveStrikesHit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8d10
	bool CanPlayFinisher(); // Function Madness.MadCharAI_Yagak_Cleaver.CanPlayFinisher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15b8bb0
};

// Class Madness.MadChargingBeam
// Size: 0x3b8 (Inherited: 0x2f0)
struct AMadChargingBeam : AActor {
	struct UParticleSystemComponent* BeamEffect; // 0x2f0(0x08)
	struct UParticleSystemComponent* ImpactEffect; // 0x2f8(0x08)
	struct FName BeamEndLocationParamName; // 0x300(0x08)
	struct FScalableFloat BeamExplosionDamage; // 0x308(0x20)
	struct FScalableFloat BeamExplosionRange; // 0x328(0x20)
	struct UDamageType* ExplosionDamageType; // 0x348(0x08)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedback; // 0x350(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x378(0x28)
	struct UCameraShake* CameraShakeClass; // 0x3a0(0x08)
	float CameraShakeInnerRadius; // 0x3a8(0x04)
	float CameraShakeOuterRadius; // 0x3ac(0x04)
	char UnknownData_3B0[0x8]; // 0x3b0(0x08)

	void InitializeBeam(struct FVector EndLocation); // Function Madness.MadChargingBeam.InitializeBeam // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x15c22a0
};

// Class Madness.MadAnimNotify_AISpawner
// Size: 0x48 (Inherited: 0x38)
struct UMadAnimNotify_AISpawner : UAnimNotify {
	enum class EMadCharSpawnertAnimNotifyType NotifyType; // 0x38(0x01)
	char UnknownData_39[0x3]; // 0x39(0x03)
	struct FName CustomNotifyName; // 0x3c(0x08)
	char UnknownData_44[0x4]; // 0x44(0x04)
};

// Class Madness.MadCharSpawner
// Size: 0x400 (Inherited: 0x390)
struct AMadCharSpawner : ACharacterSpawner {
	struct FMulticastInlineDelegate OnAnimNotify; // 0x390(0x10)
	struct TMap<struct APawn*, int32_t> SpawnGroupTrak; // 0x3a0(0x50)
	int32_t EnemyLevel; // 0x3f0(0x04)
	char UnknownData_3F4[0x4]; // 0x3f4(0x04)
	struct UArrowComponent* Arrow; // 0x3f8(0x08)

	void RequestSpawnAIWithAbilityList(struct UObject* WorldContextObject, struct FFWAIArchetypeVariation ArchetypeVariation, struct FVector SpawnLocation, struct FRotator SpawnRotation, struct TArray<struct FNameWrapper> CustomLoadoutClasses, struct TArray<SoftClassProperty> InSelectedAbilities, struct FMontageAssetSelector Montage, enum class ETeam Team, struct AActor* SpawnInstigator, bool bDisableCollision); // Function Madness.MadCharSpawner.RequestSpawnAIWithAbilityList // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15c33d0
};

// Class Madness.MadChatterManager
// Size: 0x100 (Inherited: 0x100)
struct UMadChatterManager : UChatterManager {
};

// Class Madness.MadChatterVolume
// Size: 0x350 (Inherited: 0x328)
struct AMadChatterVolume : AVolume {
	struct FNameWrapper ChatterSpeakerID; // 0x328(0x10)
	struct FNameWrapper VoiceTypeID; // 0x338(0x10)
	struct AActor* Source; // 0x348(0x08)
};

// Class Madness.MadPlayerController
// Size: 0xb80 (Inherited: 0x930)
struct AMadPlayerController : ABasePlayerController {
	char UnknownData_930_0 : 7; // 0x930(0x01)
	bool bPlayerViewOverride : 1; // 0x928(0x01)
	struct FVector PlayerViewLocationOverride; // 0x92c(0x0c)
	struct FRotator PlayerViewRotationOverride; // 0x938(0x0c)
	char UnknownData_949[0x5f]; // 0x949(0x5f)
	struct FMulticastInlineDelegate OnAnyPlayerDBNOChanged; // 0x9a8(0x10)
	char UnknownData_9B8[0x30]; // 0x9b8(0x30)
	struct UFrameworkUserWidget* SkipMovieWidgetClass; // 0x9e8(0x08)
	char UnknownData_9F0[0x8]; // 0x9f0(0x08)
	struct UFrameworkUserWidget* SkipMovieWidget; // 0x9f8(0x08)
	char UnknownData_A00_0 : 7; // 0xa00(0x01)
	bool bDebugShowAllQuests : 1; // 0xa00(0x01)
	char UnknownData_A01[0x17]; // 0xa01(0x17)
	struct FMulticastInlineDelegate OnCombatNumberAdded; // 0xa18(0x10)
	struct TArray<struct FMadGroupedCombatNumber> GroupedCombatNumbers; // 0xa28(0x10)
	float AudioListenerOffsetDistance; // 0xa38(0x04)
	char UnknownData_A3C[0x1c]; // 0xa3c(0x1c)
	struct FMulticastInlineDelegate OnEnterUIState; // 0xa58(0x10)
	struct FMulticastInlineDelegate OnLeaveUIState; // 0xa68(0x10)
	struct FMulticastInlineDelegate OnUIScreenTabChanged; // 0xa78(0x10)
	struct FMulticastInlineDelegate OnUIStateJSScriptReady; // 0xa88(0x10)
	char UnknownData_A98[0x18]; // 0xa98(0x18)
	struct FName LastLoadedUIStateName; // 0xab0(0x08)
	struct TArray<struct FName> SharedQuests; // 0xab8(0x10)
	char UnknownData_AC8[0x20]; // 0xac8(0x20)
	struct UMadUIManager* UIManager; // 0xae8(0x08)
	struct FMulticastInlineDelegate OnEnemyKilledEvent; // 0xaf0(0x10)
	int32_t Dbg_EnemyKilledCounter; // 0xb00(0x04)
	char UnknownData_B04[0x24]; // 0xb04(0x24)
	struct AMadTripWire* TripWireClass; // 0xb28(0x08)
	char UnknownData_B30[0x30]; // 0xb30(0x30)
	char UnknownData_B60_0 : 7; // 0xb60(0x01)
	bool bHideEnemyMarkers : 1; // 0xb60(0x01)
	char UnknownData_B61[0x7]; // 0xb61(0x07)
	struct UMadInputColorComponent* InputDeviceColorComponent; // 0xb68(0x08)
	struct UMadPlayerForceFeedbackData* ForceFeedbackData; // 0xb70(0x08)
	char UnknownData_B78[0x8]; // 0xb78(0x08)

	void ToggleEnemyMarkers(); // Function Madness.MadPlayerController.ToggleEnemyMarkers // (Final|Exec|Native|Public) // @ game+0x16a6580
	bool ShouldHideEnemyMarkers(); // Function Madness.MadPlayerController.ShouldHideEnemyMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a6530
	void SetInputActionsBlocked(bool bBlocked, struct TSet<struct FName> ActionInputs); // Function Madness.MadPlayerController.SetInputActionsBlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x16a6320
	void SetDebugShowAllQuests(bool bSet); // Function Madness.MadPlayerController.SetDebugShowAllQuests // (Final|Native|Public|BlueprintCallable) // @ game+0x16a62a0
	void ServerUnlockAchievement(struct FName InAchievementID); // Function Madness.MadPlayerController.ServerUnlockAchievement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a6210
	void ServerSuggestQuest(struct FName QuestID); // Function Madness.MadPlayerController.ServerSuggestQuest // (Net|Native|Event|Public|NetServer) // @ game+0x16a60f0
	void ServerShowCinematicSkipForOtherPlayers(); // Function Madness.MadPlayerController.ServerShowCinematicSkipForOtherPlayers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a60d0
	void ServerShowCinematicSkip(); // Function Madness.MadPlayerController.ServerShowCinematicSkip // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a60b0
	void ServerSetToastBroadcastEnabled(bool bEnabled); // Function Madness.MadPlayerController.ServerSetToastBroadcastEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a6020
	void ServerSendChallengeDeltaTime(enum class EChallengeTimeStatus InTimeStatus); // Function Madness.MadPlayerController.ServerSendChallengeDeltaTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5fa0
	void ServerResetQuestPool(struct UMadQuestPool* InPool); // Function Madness.MadPlayerController.ServerResetQuestPool // (Net|Native|Event|Public|NetServer) // @ game+0x16a5f10
	void ServerRequestSave(); // Function Madness.MadPlayerController.ServerRequestSave // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5ef0
	void ServerOnMultiInteractionChanged(struct UMadMultiInteractionComponent* Interaction, bool Status); // Function Madness.MadPlayerController.ServerOnMultiInteractionChanged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5e20
	void ServerNotifyClientsOnChangeCharacter(struct FString PlayerName); // Function Madness.MadPlayerController.ServerNotifyClientsOnChangeCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5d80
	void ServerHideCinematicSkip(); // Function Madness.MadPlayerController.ServerHideCinematicSkip // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x16a5d60
	void ServerFinishDemo(); // Function Madness.MadPlayerController.ServerFinishDemo // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16a5d40
	void ServerCloseAllWindowsForAllPlayers(); // Function Madness.MadPlayerController.ServerCloseAllWindowsForAllPlayers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5d20
	void ServerClaimReward(struct FUniversalReward Reward, struct FText SourceName, struct AActor* SourceActor, enum class EMadRarityRollSource SourceRarity, struct FName QuestOrObjectiveID, bool bIsRepeatableReward, int32_t SelectableRewardIndex); // Function Madness.MadPlayerController.ServerClaimReward // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16a5a90
	void ServerCheckForStoryProgressMismatch(); // Function Madness.MadPlayerController.ServerCheckForStoryProgressMismatch // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16a5a70
	void SelectSingleOrMatchmaking(); // Function Madness.MadPlayerController.SelectSingleOrMatchmaking // (Final|Native|Public|BlueprintCallable) // @ game+0x16a5a50
	void SelectPlayerPath(); // Function Madness.MadPlayerController.SelectPlayerPath // (Final|Native|Public|BlueprintCallable) // @ game+0x16a5a30
	void OnShowTeamMateIsDying(struct AMadPlayerCharacter* DyingTeamMate); // Function Madness.MadPlayerController.OnShowTeamMateIsDying // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnShowCombatTextExpChanged(bool bNewShowExp); // Function Madness.MadPlayerController.OnShowCombatTextExpChanged // (Final|Native|Public) // @ game+0x16a59a0
	void OnShowCombatTextDmgChanged(bool bNewShowDmg); // Function Madness.MadPlayerController.OnShowCombatTextDmgChanged // (Final|Native|Public) // @ game+0x16a5910
	void OnSaveCompleted(); // Function Madness.MadPlayerController.OnSaveCompleted // (Final|Native|Public) // @ game+0x16a58f0
	void OnRewardItemsClaimed(struct TArray<struct AMadItem*> Items); // Function Madness.MadPlayerController.OnRewardItemsClaimed // (Final|Native|Private|HasOutParms) // @ game+0x16a5840
	void OnPlayerHasBeenRevived(struct AMadPlayerCharacter* RevivedCharacter, struct AMadPlayerCharacter* Reviver); // Function Madness.MadPlayerController.OnPlayerHasBeenRevived // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnObjectiveStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bLoading); // Function Madness.MadPlayerController.OnObjectiveStatusChanged // (Native|Protected) // @ game+0x16a5420
	void OnItemPickedUp(struct AMadItem* InItem); // Function Madness.MadPlayerController.OnItemPickedUp // (Final|Native|Public) // @ game+0x16a52e0
	void OnInvertAxisChanged(bool bInvert); // Function Madness.MadPlayerController.OnInvertAxisChanged // (Final|Native|Protected) // @ game+0x16a5250
	void OnHideTeamMateIsDying(struct AMadPlayerCharacter* DyingTeamMate); // Function Madness.MadPlayerController.OnHideTeamMateIsDying // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnForceFeedbackChanged(bool InForceFeedbackEnabled); // Function Madness.MadPlayerController.OnForceFeedbackChanged // (Final|Native|Protected) // @ game+0x16a5100
	void OnCloseAllWindowsRequest(); // Function Madness.MadPlayerController.OnCloseAllWindowsRequest // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	bool HasValidPlayer(); // Function Madness.MadPlayerController.HasValidPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a4f30
	struct FColor GetInputDeviceColor(); // Function Madness.MadPlayerController.GetInputDeviceColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a4ed0
	struct TArray<struct AMadActorWithPreview*> GetAllSpawnedConstructs(); // Function Madness.MadPlayerController.GetAllSpawnedConstructs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a4e50
	void ForceRebindUIManager(); // Function Madness.MadPlayerController.ForceRebindUIManager // (Final|Exec|Native|Public) // @ game+0x16a4e30
	void DestroyLastConstructOfClass(struct AMadActorWithPreview* InConstructClass); // Function Madness.MadPlayerController.DestroyLastConstructOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x16a4db0
	void ClientUnlockAchievement(struct FName InAchievementID); // Function Madness.MadPlayerController.ClientUnlockAchievement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4d20
	void ClientToast_Shard(struct FMadToastShard InToast); // Function Madness.MadPlayerController.ClientToast_Shard // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4b00
	void ClientToast_Resource(struct FMadToastResource InToast); // Function Madness.MadPlayerController.ClientToast_Resource // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4960
	void ClientToast_Mod(struct FMadToastMod InToast); // Function Madness.MadPlayerController.ClientToast_Mod // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4800
	void ClientToast_Item(struct FMadToastItem InToast); // Function Madness.MadPlayerController.ClientToast_Item // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4540
	void ClientToast_Ammo(struct FMadToastAmmo InToast); // Function Madness.MadPlayerController.ClientToast_Ammo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4320
	void ClientToast(struct FMadToastDTO ToastDTO); // Function Madness.MadPlayerController.ClientToast // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4250
	void ClientShowQuestIsAlreadyInProgressInfo(struct FName IDName); // Function Madness.MadPlayerController.ClientShowQuestIsAlreadyInProgressInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a41c0
	void ClientShowCinematicSkip(); // Function Madness.MadPlayerController.ClientShowCinematicSkip // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a41a0
	void ClientSetToastBroadcastEnabled(bool bEnabled); // Function Madness.MadPlayerController.ClientSetToastBroadcastEnabled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4110
	void ClientSetBlockInput(bool bInBlockInput); // Function Madness.MadPlayerController.ClientSetBlockInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a4080
	void ClientSetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Madness.MadPlayerController.ClientSetAudioListenerOverride // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x16a3f50
	void ClientRequestSaveOnItemsClaimed(); // Function Madness.MadPlayerController.ClientRequestSaveOnItemsClaimed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x16a3f30
	void ClientReciveChallengeDeltaTime(int64_t Ticks, bool bDeltaCorrected, enum class EChallengeTimeStatus InTimeStatus); // Function Madness.MadPlayerController.ClientReciveChallengeDeltaTime // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x16a3e20
	void ClientPromptHostChangeCharacter(struct FString PlayerName); // Function Madness.MadPlayerController.ClientPromptHostChangeCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3d80
	void ClientMakeUIManager(); // Function Madness.MadPlayerController.ClientMakeUIManager // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3d60
	void ClientHideCinematicSkip(); // Function Madness.MadPlayerController.ClientHideCinematicSkip // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x16a3d40
	void ClientEndLevelTransition(); // Function Madness.MadPlayerController.ClientEndLevelTransition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3d20
	void ClientCorrectStoryMismatchFacts(); // Function Madness.MadPlayerController.ClientCorrectStoryMismatchFacts // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3d00
	void ClientCloseAllWindows(); // Function Madness.MadPlayerController.ClientCloseAllWindows // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x16a3ce0
	void ClientClearAudioListenerOverride(); // Function Madness.MadPlayerController.ClientClearAudioListenerOverride // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3cc0
	void ClientBroadcastCombatNumber(struct FMadCombatNumber CombatNumber); // Function Madness.MadPlayerController.ClientBroadcastCombatNumber // (Net|Native|Event|Protected|NetClient) // @ game+0x16a3c10
	void ClientBeginLevelTransition(); // Function Madness.MadPlayerController.ClientBeginLevelTransition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3bf0
	void ClientActivateCameraLookAt(struct FLookAtParams LookAtParams); // Function Madness.MadPlayerController.ClientActivateCameraLookAt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3ad0
	void ClientAckSave(bool bSafeToSave); // Function Madness.MadPlayerController.ClientAckSave // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16a3a40
	bool CanSkipMovie(); // Function Madness.MadPlayerController.CanSkipMovie // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a3a10
	void BroadcastCombatNumber(struct FMadCombatNumber CombatNumber); // Function Madness.MadPlayerController.BroadcastCombatNumber // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x16a3950
};

// Class Madness.MadCheatManager
// Size: 0xd0 (Inherited: 0x80)
struct UMadCheatManager : UBaseCheatManager {
	char UnknownData_80[0x10]; // 0x80(0x10)
	struct TArray<struct AMadItem*> CachedWeapons; // 0x90(0x10)
	struct FSoftClassPath KeyReflectorWidget_GamepadClass; // 0xa0(0x18)
	struct UUserWidget* KeyReflectorWidget_Gamepad; // 0xb8(0x08)
	char UnknownData_C0[0x10]; // 0xc0(0x10)

	void VoteTest(); // Function Madness.MadCheatManager.VoteTest // (Final|Exec|Native|Public) // @ game+0x15c7260
	void VoteAcceptState(bool bAccept); // Function Madness.MadCheatManager.VoteAcceptState // (Final|Exec|Native|Public) // @ game+0x15c71d0
	void Mad.SaveSystemV2.WipeAllSlots(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.WipeAllSlots // (Final|Exec|Native|Protected) // @ game+0x15c0f60
	void Mad.SaveSystemV2.SaveCurrentCharacter(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.SaveCurrentCharacter // (Final|Exec|Native|Protected) // @ game+0x15c71b0
	void Mad.SaveSystemV2.DeleteCharacter(struct FString CharacterName); // Function Madness.MadCheatManager.Mad.SaveSystemV2.DeleteCharacter // (Final|Exec|Native|Protected) // @ game+0x15c7110
	void Mad.SaveSystemV2.CreateNewCharacter(struct FString CharacterName, bool bSkipTutorial, enum class EMadGender Gender); // Function Madness.MadCheatManager.Mad.SaveSystemV2.CreateNewCharacter // (Final|Exec|Native|Protected) // @ game+0x15c6ff0
	void Mad.General.UpdateIniVersionFile(int32_t Version); // Function Madness.MadCheatManager.Mad.General.UpdateIniVersionFile // (Final|Exec|Native|Public) // @ game+0x15c6f70
	void Mad.Quest.Unlock(struct FName QuestID); // Function Madness.MadCheatManager.Mad.Quest.Unlock // (Final|Exec|Native|Public) // @ game+0x15c6ef0
	void Mad.Leveling.UnlockPath(enum class EMadnessSkillPath SkillPath); // Function Madness.MadCheatManager.Mad.Leveling.UnlockPath // (Final|Exec|Native|Protected) // @ game+0x15c6e70
	void Mad.Quest.UnlockCheckpoints(struct FName CheckpointId); // Function Madness.MadCheatManager.Mad.Quest.UnlockCheckpoints // (Final|Exec|Native|Public) // @ game+0x15c6df0
	void Mad.Leveling.UnlockAllSkillsFromPath(enum class EMadnessSkillPath SkillPath); // Function Madness.MadCheatManager.Mad.Leveling.UnlockAllSkillsFromPath // (Final|Exec|Native|Protected) // @ game+0x15c6d70
	void Mad.Inventory.UnlockAllMods(); // Function Madness.MadCheatManager.Mad.Inventory.UnlockAllMods // (Final|Exec|Native|Public) // @ game+0x15c6d50
	void Mad.Convoy.UnlockAllCustomizations(); // Function Madness.MadCheatManager.Mad.Convoy.UnlockAllCustomizations // (Final|Exec|Native|Public) // @ game+0x15c6d30
	void Mad.EnochAccolades.UnlockAchievement(struct FName AchievementID); // Function Madness.MadCheatManager.Mad.EnochAccolades.UnlockAchievement // (Final|Exec|Native|Public) // @ game+0x15c6cb0
	void UninstallChunk(struct FString ChunkTag); // Function Madness.MadCheatManager.UninstallChunk // (Final|Exec|Native|Public) // @ game+0x15c6c10
	void Mad.UITest.Click(struct FString QueryString); // Function Madness.MadCheatManager.Mad.UITest.Click // (Final|Exec|Native|Public) // @ game+0x15c6b70
	void Mad.Tutorial.TryShowHellsRiderTutorial(); // Function Madness.MadCheatManager.Mad.Tutorial.TryShowHellsRiderTutorial // (Final|Exec|Native|Protected) // @ game+0x15c6b50
	void Wss.Show(); // Function Madness.MadCheatManager.Wss.Show // (Final|Exec|Native|Public) // @ game+0x15c6b30
	void ToggleUIInputMode(); // Function Madness.MadCheatManager.ToggleUIInputMode // (Final|Exec|Native|Public) // @ game+0x15c6b10
	void Mad.Camera.ToggleSpringArmCollision(); // Function Madness.MadCheatManager.Mad.Camera.ToggleSpringArmCollision // (Final|Exec|Native|Public) // @ game+0x15c6af0
	void Mad.Debug.ToggleNamedActor(struct FName NamedActor, bool bRegister); // Function Madness.MadCheatManager.Mad.Debug.ToggleNamedActor // (Final|Exec|Native|Public) // @ game+0x15c6a20
	void ToggleMoveActions(); // Function Madness.MadCheatManager.ToggleMoveActions // (Final|Exec|Native|Public) // @ game+0x15c6a00
	void Mad.UI.ToggleKeyReflector.Gamepad(); // Function Madness.MadCheatManager.Mad.UI.ToggleKeyReflector.Gamepad // (Final|Exec|Native|Public) // @ game+0x15c69e0
	void Mad.Debug.ToggleInputDebugger(); // Function Madness.MadCheatManager.Mad.Debug.ToggleInputDebugger // (Final|Exec|Native|Public) // @ game+0x15c69c0
	void ToggleIKHUDDisplay(); // Function Madness.MadCheatManager.ToggleIKHUDDisplay // (Final|Exec|Native|Public) // @ game+0x15c6980
	void Mad.CameraCover(); // Function Madness.MadCheatManager.Mad.CameraCover // (Final|Exec|Native|Public) // @ game+0x15c69a0
	void Mad.Debug.ToggleGameplayCategory(struct FName CategoryName, bool bTargetPlayer); // Function Madness.MadCheatManager.Mad.Debug.ToggleGameplayCategory // (Final|Exec|Native|Public|HasOutParms) // @ game+0x15c68b0
	void Mad.Camera.FPS(); // Function Madness.MadCheatManager.Mad.Camera.FPS // (Final|Exec|Native|Public) // @ game+0x15c6890
	void ToggleCoherentWidget(); // Function Madness.MadCheatManager.ToggleCoherentWidget // (Final|Exec|Native|Public) // @ game+0x15c6870
	void Mad.Camera.ToggleCameraPresets(); // Function Madness.MadCheatManager.Mad.Camera.ToggleCameraPresets // (Final|Exec|Native|Public) // @ game+0x15c6850
	void Mad.Test.CombatNumbers(int32_t Num); // Function Madness.MadCheatManager.Mad.Test.CombatNumbers // (Final|Exec|Native|Public) // @ game+0x15c67d0
	void TeleportToHost(); // Function Madness.MadCheatManager.TeleportToHost // (Final|Exec|Native|Public) // @ game+0x15c67b0
	void TeleportTo(float X, float Y, float Z); // Function Madness.MadCheatManager.TeleportTo // (Final|Exec|Native|Public) // @ game+0x15c66a0
	void Mad.Quest.Suggest(struct FName QuestID); // Function Madness.MadCheatManager.Mad.Quest.Suggest // (Final|Exec|Native|Public) // @ game+0x15c6620
	void StopFollowAll(); // Function Madness.MadCheatManager.StopFollowAll // (Final|Exec|Native|Public) // @ game+0x15c6600
	void StopFollow(); // Function Madness.MadCheatManager.StopFollow // (Final|Exec|Native|Public) // @ game+0x15c65e0
	void Mad.Lobby.StartPlaystationActivity(struct FName ActivityName); // Function Madness.MadCheatManager.Mad.Lobby.StartPlaystationActivity // (Final|Exec|Native|Public) // @ game+0x15c6560
	void Mad.Challenge.StartChallenge(); // Function Madness.MadCheatManager.Mad.Challenge.StartChallenge // (Final|RequiredAPI|Exec|Native|Public) // @ game+0x15c6540
	void Mad.Challenge.StartChallegeQuest(int32_t ChallengeID); // Function Madness.MadCheatManager.Mad.Challenge.StartChallegeQuest // (Final|Exec|Native|Public) // @ game+0x15c64c0
	void Mad.Debug.SpawnFakePlayer(bool bSpawnController, bool bAddRandomInventory); // Function Madness.MadCheatManager.Mad.Debug.SpawnFakePlayer // (Final|Exec|Native|Public) // @ game+0x15c63f0
	void Mad.Leveling.SlotSkill(enum class EMadnessActiveSkillSlots Slot, int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadCheatManager.Mad.Leveling.SlotSkill // (Final|Exec|Native|Protected) // @ game+0x15c62f0
	void Mad.Lobby.SimulateStartGame(); // Function Madness.MadCheatManager.Mad.Lobby.SimulateStartGame // (Final|Exec|Native|Public) // @ game+0x15c62d0
	void Mad.Lobby.SimulateSelectCharacter(struct FName CharacterName); // Function Madness.MadCheatManager.Mad.Lobby.SimulateSelectCharacter // (Final|Exec|Native|Public) // @ game+0x15c6250
	void Mad.Lobby.SimulateRemoveCharacter(struct FString Name); // Function Madness.MadCheatManager.Mad.Lobby.SimulateRemoveCharacter // (Final|Exec|Native|Public) // @ game+0x15c6170
	void Mad.Lobby.SimulateQuiteGame(); // Function Madness.MadCheatManager.Mad.Lobby.SimulateQuiteGame // (Final|Exec|Native|Public) // @ game+0x15c6150
	void Mad.Lobby.SimulateLaunchDemoCinematic(); // Function Madness.MadCheatManager.Mad.Lobby.SimulateLaunchDemoCinematic // (Final|Exec|Native|Public) // @ game+0x15c6130
	void Mad.Lobby.SimulateCreateCharacter(struct FString Name); // Function Madness.MadCheatManager.Mad.Lobby.SimulateCreateCharacter // (Final|Exec|Native|Public) // @ game+0x15c6050
	void Mad.Lobby.SimulateClickStart(); // Function Madness.MadCheatManager.Mad.Lobby.SimulateClickStart // (Final|Exec|Native|Public) // @ game+0x15c6030
	void Mad.Lobby.SimulateChangeLobbyState(enum class EMadLobbyState LobbyState); // Function Madness.MadCheatManager.Mad.Lobby.SimulateChangeLobbyState // (Final|Exec|Native|Public) // @ game+0x15c5fb0
	void Mad.Lobby.SimulateChangeCreationGender(enum class EMadGender Gender); // Function Madness.MadCheatManager.Mad.Lobby.SimulateChangeCreationGender // (Final|Exec|Native|Public) // @ game+0x15c5f30
	void pcf.WssShutdown(); // Function Madness.MadCheatManager.pcf.WssShutdown // (Final|Exec|Native|Public) // @ game+0x15c5f10
	void Mad.UI.ShowVirtualKeyboard(); // Function Madness.MadCheatManager.Mad.UI.ShowVirtualKeyboard // (Final|Exec|Native|Public) // @ game+0x15c20a0
	void Mad.LoadingScreen.ShowSpecificLoadingHint(struct FName HintID); // Function Madness.MadCheatManager.Mad.LoadingScreen.ShowSpecificLoadingHint // (Final|Exec|Native|Public) // @ game+0x15c5e90
	void Mad.Debug.ShowPopupErrors(int32_t ErrorCode, bool bMoveInstantlyToMenu, bool bSkipStartScreen); // Function Madness.MadCheatManager.Mad.Debug.ShowPopupErrors // (Final|Exec|Native|Public) // @ game+0x15c5d90
	void Mad.Challenge.ShowPlayableChallengeList(); // Function Madness.MadCheatManager.Mad.Challenge.ShowPlayableChallengeList // (Final|Exec|Native|Public) // @ game+0x15c5d70
	void Mad.Debug.ShowNamedPrompt(struct FName PromptID); // Function Madness.MadCheatManager.Mad.Debug.ShowNamedPrompt // (Final|Exec|Native|Public) // @ game+0x15c5cf0
	void Mad.LoadingScreen.ShowLoadingScreen(struct FName regionname); // Function Madness.MadCheatManager.Mad.LoadingScreen.ShowLoadingScreen // (Final|Exec|Native|Public) // @ game+0x15c5c70
	void Mad.Inventory.ShowHeadgear(bool bShow); // Function Madness.MadCheatManager.Mad.Inventory.ShowHeadgear // (Final|Exec|Native|Public) // @ game+0x15c5be0
	void Mad.Customization.ShowCustomizationData(); // Function Madness.MadCheatManager.Mad.Customization.ShowCustomizationData // (Final|Exec|Native|Protected) // @ game+0x15c5bc0
	void Mad.UI.ShowCombatNumbers(bool bDamage, bool bExperience); // Function Madness.MadCheatManager.Mad.UI.ShowCombatNumbers // (Final|Exec|Native|Public) // @ game+0x15c5af0
	void Mad.Challenge.ShowChallengeSymmaryScreen(); // Function Madness.MadCheatManager.Mad.Challenge.ShowChallengeSymmaryScreen // (Final|Exec|Native|Public) // @ game+0x15c5ad0
	void Mad.Challenge.ShowPlayerStats(); // Function Madness.MadCheatManager.Mad.Challenge.ShowPlayerStats // (Final|Exec|Native|Public) // @ game+0x15c5ab0
	void Mad.Challenge.ShowDamageStats(); // Function Madness.MadCheatManager.Mad.Challenge.ShowDamageStats // (Final|Exec|Native|Public) // @ game+0x15c5a90
	void Mad.Challenge.ShowControllerStatus(); // Function Madness.MadCheatManager.Mad.Challenge.ShowControllerStatus // (Final|Exec|Native|Public) // @ game+0x15c5a70
	void Mad.Challenge.ShowChallengeBestScores(); // Function Madness.MadCheatManager.Mad.Challenge.ShowChallengeBestScores // (Final|Exec|Native|Public) // @ game+0x15c5a50
	void Mad.UI.SetURL(struct FString NewURL); // Function Madness.MadCheatManager.Mad.UI.SetURL // (Final|Exec|Native|Public) // @ game+0x15c5970
	void Mad.UI.SetUIStateIdx(int32_t StateIdx); // Function Madness.MadCheatManager.Mad.UI.SetUIStateIdx // (Final|Exec|Native|Public) // @ game+0x15c58f0
	void SetUIState(struct FName StateName, struct FString Params); // Function Madness.MadCheatManager.SetUIState // (Final|Exec|Native|Public) // @ game+0x15c57d0
	void Mad.UI.SetToastsEnabled(bool bEnabled); // Function Madness.MadCheatManager.Mad.UI.SetToastsEnabled // (Final|Exec|Native|Public) // @ game+0x15c5740
	void Mad.Controls.SwapTriggers(bool bInSwapTriggers); // Function Madness.MadCheatManager.Mad.Controls.SwapTriggers // (Final|Exec|Native|Public) // @ game+0x15c56b0
	void Mad.Controls.SwapSticks(bool bInSwapSticks); // Function Madness.MadCheatManager.Mad.Controls.SwapSticks // (Final|Exec|Native|Public) // @ game+0x15c5620
	void Mad.Controls.SwapBumpers(bool bInSwapBumpers); // Function Madness.MadCheatManager.Mad.Controls.SwapBumpers // (Final|Exec|Native|Public) // @ game+0x15c5590
	void Mad.Debug.SetStoryPromptFlag(bool bFlag); // Function Madness.MadCheatManager.Mad.Debug.SetStoryPromptFlag // (Final|Exec|Native|Public) // @ game+0x15c5500
	void Mad.Convoy.SetSkinSet(struct FName SetName); // Function Madness.MadCheatManager.Mad.Convoy.SetSkinSet // (Final|Exec|Native|Public) // @ game+0x15c5480
	void Mad.Settings.ShowWeaponsPanel(bool bShow); // Function Madness.MadCheatManager.Mad.Settings.ShowWeaponsPanel // (Final|Exec|Native|Public) // @ game+0x15c53f0
	void Mad.Settings.ShowGameLog(bool bShow); // Function Madness.MadCheatManager.Mad.Settings.ShowGameLog // (Final|Exec|Native|Public) // @ game+0x15c5360
	void Mad.Settings.ShowContextPanel(bool bShow); // Function Madness.MadCheatManager.Mad.Settings.ShowContextPanel // (Final|Exec|Native|Public) // @ game+0x15c52d0
	void SetSequenceTime(struct FFrameNumber Time); // Function Madness.MadCheatManager.SetSequenceTime // (Final|Exec|Native|Public|HasDefaults) // @ game+0x15c5250
	void Mad.Quest.SetStatus(struct FName QuestID, enum class EObjectiveStatus NewStatus); // Function Madness.MadCheatManager.Mad.Quest.SetStatus // (Final|Exec|Native|Public) // @ game+0x15c5190
	void SetPlayMovie(bool bInEnable); // Function Madness.MadCheatManager.SetPlayMovie // (Final|Exec|Native|Public) // @ game+0x15c5080
	void Mad.Leveling.SetPlayerLevel(int32_t Level); // Function Madness.MadCheatManager.Mad.Leveling.SetPlayerLevel // (Final|Exec|Native|Protected) // @ game+0x15c5110
	void Mad.Convoy.SetPet(int32_t ID); // Function Madness.MadCheatManager.Mad.Convoy.SetPet // (Final|Exec|Native|Public) // @ game+0x15c5000
	void Mad.Debug.SetPartyPromptFlag(bool bFlag); // Function Madness.MadCheatManager.Mad.Debug.SetPartyPromptFlag // (Final|Exec|Native|Public) // @ game+0x15c4f70
	void Mad.Quest.SetObjectiveStatus(struct FName ObjectiveID, enum class EObjectiveStatus NewStatus); // Function Madness.MadCheatManager.Mad.Quest.SetObjectiveStatus // (Final|Exec|Native|Public) // @ game+0x15c4eb0
	void Mad.Input.SetMouseSens(float NewSens); // Function Madness.MadCheatManager.Mad.Input.SetMouseSens // (Final|Exec|Native|Public) // @ game+0x15c4e30
	void Mad.UI.SetMinimapEnemiesVisibilityRadius(bool bEnabled, float Value); // Function Madness.MadCheatManager.Mad.UI.SetMinimapEnemiesVisibilityRadius // (Final|Exec|Native|Public) // @ game+0x15c4d60
	void Mad.UI.SetMinimapEnemiesDisplayIfOutOfRange(bool bEnabled); // Function Madness.MadCheatManager.Mad.UI.SetMinimapEnemiesDisplayIfOutOfRange // (Final|Exec|Native|Public) // @ game+0x15c4cd0
	void Mad.Camera.SetFOV(float InNewFOV); // Function Madness.MadCheatManager.Mad.Camera.SetFOV // (Final|Exec|Native|Public) // @ game+0x15c4c50
	void Mad.Convoy.SetCheckpoint(int32_t CheckpointId); // Function Madness.MadCheatManager.Mad.Convoy.SetCheckpoint // (Final|Exec|Native|Public) // @ game+0x15c4bd0
	void Mad.Inventory.SetItemSkin(enum class EMadItemSlot Slot, struct FName SkinName); // Function Madness.MadCheatManager.Mad.Inventory.SetItemSkin // (Final|Exec|Native|Public) // @ game+0x15c4b10
	void Mad.Debug.SetIgnoreMoveInput(bool bIgnoreMoveInput); // Function Madness.MadCheatManager.Mad.Debug.SetIgnoreMoveInput // (Final|Exec|Native|Public) // @ game+0x15c4a80
	void Mad.Debug.SetIgnoreLookInput(bool bIgnoreLookInput); // Function Madness.MadCheatManager.Mad.Debug.SetIgnoreLookInput // (Final|Exec|Native|Public) // @ game+0x15c49f0
	void Mad.SaveSystemV2.SetHasSeenPrologue(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.SetHasSeenPrologue // (Final|Exec|Native|Protected) // @ game+0x15c49d0
	void SetGlobalCombatMode(enum class ECombatModePermit CombatMode); // Function Madness.MadCheatManager.SetGlobalCombatMode // (Final|Exec|Native|Public) // @ game+0x15c4950
	void Mad.Input.SetGamepadSens(float NewSens); // Function Madness.MadCheatManager.Mad.Input.SetGamepadSens // (Final|Exec|Native|Public) // @ game+0x15c48d0
	void Mad.UI.SetForceHeroScreenTabEnabled(struct FName InHeroScreenTabName, bool bInDebugForceEnabled); // Function Madness.MadCheatManager.Mad.UI.SetForceHeroScreenTabEnabled // (Final|Exec|Native|Public) // @ game+0x15c4800
	void Mad.Convoy.SetDecoration(struct FName DecorationName, int32_t ColorId, int32_t DecalId); // Function Madness.MadCheatManager.Mad.Convoy.SetDecoration // (Final|Exec|Native|Public) // @ game+0x15c4700
	void Mad.Customization.SetCustomization(enum class None head, enum class None Eye, enum class None Skin, enum class None Hair, enum class None Beard, enum class None HairColor, enum class None BeardColor, enum class None Scar, enum class None ScarColor, enum class None Makeup, enum class None Piercing); // Function Madness.MadCheatManager.Mad.Customization.SetCustomization // (Final|Exec|Native|Protected) // @ game+0x15c4400
	void SetCurrentRegion(struct FName regionname); // Function Madness.MadCheatManager.SetCurrentRegion // (Final|Exec|Native|Public) // @ game+0x15c4380
	void SetCharacterName(struct FString CharacterName); // Function Madness.MadCheatManager.SetCharacterName // (Final|Exec|Native|Public) // @ game+0x15c42a0
	void Mad.Challenge.SetMaxTier(int32_t NewTier); // Function Madness.MadCheatManager.Mad.Challenge.SetMaxTier // (Final|Exec|Native|Public) // @ game+0x15c4220
	void Mad.Challenge.SetCurrentTier(int32_t NewTier); // Function Madness.MadCheatManager.Mad.Challenge.SetCurrentTier // (Final|Exec|Native|Public) // @ game+0x15c41a0
	void Mad.Camera.SetCameraPreset(int32_t PresetIdx); // Function Madness.MadCheatManager.Mad.Camera.SetCameraPreset // (Final|Exec|Native|Public) // @ game+0x15c4120
	void Mad.Convoy.SetBannerOnTruck(bool bEnabled); // Function Madness.MadCheatManager.Mad.Convoy.SetBannerOnTruck // (Final|Exec|Native|Public) // @ game+0x15c4090
	void Mad.Convoy.SetBannerColors(int32_t MainColorId, int32_t SigilColorId); // Function Madness.MadCheatManager.Mad.Convoy.SetBannerColors // (Final|Exec|Native|Public) // @ game+0x15c3fd0
	void Mad.Convoy.SetBanner(int32_t MeshId, int32_t PatternId, int32_t SigilId); // Function Madness.MadCheatManager.Mad.Convoy.SetBanner // (Final|Exec|Native|Public) // @ game+0x15c3ed0
	void Mad.Gameplay.SetAttributeToPlayer(struct FName AttributeName, float Value); // Function Madness.MadCheatManager.Mad.Gameplay.SetAttributeToPlayer // (Final|Exec|Native|Public) // @ game+0x15c3e00
	void Mad.Gameplay.SetAttributeToCharacterUnderCrosshair(struct FName AttributeName, float Value); // Function Madness.MadCheatManager.Mad.Gameplay.SetAttributeToCharacterUnderCrosshair // (Final|Exec|Native|Public) // @ game+0x15c3d30
	void Mad.Inventory.SetArmorsSkin(struct FName SkinName); // Function Madness.MadCheatManager.Mad.Inventory.SetArmorsSkin // (Final|Exec|Native|Public) // @ game+0x15c3cb0
	void Mad.EnochAccolades.SetAccoladesLevel(int32_t InNewLevel); // Function Madness.MadCheatManager.Mad.EnochAccolades.SetAccoladesLevel // (Final|Exec|Native|Public) // @ game+0x15c3c30
	void Mad.AbilitySystem.SetAbilitySystemCooldownsEnabled(bool bInEnabled); // Function Madness.MadCheatManager.Mad.AbilitySystem.SetAbilitySystemCooldownsEnabled // (Final|Exec|Native|Public) // @ game+0x15c3ba0
	void Mad.Gameplay.SetInBattle(bool bSet); // Function Madness.MadCheatManager.Mad.Gameplay.SetInBattle // (Final|Exec|Native|Public) // @ game+0x15c3b10
	void Mad.SaveSystemV2.DumpDebugInfo(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.DumpDebugInfo // (Final|Exec|Native|Protected) // @ game+0x15c3af0
	void FactSystem.SaveCachedFacts(); // Function Madness.MadCheatManager.FactSystem.SaveCachedFacts // (Final|Exec|Native|Public) // @ game+0x15c3ad0
	void Mad.EnochAccolades.SaveAccoladeProgress(bool bDelayed); // Function Madness.MadCheatManager.Mad.EnochAccolades.SaveAccoladeProgress // (Final|Exec|Native|Public) // @ game+0x15c3a40
	void Mad.SaveSystemV2.RunValidationProcedure(enum class EMadSaveFlags InSaveFlags); // Function Madness.MadCheatManager.Mad.SaveSystemV2.RunValidationProcedure // (Final|Exec|Native|Protected) // @ game+0x15c39c0
	void Mad.SaveSystemV2.RunDebugProcedure(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.RunDebugProcedure // (Final|Exec|Native|Protected) // @ game+0x15c39a0
	void RevivePlayer(); // Function Madness.MadCheatManager.RevivePlayer // (Final|Exec|Native|Public) // @ game+0x15c3980
	void Mad.LoadingScreen.ResetSeenLoadingHints(); // Function Madness.MadCheatManager.Mad.LoadingScreen.ResetSeenLoadingHints // (Final|Exec|Native|Public) // @ game+0x15c3960
	void ResetQuestRewards(); // Function Madness.MadCheatManager.ResetQuestRewards // (Final|Exec|Native|Public) // @ game+0x15c3940
	void Mad.Leveling.ResetProgress(); // Function Madness.MadCheatManager.Mad.Leveling.ResetProgress // (Final|Exec|Native|Protected) // @ game+0x15c3920
	void Mad.Controls.ResetOverrides(); // Function Madness.MadCheatManager.Mad.Controls.ResetOverrides // (Final|Exec|Native|Public) // @ game+0x15c3900
	void Mad.Input.Reset(); // Function Madness.MadCheatManager.Mad.Input.Reset // (Final|Exec|Native|Public) // @ game+0x15c38e0
	void Mad.AbilitySystem.ResetDebugScriptExecution(); // Function Madness.MadCheatManager.Mad.AbilitySystem.ResetDebugScriptExecution // (Final|Exec|Native|Public) // @ game+0x15c38c0
	void Mad.General.ResetAllSettings(); // Function Madness.MadCheatManager.Mad.General.ResetAllSettings // (Final|Exec|Native|Public) // @ game+0x15c38a0
	void Mad.EnochAccolades.ResetAll(); // Function Madness.MadCheatManager.Mad.EnochAccolades.ResetAll // (Final|Exec|Native|Public) // @ game+0x15c3880
	void Mad.AI.RerollAISeeds(); // Function Madness.MadCheatManager.Mad.AI.RerollAISeeds // (Final|Exec|Native|Public) // @ game+0x15c3860
	void Mad.Debug.Facts.RemoveBreakpoint(struct FString FilterText); // Function Madness.MadCheatManager.Mad.Debug.Facts.RemoveBreakpoint // (Final|Exec|Native|Public) // @ game+0x15c3330
	void Mad.Debug.Clear(); // Function Madness.MadCheatManager.Mad.Debug.Clear // (Final|Exec|Native|Public) // @ game+0x15c3310
	void Mad.Debug.RemoveCommandlineArgument(struct FString Option); // Function Madness.MadCheatManager.Mad.Debug.RemoveCommandlineArgument // (Final|Exec|Native|Public) // @ game+0x15c3230
	void Mad.Emotes.RemoveAllEmotes(); // Function Madness.MadCheatManager.Mad.Emotes.RemoveAllEmotes // (Final|Exec|Native|Public) // @ game+0x15c3210
	void Mad.General.ReloadDataTables(); // Function Madness.MadCheatManager.Mad.General.ReloadDataTables // (Final|Exec|Native|Public) // @ game+0x15c31f0
	void Mad.Inventory.GainItemOfferConsumable(struct FString ItemOfferName); // Function Madness.MadCheatManager.Mad.Inventory.GainItemOfferConsumable // (Final|Exec|Native|Public) // @ game+0x15c3150
	void Mad.Challenge.RecordChallengeStats(bool bStop); // Function Madness.MadCheatManager.Mad.Challenge.RecordChallengeStats // (Final|Exec|Native|Public) // @ game+0x15c30c0
	void Mad.EnochAccolades.ReclaimAccoladeRewards(); // Function Madness.MadCheatManager.Mad.EnochAccolades.ReclaimAccoladeRewards // (Final|Exec|Native|Public) // @ game+0x15c30a0
	void Mad.Controls.RebuildControls(); // Function Madness.MadCheatManager.Mad.Controls.RebuildControls // (Final|Exec|Native|Public) // @ game+0x15c3080
	void Mad.Debug.RebuildConsoleAutocompleteList(); // Function Madness.MadCheatManager.Mad.Debug.RebuildConsoleAutocompleteList // (Final|Exec|Native|Public) // @ game+0x15c3060
	void Mad.Quest.PrintTimeline(); // Function Madness.MadCheatManager.Mad.Quest.PrintTimeline // (Final|Exec|Native|Public) // @ game+0x15c3040
	void Mad.General.PrintSessionBlockerBitflag(); // Function Madness.MadCheatManager.Mad.General.PrintSessionBlockerBitflag // (Final|Exec|Native|Public) // @ game+0x15c3020
	void Mad.AbilitySystem.PrintReplicationFrequencyReport(); // Function Madness.MadCheatManager.Mad.AbilitySystem.PrintReplicationFrequencyReport // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void Mad.OnlineStash.PrintOnlineStash(); // Function Madness.MadCheatManager.Mad.OnlineStash.PrintOnlineStash // (Final|Exec|Native|Public) // @ game+0x15c3000
	void Mad.Online.PrintFriends(); // Function Madness.MadCheatManager.Mad.Online.PrintFriends // (Final|Exec|Native|Public) // @ game+0x15c2fe0
	void Mad.Debug.PrintCommandline(); // Function Madness.MadCheatManager.Mad.Debug.PrintCommandline // (Final|Exec|Native|Public) // @ game+0x15c2fc0
	void Mad.Emotes.PlayEmote(struct FString InUMadEmoteDataName); // Function Madness.MadCheatManager.Mad.Emotes.PlayEmote // (Final|Exec|Native|Public) // @ game+0x15c2ee0
	void Mad.Dialogue.Play(struct FString NPCName); // Function Madness.MadCheatManager.Mad.Dialogue.Play // (Final|Exec|Native|Public) // @ game+0x15c2e40
	void Mad.CinematicSQ.Play(struct FString SQCinematicID); // Function Madness.MadCheatManager.Mad.CinematicSQ.Play // (Final|Exec|Native|Public) // @ game+0x15c2da0
	void Mad.Cinematic.Play(struct FString CinematicID); // Function Madness.MadCheatManager.Mad.Cinematic.Play // (Final|Exec|Native|Public) // @ game+0x15c2d00
	void Mad.LoadingScreen.PickNextLoadingHint(); // Function Madness.MadCheatManager.Mad.LoadingScreen.PickNextLoadingHint // (Final|Exec|Native|Public) // @ game+0x15c2ce0
	void Wss.Parse(struct FString Tweaks); // Function Madness.MadCheatManager.Wss.Parse // (Final|Exec|Native|Public) // @ game+0x15c2c40
	void Wss.ParseForCurrent(struct FString Tweaks); // Function Madness.MadCheatManager.Wss.ParseForCurrent // (Final|Exec|Native|Public) // @ game+0x15c2ba0
	void Wss.ParseForSingle(struct FString Tweaks); // Function Madness.MadCheatManager.Wss.ParseForSingle // (Final|Exec|Native|Public) // @ game+0x15c2b00
	void Mad.Inventory.PaintItem(enum class EMadItemSlot Slot, struct FName PaintName); // Function Madness.MadCheatManager.Mad.Inventory.PaintItem // (Final|Exec|Native|Public) // @ game+0x15c2a40
	void Mad.Debug.OverrideQuestTracker(struct FName ActorTag); // Function Madness.MadCheatManager.Mad.Debug.OverrideQuestTracker // (Final|Exec|Native|Public) // @ game+0x15c29c0
	void Mad.UI.OpenShop(); // Function Madness.MadCheatManager.Mad.UI.OpenShop // (Final|Exec|Native|Public) // @ game+0x15c29a0
	void Mad.General.OpenDebugWidget(struct FName InName); // Function Madness.MadCheatManager.Mad.General.OpenDebugWidget // (Final|Exec|Native|Public) // @ game+0x15c0ac0
	void Mad.Inventory.NextWeapon(bool bPrev); // Function Madness.MadCheatManager.Mad.Inventory.NextWeapon // (Final|Exec|Native|Public) // @ game+0x15c2910
	void Mad.Inventory.NextPassWeapon(bool bPrev); // Function Madness.MadCheatManager.Mad.Inventory.NextPassWeapon // (Final|Exec|Native|Public) // @ game+0x15c2880
	void Mad.OnlineStash.MoveItemToOnlineStash(int32_t ItemIndex); // Function Madness.MadCheatManager.Mad.OnlineStash.MoveItemToOnlineStash // (Final|Exec|Native|Public) // @ game+0x15c2800
	void Mad.OnlineStash.MoveItemToInventory(int32_t ItemIndex); // Function Madness.MadCheatManager.Mad.OnlineStash.MoveItemToInventory // (Final|Exec|Native|Public) // @ game+0x15c2780
	void Mad.SaveSystemV2.MakeOfflineSave(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.MakeOfflineSave // (Final|Exec|Native|Protected) // @ game+0x15c2760
	void Mad.Inventory.NextLootLegendary(); // Function Madness.MadCheatManager.Mad.Inventory.NextLootLegendary // (Final|Exec|Native|Public) // @ game+0x15c2740
	void Mad.Dialogue.MakeChoice(int32_t ChoiceIdx); // Function Madness.MadCheatManager.Mad.Dialogue.MakeChoice // (Final|Exec|Native|Public) // @ game+0x15c26c0
	void Mad.Difficulty.LowerDifficultyPrompt(bool bShow); // Function Madness.MadCheatManager.Mad.Difficulty.LowerDifficultyPrompt // (Final|Exec|Native|Public) // @ game+0x15c2630
	void Mad.General.TableManifest(); // Function Madness.MadCheatManager.Mad.General.TableManifest // (Final|Exec|Native|Public) // @ game+0x15c2610
	void Mad.Debug.LogStreamableManager(bool bDetailed); // Function Madness.MadCheatManager.Mad.Debug.LogStreamableManager // (Final|Exec|Native|Public) // @ game+0x15c2580
	void Mad.EnochAccolades.LogAllAccolades(bool bActiveOnly); // Function Madness.MadCheatManager.Mad.EnochAccolades.LogAllAccolades // (Final|Exec|Native|Public) // @ game+0x15c24f0
	void Mad.Controls.ListenForInput(struct FString ActionName, bool bSecondary); // Function Madness.MadCheatManager.Mad.Controls.ListenForInput // (Final|Exec|Native|Public) // @ game+0x15c23c0
	void InstallChunk(struct FString ChunkTag); // Function Madness.MadCheatManager.InstallChunk // (Final|Exec|Native|Public) // @ game+0x15c2320
	void Mad.Inventory.ImproveItem(enum class EMadItemSlot Slot, int32_t AttributeId); // Function Madness.MadCheatManager.Mad.Inventory.ImproveItem // (Final|Exec|Native|Public) // @ game+0x15c21e0
	void Mad.Leveling.IgnoreTreeNodeRequirements(bool bSet); // Function Madness.MadCheatManager.Mad.Leveling.IgnoreTreeNodeRequirements // (Final|Exec|Native|Protected) // @ game+0x15c2150
	void Mad.Leveling.IgnoreTreeNodeCost(bool bSet); // Function Madness.MadCheatManager.Mad.Leveling.IgnoreTreeNodeCost // (Final|Exec|Native|Protected) // @ game+0x15c20c0
	void Mad.UI.HideVirtualKeyboard(); // Function Madness.MadCheatManager.Mad.UI.HideVirtualKeyboard // (Final|Exec|Native|Public) // @ game+0x15c20a0
	void Mad.Leveling.HeroTreeSanityCheck(enum class EMadnessSkillPath SkillPath); // Function Madness.MadCheatManager.Mad.Leveling.HeroTreeSanityCheck // (Final|Exec|Native|Protected) // @ game+0x15c2020
	void Mad.General.GoToRegion(struct FName regionname); // Function Madness.MadCheatManager.Mad.General.GoToRegion // (Final|Exec|Native|Public) // @ game+0x15c1fa0
	void GoToPlayer(struct FName PlayerName); // Function Madness.MadCheatManager.GoToPlayer // (Final|Exec|Native|Public) // @ game+0x15c1f20
	void Mad.Inventory.GivePreorderItems(); // Function Madness.MadCheatManager.Mad.Inventory.GivePreorderItems // (Final|Exec|Native|Public) // @ game+0x15c1f00
	void Mad.Gameplay.GiveExp(float Exp); // Function Madness.MadCheatManager.Mad.Gameplay.GiveExp // (Final|Exec|Native|Public) // @ game+0x15c1e80
	struct FString Mad.Debug.GetLauncherLink(bool bCopyToClipboard); // Function Madness.MadCheatManager.Mad.Debug.GetLauncherLink // (Final|Exec|Native|Public) // @ game+0x15c1da0
	void Mad.Leveling.GenerateSkillTemplate(); // Function Madness.MadCheatManager.Mad.Leveling.GenerateSkillTemplate // (Final|Exec|Native|Protected) // @ game+0x15c1d80
	void Mad.Challenge.GenerateNewChallengeListSeed(); // Function Madness.MadCheatManager.Mad.Challenge.GenerateNewChallengeListSeed // (Final|Exec|Native|Public) // @ game+0x15c1d60
	void Mad.EnochAccolades.GenerateProgressCSV(); // Function Madness.MadCheatManager.Mad.EnochAccolades.GenerateProgressCSV // (Final|Exec|Native|Public) // @ game+0x15c1d40
	void Mad.Debug.SyncQuestsWithFacts(); // Function Madness.MadCheatManager.Mad.Debug.SyncQuestsWithFacts // (Final|Exec|Native|Public) // @ game+0x15c1d20
	void Mad.SaveSystemV2.ForceReloadSaves(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.ForceReloadSaves // (Final|Exec|Native|Protected) // @ game+0x15c1d00
	void Mad.General.ForceDownloadTables(); // Function Madness.MadCheatManager.Mad.General.ForceDownloadTables // (Final|Exec|Native|Public) // @ game+0x15c1ce0
	void FollowAll(struct FString OtherPlayerName); // Function Madness.MadCheatManager.FollowAll // (Final|Exec|Native|Public) // @ game+0x15c1c00
	void Follow(struct FString OtherPlayerName); // Function Madness.MadCheatManager.Follow // (Final|Exec|Native|Public) // @ game+0x15c1b20
	void FactSystem.FillWithFacts(); // Function Madness.MadCheatManager.FactSystem.FillWithFacts // (Final|Exec|Native|Public) // @ game+0x15c1b00
	void Mad.Inventory.FillResources(int32_t Quantity); // Function Madness.MadCheatManager.Mad.Inventory.FillResources // (Final|Exec|Native|Public) // @ game+0x15c1a80
	void Mad.Inventory.FillInventory(); // Function Madness.MadCheatManager.Mad.Inventory.FillInventory // (Final|Exec|Native|Public) // @ game+0x15c1a60
	void Mad.Inventory.FillCrystals(int32_t Quantity); // Function Madness.MadCheatManager.Mad.Inventory.FillCrystals // (Final|Exec|Native|Public) // @ game+0x15c19e0
	void Mad.ExplorerFlags.DumpStatus(); // Function Madness.MadCheatManager.Mad.ExplorerFlags.DumpStatus // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void demo.lobby(bool bWithParty); // Function Madness.MadCheatManager.demo.lobby // (Final|Exec|Native|Public) // @ game+0x15c1950
	void Mad.UI.ExecuteScriptDelayed(struct FString ScriptString, float Delay); // Function Madness.MadCheatManager.Mad.UI.ExecuteScriptDelayed // (Final|Exec|Native|Public) // @ game+0x15c1820
	void Mad.UI.ExecuteScript(struct FString ScriptString); // Function Madness.MadCheatManager.Mad.UI.ExecuteScript // (Final|Exec|Native|Public) // @ game+0x15c1740
	void Mad.Inventory.EnhanceItem(enum class EMadItemSlot Slot, int32_t ModID); // Function Madness.MadCheatManager.Mad.Inventory.EnhanceItem // (Final|Exec|Native|Public) // @ game+0x15c1680
	void EndCurrentDialogue(); // Function Madness.MadCheatManager.EndCurrentDialogue // (Final|Exec|Native|Public) // @ game+0x15c1660
	void Mad.Challenge.EndChallenge(bool bSuccess); // Function Madness.MadCheatManager.Mad.Challenge.EndChallenge // (Final|RequiredAPI|Exec|Native|Public) // @ game+0x15c15d0
	void Mad.StickToCover(bool bEnable); // Function Madness.MadCheatManager.Mad.StickToCover // (Final|Exec|Native|Public) // @ game+0x15c1540
	void Mad.Debug.EnableFakePlayerFollow(bool bEnable); // Function Madness.MadCheatManager.Mad.Debug.EnableFakePlayerFollow // (Final|Exec|Native|Public) // @ game+0x15c14b0
	void Mad.Challenge.EnableEndGame(); // Function Madness.MadCheatManager.Mad.Challenge.EnableEndGame // (Final|Exec|Native|Public) // @ game+0x15c1490
	void Mad.Debug.ScreenShotEdit(); // Function Madness.MadCheatManager.Mad.Debug.ScreenShotEdit // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void Mad.Convoy.DumpUnlockedCustomizations(); // Function Madness.MadCheatManager.Mad.Convoy.DumpUnlockedCustomizations // (Final|Exec|Native|Public) // @ game+0x15c1470
	void Wss.DumpTweaksData(bool bFixSlashes, bool bCopyToClipboard); // Function Madness.MadCheatManager.Wss.DumpTweaksData // (Final|Exec|Native|Public) // @ game+0x15c13a0
	void Mad.Convoy.DumpLoadedCheckpoints(); // Function Madness.MadCheatManager.Mad.Convoy.DumpLoadedCheckpoints // (Final|Exec|Native|Public) // @ game+0x15c1380
	void Mad.Challenge.DumpChallengeStats(); // Function Madness.MadCheatManager.Mad.Challenge.DumpChallengeStats // (Final|Exec|Native|Public) // @ game+0x15c1360
	void Mad.Collectibles.DumpAll(); // Function Madness.MadCheatManager.Mad.Collectibles.DumpAll // (Final|Exec|Native|Public) // @ game+0x15c1340
	void Mad.DivisionMarker(); // Function Madness.MadCheatManager.Mad.DivisionMarker // (Final|Exec|Native|Public) // @ game+0x15c1320
	void Mad.Division(); // Function Madness.MadCheatManager.Mad.Division // (Final|Exec|Native|Public) // @ game+0x15c1300
	void Mad.Debug.Quests(); // Function Madness.MadCheatManager.Mad.Debug.Quests // (Final|Exec|Native|Public) // @ game+0x15c12e0
	void Mad.Debug.Facts(struct FString FilterText); // Function Madness.MadCheatManager.Mad.Debug.Facts // (Final|Exec|Native|Public) // @ game+0x15c1240
	void Mad.Collectibles.DisplayAllJournalCategories(bool bSubCategories); // Function Madness.MadCheatManager.Mad.Collectibles.DisplayAllJournalCategories // (Final|Exec|Native|Public) // @ game+0x15c11b0
	void Mad.EnochAccolades.DisplayStatusByName(struct FString AccoladeName); // Function Madness.MadCheatManager.Mad.EnochAccolades.DisplayStatusByName // (Final|Exec|Native|Public) // @ game+0x15c1110
	void Mad.EnochAccolades.DisplayStatusByAssetName(struct FName AccoladeAssetName); // Function Madness.MadCheatManager.Mad.EnochAccolades.DisplayStatusByAssetName // (Final|Exec|Native|Public) // @ game+0x15c1090
	void Mad.EnochAccolades.DisplayRandomTeamStatus(); // Function Madness.MadCheatManager.Mad.EnochAccolades.DisplayRandomTeamStatus // (Final|Exec|Native|Public) // @ game+0x15c1070
	void Mad.EnochAccolades.DisplayControllerStatus(); // Function Madness.MadCheatManager.Mad.EnochAccolades.DisplayControllerStatus // (Final|Exec|Native|Public) // @ game+0x15c1050
	void Mad.EnochAccolades.DisplayAccoladeClaimedRewards(); // Function Madness.MadCheatManager.Mad.EnochAccolades.DisplayAccoladeClaimedRewards // (Final|Exec|Native|Public) // @ game+0x15c1030
	void Mad.Challenge.DisableEndGame(); // Function Madness.MadCheatManager.Mad.Challenge.DisableEndGame // (Final|Exec|Native|Public) // @ game+0x15c1010
	void DisableCameraCutUpdate(bool bDisable); // Function Madness.MadCheatManager.DisableCameraCutUpdate // (Final|Exec|Native|Public) // @ game+0x15c0f80
	void demo.wipe(); // Function Madness.MadCheatManager.demo.wipe // (Final|Exec|Native|Protected) // @ game+0x15c0f60
	void Mad.Debug.SetShowLocalPlayerPartyWidget(bool bShow); // Function Madness.MadCheatManager.Mad.Debug.SetShowLocalPlayerPartyWidget // (Final|Exec|Native|Public) // @ game+0x15c0ed0
	void Mad.SaveSystemV2.DebugSaveGame(); // Function Madness.MadCheatManager.Mad.SaveSystemV2.DebugSaveGame // (Final|Exec|Native|Protected) // @ game+0x15c0eb0
	void Mad.Debug.MutePartyMembers(bool bMute); // Function Madness.MadCheatManager.Mad.Debug.MutePartyMembers // (Final|Exec|Native|Public) // @ game+0x15c0e20
	void Mad.Debug.LogPartyMembers(); // Function Madness.MadCheatManager.Mad.Debug.LogPartyMembers // (Final|Exec|Native|Public) // @ game+0x15c0e00
	void Mad.Debug.LogFriendsList(); // Function Madness.MadCheatManager.Mad.Debug.LogFriendsList // (Final|Exec|Native|Public) // @ game+0x15c0de0
	void DebugLevelTransitionFailed(); // Function Madness.MadCheatManager.DebugLevelTransitionFailed // (Final|Exec|Native|Public) // @ game+0x15c0dc0
	void Mad.Debug.GoToNamedActor(struct FString NameOrIdx); // Function Madness.MadCheatManager.Mad.Debug.GoToNamedActor // (Final|Exec|Native|Public) // @ game+0x15c0ce0
	void Mad.Debug.ForceGC(); // Function Madness.MadCheatManager.Mad.Debug.ForceGC // (Final|Exec|Native|Public) // @ game+0x15c0cc0
	void Mad.Debug.DumpNamedActors(struct FString Query); // Function Madness.MadCheatManager.Mad.Debug.DumpNamedActors // (Final|Exec|Native|Public) // @ game+0x15c0be0
	void Mad.Inventory.DebugCurrentWeapon(); // Function Madness.MadCheatManager.Mad.Inventory.DebugCurrentWeapon // (Final|Exec|Native|Public) // @ game+0x15c0bc0
	void Mad.Barrier.SetCurrentConditionAsMet(); // Function Madness.MadCheatManager.Mad.Barrier.SetCurrentConditionAsMet // (Final|Exec|Native|Public) // @ game+0x15c0ba0
	void Mad.Barrier.SetAllConditionsAsMet(); // Function Madness.MadCheatManager.Mad.Barrier.SetAllConditionsAsMet // (Final|Exec|Native|Public) // @ game+0x15c0b80
	void Mad.Barrier.Reset(); // Function Madness.MadCheatManager.Mad.Barrier.Reset // (Final|Exec|Native|Public) // @ game+0x15c0b60
	void Mad.Barrier.LogStatus(); // Function Madness.MadCheatManager.Mad.Barrier.LogStatus // (Final|Exec|Native|Public) // @ game+0x15c0b40
	void D(struct FName InName); // Function Madness.MadCheatManager.D // (Final|Exec|Native|Public) // @ game+0x15c0ac0
	void JIRA.CreateIssue(struct FString Component, struct FString Title, struct FString Reporter, struct FString Assignee, struct FString Description, bool bAddLog, bool bAddScreeShot, bool bAddSaveFiles); // Function Madness.MadCheatManager.JIRA.CreateIssue // (Final|Exec|Native|Public) // @ game+0x15c0810
	void Mad.Quest.CompleteQuestPool(struct FName PoolID); // Function Madness.MadCheatManager.Mad.Quest.CompleteQuestPool // (Final|Exec|Native|Public) // @ game+0x15c0790
	void Mad.EnochAccolades.CompleteAccoladeByName(struct FString AccoladeName, bool bResetBeforeComplete, bool bSilent); // Function Madness.MadCheatManager.Mad.EnochAccolades.CompleteAccoladeByName // (Final|Exec|Native|Public) // @ game+0x15c0670
	void Mad.EnochAccolades.CompleteAccolade(struct FName AccoladeAssetName, bool bResetBeforeComplete, bool bSilent); // Function Madness.MadCheatManager.Mad.EnochAccolades.CompleteAccolade // (Final|Exec|Native|Public) // @ game+0x15c0560
	void Mad.Collectibles.Collect(struct FName CollectibleKey); // Function Madness.MadCheatManager.Mad.Collectibles.Collect // (Final|Exec|Native|Public) // @ game+0x15c04e0
	void Mad.OnlineStash.ClearStash(); // Function Madness.MadCheatManager.Mad.OnlineStash.ClearStash // (Final|Exec|Native|Public) // @ game+0x15c04c0
	void Mad.Controls.ClearOverrides(); // Function Madness.MadCheatManager.Mad.Controls.ClearOverrides // (Final|Exec|Native|Public) // @ game+0x15c04a0
	void Mad.Inventory.ClearItemPaint(enum class EMadItemSlot Slot); // Function Madness.MadCheatManager.Mad.Inventory.ClearItemPaint // (Final|Exec|Native|Public) // @ game+0x15c0420
	void Mad.Tutorial.ClearGlobalTutorialsSeen(); // Function Madness.MadCheatManager.Mad.Tutorial.ClearGlobalTutorialsSeen // (Final|Exec|Native|Protected) // @ game+0x15c0400
	void Mad.Debug.Facts.ClearBreakpoints(struct FString FilterText); // Function Madness.MadCheatManager.Mad.Debug.Facts.ClearBreakpoints // (Final|Exec|Native|Public) // @ game+0x15c0360
	void Mad.Debug.ClearErrorPopupFlag(); // Function Madness.MadCheatManager.Mad.Debug.ClearErrorPopupFlag // (Final|Exec|Native|Public) // @ game+0x15c0340
	void Mad.Inventory.ClearArmorsSkin(); // Function Madness.MadCheatManager.Mad.Inventory.ClearArmorsSkin // (Final|Exec|Native|Public) // @ game+0x15c0320
	void Mad.Inventory.ClaimOneTimeReward(struct FString InRewardName); // Function Madness.MadCheatManager.Mad.Inventory.ClaimOneTimeReward // (Final|Exec|Native|Public) // @ game+0x15c0280
	void Mad.Difficulty.ClaimDifficultyReward(enum class None DifficultyLevel); // Function Madness.MadCheatManager.Mad.Difficulty.ClaimDifficultyReward // (Final|Exec|Native|Public) // @ game+0x15c0200
	void Mad.EnochAccolades.ClaimAllAccoladeRewards(); // Function Madness.MadCheatManager.Mad.EnochAccolades.ClaimAllAccoladeRewards // (Final|Exec|Native|Public) // @ game+0x15c01e0
	void Mad.EnochAccolades.ClaimAccoladeTierRewards(int32_t AccoladeIdx, int32_t TierIdx); // Function Madness.MadCheatManager.Mad.EnochAccolades.ClaimAccoladeTierRewards // (Final|Exec|Native|Public) // @ game+0x15c0120
	void Mad.Difficulty.ChangeMaxDifficultyLevel(enum class None DifficultyLevel); // Function Madness.MadCheatManager.Mad.Difficulty.ChangeMaxDifficultyLevel // (Final|Exec|Native|Public) // @ game+0x15c00a0
	void Mad.Difficulty.ChangeDifficultyProgress(float DifficultyProgress); // Function Madness.MadCheatManager.Mad.Difficulty.ChangeDifficultyProgress // (Final|Exec|Native|Public) // @ game+0x15c0020
	void Mad.Difficulty.ChangeDifficultyLevel(enum class None DifficultyLevel); // Function Madness.MadCheatManager.Mad.Difficulty.ChangeDifficultyLevel // (Final|Exec|Native|Public) // @ game+0x15bffa0
	void Mad.Customization.ChangeCharacterGender(enum class EMadGender Gender); // Function Madness.MadCheatManager.Mad.Customization.ChangeCharacterGender // (Final|Exec|Native|Protected) // @ game+0x15bff20
	void Mad.Quest.BeginStage(struct FName QuestID, int32_t Stage); // Function Madness.MadCheatManager.Mad.Quest.BeginStage // (Final|Exec|Native|Public) // @ game+0x15bfe60
	void Mad.Quest.Begin(struct FName QuestID); // Function Madness.MadCheatManager.Mad.Quest.Begin // (Final|Exec|Native|Public) // @ game+0x15bfde0
	void Mad.Gameplay.Badass(); // Function Madness.MadCheatManager.Mad.Gameplay.Badass // (Final|Exec|Native|Public) // @ game+0x15bfdc0
	void Badass(); // Function Madness.MadCheatManager.Badass // (Final|Exec|Native|Public) // @ game+0x15bfdc0
	void Mad.AutoWalkthrough(float Timeout); // Function Madness.MadCheatManager.Mad.AutoWalkthrough // (Final|Exec|Native|Public) // @ game+0x15bfd40
	void JIRA.AssignIssueTo(struct FString IssueID, struct FString Username); // Function Madness.MadCheatManager.JIRA.AssignIssueTo // (Final|Exec|Native|Public) // @ game+0x15bf450
	void Mad.Leveling.ApplySkillTemplate(struct FString Template); // Function Madness.MadCheatManager.Mad.Leveling.ApplySkillTemplate // (Final|Exec|Native|Protected) // @ game+0x15bfc60
	void Mad.Debug.AppendCommandline(struct FString Option); // Function Madness.MadCheatManager.Mad.Debug.AppendCommandline // (Final|Exec|Native|Public) // @ game+0x15bfb80
	void Mad.Inventory.AddWeapon(struct FName WeaponName, int32_t Level, enum class EMadItemRarity Rarity, enum class EMadItemSlot Slot); // Function Madness.MadCheatManager.Mad.Inventory.AddWeapon // (Final|Exec|Native|Public) // @ game+0x15bfa30
	void JIRA.AddScreenShotToIssue(struct FString IssueID, struct FString ShotName); // Function Madness.MadCheatManager.JIRA.AddScreenShotToIssue // (Final|Exec|Native|Public) // @ game+0x15bf940
	void JIRA.AddSaveFilesToIssue(struct FString IssueID); // Function Madness.MadCheatManager.JIRA.AddSaveFilesToIssue // (Final|Exec|Native|Public) // @ game+0x15bf8a0
	void Mad.Inventory.AddResource(struct FName Name, int32_t Quantity); // Function Madness.MadCheatManager.Mad.Inventory.AddResource // (Final|Exec|Native|Public) // @ game+0x15bf7e0
	void Mad.Inventory.AddRandomInventory(int32_t Level, enum class EMadItemRarity Rarity, bool bIncludeArmors, bool bIncludeWeapons, struct FName ArmorSet); // Function Madness.MadCheatManager.Mad.Inventory.AddRandomInventory // (Final|Exec|Native|Public) // @ game+0x15bf640
	void Mad.Inventory.AddLoot(struct FName LootName, int32_t Level, enum class EMadItemRarity Rarity); // Function Madness.MadCheatManager.Mad.Inventory.AddLoot // (Final|Exec|Native|Public) // @ game+0x15bf540
	void JIRA.AddLogToIssue(struct FString IssueID, struct FString LogName); // Function Madness.MadCheatManager.JIRA.AddLogToIssue // (Final|Exec|Native|Public) // @ game+0x15bf450
	void Mad.Gameplay.AddFocus(); // Function Madness.MadCheatManager.Mad.Gameplay.AddFocus // (Final|Exec|Native|Public) // @ game+0x15bf430
	void Mad.Debug.Facts.AddBreakpoint(struct FString FilterText); // Function Madness.MadCheatManager.Mad.Debug.Facts.AddBreakpoint // (Final|Exec|Native|Public) // @ game+0x15bf390
	void Mad.Leveling.AddExpierence(float Exp); // Function Madness.MadCheatManager.Mad.Leveling.AddExpierence // (Final|Exec|Native|Protected) // @ game+0x15bf310
	void Mad.Emotes.AddEmote(struct FString InUMadEmoteDataName); // Function Madness.MadCheatManager.Mad.Emotes.AddEmote // (Final|Exec|Native|Public) // @ game+0x15bf230
	void Mad.Challenge.AddCachedLoot(struct FName LootName, int32_t Level, enum class EMadItemRarity Rarity); // Function Madness.MadCheatManager.Mad.Challenge.AddCachedLoot // (Final|Exec|Native|Public) // @ game+0x15bf130
	void Mad.Inventory.AddArmorSet(struct FName SetName, int32_t Level, enum class EMadItemRarity Rarity); // Function Madness.MadCheatManager.Mad.Inventory.AddArmorSet // (Final|Exec|Native|Public) // @ game+0x15bf030
	void Mad.Inventory.AddArmorPart(enum class EMadArmorPart ArmorPart, int32_t Level, enum class EMadItemRarity Rarity); // Function Madness.MadCheatManager.Mad.Inventory.AddArmorPart // (Final|Exec|Native|Public) // @ game+0x15bef30
	void Mad.Inventory.AddArmor(struct FName ArmorName, int32_t Level, enum class EMadItemRarity Rarity); // Function Madness.MadCheatManager.Mad.Inventory.AddArmor // (Final|Exec|Native|Public) // @ game+0x15bee30
	void Mad.EnochAccolades.AddProgressPoints(int32_t InAPP); // Function Madness.MadCheatManager.Mad.EnochAccolades.AddProgressPoints // (Final|Exec|Native|Public) // @ game+0x15bedb0
	void Mad.AbilitySystem.ActivateDebugScriptExecution(struct FName InAbilityName); // Function Madness.MadCheatManager.Mad.AbilitySystem.ActivateDebugScriptExecution // (Final|Exec|Native|Public) // @ game+0x15bed30
	void Mad.Challenge.ActivateJoinBlock(); // Function Madness.MadCheatManager.Mad.Challenge.ActivateJoinBlock // (Final|Exec|Native|Public) // @ game+0x15bed10
	void Mad.Challenge.ActivateChallenge(int32_t ID); // Function Madness.MadCheatManager.Mad.Challenge.ActivateChallenge // (Final|RequiredAPI|Exec|Native|Public) // @ game+0x15bec90
	void Mad.AbilitySystem.AbortAllAbilities(); // Function Madness.MadCheatManager.Mad.AbilitySystem.AbortAllAbilities // (Final|Exec|Native|Public) // @ game+0x15bec70
};

// Class Madness.MadCinematicChar
// Size: 0x3a8 (Inherited: 0x380)
struct AMadCinematicChar : ABaseCinematicChar {
	char UnknownData_380[0x10]; // 0x380(0x10)
	struct UAnimNotifyEffectsComponent* AnimNotifyEffectsComponent; // 0x390(0x08)
	struct UCharacterEffectsTemplate* CharacterEffectTemplate; // 0x398(0x08)
	struct FGameplayTag GameplayName; // 0x3a0(0x08)

	void OnMeshLoaded(struct USkeletalMesh* SkeletalMesh, struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Madness.MadCinematicChar.OnMeshLoaded // (Final|Native|Protected) // @ game+0x15cf070
};

// Class Madness.MadCinematicData
// Size: 0x80 (Inherited: 0x30)
struct UMadCinematicData : UDataAsset {
	struct TMap<struct FName, struct FCinematicPlaybackParams> CinematicPlaybackParams; // 0x30(0x50)
};

// Class Madness.MadCinematicUIModel
// Size: 0x78 (Inherited: 0x50)
struct UMadCinematicUIModel : UBaseUIModel {
	char UnknownData_50[0x8]; // 0x50(0x08)
	char UnknownData_58_0 : 7; // 0x58(0x01)
	bool bCanBeSkipped : 1; // 0x58(0x01)
	char UnknownData_59_0 : 7; // 0x59(0x01)
	bool bShowCinematicUI : 1; // 0x59(0x01)
	char UnknownData_5A[0x1e]; // 0x5a(0x1e)

	void OnVoteStateChanged(struct FVoteState VoteState); // Function Madness.MadCinematicUIModel.OnVoteStateChanged // (Final|Native|Public|HasOutParms) // @ game+0x15cf4d0
	void OnShowCinematicSkipUpdated(bool bShow); // Function Madness.MadCinematicUIModel.OnShowCinematicSkipUpdated // (Final|Native|Public) // @ game+0x15cf420
	void OnCanSkipSequenceUpdated(); // Function Madness.MadCinematicUIModel.OnCanSkipSequenceUpdated // (Final|Native|Public) // @ game+0x15cedb0
};

// Class Madness.MadClothPlayerCollide
// Size: 0x2f0 (Inherited: 0x2f0)
struct AMadClothPlayerCollide : AActor {
};

// Class Madness.MadCoherentUIGTWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMadCoherentUIGTWidget : UCoherentUIGTWidget {
	char UnknownData_2C0[0x18]; // 0x2c0(0x18)
};

// Class Madness.BestiaryDataAsset
// Size: 0x80 (Inherited: 0x30)
struct UBestiaryDataAsset : UDataAsset {
	struct TMap<struct FName, struct FBestiaryEntryFilter> Bestiary; // 0x30(0x50)
};

// Class Madness.MadCollectibleGlobals
// Size: 0x118 (Inherited: 0x30)
struct UMadCollectibleGlobals : UDataAsset {
	struct TArray<struct UDataTable*> JournalDataTables; // 0x30(0x10)
	struct TArray<struct UBestiaryDataAsset*> BestiaryData; // 0x40(0x10)
	struct UDataTable* CollectibleBoxesViewDT; // 0x50(0x08)
	struct TArray<struct FJournalCategory> JournalCategories; // 0x58(0x10)
	struct TArray<struct FJournalCategory> JournalSubCategories; // 0x68(0x10)
	char UnknownData_78[0xa0]; // 0x78(0xa0)
};

// Class Madness.MadCollectiblePickup
// Size: 0x348 (Inherited: 0x2f0)
struct AMadCollectiblePickup : AActor {
	struct UMeshComponent* BaseMesh; // 0x2f0(0x08)
	struct UStaticMeshComponent* AdditionalMesh1; // 0x2f8(0x08)
	struct UStaticMeshComponent* AdditionalMesh2; // 0x300(0x08)
	struct UStaticMeshComponent* AdditionalMesh3; // 0x308(0x08)
	struct ULocalInteractionComponent* Interaction; // 0x310(0x08)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bStartEnabled : 1; // 0x318(0x01)
	char UnknownData_319[0x3]; // 0x319(0x03)
	struct FName CollectibleKey; // 0x31c(0x08)
	char UnknownData_324[0x4]; // 0x324(0x04)
	struct FMulticastInlineDelegate OnCollected; // 0x328(0x10)
	char UnknownData_338[0x10]; // 0x338(0x10)

	void SetEnabled(bool bInEnabled); // Function Madness.MadCollectiblePickup.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x15cf790
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadCollectiblePickup.OnInteracted // (Final|Native|Protected) // @ game+0x15ceef0
	void OnCollectibleStateChanged(bool bIsCollected); // Function Madness.MadCollectiblePickup.OnCollectibleStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	bool IsSeen(); // Function Madness.MadCollectiblePickup.IsSeen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15ce8b0
	bool IsEnabled(); // Function Madness.MadCollectiblePickup.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15ce880
	bool IsCollected(); // Function Madness.MadCollectiblePickup.IsCollected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15ce850
};

// Class Madness.MadPlayerState
// Size: 0xa20 (Inherited: 0x4c8)
struct AMadPlayerState : ABasePlayerState {
	char UnknownData_4C8[0x58]; // 0x4c8(0x58)
	struct UTextureRenderTarget2D* BannerRenderTargetLoaded; // 0x520(0x08)
	char UnknownData_528_0 : 7; // 0x528(0x01)
	bool bPlayerWasInvited : 1; // 0x528(0x01)
	char UnknownData_529[0x7]; // 0x529(0x07)
	struct FMulticastInlineDelegate OnGenderChanged; // 0x530(0x10)
	enum class EMadGender Gender; // 0x540(0x01)
	char UnknownData_541[0x3]; // 0x541(0x03)
	struct FName CurrentUIState; // 0x544(0x08)
	char UnknownData_54C[0x1c]; // 0x54c(0x1c)
	enum class EMadPlatform ReplicatedPlayerPlatform; // 0x568(0x01)
	char UnknownData_569[0x1]; // 0x569(0x01)
	char UnknownData_56A_0 : 7; // 0x56a(0x01)
	bool bIsCharacterSaved : 1; // 0x56a(0x01)
	char UnknownData_56B[0x5]; // 0x56b(0x05)
	struct FMadnessCharacterProgress CharacterProgress; // 0x570(0x50)
	struct FCharacterCustomiationData CharacterLook; // 0x5c0(0x0b)
	char UnknownData_5CB[0x5]; // 0x5cb(0x05)
	struct TArray<struct FMadActiveSkill> PlayerActiveSkills; // 0x5d0(0x10)
	struct FMadConvoySaveData PlayerConvoy; // 0x5e0(0x158)
	struct FMadInventorySaveData PlayerInventory; // 0x738(0xd0)
	struct FMadInventorySaveData OnlineStash; // 0x808(0xd0)
	struct TArray<bool> PlayerTutorialVariables; // 0x8d8(0x10)
	struct FMadEmoteSaveData CharacterEmotes; // 0x8e8(0x30)
	enum class EPlayerDeathReason LastDeathReason; // 0x918(0x04)
	char UnknownData_91C_0 : 7; // 0x91c(0x01)
	bool bJoinedByMatchmaking : 1; // 0x91c(0x01)
	char UnknownData_91D[0x3]; // 0x91d(0x03)
	struct FMadCharacterChallengesData CharacterChallengesData; // 0x920(0x50)
	struct AMadDifficultyController* DifficultyController; // 0x970(0x08)
	struct UMadMetricsComponent* MetricsComponent; // 0x978(0x08)
	char UnknownData_980_0 : 7; // 0x980(0x01)
	bool bIsLobbyUIUpdated : 1; // 0x980(0x01)
	char UnknownData_981[0x17]; // 0x981(0x17)
	int32_t DBNOCounter; // 0x998(0x04)
	int32_t DBNOCounterLimit; // 0x99c(0x04)
	char UnknownData_9A0_0 : 7; // 0x9a0(0x01)
	bool bFirstReviveBonus : 1; // 0x9a0(0x01)
	char UnknownData_9A1[0x3]; // 0x9a1(0x03)
	struct FCharacterTelemetryData TelemetryData; // 0x9a4(0x10)
	char UnknownData_9B4[0x4]; // 0x9b4(0x04)
	struct FHeroStatsData HeroStatsData; // 0x9b8(0x10)
	struct AMadEnochAccoladesController* EnochAccoladesController; // 0x9c8(0x08)
	struct UMadCollectibleTrackerComponent* CollectibleTracker; // 0x9d0(0x08)
	struct FMulticastInlineDelegate OnShowHeadgearChanged; // 0x9d8(0x10)
	char UnknownData_9E8_0 : 7; // 0x9e8(0x01)
	bool bShowHeadgear : 1; // 0x9e8(0x01)
	char UnknownData_9E9[0x7]; // 0x9e9(0x07)
	struct FMulticastInlineDelegate OnPlayerInitialReplicationFinished; // 0x9f0(0x10)
	struct FMulticastInlineDelegate OnPlayerCoopReady; // 0xa00(0x10)
	struct FMulticastInlineDelegate OnPlayerHostMigrationReady; // 0xa10(0x10)

	void ShowHeadgear(bool bNewShowHeadgear); // Function Madness.MadPlayerState.ShowHeadgear // (Final|Native|Public|BlueprintCallable) // @ game+0x16b51b0
	bool ShouldShowHeadgear(); // Function Madness.MadPlayerState.ShouldShowHeadgear // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16b5190
	void ServerStartSideQuestVote(struct AMadSideQuestTrigger* SideQuestTrigger, struct FMadSideQuestInfo Info); // Function Madness.MadPlayerState.ServerStartSideQuestVote // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16b4d80
	void ServerShowHeadgear(bool bNewShowHeadgear); // Function Madness.MadPlayerState.ServerShowHeadgear // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16b4cf0
	void ServerSetUIStateName(struct FName StateName); // Function Madness.MadPlayerState.ServerSetUIStateName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16b4c60
	void ServerSetPlayerPlatform(enum class EMadPlatform Platform); // Function Madness.MadPlayerState.ServerSetPlayerPlatform // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16b4be0
	void ServerSetJoinedByMatchmaking(bool bValue); // Function Madness.MadPlayerState.ServerSetJoinedByMatchmaking // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16b4b50
	void ServerSetCharacterGender(enum class EMadGender InGender); // Function Madness.MadPlayerState.ServerSetCharacterGender // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16b4ad0
	void ServerSendFactBunch(struct TArray<struct FFactEntryDTO> CompressedData); // Function Madness.MadPlayerState.ServerSendFactBunch // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16b4a10
	void ServerOpenFactChannel(int32_t Size); // Function Madness.MadPlayerState.ServerOpenFactChannel // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16b4980
	void ServerLobbyChangePlayedCharacter(struct FString InNewCharacter, enum class EMadGender InNewGender); // Function Madness.MadPlayerState.ServerLobbyChangePlayedCharacter // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16b48a0
	void ServerLoadFacts(struct TArray<struct FFactEntryDTO> FactEntryDTOArray); // Function Madness.MadPlayerState.ServerLoadFacts // (Final|Native|Protected|HasOutParms) // @ game+0x16b47d0
	void ServerCloseFactChannel(); // Function Madness.MadPlayerState.ServerCloseFactChannel // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16b47b0
	void ServerClearArenaFacts(); // Function Madness.MadPlayerState.ServerClearArenaFacts // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x16b4790
	void ServerChallengeStarted(); // Function Madness.MadPlayerState.ServerChallengeStarted // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16b4770
	void ResetDBNOCounter(); // Function Madness.MadPlayerState.ResetDBNOCounter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16b41d0
	void OnTeamWipeout(); // Function Madness.MadPlayerState.OnTeamWipeout // (Final|Native|Protected) // @ game+0x16b41d0
	void OnSetupBannerRenderTargetLoaded(); // Function Madness.MadPlayerState.OnSetupBannerRenderTargetLoaded // (Final|Native|Protected) // @ game+0x16b38f0
	void OnRep_ShowHeadgear(); // Function Madness.MadPlayerState.OnRep_ShowHeadgear // (Final|Native|Private) // @ game+0x16b3780
	void OnRep_Gender(); // Function Madness.MadPlayerState.OnRep_Gender // (Final|Native|Private) // @ game+0x16b3760
	void OnRep_CurrentUIState(); // Function Madness.MadPlayerState.OnRep_CurrentUIState // (Final|Native|Private) // @ game+0x16b3740
	void OnDebugCharacterListCompleted(bool bSuccess); // Function Madness.MadPlayerState.OnDebugCharacterListCompleted // (Final|Native|Protected) // @ game+0x16b31c0
	void OnClientCrossPlatformSettingUpdated(bool bEnabled); // Function Madness.MadPlayerState.OnClientCrossPlatformSettingUpdated // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16b3110
	void OnChallengeStart(); // Function Madness.MadPlayerState.OnChallengeStart // (Final|Native|Public) // @ game+0x16b2da0
	void OnChallengeEnd(); // Function Madness.MadPlayerState.OnChallengeEnd // (Final|Native|Public) // @ game+0x16b2d80
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadPlayerState.OnBattleStateChanged // (Final|Native|Protected) // @ game+0x16b2c60
	void LoadTelemetryData(struct FCharacterTelemetryData InTelemetryData); // Function Madness.MadPlayerState.LoadTelemetryData // (Final|Native|Public|BlueprintCallable) // @ game+0x16b2a10
	void LoadHeroStatsData(struct FHeroStatsData InHeroStatsData); // Function Madness.MadPlayerState.LoadHeroStatsData // (Final|Native|Public|BlueprintCallable) // @ game+0x16b2930
	void LoadFacts(struct TArray<struct FFactEntryDTO> FactEntryDTOArray); // Function Madness.MadPlayerState.LoadFacts // (Final|Native|Private|HasOutParms) // @ game+0x16b2860
	struct FCharacterTelemetryData GetTelemetryData(); // Function Madness.MadPlayerState.GetTelemetryData // (Final|Native|Public|BlueprintCallable) // @ game+0x16b2730
	struct UMadMetricsComponent* GetMetricsComponent(); // Function Madness.MadPlayerState.GetMetricsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16b2420
	struct FHeroStatsData GetHeroStatsData(); // Function Madness.MadPlayerState.GetHeroStatsData // (Final|Native|Public|BlueprintCallable) // @ game+0x16b23e0
	struct AMadEnochAccoladesController* GetEnochAccoladesController(); // Function Madness.MadPlayerState.GetEnochAccoladesController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16b23c0
	struct AMadDifficultyController* GetDifficultyController(); // Function Madness.MadPlayerState.GetDifficultyController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16b23a0
	enum class EMadGender GetCharacterGender(); // Function Madness.MadPlayerState.GetCharacterGender // (Final|Native|Public|BlueprintCallable) // @ game+0x16b2380
};

// Class Madness.MadCollectibleTrackerComponent
// Size: 0x260 (Inherited: 0x180)
struct UMadCollectibleTrackerComponent : UActorComponent {
	struct TArray<struct FCollectibleJournalEntryStatus> JournalEntries; // 0x180(0x10)
	char UnknownData_190[0xc8]; // 0x190(0xc8)
	char UnknownData_258_0 : 7; // 0x258(0x01)
	bool bHasBeenInitalized : 1; // 0x258(0x01)
	char UnknownData_259[0x7]; // 0x259(0x07)

	void OnCharacterKilled(struct ABaseCharacter* character); // Function Madness.MadCollectibleTrackerComponent.OnCharacterKilled // (Final|Native|Protected) // @ game+0x15cedd0
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadCollectibleTrackerComponent.OnBattleStateChanged // (Final|Native|Protected) // @ game+0x15ceb80
};

// Class Madness.MadCollectibleTrigger
// Size: 0x308 (Inherited: 0x2f8)
struct AMadCollectibleTrigger : ATriggerBox {
	struct FName CollectibleKey; // 0x2f8(0x08)
	char UnknownData_300_0 : 7; // 0x300(0x01)
	bool bEnabled : 1; // 0x300(0x01)
	char UnknownData_301[0x7]; // 0x301(0x07)

	void SetEnabled(bool bInEnabled); // Function Madness.MadCollectibleTrigger.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x15cf820
	void OnOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadCollectibleTrigger.OnOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x15cf130
};

// Class Madness.MadCollectibleUIModel
// Size: 0x98 (Inherited: 0x50)
struct UMadCollectibleUIModel : UBaseUIModel {
	char UnknownData_50[0x48]; // 0x50(0x48)

	void SetCollectibleSeen(struct FName CollectibleKey, bool bSeen); // Function Madness.MadCollectibleUIModel.SetCollectibleSeen // (Final|Native|Public) // @ game+0x15cf6c0
	struct FText GetSubcategoryDisplayName(struct FName Subcategory); // Function Madness.MadCollectibleUIModel.GetSubcategoryDisplayName // (Final|Native|Public|Const) // @ game+0x15ce7b0
	struct TArray<struct FCollectibleJournalEntryStatus> GetJournalEntriesInRegion(struct FName regionname, int32_t EntryType); // Function Madness.MadCollectibleUIModel.GetJournalEntriesInRegion // (Final|Native|Public|Const) // @ game+0x15ce4b0
	struct TArray<struct FCollectibleJournalEntryStatus> GetJournalEntriesByCategory(struct FName Category, bool bOnlyUnlocked); // Function Madness.MadCollectibleUIModel.GetJournalEntriesByCategory // (Final|Native|Public|Const) // @ game+0x15ce380
	struct TArray<struct FCollectibleJournalEntryStatus> GetJournalEntires(); // Function Madness.MadCollectibleUIModel.GetJournalEntires // (Final|Native|Public|Const) // @ game+0x15ce2e0
	struct FText GetCategoryDisplayName(struct FName Category); // Function Madness.MadCollectibleUIModel.GetCategoryDisplayName // (Final|Native|Public|Const) // @ game+0x15ce240
};

// Class Madness.MadContextPanel
// Size: 0x138 (Inherited: 0x28)
struct UMadContextPanel : UObject {
	struct FText Title; // 0x28(0x18)
	struct FText Description; // 0x40(0x18)
	char UnknownData_58[0x8]; // 0x58(0x08)
	struct FString Type; // 0x60(0x10)
	float Timeout; // 0x70(0x04)
	int32_t Priority; // 0x74(0x04)
	int32_t PriorityOverride; // 0x78(0x04)
	int32_t ID; // 0x7c(0x04)
	struct TMap<struct FName, struct FText> ButtonLabels; // 0x80(0x50)
	char UnknownData_D0_0 : 7; // 0xd0(0x01)
	bool bHasFocus : 1; // 0xd0(0x01)
	char UnknownData_D1_0 : 7; // 0xd1(0x01)
	bool bIsInteractable : 1; // 0xd1(0x01)
	char UnknownData_D2[0x66]; // 0xd2(0x66)
};

// Class Madness.MadContextPanelManagerUIModel
// Size: 0xe8 (Inherited: 0x50)
struct UMadContextPanelManagerUIModel : UBaseUIModel {
	char UnknownData_50[0x10]; // 0x50(0x10)
	struct TArray<struct UMadContextPanel*> PanelList; // 0x60(0x10)
	struct TArray<struct UMadContextPanel*> PanelToDeleteList; // 0x70(0x10)
	struct TArray<struct UMadContextPanel*> BufferedPanels; // 0x80(0x10)
	char UnknownData_90[0x50]; // 0x90(0x50)
	struct UBaseQuest* LastAreaQuest; // 0xe0(0x08)

	void ResendOnAddContextPanelEvents(); // Function Madness.MadContextPanelManagerUIModel.ResendOnAddContextPanelEvents // (Final|Native|Public) // @ game+0x15cf680
	void OnVoteVisibilityChanged(bool bVisible, int32_t InVoteReason); // Function Madness.MadContextPanelManagerUIModel.OnVoteVisibilityChanged // (Final|Native|Protected) // @ game+0x15cf570
	void OnReadyToRemovePanel(int32_t PanelID); // Function Madness.MadContextPanelManagerUIModel.OnReadyToRemovePanel // (Final|Native|Public) // @ game+0x15cf3a0
	void OnMaxDifficultyLevelChanged(); // Function Madness.MadContextPanelManagerUIModel.OnMaxDifficultyLevelChanged // (Final|Native|Protected) // @ game+0x15cf050
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadContextPanelManagerUIModel.OnLevelTransitionCompleted // (Final|Native|Protected) // @ game+0x15cefd0
	void OnHeroSkillPointsChanged(); // Function Madness.MadContextPanelManagerUIModel.OnHeroSkillPointsChanged // (Final|Native|Protected) // @ game+0x15cee50
	void OnAccoladeTierCompleted(struct UMadEnochAccolade* Accolade, struct FTierCompleteData TierCompleteData); // Function Madness.MadContextPanelManagerUIModel.OnAccoladeTierCompleted // (Final|Native|Protected|HasOutParms) // @ game+0x15ce9a0
	void OnAccoladesLevelChanged(int32_t OldLevel, int32_t NewLevel); // Function Madness.MadContextPanelManagerUIModel.OnAccoladesLevelChanged // (Final|Native|Protected) // @ game+0x15ceac0
};

// Class Madness.MadControlledBall
// Size: 0x3d0 (Inherited: 0x350)
struct AMadControlledBall : APawn {
	char UnknownData_350[0x8]; // 0x350(0x08)
	char UnknownData_358_0 : 7; // 0x358(0x01)
	bool bSteeringAllowed : 1; // 0x358(0x01)
	char UnknownData_359[0x3]; // 0x359(0x03)
	float DurationAfterLanded; // 0x35c(0x04)
	float DurationAfterExplosion; // 0x360(0x04)
	float ThresholdSpeed; // 0x364(0x04)
	float SteeringImpulseMagnitude; // 0x368(0x04)
	float PawnToBallBlendIn; // 0x36c(0x04)
	float PawnToBallBlendOut; // 0x370(0x04)
	int32_t ExplosionDamage; // 0x374(0x04)
	float ExplosionRadius; // 0x378(0x04)
	char UnknownData_37C[0x4]; // 0x37c(0x04)
	struct UDamageType* DamageType; // 0x380(0x08)
	struct AExplosionEffect* ExplosionEffect; // 0x388(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x390(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x398(0x08)
	struct UProjectileMovementComponent* MovementComp; // 0x3a0(0x08)
	struct UMadSpringArmComponent* CameraBoomComponent; // 0x3a8(0x08)
	struct UCameraComponent* FollowCameraComponent; // 0x3b0(0x08)
	char UnknownData_3B8_0 : 7; // 0x3b8(0x01)
	bool bLanded : 1; // 0x3b8(0x01)
	char UnknownData_3B9_0 : 7; // 0x3b9(0x01)
	bool bExploded : 1; // 0x3b9(0x01)
	char UnknownData_3BA[0x6]; // 0x3ba(0x06)
	struct APawn* PreviousPawn; // 0x3c0(0x08)
	char UnknownData_3C8[0x8]; // 0x3c8(0x08)

	void OnExploded(); // Function Madness.MadControlledBall.OnExploded // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnBounce(struct FHitResult ImpactResult, struct FVector ImpactVelocity); // Function Madness.MadControlledBall.OnBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x15cec10
	void Explode(); // Function Madness.MadControlledBall.Explode // (Final|Native|Public|BlueprintCallable) // @ game+0x15ce220
	void DelayedPosses(); // Function Madness.MadControlledBall.DelayedPosses // (Final|Native|Protected) // @ game+0x15ce200
};

// Class Madness.MadControlsUIModel
// Size: 0x160 (Inherited: 0x50)
struct UMadControlsUIModel : UBaseUIModel {
	char UnknownData_50[0x50]; // 0x50(0x50)
	enum class EInputType CurrentInputType; // 0xa0(0x01)
	char UnknownData_A1[0x7]; // 0xa1(0x07)
	struct FString PlatformName; // 0xa8(0x10)
	char UnknownData_B8_0 : 7; // 0xb8(0x01)
	bool bIsUsingAlternateEnter : 1; // 0xb8(0x01)
	char UnknownData_B9[0x37]; // 0xb9(0x37)
	struct TArray<struct FBindingUIData> KeyMappings; // 0xf0(0x10)
	char UnknownData_100_0 : 7; // 0x100(0x01)
	bool bKeyboardMappingsChanged : 1; // 0x100(0x01)
	char UnknownData_101_0 : 7; // 0x101(0x01)
	bool bShowPiracyWarning : 1; // 0x101(0x01)
	char UnknownData_102[0x5e]; // 0x102(0x5e)

	void ShowStoreUI(int32_t GamepadIndex, struct FString StoreCategory); // Function Madness.MadControlsUIModel.ShowStoreUI // (Final|Native|Public) // @ game+0x15cf8b0
	void ResetKeyMappings(); // Function Madness.MadControlsUIModel.ResetKeyMappings // (Final|Native|Public) // @ game+0x15cf6a0
	void RequestTitleScreenInput(); // Function Madness.MadControlsUIModel.RequestTitleScreenInput // (Final|Native|Public) // @ game+0x15cf660
	void RequestSignInScreen(); // Function Madness.MadControlsUIModel.RequestSignInScreen // (Final|Native|Public) // @ game+0xe8aaf0
	void RequestSEMembershipAccountLinking(); // Function Madness.MadControlsUIModel.RequestSEMembershipAccountLinking // (Final|Native|Public) // @ game+0x15cf630
	void OnUIModelInitialized(); // Function Madness.MadControlsUIModel.OnUIModelInitialized // (Final|Native|Public) // @ game+0x15cf4b0
	void OnKeyMappingsChanged(); // Function Madness.MadControlsUIModel.OnKeyMappingsChanged // (Final|Native|Public) // @ game+0x15cefb0
	void OnInputTypeChanged(enum class EInputType NewInputType); // Function Madness.MadControlsUIModel.OnInputTypeChanged // (Final|Native|Public) // @ game+0x15cee70
	void ListenForKey(int32_t KeyID, bool bIsPrimary); // Function Madness.MadControlsUIModel.ListenForKey // (Final|Native|Public) // @ game+0x15ce8e0
	enum class EInputType GetLastGamepadDetected(); // Function Madness.MadControlsUIModel.GetLastGamepadDetected // (Final|Native|Public|Const) // @ game+0x15ce790
	struct FCoherentActionKeys GetKeyMappingsForAction(struct FString ActionName); // Function Madness.MadControlsUIModel.GetKeyMappingsForAction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x15ce5e0
};

// Class Madness.MadConvoy
// Size: 0x440 (Inherited: 0x2f0)
struct AMadConvoy : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FMulticastInlineDelegate OnConvoyModified; // 0x2f8(0x10)
	struct FWeakObjectPtr<struct AMadPlayerCharacter> OwningCharacter; // 0x308(0x08)
	struct FMulticastInlineDelegate OnConvoyDecorated; // 0x310(0x10)
	struct FMulticastInlineDelegate OnConvoyColored; // 0x320(0x10)
	struct TArray<struct FName> Decorations; // 0x330(0x10)
	int32_t SelectedColorId; // 0x340(0x04)
	int32_t SelectedDecalId; // 0x344(0x04)
	char UnknownData_348[0x20]; // 0x348(0x20)
	struct UMadConvoyUIModel* UIModel; // 0x368(0x08)
	struct FMadConvoyUnlockableCustomizationsSaveModel UnlockedCustomizations; // 0x370(0x80)
	char UnknownData_3F0[0x4]; // 0x3f0(0x04)
	int32_t CurrentPetID; // 0x3f4(0x04)
	char UnknownData_3F8[0x20]; // 0x3f8(0x20)
	struct FMadBannerFlagModel SelectedBannerModel; // 0x418(0x24)
	char UnknownData_43C_0 : 7; // 0x43c(0x01)
	bool bConvoySaveWasApplied : 1; // 0x43c(0x01)
	char UnknownData_43D_0 : 7; // 0x43d(0x01)
	bool bDefaultCustomizationsAdded : 1; // 0x43d(0x01)
	char UnknownData_43E[0x2]; // 0x43e(0x02)

	void SetPetID(int32_t ID); // Function Madness.MadConvoy.SetPetID // (Final|Native|Public) // @ game+0x15da730
	void ServerSetSkinSet(struct FName SkinSetName); // Function Madness.MadConvoy.ServerSetSkinSet // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da630
	void ServerSetPetID(int32_t ID); // Function Madness.MadConvoy.ServerSetPetID // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da5a0
	void ServerSetDecal(int32_t DecalId); // Function Madness.MadConvoy.ServerSetDecal // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da510
	void ServerSetColor(int32_t ColorId); // Function Madness.MadConvoy.ServerSetColor // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da480
	void ServerSetBanner(struct FMadBannerFlagModel NewModel); // Function Madness.MadConvoy.ServerSetBanner // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da3f0
	void ServerRequestNetUpdate(); // Function Madness.MadConvoy.ServerRequestNetUpdate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15da3d0
	void ServerEnableNetworkOptimization(bool bOptimize); // Function Madness.MadConvoy.ServerEnableNetworkOptimization // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x155efa0
	void ServerDecorate(struct FName DecorationName); // Function Madness.MadConvoy.ServerDecorate // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da340
	void ServerApplySaveData(struct FMadConvoySaveData SaveData); // Function Madness.MadConvoy.ServerApplySaveData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da240
	void ServerApplyPreset(struct UMadConvoyPreset* Preset); // Function Madness.MadConvoy.ServerApplyPreset // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15da1b0
	void ServerAddDefaultUnlockedCustomizations(struct FMadConvoyUnlockableCustomizationsSaveModel DefaultCustomizations); // Function Madness.MadConvoy.ServerAddDefaultUnlockedCustomizations // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x15da060
	void OpenPetMenu(); // Function Madness.MadConvoy.OpenPetMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x15da040
	void OnRep_UnlockedCustomizations(); // Function Madness.MadConvoy.OnRep_UnlockedCustomizations // (Final|Native|Public) // @ game+0x15d9f80
	void OnRep_Decorations(); // Function Madness.MadConvoy.OnRep_Decorations // (Final|Native|Protected) // @ game+0x15d9ee0
	void OnRep_CurrentPetID(); // Function Madness.MadConvoy.OnRep_CurrentPetID // (Final|Native|Private) // @ game+0x15d9ec0
	void OnRep_Color(); // Function Madness.MadConvoy.OnRep_Color // (Final|Native|Protected) // @ game+0x15d9e80
	void OnRep_Banner(); // Function Madness.MadConvoy.OnRep_Banner // (Final|Native|Private) // @ game+0x15d9e60
	void OnOpenPetWindow(); // Function Madness.MadConvoy.OnOpenPetWindow // (Final|Native|Public) // @ game+0x15d9cf0
	void OnClosePetWindow(); // Function Madness.MadConvoy.OnClosePetWindow // (Final|Native|Public) // @ game+0x15d9a70
	bool IsSafeToSave(); // Function Madness.MadConvoy.IsSafeToSave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9a50
	struct FMadConvoyUnlockableCustomizationsSaveModel GetUnlockedConvoyCustomizations(); // Function Madness.MadConvoy.GetUnlockedConvoyCustomizations // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x15d9a20
	struct FMadConvoySaveData GetSaveData(); // Function Madness.MadConvoy.GetSaveData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d96c0
	struct FName GetDecorationName(struct FName Slot); // Function Madness.MadConvoy.GetDecorationName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9390
	int32_t GetDecalId(); // Function Madness.MadConvoy.GetDecalId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9290
	struct FMadBannerFlagModel GetCurrentBannerModel(); // Function Madness.MadConvoy.GetCurrentBannerModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9250
	int32_t GetColorId(); // Function Madness.MadConvoy.GetColorId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9230
	void ClosePetMenu(); // Function Madness.MadConvoy.ClosePetMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x15d8f90
	void ClientMakeUIModel(); // Function Madness.MadConvoy.ClientMakeUIModel // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1560680
	void ClientAddDefaultUnlockedCustomizations(); // Function Madness.MadConvoy.ClientAddDefaultUnlockedCustomizations // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xb14550
};

// Class Madness.MadConvoyAttributeSet
// Size: 0xc0 (Inherited: 0x30)
struct UMadConvoyAttributeSet : UAttributeSet {
	float SuperClipsLeft; // 0x30(0x04)
	float SuperClipsCapacity; // 0x34(0x04)
	float SuperClipsDamageMult; // 0x38(0x04)
	float MaxHealth_Bonus; // 0x3c(0x04)
	float Focus_Bonus; // 0x40(0x04)
	float WeaponConfig_Accuracy; // 0x44(0x04)
	float WeaponConfig_ReloadSpeed; // 0x48(0x04)
	float WeaponConfig_Range; // 0x4c(0x04)
	float WeaponConfig_Stability; // 0x50(0x04)
	float WeaponConfig_RPM; // 0x54(0x04)
	float WeaponConfig_ClipSize; // 0x58(0x04)
	float HeavyWeaponConfig_ClipSize; // 0x5c(0x04)
	float HealingItem_Power; // 0x60(0x04)
	float HealingItem_RegenPower; // 0x64(0x04)
	float HealingItem_RegenTime; // 0x68(0x04)
	float HealingItem_Cooldown; // 0x6c(0x04)
	float HealingItem_CurrentCharges; // 0x70(0x04)
	float HealingItem_MaxCharges; // 0x74(0x04)
	float TriggeredHealPowerMod; // 0x78(0x04)
	float TriggeredHealThresholdMod; // 0x7c(0x04)
	float TriggeredHealCooldownMod; // 0x80(0x04)
	float SupportBuffsOnKillPowerMod; // 0x84(0x04)
	float SupportBuffsOnKillDurationMod; // 0x88(0x04)
	float TankShieldChanceMod; // 0x8c(0x04)
	float TankShieldGainMod; // 0x90(0x04)
	float Armor_Bonus; // 0x94(0x04)
	float AbilityPower_Bonus; // 0x98(0x04)
	float DotPercentageAsHeal; // 0x9c(0x04)
	float AnomalystBonusHealing; // 0xa0(0x04)
	float AnomalystClassHealing; // 0xa4(0x04)
	float AssaultClassHealing; // 0xa8(0x04)
	float AssassinClassHealing; // 0xac(0x04)
	float AssassinClassShield; // 0xb0(0x04)
	float AssassinShieldMitigationBonus; // 0xb4(0x04)
	struct AMadBaseCharacter* CharacterOwner; // 0xb8(0x08)

	void OnRep_WeaponConfig_ClipSize(float LastClipSize); // Function Madness.MadConvoyAttributeSet.OnRep_WeaponConfig_ClipSize // (Final|Native|Public) // @ game+0x15d9fa0
	void OnRep_HeavyWeaponConfig_ClipSize(float LastClipSize); // Function Madness.MadConvoyAttributeSet.OnRep_HeavyWeaponConfig_ClipSize // (Final|Native|Public) // @ game+0x15d9f00
};

// Class Madness.MadConvoyCamp
// Size: 0x430 (Inherited: 0x2f0)
struct AMadConvoyCamp : AActor {
	struct FMulticastInlineDelegate OnDevelopmentChange; // 0x2f0(0x10)
	char UnknownData_300_0 : 7; // 0x300(0x01)
	bool bIsPlayingSequence : 1; // 0x300(0x01)
	char UnknownData_301[0x7]; // 0x301(0x07)
	struct UFactWatcherComponent* TruckVisibilityFactWatcher; // 0x308(0x08)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bSpawnAmmoChest : 1; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	SoftClassProperty AmmoChestClass; // 0x318(0x28)
	struct USceneComponent* Scene; // 0x340(0x08)
	struct USceneComponent* AmmoChestPlaceholder; // 0x348(0x08)
	struct UBillboardComponent* Sprite; // 0x350(0x08)
	struct USceneComponent* Truck1; // 0x358(0x08)
	struct USceneComponent* Truck2; // 0x360(0x08)
	struct USceneComponent* Truck3; // 0x368(0x08)
	struct UMadSkeletalMeshComponent* TruckSkeletal1; // 0x370(0x08)
	struct UMadSkeletalMeshComponent* TruckSkeletal2; // 0x378(0x08)
	struct UMadSkeletalMeshComponent* TruckSkeletal3; // 0x380(0x08)
	struct UStaticMeshComponent* Placeholder1; // 0x388(0x08)
	struct UStaticMeshComponent* Placeholder2; // 0x390(0x08)
	struct UStaticMeshComponent* Placeholder3; // 0x398(0x08)
	struct UBase3DWidgetComponent* Label1; // 0x3a0(0x08)
	struct UBase3DWidgetComponent* Label2; // 0x3a8(0x08)
	struct UBase3DWidgetComponent* Label3; // 0x3b0(0x08)
	struct TArray<struct FWeakObjectPtr<struct AMadConvoy>> Convoys; // 0x3b8(0x10)
	struct TArray<struct FMadConvoyDevelopment> Developments; // 0x3c8(0x10)
	char UnknownData_3D8[0x48]; // 0x3d8(0x48)
	struct AMadAmmoChest* AmmoChest; // 0x420(0x08)
	char UnknownData_428[0x8]; // 0x428(0x08)

	void SetActiveConvoyCamp(struct AMadConvoyCamp* Camp); // Function Madness.MadConvoyCamp.SetActiveConvoyCamp // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x15da6c0
	void OnTruckVisibilityFactChanged(); // Function Madness.MadConvoyCamp.OnTruckVisibilityFactChanged // (Final|Native|Protected) // @ game+0x15da020
	void OnRep_Convoys(); // Function Madness.MadConvoyCamp.OnRep_Convoys // (Final|Native|Protected) // @ game+0x15d9ea0
	void OnRegionStarted(enum class ERegionStartedState RegionState); // Function Madness.MadConvoyCamp.OnRegionStarted // (Final|Native|Private) // @ game+0x15d9de0
	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadConvoyCamp.OnFrameworkSequenceStart // (Final|Native|Protected|HasOutParms) // @ game+0x15d9b30
	void OnFrameworkSequenceEnd(); // Function Madness.MadConvoyCamp.OnFrameworkSequenceEnd // (Final|Native|Protected) // @ game+0x15d9b10
	void OnConvoyModified(struct AMadConvoy* Caller); // Function Madness.MadConvoyCamp.OnConvoyModified // (Final|Native|Protected) // @ game+0x15d9a90
	void MulticastSetActive(bool bActive); // Function Madness.MadConvoyCamp.MulticastSetActive // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x155efa0
	struct FRotator GetMainTruckLocalRotation(struct AMadConvoy* Convoy); // Function Madness.MadConvoyCamp.GetMainTruckLocalRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9620
	void GetAllConvoyActors(struct TArray<struct AActor*> OutActors, struct AMadConvoy* Convoy); // Function Madness.MadConvoyCamp.GetAllConvoyActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x15d9090
};

// Class Madness.MadConvoyGate
// Size: 0x308 (Inherited: 0x2f0)
struct AMadConvoyGate : AActor {
	struct TArray<struct AMadConvoyTruck*> OverlappedTrucks; // 0x2f0(0x10)
	char UnknownData_300[0x8]; // 0x300(0x08)

	void OnTruckReleased(); // Function Madness.MadConvoyGate.OnTruckReleased // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnTruckBlocked(); // Function Madness.MadConvoyGate.OnTruckBlocked // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnGateSetOpened(bool bOpened); // Function Madness.MadConvoyGate.OnGateSetOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x15d9c60
	bool IsOpened(); // Function Madness.MadConvoyGate.IsOpened // (Event|Public|BlueprintEvent|Const) // @ game+0x1a35c70
};

// Class Madness.MadConvoyGlobals
// Size: 0x6f0 (Inherited: 0x30)
struct UMadConvoyGlobals : UDataAsset {
	struct FMadConvoyGlobalsDecoration Decoration; // 0x30(0x68)
	struct FMadConvoyGlobalsBannerConfigurations BannerConfigurations; // 0x98(0xd0)
	struct FMadConvoySaveData DefaultSave; // 0x168(0x158)
	struct FMadConvoyGlobalsCinematic Cinematic; // 0x2c0(0x28)
	struct FMadConvoyGlobalsUserInterface ConvoyUI; // 0x2e8(0x1c8)
	struct TMap<struct FName, struct FMadConvoyUpgradeData> UpgradesData; // 0x4b0(0x50)
	struct TMap<struct FName, struct FMadConvoyDevelopmentData> DevelopmentsData; // 0x500(0x50)
	struct TMap<struct FName, struct FMadConvoyDecorationSlotData> DecorationSlotsData; // 0x550(0x50)
	struct TMap<struct FName, struct FMadConvoyDecorationData> DecorationsData; // 0x5a0(0x50)
	struct TMap<struct FName, struct FMadConvoySkinSetData> SkinSetsData; // 0x5f0(0x50)
	struct TMap<struct FName, struct FMadConvoyAccoladeSetData> AccoladeSetsData; // 0x640(0x50)
	struct TMap<struct FName, struct FMadConvoyCustomizationTextureData> BannerTextureMapsData; // 0x690(0x50)
	struct TArray<SoftClassProperty> Pets; // 0x6e0(0x10)

	struct TArray<struct FName> GetSkinSetsNames(); // Function Madness.MadConvoyGlobals.GetSkinSetsNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d99a0
	struct FMadConvoySkinSetData GetSkinSetData(struct FName SkinSetName); // Function Madness.MadConvoyGlobals.GetSkinSetData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d98c0
	struct TArray<struct FName> GetDecorationSlotNames(); // Function Madness.MadConvoyGlobals.GetDecorationSlotNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d95a0
	struct FMadConvoyDecorationSlotData GetDecorationSlotData(struct FName DecorationSlotName); // Function Madness.MadConvoyGlobals.GetDecorationSlotData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d94c0
	struct TArray<struct FName> GetDecorationNames(); // Function Madness.MadConvoyGlobals.GetDecorationNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9440
	struct FMadConvoyDecorationData GetDecorationData(struct FName DecorationName); // Function Madness.MadConvoyGlobals.GetDecorationData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d92b0
	struct FMadConvoyCustomizationTextureData GetBannerTextureMapData(struct FName TextureMapName); // Function Madness.MadConvoyGlobals.GetBannerTextureMapData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d9180
	struct FMadConvoyAccoladeSetData GetAccoladeSetData(struct FName AccoladeSetName); // Function Madness.MadConvoyGlobals.GetAccoladeSetData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x15d8fb0
	void BakeDecoration(struct FName DecorationName, struct TArray<struct AStaticMeshActor*> Parts); // Function Madness.MadConvoyGlobals.BakeDecoration // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15d8e90
};

// Class Madness.MadConvoyPart
// Size: 0x3a0 (Inherited: 0x2f0)
struct AMadConvoyPart : AActor {
	struct UStaticMeshComponent* MeshComponent; // 0x2f0(0x08)
	char UnknownData_2F8[0x8]; // 0x2f8(0x08)
	struct FMadConvoyAttachment AttachmentTemplate; // 0x300(0x70)
	struct TArray<struct UMaterialInstanceDynamic*> Materials; // 0x370(0x10)
	struct FLinearColor Color; // 0x380(0x10)
	int32_t Decal; // 0x390(0x04)
	char UnknownData_394[0xc]; // 0x394(0x0c)
};

// Class Madness.MadConvoyPreset
// Size: 0x50 (Inherited: 0x30)
struct UMadConvoyPreset : UDataAsset {
	struct TArray<struct FName> Upgrades; // 0x30(0x10)
	struct FName Decoration; // 0x40(0x08)
	int32_t ColorId; // 0x48(0x04)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class Madness.MadConvoyTruck
// Size: 0x418 (Inherited: 0x2f0)
struct AMadConvoyTruck : AActor {
	struct USkeletalMeshComponent* TruckMesh; // 0x2f0(0x08)
	struct UMadSpringArmComponent* PreviewCameraSpringArm; // 0x2f8(0x08)
	struct UCameraComponent* PreviewActiveCamera; // 0x300(0x08)
	int32_t PlayerId; // 0x308(0x04)
	char UnknownData_30C_0 : 7; // 0x30c(0x01)
	bool bShouldBindToPlayersCustomizations : 1; // 0x30c(0x01)
	char UnknownData_30D_0 : 7; // 0x30d(0x01)
	bool bIsUsedInCustomiszationUI : 1; // 0x30d(0x01)
	char UnknownData_30E[0x2]; // 0x30e(0x02)
	struct AMadConvoy* Convoy; // 0x310(0x08)
	struct FMadConvoyDevelopment Development; // 0x318(0xc0)
	float PreviewCameraRotationVelocity; // 0x3d8(0x04)
	float PreviewCameraZoomLerpAlpha; // 0x3dc(0x04)
	char UnknownData_3E0[0x10]; // 0x3e0(0x10)
	struct TArray<struct UCameraComponent*> CachedPreviewCameras; // 0x3f0(0x10)
	struct UCameraComponent* TargetPreviewCamera; // 0x400(0x08)
	struct FName TargetPreviewCameraSlotName; // 0x408(0x08)
	char UnknownData_410[0x8]; // 0x410(0x08)

	struct ASkeletalMeshActor* SpawnCinematic(struct AMadPlayerCharacter* Player, struct FTransform TruckTransform); // Function Madness.MadConvoyTruck.SpawnCinematic // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x15e11f0
	void SetVisibility(bool bVisible); // Function Madness.MadConvoyTruck.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x15e1160
	void SelectCamera(struct FName SlotName, bool bForceSetCameraLocation); // Function Madness.MadConvoyTruck.SelectCamera // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15e0f10
	void RefreshPlayerBindings(); // Function Madness.MadConvoyTruck.RefreshPlayerBindings // (Final|Native|Protected) // @ game+0x15e0ef0
	void OnUIStateChangedHandler(struct FName StateName); // Function Madness.MadConvoyTruck.OnUIStateChangedHandler // (Final|Native|Private) // @ game+0x15e0e70
	void OnRep_Convoy(); // Function Madness.MadConvoyTruck.OnRep_Convoy // (Final|Native|Protected) // @ game+0x15e0940
	void OnConvoyModified(struct AMadConvoy* Caller); // Function Madness.MadConvoyTruck.OnConvoyModified // (Final|Native|Protected) // @ game+0x15dfb50
	bool IsCameraMoving(); // Function Madness.MadConvoyTruck.IsCameraMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15df4f0
};

// Class Madness.MadConvoyTruckMovable
// Size: 0x640 (Inherited: 0x418)
struct AMadConvoyTruckMovable : AMadConvoyTruck {
	char UnknownData_418[0x8]; // 0x418(0x08)
	struct UBoxComponent* SlowStopTrigger; // 0x420(0x08)
	struct UBoxComponent* InstantStopTrigger; // 0x428(0x08)
	struct UBoxComponent* DynamicBumperStopTrigger; // 0x430(0x08)
	struct UBoxComponent* PlayerDepenetrationTrigger; // 0x438(0x08)
	struct UAudioComponent* EngineAudioLoopComp; // 0x440(0x08)
	struct UAudioComponent* EngineActionAudioComp; // 0x448(0x08)
	struct UAudioComponent* TiresAudioLoopComp; // 0x450(0x08)
	struct UAudioComponent* HornAudioComp; // 0x458(0x08)
	struct UBoxComponent* NavMeshCollisionGenerator; // 0x460(0x08)
	struct UMadTruckNavObstacleComponent* NavObstacleComponent; // 0x468(0x08)
	struct UFactWatcherComponent* HideTruckFactWatcher; // 0x470(0x08)
	char bCanAffectNavigationGeneration : 1; // 0x478(0x01)
	char UnknownData_478_1 : 7; // 0x478(0x01)
	char UnknownData_479[0x3]; // 0x479(0x03)
	struct FLinearColor DefaultReflectorLights; // 0x47c(0x10)
	char UnknownData_48C_0 : 7; // 0x48c(0x01)
	bool bIsLightOn : 1; // 0x48c(0x01)
	char UnknownData_48D[0xb]; // 0x48d(0x0b)
	char UnknownData_498_0 : 7; // 0x498(0x01)
	bool bIsPlayingSequence : 1; // 0x498(0x01)
	char UnknownData_499_0 : 7; // 0x499(0x01)
	bool bTruckShouldBeHiddenWhenSequenceEnds : 1; // 0x499(0x01)
	char UnknownData_49A[0xa]; // 0x49a(0x0a)
	float DefaultDriveProgress; // 0x4a4(0x04)
	struct TArray<struct FCheckpointToProgressPair> CheckpointToProgressPairs; // 0x4a8(0x10)
	struct USkeletalMeshComponent* PreviewMontageTruck; // 0x4b8(0x08)
	struct FName MontageDisplacementSocket; // 0x4c0(0x08)
	struct FVector PreviewLocationOffset; // 0x4c8(0x0c)
	struct FVector PreviewRotationOffset; // 0x4d4(0x0c)
	char UnknownData_4E0_0 : 7; // 0x4e0(0x01)
	bool bRegionStarted : 1; // 0x4e0(0x01)
	char UnknownData_4E1[0x3]; // 0x4e1(0x03)
	struct FName AttachmentsRootSocket; // 0x4e4(0x08)
	float DriveSpeedModifier; // 0x4ec(0x04)
	float HornAudioDelay; // 0x4f0(0x04)
	float TruckSafeDistance; // 0x4f4(0x04)
	float SafeSpotSearchStep; // 0x4f8(0x04)
	int32_t MaxNumOfSearchIterations; // 0x4fc(0x04)
	struct UAnimMontage* DriveMontage; // 0x500(0x08)
	struct UAnimMontage* StartMontage; // 0x508(0x08)
	struct UAnimMontage* StopMontage; // 0x510(0x08)
	struct UCurveFloat* StartingSpeedCurve; // 0x518(0x08)
	struct UCurveFloat* StoppingSpeedCurve; // 0x520(0x08)
	struct USoundCue* EngineLoopSound; // 0x528(0x08)
	struct USoundCue* EngineStartSound; // 0x530(0x08)
	struct USoundCue* EngineStopSound; // 0x538(0x08)
	struct USoundCue* EngineThrottleSound; // 0x540(0x08)
	struct USoundCue* TiresLoopSound; // 0x548(0x08)
	struct USoundCue* HornSound; // 0x550(0x08)
	float MinEnginePitch; // 0x558(0x04)
	float MaxEnginePitch; // 0x55c(0x04)
	float MinEngineVolume; // 0x560(0x04)
	float MaxEngineVolume; // 0x564(0x04)
	struct UCurveFloat* EngineLoopPitchCurve; // 0x568(0x08)
	struct UCurveFloat* EngineLoopVolumeCurve; // 0x570(0x08)
	float TruckVsTruckStoppingSpeedMultiplier; // 0x578(0x04)
	float LastSynchedDriveProgress; // 0x57c(0x04)
	enum class EMadTruckState LastSynchedStateType; // 0x580(0x01)
	char UnknownData_581[0x17]; // 0x581(0x17)
	struct TMap<enum class EMadTruckObstacle, struct FMadTruckObstacles> Obstacles; // 0x598(0x50)
	char UnknownData_5E8[0x58]; // 0x5e8(0x58)

	void SetLastReachedCheckpoint(int32_t CheckpointId, bool bMoveTruckToCheckpoint); // Function Madness.MadConvoyTruckMovable.SetLastReachedCheckpoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15e10b0
	void SetCanAffectNavigation(bool bNewValue, bool bForceUpdate); // Function Madness.MadConvoyTruckMovable.SetCanAffectNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x15e0fe0
	void SetBlueprintComponentsEnabled(bool bEnabled); // Function Madness.MadConvoyTruckMovable.SetBlueprintComponentsEnabled // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnTruckVisiblityChanged(bool bVisiblity); // Function Madness.MadConvoyTruckMovable.OnTruckVisiblityChanged // (Final|Native|Public) // @ game+0x15e0d50
	void OnSlowStopTriggerEndOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadConvoyTruckMovable.OnSlowStopTriggerEndOverlapHandler // (Final|Native|Public) // @ game+0x15e0c10
	void OnSlowStopTriggerBeginOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadConvoyTruckMovable.OnSlowStopTriggerBeginOverlapHandler // (Final|Native|Public|HasOutParms) // @ game+0x15e09a0
	void OnRep_SynchedState(); // Function Madness.MadConvoyTruckMovable.OnRep_SynchedState // (Final|Native|Private) // @ game+0x15e0960
	void OnRegionStarted(enum class ERegionStartedState RegionState); // Function Madness.MadConvoyTruckMovable.OnRegionStarted // (Final|Native|Private) // @ game+0x15e08c0
	void OnPlayersDBNOChangedHandler(struct AMadPlayerCharacter* character, bool bIsInDBNO); // Function Madness.MadConvoyTruckMovable.OnPlayersDBNOChangedHandler // (Final|Native|Public) // @ game+0x15e07f0
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadConvoyTruckMovable.OnPlayerLogout // (Final|Native|Private) // @ game+0x15e0730
	void OnPlayerLogin(struct AGameModeBase* GameMode, struct APlayerController* EnteringController); // Function Madness.MadConvoyTruckMovable.OnPlayerLogin // (Final|Native|Private) // @ game+0x15e0730
	void OnPlayerDepenetrationBeginOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadConvoyTruckMovable.OnPlayerDepenetrationBeginOverlapHandler // (Final|Native|Public|HasOutParms) // @ game+0x15e04c0
	void OnLightTimerFinished(); // Function Madness.MadConvoyTruckMovable.OnLightTimerFinished // (Final|Native|Public) // @ game+0x15e04a0
	void OnInstantStopTriggerEndOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadConvoyTruckMovable.OnInstantStopTriggerEndOverlapHandler // (Final|Native|Public) // @ game+0x15e0360
	void OnInstantStopTriggerBeginOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadConvoyTruckMovable.OnInstantStopTriggerBeginOverlapHandler // (Final|Native|Public|HasOutParms) // @ game+0x15e00f0
	void OnHideTruckFactChanged(); // Function Madness.MadConvoyTruckMovable.OnHideTruckFactChanged // (Final|Native|Public) // @ game+0x15e00d0
	void OnFrontBumperTriggerEndOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadConvoyTruckMovable.OnFrontBumperTriggerEndOverlapHandler // (Final|Native|Public) // @ game+0x15dff90
	void OnFrontBumperTriggerBeginOverlapHandler(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadConvoyTruckMovable.OnFrontBumperTriggerBeginOverlapHandler // (Final|Native|Public|HasOutParms) // @ game+0x15dfd20
	void OnFrontBumperOverllaped(struct AActor* OtherActor); // Function Madness.MadConvoyTruckMovable.OnFrontBumperOverllaped // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadConvoyTruckMovable.OnFrameworkSequenceStart // (Final|Native|Public|HasOutParms) // @ game+0x15dfbf0
	void OnFrameworkSequenceEnd(); // Function Madness.MadConvoyTruckMovable.OnFrameworkSequenceEnd // (Final|Native|Public) // @ game+0x15dfbd0
	void NetMulticastUpdatePlayersBindings(); // Function Madness.MadConvoyTruckMovable.NetMulticastUpdatePlayersBindings // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xb14550
	struct TArray<struct UStaticMeshComponent*> GetReflectorMeshes(); // Function Madness.MadConvoyTruckMovable.GetReflectorMeshes // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	int32_t GetLastReachedCheckpoint(); // Function Madness.MadConvoyTruckMovable.GetLastReachedCheckpoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15df4c0
	struct TArray<struct ULocalLightComponent*> GetConvoyLights(); // Function Madness.MadConvoyTruckMovable.GetConvoyLights // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadConvoyTruckStopTrigger
// Size: 0x2f8 (Inherited: 0x2f0)
struct AMadConvoyTruckStopTrigger : AActor {
	struct USphereComponent* SphereComponent; // 0x2f0(0x08)
};

// Class Madness.MadConvoyUIModel
// Size: 0xf0 (Inherited: 0x50)
struct UMadConvoyUIModel : UBaseUIModel {
	char UnknownData_50[0x38]; // 0x50(0x38)
	struct TArray<struct FMadConvoyCustomizationSection> CustomizationSections; // 0x88(0x10)
	char UnknownData_98[0x58]; // 0x98(0x58)

	void OnUIScreenTabChanged(struct FName InTabName); // Function Madness.MadConvoyUIModel.OnUIScreenTabChanged // (Final|Native|Public|HasOutParms) // @ game+0x15e0de0
	void OnRoomReady(); // Function Madness.MadConvoyUIModel.OnRoomReady // (Final|Native|Public) // @ game+0x15e0980
	void MoveRoomCamera(uint32_t SlotIndex); // Function Madness.MadConvoyUIModel.MoveRoomCamera // (Final|Native|Public) // @ game+0x15dfad0
	void ItemSetQuickEmote(struct FName SectionID, struct FName TabID, struct FName CategoryID, struct FName ItemId); // Function Madness.MadConvoyUIModel.ItemSetQuickEmote // (Final|Native|Public) // @ game+0x15df980
	void ItemSetFavouriteEmote(struct FName SectionID, struct FName TabID, struct FName CategoryID, struct FName ItemId, int32_t FavouriteIndex); // Function Madness.MadConvoyUIModel.ItemSetFavouriteEmote // (Final|Native|Public) // @ game+0x15df810
	void ItemPlayEmote(struct FName SectionID, struct FName TabID, struct FName CategoryID, struct FName ItemId); // Function Madness.MadConvoyUIModel.ItemPlayEmote // (Final|Native|Public) // @ game+0x15df6c0
	void ItemEquip(struct FName SectionID, struct FName TabID, struct FName CategoryID, struct FName ItemId); // Function Madness.MadConvoyUIModel.ItemEquip // (Final|Native|Public) // @ game+0x15df570
	bool IsRoomReady(); // Function Madness.MadConvoyUIModel.IsRoomReady // (Final|Native|Public) // @ game+0x15df540
	bool IsRoomCameraMoving(); // Function Madness.MadConvoyUIModel.IsRoomCameraMoving // (Final|Native|Public) // @ game+0x15df510
};

// Class Madness.MadConvoyVoteComponent
// Size: 0x188 (Inherited: 0x180)
struct UMadConvoyVoteComponent : UActorComponent {
	char UnknownData_180[0x8]; // 0x180(0x08)
};

// Class Madness.MadCooldownAttributeSet
// Size: 0xb8 (Inherited: 0x30)
struct UMadCooldownAttributeSet : UAttributeSet {
	float GlobalCooldownMultiplier; // 0x30(0x04)
	float GlobalCooldownReduction; // 0x34(0x04)
	float CDRocketJump; // 0x38(0x04)
	float MovementCDMultiplier; // 0x3c(0x04)
	float ExplosiveCDMultiplier; // 0x40(0x04)
	float TurretCooldownMultiplier; // 0x44(0x04)
	float FlameTurretCooldownMultiplier; // 0x48(0x04)
	float TremorCooldownMultiplier; // 0x4c(0x04)
	float HuntThePreyCooldownMultiplier; // 0x50(0x04)
	float MassControlCooldownMultiplayer; // 0x54(0x04)
	float BlackHoleCooldownMultiplayer; // 0x58(0x04)
	float SlowTrapCooldownMultiplier; // 0x5c(0x04)
	float HeadhunterCooldownMultiplier; // 0x60(0x04)
	float MoltenArmorCooldownMultiplier; // 0x64(0x04)
	float ColdSnapCooldownMultiplier; // 0x68(0x04)
	float ToxicVialCooldownMultiplier; // 0x6c(0x04)
	float TemporalSlicingCooldownMultiplier; // 0x70(0x04)
	float SecondBreathCooldownMultiplier; // 0x74(0x04)
	float PoolOfGooCooldownMultiplier; // 0x78(0x04)
	float HeatwaveCooldownMultiplier; // 0x7c(0x04)
	float XrayBulletsCooldownMultiplier; // 0x80(0x04)
	float DashCooldownMultiplier; // 0x84(0x04)
	float ShieldDomeCooldownMultiplier; // 0x88(0x04)
	float PainfullBulletsCooldownMultiplier; // 0x8c(0x04)
	float InjectionCooldownMultiplier; // 0x90(0x04)
	float TeleportSlamCooldownMultiplier; // 0x94(0x04)
	float BlindingLightCooldownMultiplier; // 0x98(0x04)
	float ItemModCooldownMultiplier; // 0x9c(0x04)
	float PrimalChargeCooldownMultiplier; // 0xa0(0x04)
	float MeleeCooldownMultiplier; // 0xa4(0x04)
	float ThermalBombCooldownMultiplier; // 0xa8(0x04)
	float OverheatCooldownMultiplier; // 0xac(0x04)
	float PainLauncherCooldownMultiplier; // 0xb0(0x04)
	float ChargingBeamCooldownMultiplier; // 0xb4(0x04)
};

// Class Madness.MadDataAsset_DestructibleCoverPreset
// Size: 0x40 (Inherited: 0x30)
struct UMadDataAsset_DestructibleCoverPreset : UDataAsset {
	float CoverDestroyFraction; // 0x30(0x04)
	float EnableNavMeshFraction; // 0x34(0x04)
	float OverlapFractionToBeConsideredInsideBox; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class Madness.MadCoverBoxComponent
// Size: 0x670 (Inherited: 0x630)
struct UMadCoverBoxComponent : UCoverBoxComponent {
	char UnknownData_630[0x10]; // 0x630(0x10)
	struct FMulticastInlineDelegate OnCoverBoxDestroyed; // 0x640(0x10)
	struct FWeakObjectPtr<struct UMadDataAsset_DestructibleCoverPreset> CoverPreset; // 0x650(0x08)
	char UnknownData_658[0x4]; // 0x658(0x04)
	float CoverDestroyFractionOverride; // 0x65c(0x04)
	char UnknownData_660_0 : 7; // 0x660(0x01)
	bool OverrideCoverDestroyFraction : 1; // 0x660(0x01)
	char UnknownData_661_0 : 7; // 0x661(0x01)
	bool OverrideNavMeshFraction : 1; // 0x661(0x01)
	char UnknownData_662_0 : 7; // 0x662(0x01)
	bool OverrideOverlapFractionToBeConsideredInsideBox : 1; // 0x662(0x01)
	char UnknownData_663[0x1]; // 0x663(0x01)
	float EnableNavMeshFractionOverride; // 0x664(0x04)
	float OverlapFractionToBeConsideredInsideBoxOverride; // 0x668(0x04)
	char UnknownData_66C[0x4]; // 0x66c(0x04)

	void SetPreset(struct UMadDataAsset_DestructibleCoverPreset* Preset); // Function Madness.MadCoverBoxComponent.SetPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x15ecdc0
	void AssignBlastMeshComp(struct UBlastMeshComponent* BlastMesh); // Function Madness.MadCoverBoxComponent.AssignBlastMeshComp // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec1c0
};

// Class Madness.MadCoverContainerComponent
// Size: 0x1b8 (Inherited: 0x1b8)
struct UMadCoverContainerComponent : UCoverContainerComponent {
};

// Class Madness.MadCoverMarker
// Size: 0x3b8 (Inherited: 0x2f0)
struct AMadCoverMarker : AActor {
	float LocationInterpSpeed; // 0x2f0(0x04)
	float RotationInterpSpeed; // 0x2f4(0x04)
	struct UBoxComponent* CoverBoxComponent; // 0x2f8(0x08)
	struct UBase3DWidgetComponent* CoverIndicatorComponent; // 0x300(0x08)
	struct UMaterialBillboardComponent* CoverBillboardComponent; // 0x308(0x08)
	struct TMap<enum class EInputType, struct TSoftObjectPtr<struct UMaterialInterface>> CoverMaterials; // 0x310(0x50)
	float StepSize; // 0x360(0x04)
	char UnknownData_364[0x4]; // 0x364(0x04)
	struct TArray<struct UMaterialInterface*> LoadedTextures; // 0x368(0x10)
	char UnknownData_378[0x40]; // 0x378(0x40)

	void OnKeyMappingsChanged(); // Function Madness.MadCoverMarker.OnKeyMappingsChanged // (Final|Native|Protected) // @ game+0x15ecae0
	void OnInputTypeChanged(enum class EInputType InputeType); // Function Madness.MadCoverMarker.OnInputTypeChanged // (Final|Native|Protected) // @ game+0x15eca60
	void OnCoverToCoverIconHoldEnd(bool bIsCompleted); // Function Madness.MadCoverMarker.OnCoverToCoverIconHoldEnd // (Final|Native|Protected) // @ game+0x15ec9d0
	void OnCoverToCoverIconHoldBegin(float HoldTime); // Function Madness.MadCoverMarker.OnCoverToCoverIconHoldBegin // (Final|Native|Protected) // @ game+0x15ec950
};

// Class Madness.MadCreditsData
// Size: 0xe0 (Inherited: 0x30)
struct UMadCreditsData : UDataAsset {
	struct FText CreditsTile; // 0x30(0x18)
	struct FText CreditsCopyright; // 0x48(0x18)
	struct TSoftObjectPtr<struct UTexture2D> CreditsImage; // 0x60(0x28)
	struct UDataTable* CreditsItemsDT; // 0x88(0x08)
	struct TMap<struct FName, struct FMadCreditsItem> CreditsItemsMap; // 0x90(0x50)
};

// Class Madness.MadCreditsUIModel
// Size: 0xb8 (Inherited: 0x50)
struct UMadCreditsUIModel : UBaseUIModel {
	struct FMadCreditsUIData CreditsUIData; // 0x50(0x50)
	char UnknownData_A0[0x18]; // 0xa0(0x18)
};

// Class Madness.MadCrowdFollowingComponent_CustomCreature
// Size: 0x398 (Inherited: 0x390)
struct UMadCrowdFollowingComponent_CustomCreature : UFWCrowdFollowingComponent {
	struct UMadAITask_RotateRequest* RotateToFaceTask; // 0x390(0x08)
};

// Class Madness.MadCustomAttributeSet
// Size: 0x210 (Inherited: 0x30)
struct UMadCustomAttributeSet : UAttributeSet {
	float AmmoUsageBlocked; // 0x30(0x04)
	float ForceGibsOnShotEnemy; // 0x34(0x04)
	float SwarmTransitionsNo; // 0x38(0x04)
	float SwarmEatingDuration; // 0x3c(0x04)
	float SharedDamageRadiusScale; // 0x40(0x04)
	float RocketBarrageRocketsNo; // 0x44(0x04)
	float RocketBarrageRadiusScale; // 0x48(0x04)
	float RocketBarrageExplosionScale; // 0x4c(0x04)
	float RocketBarrageBonusDamage; // 0x50(0x04)
	float ThermalBombRadiusMultiplier; // 0x54(0x04)
	float ThermalBombDamage; // 0x58(0x04)
	float ThermalBombKnockbackRadius; // 0x5c(0x04)
	float GunModdingLevel; // 0x60(0x04)
	float WeaponModTriggeringChanceMultiplier; // 0x64(0x04)
	float ArmorModChanceMultiplier; // 0x68(0x04)
	float ScanCooldown; // 0x6c(0x04)
	float ScanRange; // 0x70(0x04)
	float ScanChance; // 0x74(0x04)
	float LandMineTrapCurrent; // 0x78(0x04)
	float LandMineTrapMax; // 0x7c(0x04)
	float TrapMineDamageMultiplier; // 0x80(0x04)
	float TrapMineRadiusMultiplier; // 0x84(0x04)
	float TurretCountCurrent; // 0x88(0x04)
	float TurretCountMax; // 0x8c(0x04)
	float FlamingTurretCountCurrent; // 0x90(0x04)
	float FlamingTurretCountMax; // 0x94(0x04)
	float KnockdownForce; // 0x98(0x04)
	float KnockdownForceMultiplier; // 0x9c(0x04)
	float KnockbackDistanceMultiplier; // 0xa0(0x04)
	float RelativityOfLifeDuration; // 0xa4(0x04)
	float RocketJumpCooldown; // 0xa8(0x04)
	float RocketJumpChanceToResetCdOnKill; // 0xac(0x04)
	float TerminatorCost; // 0xb0(0x04)
	float TerminatorModifyDurations; // 0xb4(0x04)
	float SpikeDamageLimit; // 0xb8(0x04)
	float EarthquakeCooldownMultiplier; // 0xbc(0x04)
	float HeatWaveKnockbackScale; // 0xc0(0x04)
	float BalckHoleDamageMultiplier; // 0xc4(0x04)
	float BalckHoleRadiusMultiplier; // 0xc8(0x04)
	float WhiteHoleDamageMultiplier; // 0xcc(0x04)
	float WhiteHoleRadiusMultiplier; // 0xd0(0x04)
	float EndlessMassDamageMultiplier; // 0xd4(0x04)
	float GravityWallCostMod; // 0xd8(0x04)
	float ShieldDepletionRateMod; // 0xdc(0x04)
	float ShieldDepletionValueMod; // 0xe0(0x04)
	float ShieldGlobalGainMultiplier; // 0xe4(0x04)
	float SharpshooterDamageMultiplierMod; // 0xe8(0x04)
	float SharpshooterCooldownMultiplier; // 0xec(0x04)
	float BorrowedTimeCooldownMultiplier; // 0xf0(0x04)
	float RememberedPainChanceForAdditionalDmg; // 0xf4(0x04)
	float ChanceToRevivePlayer; // 0xf8(0x04)
	float HuntThePreyArmorMultiplier; // 0xfc(0x04)
	float DashSpeedBonusMultiplier; // 0x100(0x04)
	float EvolveRangeMultiplier; // 0x104(0x04)
	float AdrenalineChanceToRevivePlayer; // 0x108(0x04)
	float PainfulBulletsSplashDmgMultiplier; // 0x10c(0x04)
	float EpidemyAPScaling; // 0x110(0x04)
	float PrimalChargeDmgMultiplier; // 0x114(0x04)
	float PrimalChargeMasteryLevel; // 0x118(0x04)
	float TwistedBulletsArmorPenetrationMultiplier; // 0x11c(0x04)
	float HeatwaveRangeMultiplier; // 0x120(0x04)
	float ColdSnapRangeMultiplier; // 0x124(0x04)
	float IceZoneResistanceMultiplier; // 0x128(0x04)
	float OverheatBuffTimeMultiplier; // 0x12c(0x04)
	float TwistedBulletsFocusCostMultiplier; // 0x130(0x04)
	float OverheatFocusCostMultiplier; // 0x134(0x04)
	float FocusCostMultiplier; // 0x138(0x04)
	float BannerRadiusMultiplier; // 0x13c(0x04)
	float RPGRangeMultiplier; // 0x140(0x04)
	float FlamethrowerAdditionalAmmo; // 0x144(0x04)
	float MinigunAdditionalAmmo; // 0x148(0x04)
	float InjectionHealthRegenBonus; // 0x14c(0x04)
	float GrenadeAoeRangeMultiplier; // 0x150(0x04)
	float GrenadeKnockbackRangeMultiplier; // 0x154(0x04)
	float KnockbackForceMultiplier; // 0x158(0x04)
	float HealthAfterReviveMultiplier; // 0x15c(0x04)
	float DealingHealMultiplier; // 0x160(0x04)
	float DiseaseSpreadingRangeMultiplier; // 0x164(0x04)
	float InCoverHpRegenMultiplier; // 0x168(0x04)
	float SecondBreathHealModifier; // 0x16c(0x04)
	float WeaknessStrengthModifier; // 0x170(0x04)
	float ExposureStrengthModifier; // 0x174(0x04)
	float IncomingXpMultiplier; // 0x178(0x04)
	float ImpaleDmgMultiplier; // 0x17c(0x04)
	float StoneExplosionDmgMultiplier; // 0x180(0x04)
	float StoneExplosionRadiusMultiplier; // 0x184(0x04)
	float VolcanicEruptionDamageMultiplier; // 0x188(0x04)
	float VolcanicEruptionRadiusMultiplier; // 0x18c(0x04)
	float CurrentVolcanicEruptionCharges; // 0x190(0x04)
	float MaxVolcanicEruptionCharges; // 0x194(0x04)
	float HeatAbsorptionGraspTotal; // 0x198(0x04)
	float CuttingWaveDmgMultiplier; // 0x19c(0x04)
	float SlowPower; // 0x1a0(0x04)
	float WeaknessPower; // 0x1a4(0x04)
	float ExposePower; // 0x1a8(0x04)
	float FreezePower; // 0x1ac(0x04)
	float AshPower; // 0x1b0(0x04)
	float BleedPower; // 0x1b4(0x04)
	float DiseasePower; // 0x1b8(0x04)
	float BurningPower; // 0x1bc(0x04)
	float AffectedByEnhancedWeaponsAura; // 0x1c0(0x04)
	float PhantomStabbersDebuffMultiplier; // 0x1c4(0x04)
	float PhantomStabbersTargetLimit; // 0x1c8(0x04)
	float PhantomStabbersRange; // 0x1cc(0x04)
	float PhantomStabbersBounceRange; // 0x1d0(0x04)
	float BlackHoleRadiusMultiplier; // 0x1d4(0x04)
	float ChargingBeamRangeMultiplier; // 0x1d8(0x04)
	float EarthquakeRangeMultiplier; // 0x1dc(0x04)
	float HeatWaveWidthMultiplier; // 0x1e0(0x04)
	float TremorWidthMultiplier; // 0x1e4(0x04)
	float VampiricGraspRangeMultiplier; // 0x1e8(0x04)
	float VampiricDrainEfficiencyMultiplier; // 0x1ec(0x04)
	float VolcanicEruptionRangeMultiplier; // 0x1f0(0x04)
	float XrayBulletsAuraWidthMultiplier; // 0x1f4(0x04)
	float PainLauncherExplosionRadiusMultiplier; // 0x1f8(0x04)
	float RoundSliceHealthFlat; // 0x1fc(0x04)
	float ChargingBeamArmorFlat; // 0x200(0x04)
	float MinigunArmorBonusFlat; // 0x204(0x04)
	float OverheatArmorBonusFlat; // 0x208(0x04)
	float XrayBulletsCombatPowerBonusFlat; // 0x20c(0x04)

	void OnRep_TurretCountCurrent(); // Function Madness.MadCustomAttributeSet.OnRep_TurretCountCurrent // (Final|Native|Public) // @ game+0x15ecb00
	void OnRep_LandMineTrapCurrent(); // Function Madness.MadCustomAttributeSet.OnRep_LandMineTrapCurrent // (Final|Native|Public) // @ game+0x15ecb00
	void OnRep_FlamingTurretCountCurrent(); // Function Madness.MadCustomAttributeSet.OnRep_FlamingTurretCountCurrent // (Final|Native|Public) // @ game+0x15ecb00
};

// Class Madness.MadCustomizationComponent
// Size: 0x770 (Inherited: 0x6f0)
struct UMadCustomizationComponent : UCharacterCustomizationComponent {
	struct TArray<struct FCustomizationBlastAttachment> BlastAttachments; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnBlastMeshLoaded; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnBlastMeshRemoved; // 0x708(0x10)
	struct FMulticastInlineDelegate OnBlastMeshDestroyedEvent; // 0x718(0x10)
	struct TArray<struct UMadBlastComponent*> BlastComponents; // 0x728(0x10)
	struct TArray<struct UBlastMesh*> LoadedBlastMeshes; // 0x738(0x10)
	struct TArray<enum class None> DelayedBlashMeshesToApply; // 0x750(0x10)
	struct TArray<struct FMadArmorCosmeticId> CurrentlyLoadingArmorAssets; // 0x760(0x10)

	void ShowComponent(struct FName SocketName); // Function Madness.MadCustomizationComponent.ShowComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15ece40
	void ResetBlastComponent(enum class None AttachmentIndex, enum class None BlastMeshIndex); // Function Madness.MadCustomizationComponent.ResetBlastComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15ecd00
	void OnTakeDamage(struct UBlastMeshComponent* Component, struct FName ActorName, struct FVector DamageOrigin, struct FRotator DamageRot, struct FName DamageType, float Damage); // Function Madness.MadCustomizationComponent.OnTakeDamage // (Final|Native|Public|HasDefaults) // @ game+0x15ecb20
	void OnBlastMeshShattered(struct UBlastMeshComponent* Component, struct FName ActorName, struct FVector DamageOrigin, struct FRotator DamageRot, struct FName DamageType); // Function Madness.MadCustomizationComponent.OnBlastMeshShattered // (Final|Native|Public|HasDefaults) // @ game+0x15ec7c0
	void OnBlastMeshDestroyed(struct UBlastMeshComponent* Component, struct FName ActorName); // Function Madness.MadCustomizationComponent.OnBlastMeshDestroyed // (Final|Native|Public) // @ game+0x15ec700
	void OnBlastDebirsDestroyed(struct UBlastMeshComponent* Component, struct FName ActorName); // Function Madness.MadCustomizationComponent.OnBlastDebirsDestroyed // (Final|Native|Public) // @ game+0x15ec640
	void OnAICharacterLevelChanged(); // Function Madness.MadCustomizationComponent.OnAICharacterLevelChanged // (Final|Native|Public) // @ game+0x15ec620
	void HideComponent(struct FName SocketName); // Function Madness.MadCustomizationComponent.HideComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x15ec5a0
	struct UMadBlastComponent* GetBlastComponent(struct FName SocketName); // Function Madness.MadCustomizationComponent.GetBlastComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec510
	bool FullCharacterUnlockCheck(); // Function Madness.MadCustomizationComponent.FullCharacterUnlockCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec4e0
	struct TArray<struct FCustomizationBlastAttachment> FindBlastMeshSource(); // Function Madness.MadCustomizationComponent.FindBlastMeshSource // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec3c0
	bool CheckUnlockedMeshIndex(int32_t Index, enum class ECustomizationSlotType Slot); // Function Madness.MadCustomizationComponent.CheckUnlockedMeshIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec300
	bool CheckUnlockedMaterialIndex(int32_t Index, enum class EMaterialCustomizationSlot Slot); // Function Madness.MadCustomizationComponent.CheckUnlockedMaterialIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x15ec240
};

// Class Madness.MadCustomizationDataAsset
// Size: 0xe0 (Inherited: 0xd0)
struct UMadCustomizationDataAsset : UCharacterCustomizationDataAsset {
	struct TArray<struct FCustomizationBlastAttachment> BlastAttachments; // 0xd0(0x10)
};

// Class Madness.MadCustomizationUIModel
// Size: 0xc0 (Inherited: 0x50)
struct UMadCustomizationUIModel : UBaseUIModel {
	char UnknownData_50[0x70]; // 0x50(0x70)

	void SetCustomizationIndex(enum class EMadCustomizationElement Element, enum class None Value); // Function Madness.MadCustomizationUIModel.SetCustomizationIndex // (Final|Native|Public) // @ game+0x15f5b20
	void RotatePreview(float Magnitude); // Function Madness.MadCustomizationUIModel.RotatePreview // (Final|Native|Public) // @ game+0x15f5aa0
	bool IsCustomizationIndexUnlocked(enum class EMadCustomizationElement Element, enum class None Index); // Function Madness.MadCustomizationUIModel.IsCustomizationIndexUnlocked // (Final|Native|Public) // @ game+0x15f5620
	enum class EMadGender GetPreviewGender(); // Function Madness.MadCustomizationUIModel.GetPreviewGender // (Final|Native|Public) // @ game+0x15f55f0
	struct FMadCustomizationUIData GetCustomizationUIData(enum class EMadCustomizationElement Element, enum class None Index); // Function Madness.MadCustomizationUIModel.GetCustomizationUIData // (Final|Native|Public) // @ game+0x15f53e0
	enum class None GetCustomizationMaxIndex(enum class EMadCustomizationElement Element); // Function Madness.MadCustomizationUIModel.GetCustomizationMaxIndex // (Final|Native|Public) // @ game+0x15f5350
	enum class None GetCustomizationCurrentIndex(enum class EMadCustomizationElement Element); // Function Madness.MadCustomizationUIModel.GetCustomizationCurrentIndex // (Final|Native|Public) // @ game+0x15f52c0
	struct TArray<struct FColor> GetCustomizationColors(enum class EMadCustomizationElement Element); // Function Madness.MadCustomizationUIModel.GetCustomizationColors // (Final|Native|Public) // @ game+0x15f51f0
	struct FText GetCustomizationCategoryDisplayName(enum class EMadCustomizationElement Element, enum class EMadGender Gender); // Function Madness.MadCustomizationUIModel.GetCustomizationCategoryDisplayName // (Final|Native|Public) // @ game+0x15f50c0
	void FinalizeCustomization(bool bAccept); // Function Madness.MadCustomizationUIModel.FinalizeCustomization // (Final|Native|Public) // @ game+0x15f5030
	void CharacterCreationRandomize(); // Function Madness.MadCustomizationUIModel.CharacterCreationRandomize // (Final|Native|Public) // @ game+0x15f4e00
	void CharacterCreationChangeGender(enum class EMadGender InGender); // Function Madness.MadCustomizationUIModel.CharacterCreationChangeGender // (Final|Native|Public) // @ game+0x15f4d80
	bool CanCharacterBeCreated(); // Function Madness.MadCustomizationUIModel.CanCharacterBeCreated // (Final|Native|Public) // @ game+0x15f4d50
};

// Class Madness.MadCustomMagnitudeCalculation
// Size: 0x28 (Inherited: 0x28)
struct UMadCustomMagnitudeCalculation : UObject {

	float CalculateMagnitude(struct AMadBaseCharacter* MadInstigatorCharacter); // Function Madness.MadCustomMagnitudeCalculation.CalculateMagnitude // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x15f4cb0
};

// Class Madness.MadDamageArea
// Size: 0x378 (Inherited: 0x2f0)
struct AMadDamageArea : AActor {
	float DamageAreaSize; // 0x2f0(0x04)
	float DamageAreaTimeInterval; // 0x2f4(0x04)
	struct FScalableFloat DamageTable; // 0x2f8(0x20)
	float DamageAreaLifeTime; // 0x318(0x04)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct UDamageType* DamageAreaDamageType; // 0x320(0x08)
	struct UParticleSystemComponent* DamageAreaParticle; // 0x328(0x08)
	struct UParticleSystemComponent* MarkerParticle; // 0x330(0x08)
	struct FVector MarkerScale; // 0x338(0x0c)
	struct FLinearColor MarkerColor; // 0x344(0x10)
	char UnknownData_354[0x4]; // 0x354(0x04)
	struct UAudioComponent* DamageAreaSound; // 0x358(0x08)
	struct USceneComponent* MasterComponent; // 0x360(0x08)
	char UnknownData_368[0x10]; // 0x368(0x10)

	void ShowAreaDamageMarker(); // Function Madness.MadDamageArea.ShowAreaDamageMarker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x150ed00
	void EnableAreaDamage(bool Enable); // Function Madness.MadDamageArea.EnableAreaDamage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x155ee80
};

// Class Madness.MadDamageAttributeSet
// Size: 0x1a0 (Inherited: 0x30)
struct UMadDamageAttributeSet : UAttributeSet {
	float IncomingDamageMultiplier; // 0x30(0x04)
	float IncomingAnomalyDamageMultiplier; // 0x34(0x04)
	float IncomingDarkMatterDamageMultiplier; // 0x38(0x04)
	float IncomingPhysicalDamageMultiplier; // 0x3c(0x04)
	float IncomingAbilityDamageMultiplier; // 0x40(0x04)
	float IncomingDamageMultiplierFromElite; // 0x44(0x04)
	float IncomingDamageMultiplierFromLeader; // 0x48(0x04)
	float IncomingDamageMultiplierFromBoss; // 0x4c(0x04)
	float AllDamageMod; // 0x50(0x04)
	float DamageModAnomaly; // 0x54(0x04)
	float DamageModDarkMatter; // 0x58(0x04)
	float DamageModPhysical; // 0x5c(0x04)
	float DamageModAbilities; // 0x60(0x04)
	float DamageMultiplierAgainstElite; // 0x64(0x04)
	float DamageMultiplierAgainstLeader; // 0x68(0x04)
	float DamageMultiplierAgainstBoss; // 0x6c(0x04)
	float DamageModShotgun; // 0x70(0x04)
	float DamageModRifle; // 0x74(0x04)
	float DamageModAssault; // 0x78(0x04)
	float DamageModSidearm; // 0x7c(0x04)
	float DamageModBullets; // 0x80(0x04)
	float DamageModSwarm; // 0x84(0x04)
	float DamageModRocketBarrage; // 0x88(0x04)
	float DamageModFrozen; // 0x8c(0x04)
	float DamageModTurret; // 0x90(0x04)
	float DamageModCloseRange; // 0x94(0x04)
	float DamageModLongRange; // 0x98(0x04)
	float CloseRange; // 0x9c(0x04)
	float LongRange; // 0xa0(0x04)
	float DamageFromBehindMultiplier; // 0xa4(0x04)
	float DamageAtNight; // 0xa8(0x04)
	float ExplosiveDmgMultiplier; // 0xac(0x04)
	float XrayBulletsDamageMultiplier; // 0xb0(0x04)
	float ThermalBombDamageMultiplier; // 0xb4(0x04)
	float FusionDamageMultiplier; // 0xb8(0x04)
	float MoltenArmorDmgReductionMultiplier; // 0xbc(0x04)
	float DamageModMechanical; // 0xc0(0x04)
	float RPGDamageMultiplier; // 0xc4(0x04)
	float DamageAgainstFrozenMultiplier; // 0xc8(0x04)
	float FireDamageMultiplier; // 0xcc(0x04)
	float DamageAgainstDiseasedMultiplier; // 0xd0(0x04)
	float DamageAgainstBurningMultiplier; // 0xd4(0x04)
	float DiseaseDamageMultiplier; // 0xd8(0x04)
	float MeleeDamageMultiplier; // 0xdc(0x04)
	float CurrentBurningDamage; // 0xe0(0x04)
	float CurrentDiseaseDamage; // 0xe4(0x04)
	float CurrentBleedingDamage; // 0xe8(0x04)
	float VampiricGraspDamageMultiplier; // 0xec(0x04)
	float PoolOfGooDamageMultiplier; // 0xf0(0x04)
	float BleedDamageMultiplier; // 0xf4(0x04)
	float DnaMutationDamageMultiplier; // 0xf8(0x04)
	float DamageAgainstAshMultiplier; // 0xfc(0x04)
	float WeaponDmgAgainstAnomalystMarkMultiplier; // 0x100(0x04)
	float ArmorPenetrAgainstAnomalystMarkMultiplier; // 0x104(0x04)
	float SkillDmgAgainstAnomalystMarkMultiplier; // 0x108(0x04)
	float DamageAgainstBleedingMultiplier; // 0x10c(0x04)
	float DamageAgainstBossMultiplier; // 0x110(0x04)
	float DamageAgainstLowHealthMultiplier; // 0x114(0x04)
	float DamageAgainstLivingBulletsMultiplier; // 0x118(0x04)
	float DamageAgainstWeaknessMultiplier; // 0x11c(0x04)
	float DamageAgainstExposedMultiplier; // 0x120(0x04)
	float MulticastMultiplier; // 0x124(0x04)
	float AshBlastDamageFlat; // 0x128(0x04)
	float ChargingBeamDamageFlat; // 0x12c(0x04)
	float ColdSnapDamageFlat; // 0x130(0x04)
	float EarthquakeDamageFlat; // 0x134(0x04)
	float RocketJumpDamageFlat; // 0x138(0x04)
	float HuntThePreyDamageFlat; // 0x13c(0x04)
	float PainLauncherDamageFlat; // 0x140(0x04)
	float PhantomStabbersDamageFlat; // 0x144(0x04)
	float ReflectBulletsDamageFlat; // 0x148(0x04)
	float RoundSliceDamageFlat; // 0x14c(0x04)
	float TemporalSlicingDamageFlat; // 0x150(0x04)
	float TremorOverTimeDamageFlat; // 0x154(0x04)
	float VolcanicEruptionDamageFlat; // 0x158(0x04)
	float BlackHoleDamageFlat; // 0x15c(0x04)
	float FlameTurretDamageFlat; // 0x160(0x04)
	float CryoTurretDamageFlat; // 0x164(0x04)
	float CryoTurretDamageMultiplier; // 0x168(0x04)
	float ImpaleDamageFlat; // 0x16c(0x04)
	float ThermalBombDamageFlat; // 0x170(0x04)
	float HuntThePreyExplosionDamageFlat; // 0x174(0x04)
	float VolcanicEruptionDamageFlatOverTime; // 0x178(0x04)
	float MinigunDamageBonusFlat; // 0x17c(0x04)
	float PhantomStabbersShardCutDamageFlat; // 0x180(0x04)
	float PrimalChargeDamageFlat; // 0x184(0x04)
	float OverheatConsumeDamageFlat; // 0x188(0x04)
	float OverheatDamageFlat; // 0x18c(0x04)
	float RPGDamageFlat; // 0x190(0x04)
	float HeatwaveDamageFlat; // 0x194(0x04)
	float HeavyBerserkerDamageMultiplier; // 0x198(0x04)
	char UnknownData_19C[0x4]; // 0x19c(0x04)
};

// Class Madness.MadDamageChain
// Size: 0x410 (Inherited: 0x2f0)
struct AMadDamageChain : AActor {
	struct FMulticastInlineDelegate OnChainMasterDeath; // 0x2f0(0x10)
	struct UParticleSystem* ChainMasterParticle; // 0x300(0x08)
	struct UParticleSystem* ChainSlaveParticle; // 0x308(0x08)
	struct UParticleSystem* ChainBeamParticle; // 0x310(0x08)
	struct FLinearColor ChainColor; // 0x318(0x10)
	struct FLinearColor DamagedChainColor; // 0x328(0x10)
	float DamagedColorTime; // 0x338(0x04)
	float BaseRadius; // 0x33c(0x04)
	float ChainBreakRadiusMult; // 0x340(0x04)
	float AddDamagePctPerEnemy; // 0x344(0x04)
	struct FGameplayTag DamageOverTimeTag; // 0x348(0x08)
	float DamageOverTimeAmount; // 0x350(0x04)
	float DamageOverTimeDelay; // 0x354(0x04)
	struct FGameplayTag PropagateEffectsTag; // 0x358(0x08)
	struct TArray<struct UMadGameplayEffect*> PossibleEffectsToPropagate; // 0x360(0x10)
	struct UAudioComponent* ChainBeginAudio; // 0x370(0x08)
	struct UAudioComponent* ChainEndAudio; // 0x378(0x08)
	struct FWeakObjectPtr<struct AMadCharAI> Master; // 0x380(0x08)
	struct TArray<struct FWeakObjectPtr<struct AMadCharAI>> Slaves; // 0x388(0x10)
	float DamagedColorTimer; // 0x398(0x04)
	char UnknownData_39C[0x74]; // 0x39c(0x74)

	void UpdateScannerSphere(struct AMadPlayerCharacter* PlayerCharacter, struct UMadScaleEaseComponent* ScaleEaseComponent); // Function Madness.MadDamageChain.UpdateScannerSphere // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15f5ca0
	struct AMadDamageChain* SpawnChain(struct AActor* Master, struct AMadDamageChain* ChainClass); // Function Madness.MadDamageChain.SpawnChain // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15f5be0
	void OnRep_Slaves(); // Function Madness.MadDamageChain.OnRep_Slaves // (Final|Native|Private) // @ game+0x15f5730
	void OnRep_Master(); // Function Madness.MadDamageChain.OnRep_Master // (Final|Native|Private) // @ game+0x15f5710
	void OnRep_DamagedColorTimer(); // Function Madness.MadDamageChain.OnRep_DamagedColorTimer // (Final|Native|Private) // @ game+0x15f56f0
	void MulticastStopAudio(); // Function Madness.MadDamageChain.MulticastStopAudio // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x150ed00
	void MulticastPlayAudio(); // Function Madness.MadDamageChain.MulticastPlayAudio // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1516bc0
	void DestroyScannerSphere(struct AMadPlayerCharacter* PlayerCharacter, struct UMadScaleEaseComponent* ScaleEaseComponent); // Function Madness.MadDamageChain.DestroyScannerSphere // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15f4f80
	void DestroyChain(struct AActor* Master); // Function Madness.MadDamageChain.DestroyChain // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15f4f10
	struct UMadScaleEaseComponent* CreateScannerSphere(struct AMadPlayerCharacter* PlayerCharacter, struct AActor* ScannerSphereClass, struct AMadDamageChain* ChainClass); // Function Madness.MadDamageChain.CreateScannerSphere // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x15f4e20
};

// Class Madness.MadDamageTrackerComponent
// Size: 0x1a8 (Inherited: 0x180)
struct UMadDamageTrackerComponent : UActorComponent {
	float RecentDamagePeriod; // 0x180(0x04)
	float TakingFirePeriod; // 0x184(0x04)
	struct UBlackboardComponent* Blackboard; // 0x188(0x08)
	char UnknownData_190[0x18]; // 0x190(0x18)

	void OnTakeHit(struct ABaseCharacter* OwnerCharacter, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadDamageTrackerComponent.OnTakeHit // (Final|Native|Private) // @ game+0x15f5750
};

// Class Madness.MadDeathAbility
// Size: 0x4c0 (Inherited: 0x4b8)
struct UMadDeathAbility : UMadGameplayAbility {
	int32_t DeathAbilityPriority; // 0x4b8(0x04)
	char UnknownData_4BC_0 : 7; // 0x4bc(0x01)
	bool bResetTimeDilation : 1; // 0x4bc(0x01)
	char UnknownData_4BD[0x3]; // 0x4bd(0x03)

	void TriggerOnKillClassSkills(); // Function Madness.MadDeathAbility.TriggerOnKillClassSkills // (Final|Native|Protected|BlueprintCallable) // @ game+0x15fd400
	void DropWeapon(); // Function Madness.MadDeathAbility.DropWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0x15fc410
	void DropLoot(); // Function Madness.MadDeathAbility.DropLoot // (Final|Native|Protected|BlueprintCallable) // @ game+0x15fc3f0
};

// Class Madness.MadDestructibleCoverActor
// Size: 0x308 (Inherited: 0x2f0)
struct AMadDestructibleCoverActor : AActor {
	struct UMadCoverContainerComponent* CoverContainer; // 0x2f0(0x08)
	struct UNavModifierComponent* NavModifier; // 0x2f8(0x08)
	struct UBlastMeshComponent* BlastMesh; // 0x300(0x08)

	void RepairBlastMesh(struct AActor* PlayerStart); // Function Madness.MadDestructibleCoverActor.RepairBlastMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x15fcfd0
};

// Class Madness.MadDetonatorTurret
// Size: 0x510 (Inherited: 0x4a0)
struct AMadDetonatorTurret : AMadTurret {
	struct FScalableFloat MaxTargetDistance; // 0x4a0(0x20)
	float TargetDistanceToleration; // 0x4c0(0x04)
	float RotationSpeed; // 0x4c4(0x04)
	struct ABaseCharacter* CurrentTarget; // 0x4c8(0x08)
	struct TArray<struct ABaseCharacter*> TargetsInRange; // 0x4d0(0x10)
	char UnknownData_4E0[0x30]; // 0x4e0(0x30)

	void SetRotation(struct FRotator Rotation); // Function Madness.MadDetonatorTurret.SetRotation // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1a35c70
	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadDetonatorTurret.OnOwnerKilled // (Final|Native|Protected) // @ game+0x15fcbb0
	void OnKill(); // Function Madness.MadDetonatorTurret.OnKill // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void Kill(); // Function Madness.MadDetonatorTurret.Kill // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0xb14550
};

// Class Madness.MadDialogueManager
// Size: 0x398 (Inherited: 0x310)
struct AMadDialogueManager : ADialogueManager {
	char UnknownData_310[0x20]; // 0x310(0x20)
	struct TArray<struct FBaseChoiceUIData> Choices; // 0x330(0x10)
	struct FText CurrentSubtitle; // 0x340(0x18)
	struct FText DescriptiveSubtitles; // 0x358(0x18)
	struct FName SpeakerName; // 0x370(0x08)
	char UnknownData_378_0 : 7; // 0x378(0x01)
	bool bBlockChoicesCursorSelection : 1; // 0x378(0x01)
	char UnknownData_379[0x7]; // 0x379(0x07)
	struct UMadDialogueUIModel* UIModel; // 0x380(0x08)
	int32_t CurrentSelectedDialogueOption; // 0x388(0x04)
	char UnknownData_38C_0 : 7; // 0x38c(0x01)
	bool bChoicesDisplayed : 1; // 0x38c(0x01)
	enum class EDialogueWindowPosition CurrentDialoguePosition; // 0x38d(0x01)
	char UnknownData_38E[0xa]; // 0x38e(0x0a)

	void SkipDialogueLine(); // Function Madness.MadDialogueManager.SkipDialogueLine // (Final|Native|Public) // @ game+0x15fd3c0
	void SetSelectedOptionIndex(int32_t Idx); // Function Madness.MadDialogueManager.SetSelectedOptionIndex // (Final|Native|Public) // @ game+0x15fd340
	void OnEnterUIState(struct FName StateName); // Function Madness.MadDialogueManager.OnEnterUIState // (Final|Native|Public|HasOutParms) // @ game+0x15fca40
	void MakeChoice(int32_t ChoiceID); // Function Madness.MadDialogueManager.MakeChoice // (Final|Native|Public) // @ game+0x15fc910
	void LeaveDialogue(); // Function Madness.MadDialogueManager.LeaveDialogue // (Final|Native|Public) // @ game+0x15fc8f0
};

// Class Madness.MadDialogueUIModel
// Size: 0x70 (Inherited: 0x50)
struct UMadDialogueUIModel : UBaseUIModel {
	char UnknownData_50[0x20]; // 0x50(0x20)
};

// Class Madness.MadDifficultyController
// Size: 0x360 (Inherited: 0x2f0)
struct AMadDifficultyController : AInfo {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FMulticastInlineDelegate OnDifficultyExpierenceReplicated; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnMaxDifficultyLevelChanged; // 0x308(0x10)
	struct FMulticastInlineDelegate OnDifficultyRewardChanged; // 0x318(0x10)
	float CurrentDifficultyLevelExp; // 0x328(0x04)
	int32_t MaxDifficultyLevel; // 0x32c(0x04)
	struct TArray<struct FMadDifficultyUnlock> Rewards; // 0x330(0x10)
	struct AMadPlayerCharacter* PlayerCharacter; // 0x340(0x08)
	char UnknownData_348[0x18]; // 0x348(0x18)

	void SubtractDifficultyLevelExpierence(); // Function Madness.MadDifficultyController.SubtractDifficultyLevelExpierence // (Final|Native|Protected) // @ game+0x15fd3e0
	void ServerSetMaxDifficultyLevel(int32_t InMaxDifficultyLevel); // Function Madness.MadDifficultyController.ServerSetMaxDifficultyLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15fd2b0
	void ServerSetDifficultyProgress(float InProgress); // Function Madness.MadDifficultyController.ServerSetDifficultyProgress // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15fd230
	void ServerSetDifficultyLevelExpierence(float InExp); // Function Madness.MadDifficultyController.ServerSetDifficultyLevelExpierence // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15fd1b0
	void ServerLoadDifficultyData(enum class None InMaxDifficultyLevel, struct TArray<struct FMadDifficultyUnlock> InRewards); // Function Madness.MadDifficultyController.ServerLoadDifficultyData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15fd0d0
	void ServerClaimDifficultyReward(enum class None DiffcultyLevel); // Function Madness.MadDifficultyController.ServerClaimDifficultyReward // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15fd050
	void OnRep_MaxDifficulty(); // Function Madness.MadDifficultyController.OnRep_MaxDifficulty // (Final|Native|Protected) // @ game+0x15fcfb0
	void OnRep_DifficultyRewards(); // Function Madness.MadDifficultyController.OnRep_DifficultyRewards // (Final|Native|Protected) // @ game+0x15fcf90
	void OnRep_DifficultyLevelExp(); // Function Madness.MadDifficultyController.OnRep_DifficultyLevelExp // (Final|Native|Protected) // @ game+0x15fcf70
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadDifficultyController.OnBattleStateChanged // (Final|Native|Public) // @ game+0x15fc9b0
	bool IsRewardClaimed(enum class None DiffcultyLevel); // Function Madness.MadDifficultyController.IsRewardClaimed // (Final|Native|Public|BlueprintCallable) // @ game+0x15fc860
	int32_t GetMaxDifficultyLevel(); // Function Madness.MadDifficultyController.GetMaxDifficultyLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15fc740
	float GetDifficultyLevelExpierence(); // Function Madness.MadDifficultyController.GetDifficultyLevelExpierence // (Final|Native|Public|BlueprintCallable) // @ game+0x15fc620
	void GatherDifficultyLevelExpierence(float GainedExperience, enum class EMadExperienceSource Source, struct AMadBaseCharacter* KilledCharacter); // Function Madness.MadDifficultyController.GatherDifficultyLevelExpierence // (Final|Native|Protected) // @ game+0x15fc450
};

// Class Madness.MadDropPod
// Size: 0x3f8 (Inherited: 0x2f0)
struct AMadDropPod : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FMadChallengeVOSettings VO_Activate; // 0x2f8(0x10)
	struct FMadChallengeVOSettings VO_PostActivate; // 0x308(0x10)
	struct TMap<enum class EMadChallengeRewardID, float> RewardDelays; // 0x318(0x50)
	struct UInteractionComponent* Interaction; // 0x368(0x08)
	struct USkeletalMeshComponent* MeshComponent; // 0x370(0x08)
	char UnknownData_378[0x78]; // 0x378(0x78)
	struct UAudioComponent* DropPodAudioComp; // 0x3f0(0x08)

	void OnSpawnReward(enum class EMadChallengeRewardID RewardId); // Function Madness.MadDropPod.OnSpawnReward // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadDropPod.OnPlayerLogout // (Final|Native|Private) // @ game+0x15fceb0
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadDropPod.OnInteracted // (Final|Native|Protected) // @ game+0x15fcaf0
	void OnActivationSequenceFinished(); // Function Madness.MadDropPod.OnActivationSequenceFinished // (Final|Native|Private) // @ game+0x15fc990
	void MulticastOnSpawnReward(enum class EMadChallengeRewardID RewardId); // Function Madness.MadDropPod.MulticastOnSpawnReward // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x157ead0
	void MulticastOnPodInteracted(); // Function Madness.MadDropPod.MulticastOnPodInteracted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1516bc0
	struct UActorSequenceComponent* GetActivationSequence(); // Function Madness.MadDropPod.GetActivationSequence // (Event|Protected|BlueprintEvent|Const) // @ game+0x1a35c70
};

// Class Madness.MadDSHeightComponent
// Size: 0x210 (Inherited: 0x180)
struct UMadDSHeightComponent : UActorComponent {
	float DefaultMaxSpeed; // 0x180(0x04)
	float DefaultAccleration; // 0x184(0x04)
	float DefaultGlideHeight; // 0x188(0x04)
	float DefaultGlideHeightVariation; // 0x18c(0x04)
	float DefaultHoverHeight; // 0x190(0x04)
	float DefaultHoverHeightVariation; // 0x194(0x04)
	float DefaultRoamHeight; // 0x198(0x04)
	float DefaultRoamHeightVariation; // 0x19c(0x04)
	char UnknownData_1A0[0x38]; // 0x1a0(0x38)
	struct UBaseCharacterMovementComponent* MoveComp; // 0x1d8(0x08)
	char UnknownData_1E0[0x30]; // 0x1e0(0x30)

	bool IsInDefaultHeightRange(bool bGlide); // Function Madness.MadDSHeightComponent.IsInDefaultHeightRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15fc780
	float GetVerticalVelocity(); // Function Madness.MadDSHeightComponent.GetVerticalVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15fc760
	float GetDefaultHeight(bool bGlide); // Function Madness.MadDSHeightComponent.GetDefaultHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15fc580
	float GetCurrentHeight(); // Function Madness.MadDSHeightComponent.GetCurrentHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x15fc560
	void ForceRestoreDefaultControl(); // Function Madness.MadDSHeightComponent.ForceRestoreDefaultControl // (Final|Native|Public|BlueprintCallable) // @ game+0x15fc430
};

// Class Madness.MadDurationAttributeSet
// Size: 0xa0 (Inherited: 0x30)
struct UMadDurationAttributeSet : UAttributeSet {
	float GlobalDurationMultiplier; // 0x30(0x04)
	float BulletsDuration; // 0x34(0x04)
	float TerminatorDuration; // 0x38(0x04)
	float RelativityDuration; // 0x3c(0x04)
	float HealthExpansion; // 0x40(0x04)
	float Swarm; // 0x44(0x04)
	float ToxicCloud; // 0x48(0x04)
	float MoltenArmorDuration; // 0x4c(0x04)
	float ToxicVialDurationMultiplier; // 0x50(0x04)
	float FreezeDurationMultiplier; // 0x54(0x04)
	float DiseaseDurationMultiplier; // 0x58(0x04)
	float HotDurationMultiplier; // 0x5c(0x04)
	float FireDurationMultiplier; // 0x60(0x04)
	float PoolOfGooDurationMultiplier; // 0x64(0x04)
	float TurretDurationMultiplier; // 0x68(0x04)
	float FlameTurretDurationMultiplier; // 0x6c(0x04)
	float ReflectBulletsDurationMultiplier; // 0x70(0x04)
	float MagneticWallDurationMultiplier; // 0x74(0x04)
	float AshDurationMultiplier; // 0x78(0x04)
	float BleedDurationMultiplier; // 0x7c(0x04)
	float MarkDurationMultiplier; // 0x80(0x04)
	float WeaknessDurationMultiplier; // 0x84(0x04)
	float ExposeDurationMultiplier; // 0x88(0x04)
	float RoundSliceDuration; // 0x8c(0x04)
	float TremorLevitationDurationMultiplier; // 0x90(0x04)
	float VolcanicEruptionDuration; // 0x94(0x04)
	float BorrowedTimeDurationMultiplier; // 0x98(0x04)
	char UnknownData_9C[0x4]; // 0x9c(0x04)
};

// Class Madness.MadDustStorm
// Size: 0x378 (Inherited: 0x2f0)
struct AMadDustStorm : AActor {
	struct AEmitter* EmitterTemplate; // 0x2f0(0x08)
	struct UMadGameplayEffect* EffectTemplate; // 0x2f8(0x08)
	struct FScalableFloat Range; // 0x300(0x20)
	struct FScalableFloat DURATION; // 0x320(0x20)
	struct UMadDamageType* DamageTypeClass; // 0x340(0x08)
	float MaxHPDamagePercentage; // 0x348(0x04)
	float DamageFrequency; // 0x34c(0x04)
	struct AEmitter* EmitterActor; // 0x350(0x08)
	char UnknownData_358[0x20]; // 0x358(0x20)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadDustStorm.OnOwnerKilled // (Final|Native|Protected) // @ game+0x15fcd30
};

// Class Madness.MadEffectsGlobals
// Size: 0x160 (Inherited: 0x30)
struct UMadEffectsGlobals : UDataAsset {
	struct FMadEffectsGlobals_Loot Loot; // 0x30(0xe0)
	struct TMap<struct FName, struct FMarketingCameraEffectData> MarketingCameraEffects; // 0x110(0x50)
};

// Class Madness.MadEmoteData
// Size: 0x140 (Inherited: 0x30)
struct UMadEmoteData : UDataAsset {
	struct FEmoteAbilityData EmoteAbilityData; // 0x30(0x60)
	struct FText DisplayName; // 0x90(0x18)
	struct FText Description; // 0xa8(0x18)
	struct FText Requirements; // 0xc0(0x18)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0xd8(0x28)
	enum class EMadItemRarity Rarity; // 0x100(0x01)
	char UnknownData_101[0x7]; // 0x101(0x07)
	struct FMadDLCLink DLCLink; // 0x108(0x10)
	struct FNameWrapper TextFeedRowName; // 0x118(0x10)
	char UnknownData_128_0 : 7; // 0x128(0x01)
	bool bHideUntilUnlockedOverride : 1; // 0x128(0x01)
	char UnknownData_129[0x7]; // 0x129(0x07)
	struct TArray<struct FDelegate> IconLoadedDelegates; // 0x130(0x10)

	void OnIconLoaded(); // Function Madness.MadEmoteData.OnIconLoaded // (Final|Native|Public) // @ game+0x15fcad0
	void GetEmoteIcon(struct FDelegate IconLoaded); // Function Madness.MadEmoteData.GetEmoteIcon // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x15fc640
};

// Class Madness.MadEmoteSet
// Size: 0x40 (Inherited: 0x30)
struct UMadEmoteSet : UDataAsset {
	struct TArray<struct UMadEmoteData*> Emotes; // 0x30(0x10)
};

// Class Madness.MadEmotesUIModel
// Size: 0x1a0 (Inherited: 0x50)
struct UMadEmotesUIModel : UBaseUIModel {
	char UnknownData_50[0x58]; // 0x50(0x58)
	struct TArray<struct FEmoteData> OwnedEmotes; // 0xa8(0x10)
	struct TArray<struct FEmoteData> FavouriteEmotes; // 0xb8(0x10)
	struct TArray<struct FEmoteData> UnboundEmotes; // 0xc8(0x10)
	struct FEmoteData QuickEmote; // 0xd8(0xa0)
	int32_t SelectedEmote; // 0x178(0x04)
	int32_t SelectedListedEmote; // 0x17c(0x04)
	char UnknownData_180[0x20]; // 0x180(0x20)

	void ShowMouseCursor(bool bShowMouseCursor); // Function Madness.MadEmotesUIModel.ShowMouseCursor // (Final|Native|Private) // @ game+0x16085d0
	void SetQuickEmote(int32_t UnboundEmoteIndex); // Function Madness.MadEmotesUIModel.SetQuickEmote // (Final|Native|Public) // @ game+0x1608550
	void SetFavouriteEmoteFromEmoteData(struct FEmoteData EmoteData, int32_t FavouriteIndex); // Function Madness.MadEmotesUIModel.SetFavouriteEmoteFromEmoteData // (Final|Native|Public) // @ game+0x1608190
	void SetFavouriteEmoteAt(int32_t UnboundEmoteIndex, int32_t FavouriteIndex); // Function Madness.MadEmotesUIModel.SetFavouriteEmoteAt // (Final|Native|Public) // @ game+0x16080d0
	void PlayUnboundEmote(int32_t EmoteIndex); // Function Madness.MadEmotesUIModel.PlayUnboundEmote // (Final|Native|Public) // @ game+0x1607f20
	void PlayQuickEmote(); // Function Madness.MadEmotesUIModel.PlayQuickEmote // (Final|Native|Public) // @ game+0x1607f00
	void PlayOwnedEmote(int32_t EmoteIndex); // Function Madness.MadEmotesUIModel.PlayOwnedEmote // (Final|Native|Public) // @ game+0x1607e80
	void PlayFavouriteEmote(int32_t EmoteIndex); // Function Madness.MadEmotesUIModel.PlayFavouriteEmote // (Final|Native|Public) // @ game+0x1607e00
	void OnPlayerDBNOStateChanged(struct AMadPlayerCharacter* character, bool bInDBNO); // Function Madness.MadEmotesUIModel.OnPlayerDBNOStateChanged // (Final|Native|Public) // @ game+0x1607ba0
	void OnCloseEmoteWindow(); // Function Madness.MadEmotesUIModel.OnCloseEmoteWindow // (Final|Native|Public) // @ game+0x1606050
	void OnChangeInEmotes(); // Function Madness.MadEmotesUIModel.OnChangeInEmotes // (Final|Native|Public) // @ game+0x1607580
	struct FCoherentActionKeys GetKeysForOpeningMenu(); // Function Madness.MadEmotesUIModel.GetKeysForOpeningMenu // (Final|Native|Public) // @ game+0x1606ab0
	void CloseOnPlayerDeath(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadEmotesUIModel.CloseOnPlayerDeath // (Final|Native|Public) // @ game+0x1606070
	void CloseEmoteWindow(); // Function Madness.MadEmotesUIModel.CloseEmoteWindow // (Final|Native|Public) // @ game+0x1606050
};

// Class Madness.MadEncounterManager
// Size: 0x620 (Inherited: 0x5d0)
struct AMadEncounterManager : AFWEncounterManager {
	char UnknownData_5D0_0 : 7; // 0x5d0(0x01)
	bool bChallengeEncounter : 1; // 0x5c8(0x01)
	char UnknownData_5D1[0x4f]; // 0x5d1(0x4f)

	void OnSaveState(); // Function Madness.MadEncounterManager.OnSaveState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x15da3d0
	void OnLoadState(); // Function Madness.MadEncounterManager.OnLoadState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1607b60
};

// Class Madness.MadEnemyCounterSphere
// Size: 0x318 (Inherited: 0x2f0)
struct AMadEnemyCounterSphere : AActor {
	struct FMulticastInlineDelegate OnEnemyNumberChanged; // 0x2f0(0x10)
	struct USphereComponent* Trigger; // 0x300(0x08)
	struct TArray<struct AMadCharAI*> EnemiesInside; // 0x308(0x10)

	struct AMadEnemyCounterSphere* SpawnEnemyCounterSphere(struct UObject* WorldContextObject, struct AActor* SnapToActor, float Radius); // Function Madness.MadEnemyCounterSphere.SpawnEnemyCounterSphere // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1608660
	void OnEnemyKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadEnemyCounterSphere.OnEnemyKilled // (Final|Native|Public) // @ game+0x1607950
	void OnEnemyExit(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadEnemyCounterSphere.OnEnemyExit // (Final|Native|Public) // @ game+0x1607810
	void OnEnemyEnter(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadEnemyCounterSphere.OnEnemyEnter // (Final|Native|Public|HasOutParms) // @ game+0x16075a0
	void GetEnemiesInside(struct TArray<struct AMadCharAI*> OutEnemiesInside); // Function Madness.MadEnemyCounterSphere.GetEnemiesInside // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x16066a0
};

// Class Madness.MadEngine
// Size: 0x2340 (Inherited: 0x2340)
struct UMadEngine : UBaseEngine {
};

// Class Madness.MadEnochAccolade
// Size: 0x158 (Inherited: 0x30)
struct UMadEnochAccolade : UDataAsset {
	struct FString AccoladeCategory; // 0x30(0x10)
	struct FGuid Guid; // 0x40(0x10)
	struct FText AccoladeName; // 0x50(0x18)
	struct FText DescriptionText; // 0x68(0x18)
	char UnknownData_80_0 : 7; // 0x80(0x01)
	bool bUseLockedAccoladeName : 1; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
	struct FText AccoladeLockedName; // 0x88(0x18)
	char UnknownData_A0_0 : 7; // 0xa0(0x01)
	bool bUseLockedDescription : 1; // 0xa0(0x01)
	char UnknownData_A1[0x7]; // 0xa1(0x07)
	struct FText DescriptionLockedText; // 0xa8(0x18)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0xc0(0x28)
	struct FMadEnochAccoladeTimedSettings TimedSettings; // 0xe8(0x28)
	char UnknownData_110_0 : 7; // 0x110(0x01)
	bool bIsHidden : 1; // 0x110(0x01)
	char UnknownData_111_0 : 7; // 0x111(0x01)
	bool bIsSilent : 1; // 0x111(0x01)
	char UnknownData_112_0 : 7; // 0x112(0x01)
	bool bAllowInPrologue : 1; // 0x112(0x01)
	char UnknownData_113_0 : 7; // 0x113(0x01)
	bool bRequireChallengeActive : 1; // 0x113(0x01)
	char UnknownData_114_0 : 7; // 0x114(0x01)
	bool bShouldCheckCategorySkillPath : 1; // 0x114(0x01)
	char UnknownData_115[0x3]; // 0x115(0x03)
	struct TSoftObjectPtr<struct UMadEnochAccolade> AccoladeToOverrideHiddenOn; // 0x118(0x28)
	struct UMadEnochAccoladeUnlockConditionBase* Condition; // 0x140(0x08)
	char UnknownData_148[0x8]; // 0x148(0x08)
	struct AMadEnochAccoladesController* AccoladeController; // 0x150(0x08)

	bool IsTierRewardSeen(int32_t InTierIdx); // Function Madness.MadEnochAccolade.IsTierRewardSeen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16070b0
	bool IsTierRewardClaimed(int32_t InTierIdx); // Function Madness.MadEnochAccolade.IsTierRewardClaimed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1607020
	bool IsSilent(); // Function Madness.MadEnochAccolade.IsSilent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1607000
	bool IsConditionMet(); // Function Madness.MadEnochAccolade.IsConditionMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606f40
	struct FMadEnochAccoladeTimedSettings GetTimedSettings(); // Function Madness.MadEnochAccolade.GetTimedSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606de0
	int32_t GetTiersCount(); // Function Madness.MadEnochAccolade.GetTiersCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606db0
	struct TArray<struct FName> GetTierRewards(int32_t InTierIdx); // Function Madness.MadEnochAccolade.GetTierRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606c90
	bool GetIsHidden(); // Function Madness.MadEnochAccolade.GetIsHidden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606a80
	struct TSoftObjectPtr<struct UTexture2D> GetIcon(); // Function Madness.MadEnochAccolade.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16069f0
	struct FText GetDescriptionText(); // Function Madness.MadEnochAccolade.GetDescriptionText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606600
	int32_t GetCurrentTierIdx(); // Function Madness.MadEnochAccolade.GetCurrentTierIdx // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16065d0
	struct UMadEnochAccoladeUnlockConditionBase* GetCondition(); // Function Madness.MadEnochAccolade.GetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16065b0
	struct FText GetAccoladeName(); // Function Madness.MadEnochAccolade.GetAccoladeName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16062a0
	struct AMadEnochAccoladesController* GetAccoladeController(); // Function Madness.MadEnochAccolade.GetAccoladeController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606280
	struct FString GetAccoladeCategory(); // Function Madness.MadEnochAccolade.GetAccoladeCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606250
};

// Class Madness.MadEnochAccoladeContextPanel
// Size: 0x198 (Inherited: 0x138)
struct UMadEnochAccoladeContextPanel : UMadContextPanel {
	struct FString AccoladeImagePath; // 0x138(0x10)
	struct FMadAccoladeUIData AccoladeUIData; // 0x148(0x50)
};

// Class Madness.MadEnochAccoladeLevelUpContextPanel
// Size: 0x160 (Inherited: 0x138)
struct UMadEnochAccoladeLevelUpContextPanel : UMadContextPanel {
	int32_t AccoladesLevel; // 0x138(0x04)
	char UnknownData_13C[0x4]; // 0x13c(0x04)
	struct FMadAccoladeLevelUIData LevelUIData; // 0x140(0x20)
};

// Class Madness.MadEnochAccoladesController
// Size: 0x600 (Inherited: 0x2f0)
struct AMadEnochAccoladesController : AInfo {
	struct FMulticastInlineDelegate OnAccoladeControllerReady; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnAccoladeActiveStatesLoaded; // 0x300(0x10)
	struct FMulticastInlineDelegate OnAccoladeCompleted; // 0x310(0x10)
	struct FMulticastInlineDelegate OnAccoladeTierCompleted; // 0x320(0x10)
	struct FMulticastInlineDelegate OnAccoladeProgressUpdate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnUnlockAchievement; // 0x340(0x10)
	int32_t FirstLevelInDatatable; // 0x350(0x04)
	char UnknownData_354[0x4]; // 0x354(0x04)
	struct FMulticastInlineDelegate OnAccoladesLevelProgressChanged; // 0x358(0x10)
	struct FMulticastInlineDelegate OnAccoladesLevelChanged; // 0x368(0x10)
	struct FMulticastInlineDelegate OnAccoladesLevelUnlocked; // 0x378(0x10)
	struct TMap<enum class EMadEnochAccoladeEventType, struct FMadEnochAccoladeArrayWrapper> ActiveAccoladesByEventTypeMap; // 0x388(0x50)
	struct TArray<struct UMadEnochAccolade*> DelayedAccolades; // 0x3d8(0x10)
	char UnknownData_3E8[0x18]; // 0x3e8(0x18)
	struct FMadEnochAccoladesProgressData AccoladesProgressData; // 0x400(0x18)
	struct TArray<struct TSoftObjectPtr<struct UMadEnochAccolade>> AccoladeAssets; // 0x418(0x10)
	struct TArray<struct UMadEnochAccolade*> Accolades; // 0x428(0x10)
	struct TArray<struct UMadEnochAccolade*> ActiveAccolades; // 0x438(0x10)
	struct TArray<struct UMadEnochAccolade*> InactiveAccolades; // 0x448(0x10)
	struct TSet<struct FGuid> CompletedAccoladesIDs; // 0x458(0x50)
	struct TArray<struct FEnochAccoladesLevelData> EnochAccoladesLevelsData; // 0x4a8(0x10)
	struct TArray<struct FEnochAccoladesLevelInfo> EnochAccoladesLevelsInfo; // 0x4b8(0x10)
	char UnknownData_4C8[0x50]; // 0x4c8(0x50)
	struct TMap<struct FString, enum class EMadnessSkillPath> CategorySkillPaths; // 0x518(0x50)
	char UnknownData_568[0x14]; // 0x568(0x14)
	float RefreshRate; // 0x57c(0x04)
	char UnknownData_580[0x8]; // 0x580(0x08)
	struct UMadOnlineSaveSystem* CachedSaveSystem; // 0x588(0x08)
	char UnknownData_590[0x10]; // 0x590(0x10)
	float SaveProgressDelay; // 0x5a0(0x04)
	char UnknownData_5A4[0x5c]; // 0x5a4(0x5c)

	void UpdateActiveAccoladesFromBackend(); // Function Madness.MadEnochAccoladesController.UpdateActiveAccoladesFromBackend // (Final|Native|Private) // @ game+0x1608760
	void SetAccoladesLevel(int32_t InNewLevel); // Function Madness.MadEnochAccoladesController.SetAccoladesLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1608050
	void ResetAccoladesLevelProgress(); // Function Madness.MadEnochAccoladesController.ResetAccoladesLevelProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1608030
	void ReclaimAllRewards(bool bSave); // Function Madness.MadEnochAccoladesController.ReclaimAllRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x1607fa0
	void OnQuestObjectiveStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bIsLoading); // Function Madness.MadEnochAccoladesController.OnQuestObjectiveStatusChanged // (Final|Native|Public) // @ game+0x1607cf0
	void OnQuestCompleted(struct UBaseQuest* Inquest); // Function Madness.MadEnochAccoladesController.OnQuestCompleted // (Final|Native|Public) // @ game+0x1607c70
	void OnMaxDifficultyLevelChanged(); // Function Madness.MadEnochAccoladesController.OnMaxDifficultyLevelChanged // (Final|Native|Public) // @ game+0x1607b80
	void OnEnterUIState(struct FName StateName); // Function Madness.MadEnochAccoladesController.OnEnterUIState // (Final|Native|Private|HasOutParms) // @ game+0x1607ad0
	void OnBattleStateChanged(bool bIsInBattle); // Function Madness.MadEnochAccoladesController.OnBattleStateChanged // (Final|Native|Public) // @ game+0x16074f0
	void OnAnyPlayerDBNOChanged(struct AMadPlayerCharacter* InCharacter, bool bIsInDBNOState); // Function Madness.MadEnochAccoladesController.OnAnyPlayerDBNOChanged // (Final|Native|Public) // @ game+0x1607420
	void OnAnyCharacterEmotePlayed(struct AMadPlayerCharacter* InCharacter, struct UMadEmoteData* InEmoteData); // Function Madness.MadEnochAccoladesController.OnAnyCharacterEmotePlayed // (Final|Native|Public) // @ game+0x1607360
	void NotifyPlayersOnEnemyKilled(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadEnochAccoladesController.NotifyPlayersOnEnemyKilled // (Final|Native|Public) // @ game+0x16071e0
	void MarkAccoladesLevelRewardSeen(int32_t InLevel); // Function Madness.MadEnochAccoladesController.MarkAccoladesLevelRewardSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x1607160
	void LoadDataFromBackend(); // Function Madness.MadEnochAccoladesController.LoadDataFromBackend // (Final|Native|Private) // @ game+0x1607140
	bool IsMaxLevel(int32_t InLevel); // Function Madness.MadEnochAccoladesController.IsMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606f70
	bool IsAccoladesLevelRewardSeen(int32_t InLevel); // Function Madness.MadEnochAccoladesController.IsAccoladesLevelRewardSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x1606eb0
	bool IsAccoladesLevelRewardClaimed(int32_t InLevel); // Function Madness.MadEnochAccoladesController.IsAccoladesLevelRewardClaimed // (Final|Native|Public|BlueprintCallable) // @ game+0x1606e20
	struct TArray<struct FName> GetTiersClaimedRewards(); // Function Madness.MadEnochAccoladesController.GetTiersClaimedRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606d30
	int32_t GetLevelFromAPP(int32_t InAPP); // Function Madness.MadEnochAccoladesController.GetLevelFromAPP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606c00
	struct TArray<struct FEnochAccoladesLevelInfo> GetEnochAccoladesLevelsInfo(); // Function Madness.MadEnochAccoladesController.GetEnochAccoladesLevelsInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16068d0
	struct TArray<struct FEnochAccoladesLevelData> GetEnochAccoladesLevelsData(); // Function Madness.MadEnochAccoladesController.GetEnochAccoladesLevelsData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606790
	struct TArray<struct FName> GetAllClaimedRewards(); // Function Madness.MadEnochAccoladesController.GetAllClaimedRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606530
	struct TArray<struct UMadEnochAccolade*> GetAllAccolades(); // Function Madness.MadEnochAccoladesController.GetAllAccolades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606500
	struct TArray<struct UMadEnochAccolade*> GetActiveAccolades(); // Function Madness.MadEnochAccoladesController.GetActiveAccolades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16064d0
	struct TArray<struct FName> GetAccoladesLevelClaimedRewards(); // Function Madness.MadEnochAccoladesController.GetAccoladesLevelClaimedRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606450
	void GetAccoladesByCategory(struct FString InCategory, struct TArray<struct UMadEnochAccolade*> OutAccolades); // Function Madness.MadEnochAccoladesController.GetAccoladesByCategory // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606350
	struct TArray<struct FString> GetAccoladeCategories(); // Function Madness.MadEnochAccoladesController.GetAccoladeCategories // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1606210
	void DisplayAccoladeClaimedRewards(); // Function Madness.MadEnochAccoladesController.DisplayAccoladeClaimedRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x16061f0
	void ClientOnWeaponFired(struct FHitResult InTrace, struct TArray<struct ABaseCharacter*> InEnemiesHit, enum class EHitMarkerType InHitMarkerType); // Function Madness.MadEnochAccoladesController.ClientOnWeaponFired // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605e90
	void ClientOnStopSkillDuration(struct UMadSkillData* InActivatedSkill); // Function Madness.MadEnochAccoladesController.ClientOnStopSkillDuration // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605e00
	void ClientOnSpecificAbilityEffectApplied(struct AMadBaseCharacter* Enemy, struct UMadGameplayAbility* Ability, struct UMadGameplayEffect* Effect, struct FGameplayTag Tag); // Function Madness.MadEnochAccoladesController.ClientOnSpecificAbilityEffectApplied // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605cc0
	void ClientOnSlowTrapBulletsCaught(int32_t BulletsCaught); // Function Madness.MadEnochAccoladesController.ClientOnSlowTrapBulletsCaught // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605c30
	void ClientOnSkillUnlocked(); // Function Madness.MadEnochAccoladesController.ClientOnSkillUnlocked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605c10
	void ClientOnSkillLeveledUp(struct FMadSkillLevelData InSkillLevelData); // Function Madness.MadEnochAccoladesController.ClientOnSkillLeveledUp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605b70
	void ClientOnSkillDamageAbsorbed(struct UMadGameplayAbility* Ability, float InDamageAbsorbed); // Function Madness.MadEnochAccoladesController.ClientOnSkillDamageAbsorbed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605aa0
	void ClientOnSkillActivated(struct UMadSkillData* InMadSkillData); // Function Madness.MadEnochAccoladesController.ClientOnSkillActivated // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605a10
	void ClientOnRicochetEffectApplied(struct AMadBaseCharacter* Target, struct UMadDamageType* DamageType, struct UMadGameplayEffect* TargetEffect, struct FActiveGameplayEffectHandle TargetHandle); // Function Madness.MadEnochAccoladesController.ClientOnRicochetEffectApplied // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16058d0
	void ClientOnRevivedSomeone(struct AMadPlayerCharacter* InRevivee); // Function Madness.MadEnochAccoladesController.ClientOnRevivedSomeone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605840
	void ClientOnResourceHarvested(); // Function Madness.MadEnochAccoladesController.ClientOnResourceHarvested // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x150ed00
	void ClientOnResourceGained(struct FName Name, int32_t Delta); // Function Madness.MadEnochAccoladesController.ClientOnResourceGained // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605770
	void ClientOnQuestPoolCompleted(struct FName InQuestPoolID); // Function Madness.MadEnochAccoladesController.ClientOnQuestPoolCompleted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16056e0
	void ClientOnPlayerLevelChanged(float OldLevel, float Level, bool IsSilentNotification); // Function Madness.MadEnochAccoladesController.ClientOnPlayerLevelChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16055e0
	void ClientOnLocationDiscovered(struct FGameplayTag InTag, bool bFirstTime); // Function Madness.MadEnochAccoladesController.ClientOnLocationDiscovered // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605510
	void ClientOnItemsTakenApart(struct TArray<struct AMadItem*> InItems); // Function Madness.MadEnochAccoladesController.ClientOnItemsTakenApart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605470
	void ClientOnItemSold(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemSold // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16053e0
	void ClientOnItemModChanged(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemModChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605350
	void ClientOnItemImproved(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemImproved // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x15da1b0
	void ClientOnItemEquiped(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemEquiped // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16052c0
	void ClientOnItemEnhanced(struct AMadItem* InItem, bool bModSelectionAvailable); // Function Madness.MadEnochAccoladesController.ClientOnItemEnhanced // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16051f0
	void ClientOnItemConfigVariantChanged(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemConfigVariantChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605160
	void ClientOnItemCollected(struct AMadItem* InItem); // Function Madness.MadEnochAccoladesController.ClientOnItemCollected // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16050d0
	void ClientOnHeroTreeUpgraded(struct FName InUpgradeName, bool bAdded); // Function Madness.MadEnochAccoladesController.ClientOnHeroTreeUpgraded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1605000
	void ClientOnHeal(float DeltaHealth, bool bSelfHealing, bool bPassiveHealing); // Function Madness.MadEnochAccoladesController.ClientOnHeal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604ef0
	void ClientOnGameplayEffectAppliedToTarget(struct UAbilitySystemComponent* Target, struct FGameplayEffectSpec SpecApplied, struct FActiveGameplayEffectHandle ActiveHandle); // Function Madness.MadEnochAccoladesController.ClientOnGameplayEffectAppliedToTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604da0
	void ClientOnEnemyKilled(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadEnochAccoladesController.ClientOnEnemyKilled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604c20
	void ClientOnEnemyActivatedAbilityFromEvent(struct FGameplayEventData EventData); // Function Madness.MadEnochAccoladesController.ClientOnEnemyActivatedAbilityFromEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604a40
	void ClientOnDamageDone(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadEnochAccoladesController.ClientOnDamageDone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16048c0
	void ClientOnDamageAdjusted(float DamageRecived, float IncomingDamage, struct UMadDamageType* DmgType); // Function Madness.MadEnochAccoladesController.ClientOnDamageAdjusted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16047c0
	void ClientOnConvoyUpgraded(struct FName UpgradeName, bool bAdded); // Function Madness.MadEnochAccoladesController.ClientOnConvoyUpgraded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16046f0
	void ClientOnChestOpened(); // Function Madness.MadEnochAccoladesController.ClientOnChestOpened // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16046d0
	void ClientOnChallengeTierUnlocked(int32_t UnlockedTier); // Function Madness.MadEnochAccoladesController.ClientOnChallengeTierUnlocked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604640
	void ClientOnChallengeFinished(int32_t ChallengeID, enum class EMadChallengeEndReason EndReason, float ChallengeTime, enum class EMadChallengeTimeBracket TimeBracket); // Function Madness.MadEnochAccoladesController.ClientOnChallengeFinished // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604500
	void ClientOnBeenRevived(struct AMadPlayerCharacter* InReviver); // Function Madness.MadEnochAccoladesController.ClientOnBeenRevived // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604470
	void ClientMaxDifficultyLevelChanged(int32_t InMaxDifficultyLevel); // Function Madness.MadEnochAccoladesController.ClientMaxDifficultyLevelChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x15da480
	void ClientChallengeStarted(); // Function Madness.MadEnochAccoladesController.ClientChallengeStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1604450
	void ClaimReward(struct UMadEnochAccolade* InAccolade, int32_t InTierIdx, bool bSave); // Function Madness.MadEnochAccoladesController.ClaimReward // (Final|Native|Public|BlueprintCallable) // @ game+0x1604350
	void ClaimAllRewards(bool bSave); // Function Madness.MadEnochAccoladesController.ClaimAllRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x16042c0
	void ClaimAccoladeTierRewards(int32_t AccoladeIdx, int32_t TierIdx, bool bSave); // Function Madness.MadEnochAccoladesController.ClaimAccoladeTierRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x1604100
	void ClaimAccoladesLevelReward(int32_t InLevel, bool bSave); // Function Madness.MadEnochAccoladesController.ClaimAccoladesLevelReward // (Final|Native|Public|BlueprintCallable) // @ game+0x1604200
	void BindToLocalQuestManager(); // Function Madness.MadEnochAccoladesController.BindToLocalQuestManager // (Final|Native|Private) // @ game+0x16040e0
	void BindToChallengeController(); // Function Madness.MadEnochAccoladesController.BindToChallengeController // (Final|Native|Private) // @ game+0x16040c0
	void AddNewLevelUnlock(int32_t InLevel); // Function Madness.MadEnochAccoladesController.AddNewLevelUnlock // (Final|Native|Public|BlueprintCallable) // @ game+0x1604040
	void AddAccoladesLevelProgressPoints(int32_t InAPP); // Function Madness.MadEnochAccoladesController.AddAccoladesLevelProgressPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x1603fc0
};

// Class Madness.MadEnochAccoladesGlobals
// Size: 0x48 (Inherited: 0x30)
struct UMadEnochAccoladesGlobals : UDataAsset {
	struct UDataTable* AccoladeCategoriesDT; // 0x30(0x08)
	struct UDataTable* EnochAccoladesLevelsDataTable; // 0x38(0x08)
	struct AMadEnochAccoladesController* EnochAccoladesControllerClass; // 0x40(0x08)
};

// Class Madness.MadEnochAccoladeUnlockConditionBase
// Size: 0x78 (Inherited: 0x28)
struct UMadEnochAccoladeUnlockConditionBase : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct FText DescriptionText; // 0x30(0x18)
	struct FText UpdateText; // 0x48(0x18)
	char UnknownData_60_0 : 7; // 0x60(0x01)
	bool bCheckTiersSeparately : 1; // 0x60(0x01)
	enum class EAccoladeSaveRequestType SaveRequestType; // 0x61(0x01)
	enum class EAccoladeSaveConditionType SaveConditionType; // 0x62(0x01)
	char UnknownData_63[0x1]; // 0x63(0x01)
	struct FGuid Guid; // 0x64(0x10)
	char UnknownData_74[0x4]; // 0x74(0x04)

	void SetTierRewardSeen(int32_t InTierIdx, bool bSeen); // Function Madness.MadEnochAccoladeUnlockConditionBase.SetTierRewardSeen // (Native|Public|BlueprintCallable) // @ game+0x160c4c0
	void SetTierRewardClaimed(int32_t InTierIdx, bool bClaimed); // Function Madness.MadEnochAccoladeUnlockConditionBase.SetTierRewardClaimed // (Native|Public|BlueprintCallable) // @ game+0x160c3f0
	bool IsTierRewardSeen(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsTierRewardSeen // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c350
	bool IsTierRewardClaimed(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsTierRewardClaimed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c2b0
	bool IsTierCompleted(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsTierCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c220
	bool IsCurrentTierLast(); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsCurrentTierLast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c1d0
	bool IsCurrentTierConditionMet(); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsCurrentTierConditionMet // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c1a0
	bool IsConditionMet(); // Function Madness.MadEnochAccoladeUnlockConditionBase.IsConditionMet // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c170
	struct FText GetUpdateText(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetUpdateText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c0d0
	int32_t GetTierTargetValue(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetTierTargetValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c000
	int32_t GetTiersCount(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetTiersCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160c0a0
	struct TArray<struct FName> GetTierRewards(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetTierRewards // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160bf60
	struct FBaseTier GetTier(int32_t InTierIdx); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetTier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160be90
	int32_t GetProgressValue(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetProgressValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160be60
	struct FText GetDescriptionText(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetDescriptionText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160bdc0
	int32_t GetCurrentTierIdx(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetCurrentTierIdx // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160bda0
	struct FBaseTier GetCurrentTier(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetCurrentTier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160bd20
	int32_t GetConditionValue(); // Function Madness.MadEnochAccoladeUnlockConditionBase.GetConditionValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x160bcf0
};

// Class Madness.MadEnochAccoladeUnlockConditionAccoladeLevelUnlocked
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionAccoladeLevelUnlocked : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FAccoladeLevelUnlockedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionChallenge
// Size: 0xd0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionChallenge : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FChallengeTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificChallenge : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificType : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificTimeBracket : 1; // 0x8a(0x01)
	char UnknownData_8B_0 : 7; // 0x8b(0x01)
	bool bPlayingInTeam : 1; // 0x8b(0x01)
	char UnknownData_8C_0 : 7; // 0x8c(0x01)
	bool bFailOnTeammateDown : 1; // 0x8c(0x01)
	char UnknownData_8D_0 : 7; // 0x8d(0x01)
	bool bRequireRandomTeam : 1; // 0x8d(0x01)
	char UnknownData_8E_0 : 7; // 0x8e(0x01)
	bool bRequireEntireChallengeSolo : 1; // 0x8e(0x01)
	enum class EMadChallengeType ChallengeType; // 0x8f(0x01)
	struct TSoftObjectPtr<struct UMadChallengeDataAsset> Challenge; // 0x90(0x28)
	enum class EMadChallengeTimeBracket TimeBracket; // 0xb8(0x01)
	char UnknownData_B9[0x17]; // 0xb9(0x17)
};

// Class Madness.MadEnochAccoladeUnlockConditionChallengeTierUnlocked
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionChallengeTierUnlocked : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FChallengeTierUnlockedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificTierToUnlock : 1; // 0x88(0x01)
	char UnknownData_89[0x3]; // 0x89(0x03)
	int32_t ChallengeTierToUnlock; // 0x8c(0x04)
	char UnknownData_90[0x10]; // 0x90(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionChestOpened
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionChestOpened : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FChestOpenedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionCompleteAccolades
// Size: 0x100 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionCompleteAccolades : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FCompleteAccoladesTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificCategory : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificWepons : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	struct FString AccoladeCategory; // 0x90(0x10)
	struct TSet<SoftClassProperty> WeaponTypes; // 0xa0(0x50)
	char UnknownData_F0[0x10]; // 0xf0(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionCompleteQuest
// Size: 0xc8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionCompleteQuest : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FCompleteQuestTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificQuest : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificType : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bRequireRandomTeam : 1; // 0x8a(0x01)
	enum class EQuestType QuestType; // 0x8b(0x01)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
	struct TSoftObjectPtr<struct UBaseQuest> quest; // 0x90(0x28)
	char UnknownData_B8[0x10]; // 0xb8(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionCompleteQuestPool
// Size: 0xc8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionCompleteQuestPool : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FCompleteQuestPoolTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificQuestPool : 1; // 0x88(0x01)
	char UnknownData_89[0x7]; // 0x89(0x07)
	struct TSoftObjectPtr<struct UMadQuestPool> QuestPool; // 0x90(0x28)
	char UnknownData_B8[0x10]; // 0xb8(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionConvoyUpgraded
// Size: 0xa8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionConvoyUpgraded : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FConvoyUpgraded> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificUpgrade : 1; // 0x88(0x01)
	char UnknownData_89[0x3]; // 0x89(0x03)
	struct FName UpgradeName; // 0x8c(0x08)
	char UnknownData_94[0x14]; // 0x94(0x14)
};

// Class Madness.MadEnochAccoladeUnlockConditionDamageDone
// Size: 0xe0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionDamageDone : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FDamageDoneTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificDamage : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificCharacterClass : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificPlayerEffectTag : 1; // 0x8a(0x01)
	char UnknownData_8B_0 : 7; // 0x8b(0x01)
	bool bSpecificEnemyEffectTag : 1; // 0x8b(0x01)
	char UnknownData_8C_0 : 7; // 0x8c(0x01)
	bool bSpecificDamageEventType : 1; // 0x8c(0x01)
	char UnknownData_8D_0 : 7; // 0x8d(0x01)
	bool bSkillDamage : 1; // 0x8d(0x01)
	char UnknownData_8E_0 : 7; // 0x8e(0x01)
	bool bCountEvents : 1; // 0x8e(0x01)
	char UnknownData_8F[0x1]; // 0x8f(0x01)
	SoftClassProperty DamageType; // 0x90(0x28)
	enum class EMadnessSkillPath CharacterClassType; // 0xb8(0x01)
	char UnknownData_B9[0x3]; // 0xb9(0x03)
	struct FGameplayTag PlayerActiveEffectTag; // 0xbc(0x08)
	struct FGameplayTag EnemyActiveEffectTag; // 0xc4(0x08)
	enum class EAccoladeDamageEventType DamageEventType; // 0xcc(0x01)
	char UnknownData_CD[0x13]; // 0xcd(0x13)
};

// Class Madness.MadEnochAccoladeUnlockConditionDiary
// Size: 0x148 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionDiary : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FDiaryTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificCategories : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificSubcategory : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificEntryType : 1; // 0x8a(0x01)
	char UnknownData_8B[0x5]; // 0x8b(0x05)
	struct TSet<struct FName> DiaryCategories; // 0x90(0x50)
	struct TSet<struct FName> DiarySubcategories; // 0xe0(0x50)
	int32_t JournalEntryType; // 0x130(0x04)
	char UnknownData_134_0 : 7; // 0x134(0x01)
	bool bAllowCountingUpdates : 1; // 0x134(0x01)
	char UnknownData_135[0x13]; // 0x135(0x13)
};

// Class Madness.MadEnochAccoladeUnlockConditionEffectOnTarget
// Size: 0xf0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionEffectOnTarget : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FEffectOnTargetTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificEffect : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificEffectCauser : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	SoftClassProperty Effect; // 0x90(0x28)
	SoftClassProperty EffectCauser; // 0xb8(0x28)
	char UnknownData_E0[0x10]; // 0xe0(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionEmote
// Size: 0xd0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionEmote : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FEmoteTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificEmote : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificPlayerCount : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	struct TSoftObjectPtr<struct UMadEmoteData> Emote; // 0x90(0x28)
	int32_t PlayersToPlayCount; // 0xb8(0x04)
	char UnknownData_BC[0x14]; // 0xbc(0x14)
};

// Class Madness.MadEnochAccoladeUnlockConditionEnemyEventAction
// Size: 0xd0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionEnemyEventAction : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FEnemyEventActionTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificDamage : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificActionTag : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	SoftClassProperty DamageType; // 0x90(0x28)
	struct FGameplayTag ActionTag; // 0xb8(0x08)
	char UnknownData_C0[0x10]; // 0xc0(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionHarvest
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionHarvest : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FAccoladeHarvestTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionHeal
// Size: 0xd0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionHeal : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FHealTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificAbility : 1; // 0x88(0x01)
	enum class EHealType HealType; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	SoftClassProperty Ability; // 0x90(0x28)
	char UnknownData_B8[0x10]; // 0xb8(0x10)
	struct UMadGameplayAbility* LastSkillUsed; // 0xc8(0x08)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemDifferentCollected
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemDifferentCollected : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemCollectedTier> Tiers; // 0x78(0x10)
	enum class EAccoladeDifferentItemType ItemType; // 0x88(0x01)
	enum class EAccoladeSetCheckType SetCheckType; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificRarity : 1; // 0x8a(0x01)
	enum class EMadItemRarity Rarity; // 0x8b(0x01)
	char UnknownData_8C[0x14]; // 0x8c(0x14)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemEnhanced
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemEnhanced : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemEnhancedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemEquip
// Size: 0x150 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemEquip : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemEquipTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSetItemsRequired : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bAnyItemsRequired : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificClass : 1; // 0x8a(0x01)
	char UnknownData_8B_0 : 7; // 0x8b(0x01)
	bool bSpecificRarity : 1; // 0x8b(0x01)
	char UnknownData_8C_0 : 7; // 0x8c(0x01)
	bool bSpecificItemType : 1; // 0x8c(0x01)
	char UnknownData_8D_0 : 7; // 0x8d(0x01)
	bool bRequireCharacterClass : 1; // 0x8d(0x01)
	char UnknownData_8E[0x2]; // 0x8e(0x02)
	int32_t SetItemsRequired; // 0x90(0x04)
	int32_t AnyItemsRequired; // 0x94(0x04)
	enum class EMadnessSkillPath ClassType; // 0x98(0x01)
	char UnknownData_99[0x7]; // 0x99(0x07)
	struct TSet<enum class EMadItemType> ItemTypes; // 0xa0(0x50)
	struct TSet<enum class EMadItemRarity> RarityTypes; // 0xf0(0x50)
	char UnknownData_140[0x10]; // 0x140(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemImproved
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemImproved : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemImprovedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemModChanged
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemModChanged : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemModChangedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemPickedUp
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemPickedUp : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemPickedUpTier> Tiers; // 0x78(0x10)
	enum class EMadEnochAccoladeUnlockConditionItemPickedUp ItemType; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificRarity : 1; // 0x89(0x01)
	enum class EMadItemRarity Rarity; // 0x8a(0x01)
	char UnknownData_8B[0x15]; // 0x8b(0x15)
};

// Class Madness.MadEnochAccoladeUnlockConditionItemSell
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionItemSell : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FItemSellTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionKill
// Size: 0x280 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionKill : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FKillTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificEnemy : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bAnySpecificEnemy : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificRank : 1; // 0x8a(0x01)
	char UnknownData_8B_0 : 7; // 0x8b(0x01)
	bool bSpecificWepon : 1; // 0x8b(0x01)
	char UnknownData_8C_0 : 7; // 0x8c(0x01)
	bool bSpecificTargeting : 1; // 0x8c(0x01)
	char UnknownData_8D_0 : 7; // 0x8d(0x01)
	bool bWithStatusesApplied : 1; // 0x8d(0x01)
	char UnknownData_8E_0 : 7; // 0x8e(0x01)
	bool bSpecificDamage : 1; // 0x8e(0x01)
	char UnknownData_8F_0 : 7; // 0x8f(0x01)
	bool bSpecificCharacterClass : 1; // 0x8f(0x01)
	char UnknownData_90_0 : 7; // 0x90(0x01)
	bool bMeleeKill : 1; // 0x90(0x01)
	char UnknownData_91_0 : 7; // 0x91(0x01)
	bool bSkillKill : 1; // 0x91(0x01)
	char UnknownData_92_0 : 7; // 0x92(0x01)
	bool bHeadshotKill : 1; // 0x92(0x01)
	char UnknownData_93_0 : 7; // 0x93(0x01)
	bool bUseSkillsOnly : 1; // 0x93(0x01)
	char UnknownData_94_0 : 7; // 0x94(0x01)
	bool bResetOnMiss : 1; // 0x94(0x01)
	char UnknownData_95_0 : 7; // 0x95(0x01)
	bool bKillFromCover : 1; // 0x95(0x01)
	char UnknownData_96_0 : 7; // 0x96(0x01)
	bool bPlayingInTeam : 1; // 0x96(0x01)
	char UnknownData_97[0x1]; // 0x97(0x01)
	struct FName EnemyTypeFName; // 0x98(0x08)
	struct TSet<struct FName> AnyEnemyTypeFNames; // 0xa0(0x50)
	char UnknownData_F0_0 : 7; // 0xf0(0x01)
	bool bAllowShareKillForAnyEnemyTypes : 1; // 0xf0(0x01)
	char UnknownData_F1[0x7]; // 0xf1(0x07)
	SoftClassProperty EnemyRank; // 0xf8(0x28)
	SoftClassProperty WeaponType; // 0x120(0x28)
	struct TSet<SoftClassProperty> WeaponTypes; // 0x148(0x50)
	enum class ETargetingType TargetingType; // 0x198(0x01)
	char UnknownData_199[0x3]; // 0x199(0x03)
	int32_t StatusesAppliedCount; // 0x19c(0x04)
	SoftClassProperty DamageType; // 0x1a0(0x28)
	struct TSet<SoftClassProperty> DamageTypes; // 0x1c8(0x50)
	enum class EMadnessSkillPath CharacterClassType; // 0x218(0x01)
	char UnknownData_219[0x7]; // 0x219(0x07)
	struct TSet<struct AMadBaseCharacter*> InvalidEnemies; // 0x220(0x50)
	char UnknownData_270[0x10]; // 0x270(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionLocationDiscovered
// Size: 0xa8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionLocationDiscovered : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FLocationDiscoveredTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificLocation : 1; // 0x88(0x01)
	char UnknownData_89[0x3]; // 0x89(0x03)
	struct FGameplayTag LocationTag; // 0x8c(0x08)
	char UnknownData_94[0x14]; // 0x94(0x14)
};

// Class Madness.MadEnochAccoladeUnlockConditionMaxDifficultyChanged
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionMaxDifficultyChanged : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FMaxDifficultyChangedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificMaxDifficultyUnlocked : 1; // 0x88(0x01)
	char UnknownData_89[0x3]; // 0x89(0x03)
	int32_t MaxDifficultyUnlocked; // 0x8c(0x04)
	char UnknownData_90[0x10]; // 0x90(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionModsDiscovered
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionModsDiscovered : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FModsDiscoveredTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionPlayerLevelChanged
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionPlayerLevelChanged : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FPlayerLevelChangedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionQuestObjective
// Size: 0xa8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionQuestObjective : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FQuestObjectiveTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificStatus : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificQuestObjective : 1; // 0x89(0x01)
	enum class EObjectiveStatus ObjectiveStatus; // 0x8a(0x01)
	char UnknownData_8B[0x1]; // 0x8b(0x01)
	struct FName QuestOrObjectiveID; // 0x8c(0x08)
	char UnknownData_94[0x14]; // 0x94(0x14)
};

// Class Madness.MadEnochAccoladeUnlockConditionResourceGained
// Size: 0xb0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionResourceGained : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FResourceGainedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificResourceType : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificCurrency : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bCountEvents : 1; // 0x8a(0x01)
	enum class EMadResourceType ResourceType; // 0x8b(0x01)
	char UnknownData_8C[0x4]; // 0x8c(0x04)
	struct FNameWrapper CurrencyName; // 0x90(0x10)
	char UnknownData_A0[0x10]; // 0xa0(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionRevive
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionRevive : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FReviveTier> Tiers; // 0x78(0x10)
	enum class EReviveType ReviveType; // 0x88(0x01)
	char UnknownData_89[0x17]; // 0x89(0x17)
};

// Class Madness.MadEnochAccoladeUnlockConditionSkillDamageAbsorbed
// Size: 0xd0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSkillDamageAbsorbed : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSkillDamageAbsorbedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificAbility : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificPlayerEffectTag : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	SoftClassProperty Ability; // 0x90(0x28)
	struct FGameplayTag PlayerEffectAppliedTag; // 0xb8(0x08)
	char UnknownData_C0[0x10]; // 0xc0(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionSkillLeveledUp
// Size: 0xa0 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSkillLeveledUp : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSkillLeveledUpTier> Tiers; // 0x78(0x10)
	enum class EMadEnochAccoladeUnlockConditionSkillLeveledUp LevelUpType; // 0x88(0x01)
	char UnknownData_89[0x17]; // 0x89(0x17)
};

// Class Madness.MadEnochAccoladeUnlockConditionSkillUnlocked
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSkillUnlocked : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSkillUnlockedTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionSkillUsed
// Size: 0xd8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSkillUsed : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSkillUsedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificAbility : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bCheckMasteriesCount : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	SoftClassProperty Ability; // 0x90(0x28)
	int32_t ActiveMasteriesCount; // 0xb8(0x04)
	char UnknownData_BC_0 : 7; // 0xbc(0x01)
	bool bRequireKillsOnSkillDuration : 1; // 0xbc(0x01)
	char UnknownData_BD[0x1b]; // 0xbd(0x1b)
};

// Class Madness.MadEnochAccoladeUnlockConditionSlowTrapBullets
// Size: 0x98 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSlowTrapBullets : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSlowTrapBulletsTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x10]; // 0x88(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionSpecificEffectApplied
// Size: 0x128 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionSpecificEffectApplied : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FSpecificEffectAppliedTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificAbility : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificEffect : 1; // 0x89(0x01)
	char UnknownData_8A_0 : 7; // 0x8a(0x01)
	bool bSpecificEffectTag : 1; // 0x8a(0x01)
	char UnknownData_8B_0 : 7; // 0x8b(0x01)
	bool bCheckRicochet : 1; // 0x8b(0x01)
	char UnknownData_8C_0 : 7; // 0x8c(0x01)
	bool bCheckCollective : 1; // 0x8c(0x01)
	char UnknownData_8D[0x3]; // 0x8d(0x03)
	SoftClassProperty Ability; // 0x90(0x28)
	SoftClassProperty Effect; // 0xb8(0x28)
	struct FGameplayTag EffectTag; // 0xe0(0x08)
	struct FAccoladeRicochetCheck RichochetCheck; // 0xe8(0x10)
	struct FAccoladeCollectiveCheck CollectiveCheck; // 0xf8(0x20)
	char UnknownData_118[0x10]; // 0x118(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionTakeApart
// Size: 0xa8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionTakeApart : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FTakeApartTier> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificItem : 1; // 0x88(0x01)
	char UnknownData_89[0x7]; // 0x89(0x07)
	struct AMadItem* ItemType; // 0x90(0x08)
	char UnknownData_98[0x10]; // 0x98(0x10)
};

// Class Madness.MadEnochAccoladeUnlockConditionTimeSpentInGroup
// Size: 0xa8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionTimeSpentInGroup : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FTimeSpentInGroupTier> Tiers; // 0x78(0x10)
	char UnknownData_88[0x20]; // 0x88(0x20)
};

// Class Madness.MadEnochAccoladeUnlockConditionTreeUpgraded
// Size: 0xf8 (Inherited: 0x78)
struct UMadEnochAccoladeUnlockConditionTreeUpgraded : UMadEnochAccoladeUnlockConditionBase {
	struct TArray<struct FTreeUpgraded> Tiers; // 0x78(0x10)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bSpecificUpgrade : 1; // 0x88(0x01)
	char UnknownData_89_0 : 7; // 0x89(0x01)
	bool bSpecificClass : 1; // 0x89(0x01)
	char UnknownData_8A[0x6]; // 0x8a(0x06)
	struct TSet<struct FName> UpgradeNames; // 0x90(0x50)
	char UnknownData_E0_0 : 7; // 0xe0(0x01)
	bool bSkipRootNode : 1; // 0xe0(0x01)
	char UnknownData_E1_0 : 7; // 0xe1(0x01)
	bool bRequireEndNode : 1; // 0xe1(0x01)
	enum class EMadnessSkillPath ClassType; // 0xe2(0x01)
	char UnknownData_E3[0x15]; // 0xe3(0x15)
};

// Class Madness.MadEnvQueryGenerator_ChangeCoverSlot
// Size: 0x50 (Inherited: 0x50)
struct UMadEnvQueryGenerator_ChangeCoverSlot : UEnvQueryGenerator {
};

// Class Madness.MadEnvQueryTest_ThreatLevelAttribute
// Size: 0x268 (Inherited: 0x268)
struct UMadEnvQueryTest_ThreatLevelAttribute : UEnvQueryTest {
};

// Class Madness.MadEnvQueryTest_WeaponDamagePerSecond
// Size: 0x270 (Inherited: 0x268)
struct UMadEnvQueryTest_WeaponDamagePerSecond : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x268(0x08)
};

// Class Madness.MadEQSTestingPawn
// Size: 0x740 (Inherited: 0x730)
struct AMadEQSTestingPawn : AFWEQSTestingPawn {
	struct FVector2D BestCoverDistanceToTarget; // 0x730(0x08)
	char UnknownData_738[0x8]; // 0x738(0x08)
};

// Class Madness.MadExitFlag
// Size: 0x328 (Inherited: 0x2f0)
struct AMadExitFlag : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct USceneComponent* SceneComp; // 0x2f8(0x08)
	struct UStaticMeshComponent* MeshComp; // 0x300(0x08)
	char UnknownData_308_0 : 7; // 0x308(0x01)
	bool bShouldRotate : 1; // 0x308(0x01)
	char UnknownData_309[0x3]; // 0x309(0x03)
	float RotationSpeed; // 0x30c(0x04)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bFlagEnabled : 1; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct UInteractionComponent* ExitInteractionComponent; // 0x318(0x08)
	struct AMadChallengeMapInfo* FlagOwner; // 0x320(0x08)

	void SetFlagEnabled(bool bInEnabled); // Function Madness.MadExitFlag.SetFlagEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1614cd0
	void OnRep_FlagEnabled(); // Function Madness.MadExitFlag.OnRep_FlagEnabled // (Native|Protected) // @ game+0x150ed00
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadExitFlag.OnInteracted // (Final|Native|Protected) // @ game+0x16142f0
	bool IsFlagEnabled(); // Function Madness.MadExitFlag.IsFlagEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1613ca0
};

// Class Madness.MadExplorerFlagsCapturePointData
// Size: 0x98 (Inherited: 0x28)
struct UMadExplorerFlagsCapturePointData : UObject {
	struct FGameplayTag GameplayName; // 0x28(0x08)
	char UnknownData_30[0x8]; // 0x30(0x08)
	struct FText DisplayName; // 0x38(0x18)
	char UnknownData_50_0 : 7; // 0x50(0x01)
	bool bEnabledByDefault : 1; // 0x50(0x01)
	char UnknownData_51[0x3]; // 0x51(0x03)
	struct FName ExpectedRegion; // 0x54(0x08)
	struct FGameplayTag RegionTag; // 0x5c(0x08)
	struct FGameplayTag ExpectedArea; // 0x64(0x08)
	struct FGameplayTag OptionalArea; // 0x6c(0x08)
	char UnknownData_74_0 : 7; // 0x74(0x01)
	bool bHiddenInUI : 1; // 0x74(0x01)
	char UnknownData_75[0x3]; // 0x75(0x03)
	struct FFactExpression OverrideDestinationFactExp; // 0x78(0x18)
	struct FGameplayTag OverrideDestination; // 0x90(0x08)
};

// Class Madness.MadExplorerFlagsRegionDefinition
// Size: 0x40 (Inherited: 0x30)
struct UMadExplorerFlagsRegionDefinition : UDataAsset {
	struct TArray<struct UMadExplorerFlagsCapturePointData*> CapturePoints; // 0x30(0x10)
};

// Class Madness.MadExplorerFlagsCapturePoint
// Size: 0x470 (Inherited: 0x400)
struct AMadExplorerFlagsCapturePoint : ACoopPlayerStart {
	char UnknownData_400[0x8]; // 0x400(0x08)
	struct UInteractionComponent* CaptureInteractionComponent; // 0x408(0x08)
	struct ULocalInteractionComponent* TravelInteractionComponent; // 0x410(0x08)
	struct USceneComponent* FlagRootComp; // 0x418(0x08)
	struct UMinimapNodeComponent* MinimapNodeComponent; // 0x420(0x08)
	enum class EMadCapturePointVisualState CurrentVisualState; // 0x428(0x01)
	enum class EMadCapturePointVisualState PendingVisualState; // 0x429(0x01)
	char UnknownData_42A_0 : 7; // 0x42a(0x01)
	bool bCanBeCaptured : 1; // 0x42a(0x01)
	char UnknownData_42B_0 : 7; // 0x42b(0x01)
	bool bCanBeCapturedInBattle : 1; // 0x42b(0x01)
	char UnknownData_42C_0 : 7; // 0x42c(0x01)
	bool bAutoCapture : 1; // 0x42c(0x01)
	char UnknownData_42D_0 : 7; // 0x42d(0x01)
	bool bShouldSaveState : 1; // 0x42d(0x01)
	char UnknownData_42E_0 : 7; // 0x42e(0x01)
	bool bDoNotUpdateFlagOnQuestUnlocked : 1; // 0x42e(0x01)
	char UnknownData_42F[0x1]; // 0x42f(0x01)
	char UnknownData_430_0 : 7; // 0x430(0x01)
	bool bIsPlayingSequence : 1; // 0x430(0x01)
	char UnknownData_431_0 : 7; // 0x431(0x01)
	bool bTravelInteractionEnabled : 1; // 0x431(0x01)
	char UnknownData_432_0 : 7; // 0x432(0x01)
	bool bIsBoundWithQuest : 1; // 0x432(0x01)
	char UnknownData_433_0 : 7; // 0x433(0x01)
	bool bLockedByQuest_Cached : 1; // 0x433(0x01)
	char UnknownData_434[0x3c]; // 0x434(0x3c)

	void UpdateCapturePointVisuals(enum class EMadCapturePointVisualState VisualState, struct AMadPlayerCharacter* PlantingOwner); // Function Madness.MadExplorerFlagsCapturePoint.UpdateCapturePointVisuals // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void TryBindOnQuestChanged(); // Function Madness.MadExplorerFlagsCapturePoint.TryBindOnQuestChanged // (Final|Native|Protected) // @ game+0x1614df0
	void SetTravelInteractionEnabled(bool bEnabled); // Function Madness.MadExplorerFlagsCapturePoint.SetTravelInteractionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1614d60
	void SetEnabled(bool bEnabled, struct APlayerController* InstigatorController); // Function Madness.MadExplorerFlagsCapturePoint.SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1614c10
	void SetCanBeCatptured(bool bInCanBeCaptured); // Function Madness.MadExplorerFlagsCapturePoint.SetCanBeCatptured // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1614b80
	void OnTravelInteractionEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadExplorerFlagsCapturePoint.OnTravelInteractionEndOverlap // (Final|Native|Protected) // @ game+0x16149c0
	void OnTravelInteractionBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadExplorerFlagsCapturePoint.OnTravelInteractionBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1614750
	void OnTravelInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadExplorerFlagsCapturePoint.OnTravelInteracted // (Final|Native|Protected) // @ game+0x1614690
	void OnRep_CurrentVisualState(); // Function Madness.MadExplorerFlagsCapturePoint.OnRep_CurrentVisualState // (Final|Native|Protected) // @ game+0x1614610
	void OnRep_CanBeCaptured(); // Function Madness.MadExplorerFlagsCapturePoint.OnRep_CanBeCaptured // (Final|Native|Protected) // @ game+0x16145f0
	void OnQuestChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus); // Function Madness.MadExplorerFlagsCapturePoint.OnQuestChanged // (Final|Native|Protected) // @ game+0x1614530
	void OnInteractionNotify(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith, struct FName NotifyName); // Function Madness.MadExplorerFlagsCapturePoint.OnInteractionNotify // (Final|Native|Protected) // @ game+0x16143b0
	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadExplorerFlagsCapturePoint.OnFrameworkSequenceStart // (Final|Native|Protected|HasOutParms) // @ game+0x16141c0
	void OnFrameworkSequenceEnd(); // Function Madness.MadExplorerFlagsCapturePoint.OnFrameworkSequenceEnd // (Final|Native|Protected) // @ game+0x16141a0
	void OnExplorerFlagTravelStarted(); // Function Madness.MadExplorerFlagsCapturePoint.OnExplorerFlagTravelStarted // (Final|Native|Public) // @ game+0x1614180
	void OnCharacterDestroyedDuringInteractionAnimation(struct ABaseCharacter* InCharacter); // Function Madness.MadExplorerFlagsCapturePoint.OnCharacterDestroyedDuringInteractionAnimation // (Final|Native|Protected) // @ game+0x1614100
	void OnCaptureMontageEnded(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadExplorerFlagsCapturePoint.OnCaptureMontageEnded // (Final|Native|Protected) // @ game+0x1614040
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadExplorerFlagsCapturePoint.OnBattleStateChanged // (Final|Native|Protected) // @ game+0x1613f20
	void OnBarrierLifted(struct AMadBarrier* Barrier); // Function Madness.MadExplorerFlagsCapturePoint.OnBarrierLifted // (Final|Native|Protected) // @ game+0x1613ea0
	void OnBarrierActivated(struct AMadBarrier* Barrier); // Function Madness.MadExplorerFlagsCapturePoint.OnBarrierActivated // (Final|Native|Protected) // @ game+0x1613e20
	void MulticastFinishFlagPlanting(struct AMadPlayerCharacter* PlantingOwner); // Function Madness.MadExplorerFlagsCapturePoint.MulticastFinishFlagPlanting // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1613d90
	void MulticastBeginFlagPlanting(struct AMadPlayerCharacter* PlantingOwner); // Function Madness.MadExplorerFlagsCapturePoint.MulticastBeginFlagPlanting // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1613d00
	bool IsTravelInteractionEnabled(); // Function Madness.MadExplorerFlagsCapturePoint.IsTravelInteractionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1613cd0
	struct AActor* GetOrSpawnFlagActor(struct AMadPlayerCharacter* PlantingOwner); // Function Madness.MadExplorerFlagsCapturePoint.GetOrSpawnFlagActor // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	struct FVector GetLocataionForFlagPlant(bool bPlantedFromInteraction); // Function Madness.MadExplorerFlagsCapturePoint.GetLocataionForFlagPlant // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1613bf0
	bool CanBeCatptured(); // Function Madness.MadExplorerFlagsCapturePoint.CanBeCatptured // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1613bc0
};

// Class Madness.MadExplorerFlagsGlobals
// Size: 0x80 (Inherited: 0x30)
struct UMadExplorerFlagsGlobals : UDataAsset {
	struct TMap<struct FName, struct UMadExplorerFlagsRegionDefinition*> RegionDefinitions; // 0x30(0x50)
};

// Class Madness.MadGameState
// Size: 0xb18 (Inherited: 0x738)
struct AMadGameState : ABaseGameState {
	struct FMulticastInlineDelegate OnTeamWipe; // 0x738(0x10)
	struct FPartyQuestInfo PartyQuestInfo; // 0x748(0x20)
	char UnknownData_768[0x30]; // 0x768(0x30)
	struct TArray<struct FWeakObjectPtr<struct AActor>> ActorsIgnoredByPlayerShots; // 0x798(0x10)
	char UnknownData_7A8[0x28]; // 0x7a8(0x28)
	struct FMulticastInlineDelegate OnCharacterHealed; // 0x7d0(0x10)
	char UnknownData_7E0[0x18]; // 0x7e0(0x18)
	struct FMulticastInlineDelegate OnCharacterEmotePlayed; // 0x7f8(0x10)
	struct FMulticastInlineDelegate OnItemDropComplete; // 0x808(0x10)
	struct AFWCharacterCache* CharacterCache; // 0x818(0x08)
	char UnknownData_820[0x50]; // 0x820(0x50)
	struct FMulticastInlineDelegate OnDifficultyLevelReplicated; // 0x870(0x10)
	struct FString CurrentBiomeName; // 0x880(0x10)
	enum class None DifficultyLevel; // 0x890(0x01)
	char UnknownData_891[0x3]; // 0x891(0x03)
	int32_t GuardedDifficultyLevel; // 0x894(0x04)
	char UnknownData_898_0 : 7; // 0x898(0x01)
	bool bIsDifficultyLevelingOn : 1; // 0x898(0x01)
	char UnknownData_899[0x3]; // 0x899(0x03)
	struct FName LastActiveObjectiveID; // 0x89c(0x08)
	char UnknownData_8A4[0x4]; // 0x8a4(0x04)
	struct FMulticastInlineDelegate OnBarrierActivated; // 0x8a8(0x10)
	struct AMadBarrier* LocalCurrentBarrier; // 0x8b8(0x08)
	struct TArray<struct UMadAbilitySet*> PlayerAbilitySets; // 0x8c0(0x10)
	char UnknownData_8D0[0x8]; // 0x8d0(0x08)
	struct FMulticastInlineDelegate OnKillfeedEntryAdded; // 0x8d8(0x10)
	char UnknownData_8E8[0x18]; // 0x8e8(0x18)
	char UnknownData_900_0 : 7; // 0x900(0x01)
	bool bToastsBroadcastEnabled : 1; // 0x900(0x01)
	char UnknownData_901[0x1f]; // 0x901(0x1f)
	struct TArray<struct FMadToastDTO> ToastsToMulticast; // 0x920(0x10)
	char UnknownData_930[0x8]; // 0x930(0x08)
	struct FMulticastInlineDelegate OnServerReadyAfterTransition; // 0x938(0x10)
	struct FMulticastInlineDelegate OnChallengeControllerReady; // 0x948(0x10)
	struct AMadChallengeController* ChallengeController; // 0x958(0x08)
	char UnknownData_960[0x50]; // 0x960(0x50)
	struct UMadExplorerFlagsStateComponent* ExplorerFlagsStateComponent; // 0x9b0(0x08)
	struct FVector TeleportToNodeLocation; // 0x9b8(0x0c)
	char UnknownData_9C4[0xa4]; // 0x9c4(0xa4)
	struct FMulticastInlineDelegate OnArenaRetreatCountdownStarted; // 0xa68(0x10)
	struct FMulticastInlineDelegate OnArenaRetreatStarted; // 0xa78(0x10)
	struct FMulticastInlineDelegate OnArenaRetreatPlayerReturned; // 0xa88(0x10)
	struct FMulticastInlineDelegate OnArenaRetreatFinished; // 0xa98(0x10)
	struct UMadBossHealthBarComponent* BossHealthBarComponent; // 0xaa8(0x08)
	char UnknownData_AB0[0x50]; // 0xab0(0x50)
	struct TArray<struct FName> AbilitiesWithDebugExecutionActive; // 0xb00(0x10)
	struct UMadShaderEffectManager* ShaderEffectManager; // 0xb10(0x08)

	void ToggleMarketingCamera(); // Function Madness.MadGameState.ToggleMarketingCamera // (Final|Exec|Native|Public) // @ game+0x1623d40
	void SetLastActiveObjectiveID(struct FName InLastActiveObjectiveID); // Function Madness.MadGameState.SetLastActiveObjectiveID // (Final|Native|Public) // @ game+0x1623cc0
	void SetFloorDamagingPhysMaterial(struct UPhysicalMaterial* InPhysMaterial, float InDamagePerInterval, float InInterval, struct UMadDamageType* InDamageType); // Function Madness.MadGameState.SetFloorDamagingPhysMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1623b70
	void SetDifficultylevel(enum class None InDifficultyLevel); // Function Madness.MadGameState.SetDifficultylevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1623af0
	void OnRep_PartyQuestInfo(); // Function Madness.MadGameState.OnRep_PartyQuestInfo // (Final|Native|Public) // @ game+0x1623ad0
	void OnRep_LastActiveObjectiveID(); // Function Madness.MadGameState.OnRep_LastActiveObjectiveID // (Final|Native|Public) // @ game+0x1623ab0
	void OnRep_Difficulty(); // Function Madness.MadGameState.OnRep_Difficulty // (Final|Native|Protected) // @ game+0x1623a90
	void OnRep_ChallengeController(); // Function Madness.MadGameState.OnRep_ChallengeController // (Final|Native|Protected) // @ game+0x1623a70
	void OnQuestTrackingChanged(struct UBaseQuest* quest, bool bTracking); // Function Madness.MadGameState.OnQuestTrackingChanged // (Final|Native|Public) // @ game+0x16239a0
	void OnQuestChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus); // Function Madness.MadGameState.OnQuestChanged // (Final|Native|Public) // @ game+0x16238e0
	void MulticastUpdateLobbyCountDownTimer(float CountdownTime); // Function Madness.MadGameState.MulticastUpdateLobbyCountDownTimer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1623820
	void MulticastToast_LegendaryItem(struct FMadToastLegendaryItem InToast); // Function Madness.MadGameState.MulticastToast_LegendaryItem // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1623510
	void MulticastToast_Kill(struct FMadToastKill InToast); // Function Madness.MadGameState.MulticastToast_Kill // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1623300
	void MulticastToast_Emote(struct FMadToastEmote InToast); // Function Madness.MadGameState.MulticastToast_Emote // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1623170
	void MulticastToast_DBNO(struct FMadToastDBNO InToast); // Function Madness.MadGameState.MulticastToast_DBNO // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622f70
	void MulticastToast(struct FMadToastDTO InToast); // Function Madness.MadGameState.MulticastToast // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1622ea0
	void MulticastTeleport(struct FName DestinationRegion); // Function Madness.MadGameState.MulticastTeleport // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1622e10
	void MulticastSynchronizeCharacterSave(bool bInstant); // Function Madness.MadGameState.MulticastSynchronizeCharacterSave // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622d80
	void MulticastStartGameCancelled(); // Function Madness.MadGameState.MulticastStartGameCancelled // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622d60
	void MulticastRemoveLobbyPreviewFor(struct AMadPlayerState* InPlayer); // Function Madness.MadGameState.MulticastRemoveLobbyPreviewFor // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622cd0
	void MulticastRegisterHealing(struct AMadBaseCharacter* character, float DeltaHealth, bool bSelfHealing, struct AActor* InInstigator, bool bPassiveHealing); // Function Madness.MadGameState.MulticastRegisterHealing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622b30
	void MulticastOnWssWipeaoutsCounterReached(); // Function Madness.MadGameState.MulticastOnWssWipeaoutsCounterReached // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622b10
	void MulticastLeavingLobby(); // Function Madness.MadGameState.MulticastLeavingLobby // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622af0
	void MulticastCharacterEmotePlayed(struct AMadPlayerCharacter* InCharacter, struct UMadEmoteData* InEmoteData); // Function Madness.MadGameState.MulticastCharacterEmotePlayed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1622a20
	void MulticastBroadcastKillfeedEntry(struct FMadKillfeedEntry KillfeedEntry); // Function Madness.MadGameState.MulticastBroadcastKillfeedEntry // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1622980
	void MulticastAddImpulsesToDebrisInCone(struct UMadDamageType* DmgType, struct AMadPlayerCharacter* DmgInstigator, struct FVector ViewLocation, struct FVector ViewDirection, float ConeLength, float ConeAngle, bool bOnlyYaw, float ConeBackOffset, bool bUseCameraAsOrigin); // Function Madness.MadGameState.MulticastAddImpulsesToDebrisInCone // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1622700
	bool IsInLobby(); // Function Madness.MadGameState.IsInLobby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16226d0
	void IncreaseDifficultyLevel(); // Function Madness.MadGameState.IncreaseDifficultyLevel // (Final|Native|Public) // @ game+0x16226b0
	struct AMadEnochAccoladesController* GetEnochAccoladesController(); // Function Madness.MadGameState.GetEnochAccoladesController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622400
	void EnableMarketingCamera(); // Function Madness.MadGameState.EnableMarketingCamera // (Final|Exec|Native|Public) // @ game+0x1622250
	void DisableMarketingCamera(); // Function Madness.MadGameState.DisableMarketingCamera // (Final|Exec|Native|Public) // @ game+0x1622230
	void BroadcastKillfeedEntry(struct FMadKillfeedEntry KillfeedEntry); // Function Madness.MadGameState.BroadcastKillfeedEntry // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1622190
};

// Class Madness.MadExplorerFlagsStateComponent
// Size: 0x260 (Inherited: 0x180)
struct UMadExplorerFlagsStateComponent : UActorComponent {
	char UnknownData_180[0xe0]; // 0x180(0xe0)
};

// Class Madness.MadExplorerFlagsUIModel
// Size: 0xa0 (Inherited: 0x50)
struct UMadExplorerFlagsUIModel : UBaseUIModel {
	char UnknownData_50[0x10]; // 0x50(0x10)
	char UnknownData_60_0 : 7; // 0x60(0x01)
	bool bTravelingEnabled : 1; // 0x60(0x01)
	char UnknownData_61[0x3]; // 0x61(0x03)
	struct FName InteractingFlag; // 0x64(0x08)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
	struct TArray<struct FMadExplorerFlagsCapturePointStatus> FlagsList; // 0x70(0x10)
	char UnknownData_80[0x20]; // 0x80(0x20)

	void RequestTravel(struct FName EndPoint); // Function Madness.MadExplorerFlagsUIModel.RequestTravel // (Final|Native|Public) // @ game+0x1614b00
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadExplorerFlagsUIModel.OnLevelTransitionCompleted // (Final|Native|Protected) // @ game+0x16144b0
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadExplorerFlagsUIModel.OnBattleStateChanged // (Final|Native|Protected) // @ game+0x1613fb0
	void DEBUG_EnableAllCapturePoints(bool bEnabled); // Function Madness.MadExplorerFlagsUIModel.DEBUG_EnableAllCapturePoints // (Final|Native|Public) // @ game+0x15c2580
};

// Class Madness.MadExplosionTemplate
// Size: 0x1d8 (Inherited: 0x100)
struct UMadExplosionTemplate : UExplosionTemplate {
	struct FCustomMagnitude DamageMultiplier; // 0x100(0x68)
	struct FGameplayAttribute DamageMultiplierAttribute; // 0x168(0x38)
	struct FGameplayAttribute RadiusMultiplierAttribute; // 0x1a0(0x38)
};

// Class Madness.MadExplosiveTrap
// Size: 0x370 (Inherited: 0x2f0)
struct AMadExplosiveTrap : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FMulticastInlineDelegate OnExploded; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnReset; // 0x308(0x10)
	struct FMulticastInlineDelegate OnHealthChanged; // 0x318(0x10)
	struct UStaticMeshComponent* MeshComponent; // 0x328(0x08)
	struct UStaticMeshComponent* DamagedMeshComponent; // 0x330(0x08)
	struct UMadTresholdBasedParticlesComponent* ParticlesComponent; // 0x338(0x08)
	float Health; // 0x340(0x04)
	char UnknownData_344_0 : 7; // 0x344(0x01)
	bool bExploded : 1; // 0x344(0x01)
	char UnknownData_345[0x3]; // 0x345(0x03)
	struct UExplosionTemplate* ExplosionTemplate; // 0x348(0x08)
	struct FVector CachedMeshBoundsCenter; // 0x350(0x0c)
	char UnknownData_35C[0x14]; // 0x35c(0x14)

	void SetMaxHealth(float InMaxHealth); // Function Madness.MadExplosiveTrap.SetMaxHealth // (Native|Public) // @ game+0x157a5a0
	void SetHealth(float InHealth); // Function Madness.MadExplosiveTrap.SetHealth // (Native|Public|BlueprintCallable) // @ game+0x157a520
	void OnTeamWipe(); // Function Madness.MadExplosiveTrap.OnTeamWipe // (Final|Native|Private) // @ game+0x1614670
	void OnRep_Health(); // Function Madness.MadExplosiveTrap.OnRep_Health // (Final|Native|Private) // @ game+0x1614650
	void OnRep_Exploded(); // Function Madness.MadExplosiveTrap.OnRep_Exploded // (Final|Native|Private) // @ game+0x1614630
	float GetMaxHealth(); // Function Madness.MadExplosiveTrap.GetMaxHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1578e50
	float GetHealth(); // Function Madness.MadExplosiveTrap.GetHealth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1578e10
};

// Class Madness.MadFactDependentActor
// Size: 0x300 (Inherited: 0x2f0)
struct AMadFactDependentActor : AActor {
	struct USceneComponent* RootScene; // 0x2f0(0x08)
	struct UFactWatcherComponent* FactWatcher; // 0x2f8(0x08)

	void OnWatchedFactChanged(); // Function Madness.MadFactDependentActor.OnWatchedFactChanged // (Final|Native|Protected) // @ game+0x161b820
};

// Class Madness.MadFactItem
// Size: 0x538 (Inherited: 0x4c0)
struct AMadFactItem : AMadItem {
	char UnknownData_4C0_0 : 7; // 0x4c0(0x01)
	bool bClaimed : 1; // 0x4c0(0x01)
	char UnknownData_4C1[0x3]; // 0x4c1(0x03)
	struct FName Fact; // 0x4c4(0x08)
	char UnknownData_4CC[0x4]; // 0x4cc(0x04)
	struct FMadFactItemEntry FactEntry; // 0x4d0(0x68)

	struct AMadFactItem* SpawnFactItem(struct UObject* WorldContextObject, struct FName InFact); // Function Madness.MadFactItem.SpawnFactItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x161c1a0
	void OnRep_Fact(); // Function Madness.MadFactItem.OnRep_Fact // (Final|Native|Protected) // @ game+0x161b770
};

// Class Madness.MadFactMeshCluster
// Size: 0x320 (Inherited: 0x2f0)
struct AMadFactMeshCluster : AActor {
	struct USceneComponent* RootScene; // 0x2f0(0x08)
	char UnknownData_2F8_0 : 7; // 0x2f8(0x01)
	bool bStartEnabled : 1; // 0x2f8(0x01)
	char UnknownData_2F9[0x7]; // 0x2f9(0x07)
	struct FFactExpression FactExp; // 0x300(0x18)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bEnabled : 1; // 0x318(0x01)
	char UnknownData_319[0x7]; // 0x319(0x07)

	void OnRep_bEnabled(bool bWasEnabled); // Function Madness.MadFactMeshCluster.OnRep_bEnabled // (Final|Native|Protected) // @ game+0x161b790
};

// Class Madness.MadFinalStageComponent
// Size: 0x198 (Inherited: 0x180)
struct UMadFinalStageComponent : UActorComponent {
	char UnknownData_180[0x18]; // 0x180(0x18)
};

// Class Madness.MadFlamerBackpackComponent
// Size: 0x1170 (Inherited: 0x1110)
struct UMadFlamerBackpackComponent : UMadBackpackComponent {
	struct UAnimMontage* BackpackAnimation; // 0x1110(0x08)
	struct FString MortarSpawnSocketName; // 0x1118(0x10)
	struct FName BackpackWeakSpotBoneName; // 0x1128(0x08)
	float BackpackWeakSpotDamageMultiplier; // 0x1130(0x04)
	float GlowEffectChangeTime; // 0x1134(0x04)
	struct AMadDamageArea* DamageAreaClass; // 0x1138(0x08)
	char UnknownData_1140[0x18]; // 0x1140(0x18)
	enum class EBackpackState BackpackState; // 0x1158(0x01)
	char UnknownData_1159[0x7]; // 0x1159(0x07)
	struct AMadDamageArea* DamageArea; // 0x1160(0x08)
	char UnknownData_1168[0x8]; // 0x1168(0x08)

	bool PlayBackpackOpenAnimation(); // Function Madness.MadFlamerBackpackComponent.PlayBackpackOpenAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x161b870
	bool PlayBackpackCloseAnimation(); // Function Madness.MadFlamerBackpackComponent.PlayBackpackCloseAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x161b840
	void OnRep_BackpackState(); // Function Madness.MadFlamerBackpackComponent.OnRep_BackpackState // (Final|Native|Private) // @ game+0x161b750
	struct FVector GetMortarSpawnLocation(); // Function Madness.MadFlamerBackpackComponent.GetMortarSpawnLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x16199e0
};

// Class Madness.MadHeavyWeapon
// Size: 0x1f38 (Inherited: 0x1f30)
struct AMadHeavyWeapon : AMadWeapon {
	enum class EMadHeavyWeaponType SubType; // 0x1f30(0x01)
	char UnknownData_1F31[0x7]; // 0x1f31(0x07)
};

// Class Madness.MadFlamethrower
// Size: 0x1f48 (Inherited: 0x1f38)
struct AMadFlamethrower : AMadHeavyWeapon {
	struct TArray<struct FVector> ValidEnemyTraces; // 0x1f38(0x10)

	void ServerProcessInstantHits(struct TArray<struct FHitResult> Impacts); // Function Madness.MadFlamethrower.ServerProcessInstantHits // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x161bc40
	void MulticastProcessInstantHits(struct TArray<struct FHitResult> Impacts); // Function Madness.MadFlamethrower.MulticastProcessInstantHits // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x161b2a0
};

// Class Madness.MadForgeCaptainWidget
// Size: 0x230 (Inherited: 0x230)
struct UMadForgeCaptainWidget : UUserWidget {

	void SpawnCaptain(struct UFWAIArchetype* AIArchetype, enum class None VariationId, struct UFWAIRank* AIRank, struct TArray<SoftClassProperty> InSelectedAbilities); // Function Madness.MadForgeCaptainWidget.SpawnCaptain // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x161bff0
	void OnClosing(); // Function Madness.MadForgeCaptainWidget.OnClosing // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct FString GetHumanReadableAbilityName(SoftClassProperty InAbility); // Function Madness.MadForgeCaptainWidget.GetHumanReadableAbilityName // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619850
	struct AMadBaseAICharacter* GetCaptainClass(struct UFWAIArchetype* AIArchetype, enum class None VariationId, struct UFWAIRank* AIRank); // Function Madness.MadForgeCaptainWidget.GetCaptainClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1619470
	void GetCaptainAbilities(struct AMadBaseAICharacter* InCaptain, struct TArray<SoftClassProperty> OutAbilities); // Function Madness.MadForgeCaptainWidget.GetCaptainAbilities // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1619340
};

// Class Madness.MadGameInstance
// Size: 0x640 (Inherited: 0x1b0)
struct UMadGameInstance : UBaseGameInstance {
	char UnknownData_1B0[0x1e8]; // 0x1b0(0x1e8)
	struct UMadOnlineSaveSystem* SaveSystemV2; // 0x398(0x08)
	char UnknownData_3A0[0xa8]; // 0x3a0(0xa8)
	char UnknownData_448_0 : 7; // 0x448(0x01)
	bool bLeavePartyChangeSlotPending : 1; // 0x448(0x01)
	char UnknownData_449[0x7]; // 0x449(0x07)
	SoftClassProperty TutorialManagerClass; // 0x450(0x28)
	struct UMadTutorialManager* TutorialManager; // 0x478(0x08)
	char UnknownData_480[0x1c0]; // 0x480(0x1c0)

	void UpdateMyPresence(); // Function Madness.MadGameInstance.UpdateMyPresence // (Final|Exec|Native|Public) // @ game+0x161db10
	void UpdateHostMigrationProgressPreTransition(); // Function Madness.MadGameInstance.UpdateHostMigrationProgressPreTransition // (Final|Native|Private) // @ game+0x161daf0
	void UpdateHostMigrationProgressPostTransition(); // Function Madness.MadGameInstance.UpdateHostMigrationProgressPostTransition // (Final|Native|Private) // @ game+0x161dad0
	void UnsetSessionBlockerId(int32_t JoinBlockerReasonId); // Function Madness.MadGameInstance.UnsetSessionBlockerId // (Final|Exec|Native|Public) // @ game+0x161da50
	void TravelToChallengeHub(); // Function Madness.MadGameInstance.TravelToChallengeHub // (Final|Exec|Native|Public) // @ game+0x161da30
	void TogglePlatformFeatures(int32_t IsEnabled); // Function Madness.MadGameInstance.TogglePlatformFeatures // (Final|Exec|Native|Public) // @ game+0x161d9b0
	void SetSessionBlockerId(int32_t JoinBlockerReasonId); // Function Madness.MadGameInstance.SetSessionBlockerId // (Final|Exec|Native|Public) // @ game+0x161bf70
	void SetPresenceDataAttr(struct FString Key, struct FString Value); // Function Madness.MadGameInstance.SetPresenceDataAttr // (Final|Exec|Native|Public) // @ game+0x161be00
	void SetMatchmakingKey(int32_t Key); // Function Madness.MadGameInstance.SetMatchmakingKey // (Final|Exec|Native|Public) // @ game+0x161bd80
	void SetBlockListToPresence(); // Function Madness.MadGameInstance.SetBlockListToPresence // (Final|Exec|Native|Public) // @ game+0x161bd60
	void SendInvite(); // Function Madness.MadGameInstance.SendInvite // (Final|Exec|Native|Public) // @ game+0x161bc20
	void SendBackendInvite(struct FString UserId); // Function Madness.MadGameInstance.SendBackendInvite // (Final|Exec|Native|Public) // @ game+0x161bb40
	void RemoveUserFromBlockList(struct FString UserProfileId); // Function Madness.MadGameInstance.RemoveUserFromBlockList // (Final|Exec|Native|Public) // @ game+0x161ba80
	void RemoveOsdkFriend(struct FString FriendProfile); // Function Madness.MadGameInstance.RemoveOsdkFriend // (Final|Exec|Native|Public) // @ game+0x161b9a0
	void PrintOsdkProfile(); // Function Madness.MadGameInstance.PrintOsdkProfile // (Final|Exec|Native|Public) // @ game+0x161b8a0
	void OnShutdown__DelegateSignature(); // DelegateFunction Madness.MadGameInstance.OnShutdown__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void NetworkSubscriptionOpen(); // Function Madness.MadGameInstance.NetworkSubscriptionOpen // (Final|Exec|Native|Public) // @ game+0x161b3e0
	void NetworkSubscriptionCheckStatus(); // Function Madness.MadGameInstance.NetworkSubscriptionCheckStatus // (Final|Exec|Native|Public) // @ game+0x161b3c0
	void JoinMatchedParty(); // Function Madness.MadGameInstance.JoinMatchedParty // (Final|Exec|Native|Public) // @ game+0x161abb0
	bool IsSessionBlockerIdSet(int32_t JoinBlockerReasonId); // Function Madness.MadGameInstance.IsSessionBlockerIdSet // (Final|Exec|Native|Public|Const) // @ game+0x161aa00
	struct UMadShaderEffectManager* GetShaderEffectManager(); // Function Madness.MadGameInstance.GetShaderEffectManager // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x161a060
	void GetPresenceDataAttrs(struct FString FriendProfile); // Function Madness.MadGameInstance.GetPresenceDataAttrs // (Final|Exec|Native|Public) // @ game+0x1619f50
	void GetOsdkFriends(); // Function Madness.MadGameInstance.GetOsdkFriends // (Final|Exec|Native|Public) // @ game+0x1619b90
	struct UMadOnlineSaveSystem* GetOnlineSaveSystemV2(); // Function Madness.MadGameInstance.GetOnlineSaveSystemV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x1619b70
	void GetFriendPresences(); // Function Madness.MadGameInstance.GetFriendPresences // (Final|Exec|Native|Public) // @ game+0x1619720
	void FindSessions(int32_t Key, int32_t searchDistance); // Function Madness.MadGameInstance.FindSessions // (Final|Exec|Native|Public) // @ game+0x1619070
	void FakeLinkDown(); // Function Madness.MadGameInstance.FakeLinkDown // (Final|Exec|Native|Public) // @ game+0x1618f90
	void ExitToLobbyWithParty(); // Function Madness.MadGameInstance.ExitToLobbyWithParty // (Final|Exec|Native|Public) // @ game+0x1618e20
	void ExitToLobbyAlone(); // Function Madness.MadGameInstance.ExitToLobbyAlone // (Final|Exec|Native|Public) // @ game+0x1618e00
	void EnableMatchmaking(); // Function Madness.MadGameInstance.EnableMatchmaking // (Final|Exec|Native|Public) // @ game+0x1618930
	void EnableJoinInProgress(); // Function Madness.MadGameInstance.EnableJoinInProgress // (Final|Exec|Native|Public) // @ game+0x1618860
	void EnableDebugOverlay(); // Function Madness.MadGameInstance.EnableDebugOverlay // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void DisableMatchmaking(); // Function Madness.MadGameInstance.DisableMatchmaking // (Final|Exec|Native|Public) // @ game+0x1618840
	void DisableJoinInProgress(); // Function Madness.MadGameInstance.DisableJoinInProgress // (Final|Exec|Native|Public) // @ game+0x1618800
	void DisableDebugOverlay(); // Function Madness.MadGameInstance.DisableDebugOverlay // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void DelPresenceDataAttr(struct FString Key); // Function Madness.MadGameInstance.DelPresenceDataAttr // (Final|Exec|Native|Public) // @ game+0x1618720
	void DeclineMatchmakingResult(); // Function Madness.MadGameInstance.DeclineMatchmakingResult // (Final|Exec|Native|Public) // @ game+0x1618700
	void DebugUnblockAllPartyMembers(); // Function Madness.MadGameInstance.DebugUnblockAllPartyMembers // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void Mad.Debug.StartGameWithSelectedRegion(); // Function Madness.MadGameInstance.Mad.Debug.StartGameWithSelectedRegion // (Final|Exec|Native|Public) // @ game+0x16186e0
	void Mad.Debug.ReturnToMenu(); // Function Madness.MadGameInstance.Mad.Debug.ReturnToMenu // (Final|Exec|Native|Public) // @ game+0x16186c0
	void DebugRefreshOptionPage(); // Function Madness.MadGameInstance.DebugRefreshOptionPage // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void DebugPrintOsdkBlockList(); // Function Madness.MadGameInstance.DebugPrintOsdkBlockList // (Final|Exec|Native|Public) // @ game+0x16186a0
	void DebugClearBlockList(); // Function Madness.MadGameInstance.DebugClearBlockList // (Final|Exec|Native|Public) // @ game+0x1618680
	void DebugBlockAllPartyMembers(); // Function Madness.MadGameInstance.DebugBlockAllPartyMembers // (Final|Exec|Native|Public) // @ game+0xe8aaf0
	void CancelMatchMaking(); // Function Madness.MadGameInstance.CancelMatchMaking // (Final|Exec|Native|Public) // @ game+0x1618460
	void ALLOWMATCHMAKING(bool Value); // Function Madness.MadGameInstance.ALLOWMATCHMAKING // (Final|Exec|Native|Public) // @ game+0x16183b0
	void AddUserToBlockList(struct FString UserProfileId); // Function Madness.MadGameInstance.AddUserToBlockList // (Final|Exec|Native|Public) // @ game+0x1618310
	void AddOsdkFriend(struct FString FriendProfile); // Function Madness.MadGameInstance.AddOsdkFriend // (Final|Exec|Native|Public) // @ game+0x1618230
	void AcceptMatchmakingResult(); // Function Madness.MadGameInstance.AcceptMatchmakingResult // (Final|Exec|Native|Public) // @ game+0x1618210
};

// Class Madness.MadGameMode
// Size: 0x4d0 (Inherited: 0x4c0)
struct AMadGameMode : ABaseGameMode {
	struct APawn* FemaleDefaultPawnClass; // 0x4c0(0x08)
	struct UQuickTimeEventManagerComponent* QuickTimeEventManager; // 0x4c8(0x08)
};

// Class Madness.TwoCharactersAnimationData
// Size: 0x58 (Inherited: 0x30)
struct UTwoCharactersAnimationData : UDataAsset {
	struct UAnimMontage* AttackerMontage; // 0x30(0x08)
	struct UAnimMontage* VictimMontage; // 0x38(0x08)
	float SyncDuration; // 0x40(0x04)
	struct FName SyncBoneName; // 0x44(0x08)
	char UnknownData_4C_0 : 7; // 0x4c(0x01)
	bool bAutoStartVictimMontage : 1; // 0x4c(0x01)
	char UnknownData_4D[0x3]; // 0x4d(0x03)
	struct FGameplayTag EventTag; // 0x50(0x08)
};

// Class Madness.MadGameplayCue
// Size: 0x548 (Inherited: 0x368)
struct AMadGameplayCue : AGameplayCueNotify_Actor {
	struct USoundBase* StartSound; // 0x368(0x08)
	struct USoundBase* StopSound; // 0x370(0x08)
	struct UParticleSystem* BeamParticleSystem; // 0x378(0x08)
	float FadeOutDuration; // 0x380(0x04)
	char UnknownData_384_0 : 7; // 0x384(0x01)
	bool bBeamSourceAttachedToCauser : 1; // 0x384(0x01)
	char UnknownData_385_0 : 7; // 0x385(0x01)
	bool bChangeMaterialGroup : 1; // 0x385(0x01)
	char UnknownData_386_0 : 7; // 0x386(0x01)
	bool bStayAttached : 1; // 0x386(0x01)
	char UnknownData_387_0 : 7; // 0x387(0x01)
	bool bLoopingEffect : 1; // 0x387(0x01)
	struct FName TargetPointBoneName; // 0x388(0x08)
	struct UParticleSystem* StartParticleSystem; // 0x390(0x08)
	char UnknownData_398_0 : 7; // 0x398(0x01)
	bool bSpawnUpright_StartParticle : 1; // 0x398(0x01)
	char UnknownData_399[0x7]; // 0x399(0x07)
	struct UParticleSystem* StopParticleSystem; // 0x3a0(0x08)
	char UnknownData_3A8_0 : 7; // 0x3a8(0x01)
	bool bSpawnUpright_StopParticle : 1; // 0x3a8(0x01)
	char UnknownData_3A9[0x3]; // 0x3a9(0x03)
	struct FVector ParticleScale3D; // 0x3ac(0x0c)
	float Falloff; // 0x3b8(0x04)
	char UnknownData_3BC[0x4]; // 0x3bc(0x04)
	struct FGameplayAttribute ParticleScaleBackingAttribute; // 0x3c0(0x38)
	struct TArray<struct UMadCharacterShaderEffect*> CharacterShaderEffectsToPlay; // 0x3f8(0x10)
	struct TArray<struct UMadWeaponShaderEffect*> WeaponShaderEffectsToPlay; // 0x408(0x10)
	struct TArray<struct UMadShaderEffect*> PlayedShaderEffects; // 0x418(0x10)
	struct FName AttachPoint; // 0x428(0x08)
	struct FRotator RelativeRotation; // 0x430(0x0c)
	struct FVector RelativeLocation; // 0x43c(0x0c)
	struct UCameraShake* Shake; // 0x448(0x08)
	float InnerRadius; // 0x450(0x04)
	float OuterRadius; // 0x454(0x04)
	struct UForceFeedbackEffect* ForceFeedback; // 0x458(0x08)
	struct FName ForceFeedbackTag; // 0x460(0x08)
	char UnknownData_468_0 : 7; // 0x468(0x01)
	bool bStopForceFeedbackOnCueRemoved : 1; // 0x468(0x01)
	char UnknownData_469_0 : 7; // 0x469(0x01)
	bool bSkipGroupCheck : 1; // 0x469(0x01)
	char UnknownData_46A_0 : 7; // 0x46a(0x01)
	bool bSpawnGoreSkeleton : 1; // 0x46a(0x01)
	char UnknownData_46B_0 : 7; // 0x46b(0x01)
	bool bLockGoreSkeleton : 1; // 0x46b(0x01)
	float SkeletonDespawnDelay; // 0x46c(0x04)
	char UnknownData_470_0 : 7; // 0x470(0x01)
	bool bDisableImpactEffects : 1; // 0x470(0x01)
	char UnknownData_471_0 : 7; // 0x471(0x01)
	bool bDisableAllGibs : 1; // 0x471(0x01)
	char UnknownData_472_0 : 7; // 0x472(0x01)
	bool bDisableSpawningGorePlugs : 1; // 0x472(0x01)
	char UnknownData_473_0 : 7; // 0x473(0x01)
	bool bEnableSkeletonRagdoll : 1; // 0x473(0x01)
	char UnknownData_474_0 : 7; // 0x474(0x01)
	bool bDisableSkeletonReceivesDecals : 1; // 0x474(0x01)
	char UnknownData_475_0 : 7; // 0x475(0x01)
	bool bDisableGibsReceiveDecals : 1; // 0x475(0x01)
	char UnknownData_476_0 : 7; // 0x476(0x01)
	bool bDisableSpawningBloodEmitterOnGib : 1; // 0x476(0x01)
	char UnknownData_477_0 : 7; // 0x477(0x01)
	bool bBreakSkeletonRagdollConstraints : 1; // 0x477(0x01)
	char UnknownData_478_0 : 7; // 0x478(0x01)
	bool bDisableShadowsWhenSpawningSkeleton : 1; // 0x478(0x01)
	char UnknownData_479_0 : 7; // 0x479(0x01)
	bool bLockOwnerMeshShadow : 1; // 0x479(0x01)
	char UnknownData_47A_0 : 7; // 0x47a(0x01)
	bool bLockSkeletonMaterial : 1; // 0x47a(0x01)
	char UnknownData_47B_0 : 7; // 0x47b(0x01)
	bool bLockGibMaterial : 1; // 0x47b(0x01)
	struct FGameplayTag GoreTag; // 0x47c(0x08)
	char UnknownData_484_0 : 7; // 0x484(0x01)
	bool bDisableCollision : 1; // 0x484(0x01)
	char UnknownData_485[0x3]; // 0x485(0x03)
	struct UMaterial* GoreSkeletonMaterial; // 0x488(0x08)
	struct TArray<struct UMadGoreSkeletonShaderEffect*> GoreSkeletonShaderEffectsToPlay; // 0x490(0x10)
	struct UMaterial* GoreGibMaterial; // 0x4a0(0x08)
	struct TArray<struct UMadGoreGibShaderEffect*> GoreGibShaderEffectsToPlay; // 0x4a8(0x10)
	char UnknownData_4B8[0x10]; // 0x4b8(0x10)
	struct UAudioComponent* AudioComponent; // 0x4c8(0x08)
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x4d0(0x08)
	struct UParticleSystemComponent* BeamParticleSystemComponent; // 0x4d8(0x08)
	struct UCharacterEffectsTemplate* FootDownEffectTemplate; // 0x4e0(0x08)
	struct UWeaponAbilityEffect* WeaponAbilityEffect; // 0x4e8(0x08)
	struct FName WeaponEffectName; // 0x4f0(0x08)
	struct UWeaponAbilityDamageType* WeaponAbilityDamageType; // 0x4f8(0x08)
	char UnknownData_500_0 : 7; // 0x500(0x01)
	bool bCustomFiring : 1; // 0x500(0x01)
	char UnknownData_501_0 : 7; // 0x501(0x01)
	bool bShouldCountBullets : 1; // 0x501(0x01)
	char UnknownData_502[0x2]; // 0x502(0x02)
	int32_t MaxBulletsNum; // 0x504(0x04)
	struct FGameplayTagContainer RemoveWithTags; // 0x508(0x20)
	char UnknownData_528[0x20]; // 0x528(0x20)

	void OnOutOfWeaponAbilityBullets(); // Function Madness.MadGameplayCue.OnOutOfWeaponAbilityBullets // (Final|Native|Private) // @ game+0x16238c0
	void OnNewWeaponEquipped(); // Function Madness.MadGameplayCue.OnNewWeaponEquipped // (Final|Native|Private) // @ game+0x16238a0
	struct UParticleSystemComponent* GetParticleSystemComponent(); // Function Madness.MadGameplayCue.GetParticleSystemComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622530
	struct FGameplayTag GetGameplayCueTag(); // Function Madness.MadGameplayCue.GetGameplayCueTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1622420
};

// Class Madness.MadGameplayCue_Simple
// Size: 0x110 (Inherited: 0x50)
struct UMadGameplayCue_Simple : UGameplayCueNotify_Static {
	struct USoundBase* StartSound; // 0x50(0x08)
	struct UParticleSystem* StartParticleSystem; // 0x58(0x08)
	struct FVector ParticleScale3D; // 0x60(0x0c)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
	struct FGameplayAttribute ParticleScaleBackingAttribute; // 0x70(0x38)
	struct FName AttachPoint; // 0xa8(0x08)
	struct FRotator RelativeRotation; // 0xb0(0x0c)
	struct FVector RelativeLocation; // 0xbc(0x0c)
	struct UCameraShake* Shake; // 0xc8(0x08)
	float InnerRadius; // 0xd0(0x04)
	float OuterRadius; // 0xd4(0x04)
	float Falloff; // 0xd8(0x04)
	char UnknownData_DC_0 : 7; // 0xdc(0x01)
	bool bStayAttached : 1; // 0xdc(0x01)
	char UnknownData_DD[0x3]; // 0xdd(0x03)
	struct UForceFeedbackEffect* ForceFeedback; // 0xe0(0x08)
	struct UImpactEffectWeapon* ImpactEffectTemplate; // 0xe8(0x08)
	struct TArray<struct FMadShaderManipulator> ShadersToBlendOnExecute; // 0xf0(0x10)
	struct TArray<struct FMadShaderSequence> ShaderSequencesOnExecute; // 0x100(0x10)

	struct FGameplayTag GetGameplayCueTag(); // Function Madness.MadGameplayCue_Simple.GetGameplayCueTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622440
	void ExecuteParticleSystem(struct AActor* MyTarget, struct UParticleSystem* InPS); // Function Madness.MadGameplayCue_Simple.ExecuteParticleSystem // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1622270
};

// Class Madness.MadGameplayCueManager
// Size: 0x368 (Inherited: 0x368)
struct UMadGameplayCueManager : UGameplayCueManager {
};

// Class Madness.MadGameplayData
// Size: 0x6e8 (Inherited: 0x30)
struct UMadGameplayData : UDataAsset {
	float BaseDifficultyExpReduction; // 0x30(0x04)
	float DifficultyLevelScaleExpReduction; // 0x34(0x04)
	float HealthMitigationFirstThreshold; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
	struct UMadGameplayEffect* HealthMitigationFirstThresholdEffectClass; // 0x40(0x08)
	float HealthMitigationSecondThreshold; // 0x48(0x04)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
	struct UMadGameplayEffect* HealthMitigationSecondThresholdEffectClass; // 0x50(0x08)
	float HealthMitigationCooldownDuration; // 0x58(0x04)
	char UnknownData_5C[0x4]; // 0x5c(0x04)
	struct TSet<struct FGameplayTag> CuesThatCantBeSliced; // 0x60(0x50)
	struct UMadGameplayEffect* PlayerDeathEffectClass; // 0xb0(0x08)
	struct FGameplayTag DeadStatusTag; // 0xb8(0x08)
	struct FGameplayTag ImmunityTagPhysical; // 0xc0(0x08)
	struct FGameplayTag ImmunityTagAnomaly; // 0xc8(0x08)
	struct FGameplayTag ImmunityTagDarkMatter; // 0xd0(0x08)
	struct FScalableFloat ShieldDepletionPeriod; // 0xd8(0x20)
	struct FScalableFloat ShieldDepletionPercentValue; // 0xf8(0x20)
	struct FScalableFloat OutOfCombatShieldDepletionPercentValue; // 0x118(0x20)
	struct FGameplayTag IgnoreHasBeenDamagedRecentlyTag; // 0x138(0x08)
	struct FGameplayTag IgnoreHasBeenDamagedRecentlyInCoverTag; // 0x140(0x08)
	struct FGameplayTag PerseveranceModeTag; // 0x148(0x08)
	struct FGameplayTag MovementSpeedTag; // 0x150(0x08)
	struct UDataTable* EnrageLevelDT; // 0x158(0x08)
	struct UMadGameplayEffect* KnockbackDurationEffectClass; // 0x160(0x08)
	struct FGameplayTagContainer KnockbackActivationBlockedTags; // 0x168(0x20)
	struct FGameplayTagContainer FalterActivationBlockedTags; // 0x188(0x20)
	struct FGameplayTag FalterTag; // 0x1a8(0x08)
	struct FGameplayTag KnockdownTag; // 0x1b0(0x08)
	struct FGameplayTag KnockbackTag; // 0x1b8(0x08)
	struct FGameplayTag PushbackTag; // 0x1c0(0x08)
	struct FGameplayTag TechnicalKnockbackTag; // 0x1c8(0x08)
	struct UMadGameplayEffect* InteruptAllAbilitiesEffectClass; // 0x1d0(0x08)
	struct UMadGameplayEffect* ImmuneCCEffectClass; // 0x1d8(0x08)
	struct UMadGameplayEffect* AverageItemLevelBonusEffectClass; // 0x1e0(0x08)
	struct FName MaxHealthBonusKey; // 0x1e8(0x08)
	struct FName AbilityPowerBonusKey; // 0x1f0(0x08)
	struct FGameplayTag OnShotTag; // 0x1f8(0x08)
	struct UMadGameplayEffect* BlockSkillsEffectClass; // 0x200(0x08)
	struct UMadGameplayEffect* BlockWeaponsEffectClass; // 0x208(0x08)
	struct FGameplayTagContainer EffectsToRemoveOnHealTags; // 0x210(0x20)
	struct UMadGameplayEffect* AnomalystMarkEffectClass; // 0x230(0x08)
	struct UMadGameplayEffect* AssassinMarkEffectClass; // 0x238(0x08)
	struct UMadGameplayEffect* AssassinShieldMitigationEffectClass; // 0x240(0x08)
	struct FGameplayTag AssassinShieldBonusNoHealTag; // 0x248(0x08)
	struct UMadGameplayEffect* PhantomStabberMarkEffectClass; // 0x250(0x08)
	struct TSoftObjectPtr<struct UParticleSystem> PhantomStabberMarkPS; // 0x258(0x28)
	struct FName PhantomStabberMarkAttachPoint; // 0x280(0x08)
	struct FVector PhantomStabberMarkAttachOffset; // 0x288(0x0c)
	char UnknownData_294[0x4]; // 0x294(0x04)
	struct UMadGameplayEffect* AssaultMarkEffectClass; // 0x298(0x08)
	struct UMadGameplayEffect* AssaultStealArmorEffectClass; // 0x2a0(0x08)
	struct FGameplayTag AssaultStealArmorModTag; // 0x2a8(0x08)
	struct FScalableFloat AssaultStealArmorMultiplier; // 0x2b0(0x20)
	struct TMap<enum class EMadnessSkillPath, struct FGameplayTag> ClassMarkTags; // 0x2d0(0x50)
	struct UMadGameplayEffect* HealingEffectWithCueClass; // 0x320(0x08)
	struct UMadGameplayEffect* HealingEffectWithoutCueClass; // 0x328(0x08)
	struct FGameplayTag HealingEffectModTag; // 0x330(0x08)
	struct FGameplayTag ConstructsSpawnTripWireTag; // 0x338(0x08)
	SoftClassProperty TripWireClass; // 0x340(0x28)
	int32_t MinLevelForExpSave; // 0x368(0x04)
	char UnknownData_36C[0x4]; // 0x36c(0x04)
	struct TArray<struct FMadnessLevelUnlock> LevelUnlocks; // 0x370(0x10)
	struct TArray<int32_t> MasteryLevelRequirements; // 0x380(0x10)
	struct TArray<int32_t> MasteryCosts; // 0x390(0x10)
	struct TArray<struct UMadSkillData*> StartingSkillSet; // 0x3a0(0x10)
	struct TMap<enum class EMadnessSkillPath, struct TSoftObjectPtr<struct UMadSkillData>> DefaultMeleeSkills; // 0x3b0(0x50)
	struct TMap<struct FGameplayTag, struct FMadStatusData> StatusesMap; // 0x400(0x50)
	struct TMap<struct FGameplayTag, struct FMadKeywordData> KeywordsMap; // 0x450(0x50)
	struct UCurveTable* PlayerSkillsValues; // 0x4a0(0x08)
	struct TArray<struct UMadSkillData*> Perks; // 0x4a8(0x10)
	struct FText PlayerClassSelectionDescription; // 0x4b8(0x18)
	struct TSoftObjectPtr<struct UTexture2D> DefaultPathBackgroundTexture; // 0x4d0(0x28)
	struct TMap<enum class EMadnessSkillPath, struct FMadnessPathData> Skills; // 0x4f8(0x50)
	struct TArray<enum class EMadnessSkillPath> PlayerClasses; // 0x548(0x10)
	struct UParticleSystem* ThrowSimulationTrailFX; // 0x558(0x08)
	struct FMadThrowData ThrowData; // 0x560(0x88)
	struct TMap<enum class EMadnessSkillPath, struct UMadPlayerAnimData*> AnimDataPerSkillPath; // 0x5e8(0x50)
	struct UMaterialInterface* PreviewMaterial; // 0x638(0x08)
	float MinPitch; // 0x640(0x04)
	float MaxPitch; // 0x644(0x04)
	struct UCurveFloat* PitchToRangeCurve; // 0x648(0x08)
	struct UCurveFloat* ReviveTimeVsDistance; // 0x650(0x08)
	struct AActor* DBNOArrowMarkerClass; // 0x658(0x08)
	struct USoundCue* DBNOHeartbeatSound; // 0x660(0x08)
	struct UParticleSystem* DBNOBloodParticle; // 0x668(0x08)
	struct FName DBNOBloodParticleBone; // 0x670(0x08)
	struct USoundCue* ReviveSucceededSound; // 0x678(0x08)
	float DBNORequestingReviveChatterRate; // 0x680(0x04)
	float LowHealthChatterThresholdScale; // 0x684(0x04)
	struct UMadGameplayEffect* WeaponSwapBlockEffect; // 0x688(0x08)
	struct FGameplayTag WeaponSwapBlockTag; // 0x690(0x08)
	char UnknownData_698[0x50]; // 0x698(0x50)
};

// Class Madness.MadGameplayEffect
// Size: 0x7c0 (Inherited: 0x7b8)
struct UMadGameplayEffect : UGameplayEffect {
	char UnknownData_7B8_0 : 7; // 0x7b8(0x01)
	bool bPassiveHealing : 1; // 0x7b8(0x01)
	char UnknownData_7B9[0x7]; // 0x7b9(0x07)
};

// Class Madness.MadGameplayEffectApplicationRequirement_PlayerNotInDBNO
// Size: 0x28 (Inherited: 0x28)
struct UMadGameplayEffectApplicationRequirement_PlayerNotInDBNO : UGameplayEffectCustomApplicationRequirement {
};

// Class Madness.MadGameplayModMagnitudeCalculation
// Size: 0x40 (Inherited: 0x40)
struct UMadGameplayModMagnitudeCalculation : UGameplayModMagnitudeCalculation {

	bool GetRelevantAttributeMagnitude(struct FGameplayEffectSpec Spec, int32_t RelevantAttributeIndex, float Magnitude); // Function Madness.MadGameplayModMagnitudeCalculation.GetRelevantAttributeMagnitude // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622550
	struct AActor* GetInstigator(struct FGameplayEffectSpec Spec); // Function Madness.MadGameplayModMagnitudeCalculation.GetInstigator // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622460
	float GetEffectLevel(struct FGameplayEffectSpec Spec); // Function Madness.MadGameplayModMagnitudeCalculation.GetEffectLevel // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622330
};

// Class Madness.MadGameUserSettings
// Size: 0x830 (Inherited: 0x170)
struct UMadGameUserSettings : UGameUserSettings {
	char UnknownData_170[0x2a0]; // 0x170(0x2a0)
	enum class EMadHelmetVisibility HelmetVisibility; // 0x410(0x01)
	char UnknownData_411_0 : 7; // 0x411(0x01)
	bool bPerformanceMode : 1; // 0x411(0x01)
	char UnknownData_412_0 : 7; // 0x412(0x01)
	bool bShowSubtitles : 1; // 0x412(0x01)
	char UnknownData_413_0 : 7; // 0x413(0x01)
	bool bDisablePlayingVOs : 1; // 0x413(0x01)
	char UnknownData_414_0 : 7; // 0x414(0x01)
	bool bDisablePlayingAntfarmVOs : 1; // 0x414(0x01)
	enum class EPartyPrivacy DefaultPartyPrivacy; // 0x415(0x01)
	char UnknownData_416_0 : 7; // 0x416(0x01)
	bool bAutoWorldLevelUpEnabled : 1; // 0x416(0x01)
	enum class EMadItemRarity AutoLootMinRarity; // 0x417(0x01)
	char UnknownData_418_0 : 7; // 0x418(0x01)
	bool bEnabledCrossPlatform : 1; // 0x418(0x01)
	char UnknownData_419[0x7]; // 0x419(0x07)
	struct FString WrittenLanguageCode; // 0x420(0x10)
	char UnknownData_430[0x28]; // 0x430(0x28)
	struct FString AudioLanguageCode; // 0x458(0x10)
	char UnknownData_468[0x4c]; // 0x468(0x4c)
	struct FDisplaySettings DisplaySettings; // 0x4b4(0x30)
	char UnknownData_4E4[0x9c]; // 0x4e4(0x9c)
	struct FDisplayAdvancedSettings DisplayAdvancedSettings; // 0x580(0x20)
	char UnknownData_5A0[0x88]; // 0x5a0(0x88)
	float MasterVolume; // 0x628(0x04)
	float DialogueVolume; // 0x62c(0x04)
	float SfxVolume; // 0x630(0x04)
	float MusicVolume; // 0x634(0x04)
	float VoipVolume; // 0x638(0x04)
	char UnknownData_63C_0 : 7; // 0x63c(0x01)
	bool bEnableBackgroundSound : 1; // 0x63c(0x01)
	enum class EMadAudioOutputType AudioOutputType; // 0x63d(0x01)
	char UnknownData_63E_0 : 7; // 0x63e(0x01)
	bool bUsePS4ControllerSpeaker : 1; // 0x63e(0x01)
	char UnknownData_63F_0 : 7; // 0x63f(0x01)
	bool bEnableVoip : 1; // 0x63f(0x01)
	char UnknownData_640_0 : 7; // 0x640(0x01)
	bool bEnablePushToTalk : 1; // 0x640(0x01)
	char UnknownData_641[0x17]; // 0x641(0x17)
	int32_t VoipInputDeviceIndex; // 0x658(0x04)
	char UnknownData_65C[0x34]; // 0x65c(0x34)
	struct FMulticastInlineDelegate OnUseNumericHealthChanged; // 0x690(0x10)
	char UnknownData_6A0[0x30]; // 0x6a0(0x30)
	struct FMulticastInlineDelegate OnHUDScaleValueChanged; // 0x6d0(0x10)
	char UnknownData_6E0_0 : 7; // 0x6e0(0x01)
	bool bShowCombatTextExp : 1; // 0x6e0(0x01)
	char UnknownData_6E1_0 : 7; // 0x6e1(0x01)
	bool bShowCombatTextDmg : 1; // 0x6e1(0x01)
	char UnknownData_6E2_0 : 7; // 0x6e2(0x01)
	bool bShowMinimap : 1; // 0x6e2(0x01)
	char UnknownData_6E3_0 : 7; // 0x6e3(0x01)
	bool bShowXpBar : 1; // 0x6e3(0x01)
	char UnknownData_6E4_0 : 7; // 0x6e4(0x01)
	bool bShowWorldLevelBar : 1; // 0x6e4(0x01)
	char UnknownData_6E5_0 : 7; // 0x6e5(0x01)
	bool bShowQuestTracker : 1; // 0x6e5(0x01)
	char UnknownData_6E6_0 : 7; // 0x6e6(0x01)
	bool bForceClampAspectRatio : 1; // 0x6e6(0x01)
	char UnknownData_6E7_0 : 7; // 0x6e7(0x01)
	bool CrosshairEnabled : 1; // 0x6e7(0x01)
	char UnknownData_6E8_0 : 7; // 0x6e8(0x01)
	bool bShowSkillBar : 1; // 0x6e8(0x01)
	char UnknownData_6E9_0 : 7; // 0x6e9(0x01)
	bool bShowWeaponsPanel : 1; // 0x6e9(0x01)
	char UnknownData_6EA_0 : 7; // 0x6ea(0x01)
	bool bShowContextPanel : 1; // 0x6ea(0x01)
	char UnknownData_6EB_0 : 7; // 0x6eb(0x01)
	bool bShowGameLog : 1; // 0x6eb(0x01)
	char UnknownData_6EC_0 : 7; // 0x6ec(0x01)
	bool bShowTeammateHealthbars : 1; // 0x6ec(0x01)
	char UnknownData_6ED_0 : 7; // 0x6ed(0x01)
	bool bShowPartyPanel : 1; // 0x6ed(0x01)
	char UnknownData_6EE_0 : 7; // 0x6ee(0x01)
	bool bShowNpcIcons : 1; // 0x6ee(0x01)
	enum class EMadHealthBarMode PlayerPanelMode; // 0x6ef(0x01)
	enum class EMadHealthBarMode EnemyHealthBarsMode; // 0x6f0(0x01)
	char UnknownData_6F1[0x3]; // 0x6f1(0x03)
	float HUDScaleValue; // 0x6f4(0x04)
	int32_t WorldDifficulty; // 0x6f8(0x04)
	char UnknownData_6FC_0 : 7; // 0x6fc(0x01)
	bool bUseNumericHealth : 1; // 0x6fc(0x01)
	char UnknownData_6FD_0 : 7; // 0x6fd(0x01)
	bool bSprintOnToggle : 1; // 0x6fd(0x01)
	char UnknownData_6FE_0 : 7; // 0x6fe(0x01)
	bool bDoubleTapToRoll : 1; // 0x6fe(0x01)
	char UnknownData_6FF_0 : 7; // 0x6ff(0x01)
	bool bInvertXAxis_Gamepad : 1; // 0x6ff(0x01)
	char UnknownData_700_0 : 7; // 0x700(0x01)
	bool bInvertYAxis_Gamepad : 1; // 0x700(0x01)
	char UnknownData_701_0 : 7; // 0x701(0x01)
	bool bForceFeedback : 1; // 0x701(0x01)
	char UnknownData_702_0 : 7; // 0x702(0x01)
	bool bSwapBumpers : 1; // 0x702(0x01)
	char UnknownData_703_0 : 7; // 0x703(0x01)
	bool bSwapSticks : 1; // 0x703(0x01)
	char UnknownData_704_0 : 7; // 0x704(0x01)
	bool bSwapTriggers : 1; // 0x704(0x01)
	char UnknownData_705_0 : 7; // 0x705(0x01)
	bool bInvertXAxis_Mouse : 1; // 0x705(0x01)
	char UnknownData_706_0 : 7; // 0x706(0x01)
	bool bInvertYAxis_Mouse : 1; // 0x706(0x01)
	char UnknownData_707[0x1]; // 0x707(0x01)
	float MouseAcceleration; // 0x708(0x04)
	float MouseADSSensitivity; // 0x70c(0x04)
	float MouseADSZoomSensitivity; // 0x710(0x04)
	float GamepadADSSensitivity; // 0x714(0x04)
	float GamepadADSZoomSensitivity; // 0x718(0x04)
	float GamepadSensitivity; // 0x71c(0x04)
	float ForceFeedbackScale; // 0x720(0x04)
	float MenuCursorSpeed; // 0x724(0x04)
	char UnknownData_728_0 : 7; // 0x728(0x01)
	bool bEnableLargeFonts : 1; // 0x728(0x01)
	char UnknownData_729_0 : 7; // 0x729(0x01)
	bool bEnableHighContrast : 1; // 0x729(0x01)
	char UnknownData_72A_0 : 7; // 0x72a(0x01)
	bool bEnableMenuNarration : 1; // 0x72a(0x01)
	char UnknownData_72B_0 : 7; // 0x72b(0x01)
	bool bEnableDescriptiveSubtitles : 1; // 0x72b(0x01)
	char UnknownData_72C_0 : 7; // 0x72c(0x01)
	bool bEnableSubtitleSpeakerNames : 1; // 0x72c(0x01)
	char UnknownData_72D[0x3]; // 0x72d(0x03)
	float MenuNarrationVolume; // 0x730(0x04)
	enum class EColorVisionDeficiency ColorBlindMode; // 0x734(0x01)
	char UnknownData_735[0x3]; // 0x735(0x03)
	struct TMap<enum class EMadControllerType, struct FPlayerControlOverrides> ControlOverrides; // 0x738(0x50)
	struct FMulticastInlineDelegate OnMappingsChanged; // 0x788(0x10)
	char UnknownData_798[0x20]; // 0x798(0x20)
	struct TArray<struct FMadActionMapping> CustomMappings; // 0x7b8(0x10)
	char UnknownData_7C8[0x68]; // 0x7c8(0x68)

	void SetUseNumericHealth(bool bNewUseNumericHealth); // Function Madness.MadGameUserSettings.SetUseNumericHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x16289e0
	bool GetUseNumericHealth(); // Function Madness.MadGameUserSettings.GetUseNumericHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1628490
	struct TArray<struct FName> GetMappingsForKey(struct FKey InKey, struct APlayerController* InPlayerController); // Function Madness.MadGameUserSettings.GetMappingsForKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16281e0
	struct TArray<struct FInputActionKeyMapping> GetKeysForActionMapping(struct FName MappingName, enum class EMadControllerType ControllerType, struct APlayerController* InPlayerController); // Function Madness.MadGameUserSettings.GetKeysForActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1627e20
	enum class EMadControllerType GetControllerType(enum class EInputType ControllerType); // Function Madness.MadGameUserSettings.GetControllerType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1627b20
};

// Class Madness.MadGlobals
// Size: 0xc60 (Inherited: 0x348)
struct UMadGlobals : UFrameworkGlobals {
	struct TArray<struct FMadDebugWidget> DebugWidgets; // 0x348(0x10)
	float TimeSinceLastOpenDebugWidget; // 0x358(0x04)
	struct FName LastOpenedDebugWidgetName; // 0x35c(0x08)
	struct FGameplayTag OnFriendlyShotTag; // 0x364(0x08)
	struct FGameplayTag OnWeaponReloadTag; // 0x36c(0x08)
	struct FGameplayTag SuperClipsTag; // 0x374(0x08)
	struct FGameplayTag CriticalHitEventTag; // 0x37c(0x08)
	struct FGameplayTag DamageTakenTag; // 0x384(0x08)
	struct FGameplayTag LifeLeechImmuneTag; // 0x38c(0x08)
	struct FGameplayTag AbilityTargetingBlockedTag; // 0x394(0x08)
	char UnknownData_39C[0x4]; // 0x39c(0x04)
	struct UMadGameplayEffect* BlockAbilityTargetingEffectClass; // 0x3a0(0x08)
	struct FGameplayTag BlockReactionsTag; // 0x3a8(0x08)
	struct FGameplayTag OnDiedTag; // 0x3b0(0x08)
	struct FGameplayTag DBNOStateTag; // 0x3b8(0x08)
	struct FGameplayTag ExitDBNOStateTriggerTag; // 0x3c0(0x08)
	struct FGameplayTag ReviveTriggerTag; // 0x3c8(0x08)
	struct FGameplayTag FinishReviveAbilityTag; // 0x3d0(0x08)
	struct FGameplayTag EventActivateSaveFromDeathAbility; // 0x3d8(0x08)
	struct FGameplayTag BlockDamageEffectTag; // 0x3e0(0x08)
	struct UMadGameplayEffect* DBNOStateEffectClass; // 0x3e8(0x08)
	struct UMadGameplayAbility* RagdollStandupAbility; // 0x3f0(0x08)
	struct FGameplayTag AmmoPickupEventTag; // 0x3f8(0x08)
	struct FGameplayTag LimitMaxSpeedToWalkTag; // 0x400(0x08)
	struct FGameplayTag LimitMaxSpeedToJogTag; // 0x408(0x08)
	struct FGameplayTagContainer BlockAIFullBodyReactions; // 0x410(0x20)
	struct FGameplayTagContainer BlockAITwitchReactions; // 0x430(0x20)
	struct FGameplayTagContainer BlockAIDoingMeleeDamage; // 0x450(0x20)
	float EnrageLevelDecreaseCooldown; // 0x470(0x04)
	float EnrageLevelDecreaseInterval; // 0x474(0x04)
	float EnrageLevelDecreaseValue; // 0x478(0x04)
	char UnknownData_47C[0x4]; // 0x47c(0x04)
	struct FAttributeSetData AttributeSetData; // 0x480(0x88)
	struct TMap<struct FName, struct FArchetypeFactors> ArchetypeFactorsForTwoPlayersData; // 0x508(0x50)
	struct TMap<struct FName, struct FArchetypeFactors> ArchetypeFactorsForThreePlayersData; // 0x558(0x50)
	char UnknownData_5A8[0x20]; // 0x5a8(0x20)
	float ExperienceForDiscoveringNewRegion; // 0x5c8(0x04)
	float ExperienceForDiscoveringNewArea; // 0x5cc(0x04)
	struct TArray<struct FMadModConditionalMultiplierData> ModsConditionalMultipliers; // 0x5d0(0x10)
	struct TArray<struct FString> TutorialVariableNames; // 0x5e0(0x10)
	struct UMaterialParameterCollection* MaterialParameterCollection; // 0x5f0(0x08)
	struct UMadAbilityGlobals* AbilityGlobals; // 0x5f8(0x08)
	struct UMadEffectsGlobals* EffectsGlobals; // 0x600(0x08)
	struct UMadConvoyGlobals* ConvoyGlobals; // 0x608(0x08)
	struct UMadInventoryGlobals* InventoryGlobals; // 0x610(0x08)
	struct UMadUIGlobals* UIGlobals; // 0x618(0x08)
	struct UMadChallengeGlobals* ChallengeGlobals; // 0x620(0x08)
	struct UMadQuestsGlobals* QuestsGlobals; // 0x628(0x08)
	struct UMadEmoteSet* GlobalEmotes; // 0x630(0x08)
	struct UMadAnimationGlobals* AnimationGlobals; // 0x638(0x08)
	struct UMadAudioGlobals* AudioGlobals; // 0x640(0x08)
	struct UMadEnochAccoladesGlobals* EnochAccoladesGlobals; // 0x648(0x08)
	struct UMadCollectibleGlobals* CollectibleGlobals; // 0x650(0x08)
	struct UMadExplorerFlagsGlobals* ExplorerFlagsGlobals; // 0x658(0x08)
	struct UMadBackendHandle* BackendHandleClass; // 0x660(0x08)
	struct UMadHeroStats* HeroStatsClass; // 0x668(0x08)
	struct UMadRichPresence* RichPresenceClass; // 0x670(0x08)
	struct UMadAreaNodesGlobals* AreaNodes; // 0x678(0x08)
	struct UMadTelemetry* MadTelemetry; // 0x680(0x08)
	struct UMadBackendHandle* BackendHandle; // 0x688(0x08)
	struct UMadGameplayData* GameplayData; // 0x690(0x08)
	struct FMadInventorySaveData DefaultPlayerInventory; // 0x698(0xd0)
	struct FMadInventorySaveData DefaultPostPrologueInventory; // 0x768(0xd0)
	struct FMadInventorySaveData DefaultBuggyRideInventory; // 0x838(0xd0)
	enum class None DefaultStartWorldLevel; // 0x908(0x01)
	char UnknownData_909[0x7]; // 0x909(0x07)
	struct UDataTable* DLCWrappersDT; // 0x910(0x08)
	char UnknownData_918[0x50]; // 0x918(0x50)
	struct UDataTable* RarityDT; // 0x968(0x08)
	struct UDataTable* LootDT; // 0x970(0x08)
	struct UCurveTable* ChancePerLevelCT; // 0x978(0x08)
	struct UCurveTable* DropChanceCT; // 0x980(0x08)
	struct UCurveTable* WeaponDamageCT; // 0x988(0x08)
	float WeaponDamageVariation; // 0x990(0x04)
	float WeaponDamageSpike; // 0x994(0x04)
	struct UDataTable* WeaponsDT; // 0x998(0x08)
	struct UCurveTable* MeleeDamageCT; // 0x9a0(0x08)
	struct UMadSkillData* GeneralDefaultSkill; // 0x9a8(0x08)
	int32_t SelectedCardsMaxLevel; // 0x9b0(0x04)
	float SelectedCardsChance; // 0x9b4(0x04)
	char UnknownData_9B8[0xf8]; // 0x9b8(0xf8)
	float SpawnsPerWaveMultiplierForOnePlayer; // 0xab0(0x04)
	float SpawnsPerWaveMultiplierForTwoPlayers; // 0xab4(0x04)
	float MaxCharactersAliveMultiplierForOnePlayer; // 0xab8(0x04)
	float MaxCharactersAliveMultiplierForTwoPlayers; // 0xabc(0x04)
	float WaveTimeMultiplierForOnePlayer; // 0xac0(0x04)
	float WaveTimeMultiplierForTwoPlayers; // 0xac4(0x04)
	struct FString NextChallengeId; // 0xac8(0x10)
	struct TArray<struct UMadGameplayEffect*> NextChallengeEnemyEffects; // 0xad8(0x10)
	struct TArray<struct FMadEncounterChallengeSetupInfo> EncounterChallengeSetupData; // 0xae8(0x10)
	struct FFWArchetypesMapping ArchetypesMapping; // 0xaf8(0x10)
	char UnknownData_B08_0 : 7; // 0xb08(0x01)
	bool IsRetreatEnabled : 1; // 0xb08(0x01)
	char UnknownData_B09[0x3]; // 0xb09(0x03)
	float RetreatTime; // 0xb0c(0x04)
	float RetreatWaitTime; // 0xb10(0x04)
	float RetreatCameraFadeDuration; // 0xb14(0x04)
	struct FFactNameFromList IsPlayingDemoFactKey; // 0xb18(0x08)
	struct UDataTable* EnemiesStatsID; // 0xb20(0x08)
	struct UDataTable* DamageStatsID; // 0xb28(0x08)
	struct UDataTable* PlayerStatsID; // 0xb30(0x08)
	char UnknownData_B38[0xf8]; // 0xb38(0xf8)
	struct UMadHeroStats* HeroStats; // 0xc30(0x08)
	struct UMadRichPresence* RichPresence; // 0xc38(0x08)
	struct FString PrivacyPolicyURL; // 0xc40(0x10)
	struct TArray<struct UBlueprintFunctionLibrary*> FunctionLibraries; // 0xc50(0x10)

	void Validate(bool bCondition, struct FString ErrorMessage); // Function Madness.MadGlobals.Validate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1628b40
	void ShowError(struct FString ErrorMessage); // Function Madness.MadGlobals.ShowError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1628a70
	void SetMontagePosition(struct UAnimInstance* AnimInstance, struct UAnimMontage* Montage, float Position); // Function Madness.MadGlobals.SetMontagePosition // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16288e0
	void ReloadDataTables(); // Function Madness.MadGlobals.ReloadDataTables // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16288c0
	bool HasPreorderDLC(); // Function Madness.MadGlobals.HasPreorderDLC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1628890
	void GetWeaponVariants(struct AMadWeapon* WeaponClass, struct TMap<struct FName, struct FMadWeaponData> OutVariants); // Function Madness.MadGlobals.GetWeaponVariants // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1628750
	void GetWeaponVariantNames(struct AMadWeapon* WeaponClass, struct TArray<struct FText> OutVariantNames); // Function Madness.MadGlobals.GetWeaponVariantNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1628610
	struct TArray<struct FName> GetWeaponNames(); // Function Madness.MadGlobals.GetWeaponNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1628590
	struct FMadWeaponData GetWeaponData(struct FName Name); // Function Madness.MadGlobals.GetWeaponData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x16284e0
	struct UCurveTable* GetWeaponDamageCT(); // Function Madness.MadGlobals.GetWeaponDamageCT // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x16284b0
	struct FLinearColor GetRarityColor(enum class EMadItemRarity Rarity); // Function Madness.MadGlobals.GetRarityColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1628410
	float GetMontagePosition(struct UAnimInstance* AnimInstance, struct UAnimMontage* Montage); // Function Madness.MadGlobals.GetMontagePosition // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1628350
	struct FMadLootData GetLootData(struct FName DataName); // Function Madness.MadGlobals.GetLootData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1628030
	struct UMadInventoryGlobals* GetInventoryGlobalsPtr(); // Function Madness.MadGlobals.GetInventoryGlobalsPtr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627df0
	struct UMadInfoCastGlobals* GetInfoCastGlobals(); // Function Madness.MadGlobals.GetInfoCastGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627dc0
	struct UMadGlobals* GetGlobals(); // Function Madness.MadGlobals.GetGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627d90
	struct UMadGameplayData* GetGameplayData(); // Function Madness.MadGlobals.GetGameplayData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627d60
	bool GetEncounterChallengeSetupData(struct FString ChallengeModId, struct FMadEncounterChallengeSetupInfo OutSetupInfo); // Function Madness.MadGlobals.GetEncounterChallengeSetupData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1627be0
	struct UMadConvoyGlobals* GetConvoyGlobalsPtr(); // Function Madness.MadGlobals.GetConvoyGlobalsPtr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627bb0
	struct UMadBackendHandle* GetBackendHandle(); // Function Madness.MadGlobals.GetBackendHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627af0
	struct UMadAudioGlobals* GetAudioGlobalsPtr(); // Function Madness.MadGlobals.GetAudioGlobalsPtr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627ac0
	struct FFWArchetypesMapping GetArchetypesMapping(); // Function Madness.MadGlobals.GetArchetypesMapping // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x16279c0
	struct UMadAbilityGlobals* GetAbilityGlobalsPtr(); // Function Madness.MadGlobals.GetAbilityGlobalsPtr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1627990
};

// Class Madness.MadGoreComponent
// Size: 0x380 (Inherited: 0x368)
struct UMadGoreComponent : UGoreComponent {
	struct UParticleSystem* FrozenImpactEffect; // 0x368(0x08)
	struct FName FrozenShaderParam; // 0x370(0x08)
	struct FName HeadBoneName; // 0x378(0x08)
};

// Class Madness.MadGoreGibShaderEffect
// Size: 0x1b8 (Inherited: 0x1b0)
struct UMadGoreGibShaderEffect : UMadShaderEffect {
	struct UMaterial* CustomGibMaterial; // 0x1b0(0x08)

	void OnBoneGibbed(); // Function Madness.MadGoreGibShaderEffect.OnBoneGibbed // (Final|Native|Private) // @ game+0x15a73a0
};

// Class Madness.MadGoreSkeletonShaderEffect
// Size: 0x1b0 (Inherited: 0x1b0)
struct UMadGoreSkeletonShaderEffect : UMadShaderEffect {

	void OnSkeletonSpawned(); // Function Madness.MadGoreSkeletonShaderEffect.OnSkeletonSpawned // (Final|Native|Private) // @ game+0x15a73a0
};

// Class Madness.MadHealingCocoon
// Size: 0x3a0 (Inherited: 0x2f0)
struct AMadHealingCocoon : AActor {
	struct UMadGameplayEffect* Effect; // 0x2f0(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x2f8(0x08)
	struct UParticleSystem* ShieldParticleTemplate; // 0x300(0x08)
	struct UParticleSystem* DestroyParticleTemplate; // 0x308(0x08)
	struct UParticleSystem* ImpactParticleTemplate; // 0x310(0x08)
	struct FScalableFloat MaxHealth; // 0x318(0x20)
	struct FScalableFloat DURATION; // 0x338(0x20)
	float DestroyTime; // 0x358(0x04)
	char UnknownData_35C[0x4]; // 0x35c(0x04)
	struct FMulticastInlineDelegate OnFinishShielding; // 0x360(0x10)
	char UnknownData_370[0x10]; // 0x370(0x10)
	struct UParticleSystemComponent* ActiveParticleComponent; // 0x380(0x08)
	char UnknownData_388[0x18]; // 0x388(0x18)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadHealingCocoon.OnOwnerKilled // (Final|Native|Public) // @ game+0x162ccd0
	void MulticastSpawnImpactEffect(struct FVector Location, struct FRotator Rotation); // Function Madness.MadHealingCocoon.MulticastSpawnImpactEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x162be40
	void MulticastDestroyShield(); // Function Madness.MadHealingCocoon.MulticastDestroyShield // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1516bc0
};

// Class Madness.MadHealthBarComponent
// Size: 0x500 (Inherited: 0x3d0)
struct UMadHealthBarComponent : UHealthBarComponent {
	char UnknownData_3D0[0xc0]; // 0x3d0(0xc0)
	float TierThree; // 0x490(0x04)
	float TierTwo; // 0x494(0x04)
	float TierOne; // 0x498(0x04)
	char UnknownData_49C_0 : 7; // 0x49c(0x01)
	bool bUseSocketsZLocation : 1; // 0x49c(0x01)
	char UnknownData_49D[0x3]; // 0x49d(0x03)
	struct FName SocketName; // 0x4a0(0x08)
	float RelativeZOffsetOverride; // 0x4a8(0x04)
	struct FMadHealthBarDynamicOffsetParams SocketOffsetParams; // 0x4ac(0x14)
	struct FMadHealthBarDynamicOffsetParams DefaultOffsetParams; // 0x4c0(0x14)
	struct FMadHealthBarDynamicOffsetParams CurrentOffsetParams; // 0x4d4(0x14)
	float OffsetValueMultiplier; // 0x4e8(0x04)
	float PreviousBarLocationZ; // 0x4ec(0x04)
	char UnknownData_4F0[0x10]; // 0x4f0(0x10)
};

// Class Madness.MadHeroSkillPointsContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadHeroSkillPointsContextPanel : UMadContextPanel {
};

// Class Madness.MadHeroStats
// Size: 0x48 (Inherited: 0x28)
struct UMadHeroStats : UObject {
	char UnknownData_28[0x20]; // 0x28(0x20)

	void OnItemCollected(struct AMadItem* Item); // Function Madness.MadHeroStats.OnItemCollected // (Final|Native|Private) // @ game+0x162ca30
	void OnEnemyKilled(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadHeroStats.OnEnemyKilled // (Final|Native|Private) // @ game+0x162c5a0
	void OnChallengeFinished(int32_t ChallengeID, enum class EMadChallengeEndReason EndReason, float ChallengeTime, enum class EMadChallengeTimeBracket TimeBracket); // Function Madness.MadHeroStats.OnChallengeFinished // (Final|Native|Private) // @ game+0x162c450
	void OnAccoladesLevelProgressChanged(int32_t OldAPP, int32_t NewAPP); // Function Madness.MadHeroStats.OnAccoladesLevelProgressChanged // (Final|Native|Private) // @ game+0x162bf20
};

// Class Madness.MadHeroTreeStructure
// Size: 0x30 (Inherited: 0x30)
struct UMadHeroTreeStructure : UDataAsset {
};

// Class Madness.MadHitReactionComponent
// Size: 0x278 (Inherited: 0x270)
struct UMadHitReactionComponent : UHitReactionComponent {
	char UnknownData_270[0x8]; // 0x270(0x08)
};

// Class Madness.MadHostMigrationActor
// Size: 0x310 (Inherited: 0x2f0)
struct AMadHostMigrationActor : ABaseHostMigrationActor {
	struct AMadPlayerController* PlayerController; // 0x2f0(0x08)
	struct AMadGameState* GameState; // 0x2f8(0x08)
	char UnknownData_300[0x10]; // 0x300(0x10)

	void WaitingForReadyForCoopPlay(); // Function Madness.MadHostMigrationActor.WaitingForReadyForCoopPlay // (Final|Native|Private) // @ game+0x162d4c0
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadHostMigrationActor.OnLevelTransitionCompleted // (Final|Native|Private) // @ game+0x162cab0
	void Initialize(); // Function Madness.MadHostMigrationActor.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x162be20
};

// Class Madness.MadHPBarWidget
// Size: 0x2a0 (Inherited: 0x290)
struct UMadHPBarWidget : UHealthBarWidget {
	struct UTextBlock* LevelTextBlock; // 0x290(0x08)
	char UnknownData_298[0x8]; // 0x298(0x08)

	void UpdateLevel(int32_t NewLevel); // Function Madness.MadHPBarWidget.UpdateLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x162d440
	void OnTagAppliedToOwner(struct FGameplayTag InTag, int32_t TagCount); // Function Madness.MadHPBarWidget.OnTagAppliedToOwner // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadHPBarWidgetV2
// Size: 0x3b8 (Inherited: 0x260)
struct UMadHPBarWidgetV2 : UBaseWidget {
	float DamageBarDuration; // 0x260(0x04)
	char UnknownData_264[0x4]; // 0x264(0x04)
	struct UHorizontalBox* NameAndLevelHorizontalBox; // 0x268(0x08)
	struct UTextBlock* NameTextBlock; // 0x270(0x08)
	struct UTextBlock* LevelTextBlock; // 0x278(0x08)
	struct UProgressBar* HealthProgressBar; // 0x280(0x08)
	struct UHorizontalBox* DoubleBar; // 0x288(0x08)
	struct UProgressBar* HealthProgressBarDouble0; // 0x290(0x08)
	struct UProgressBar* HealthProgressBarDouble1; // 0x298(0x08)
	struct UHorizontalBox* TripleBar; // 0x2a0(0x08)
	struct UProgressBar* HealthProgressBarTriple0; // 0x2a8(0x08)
	struct UProgressBar* HealthProgressBarTriple1; // 0x2b0(0x08)
	struct UProgressBar* HealthProgressBarTriple2; // 0x2b8(0x08)
	struct UProgressBar* DamageProgressBar; // 0x2c0(0x08)
	struct UHorizontalBox* DamageDoubleBar; // 0x2c8(0x08)
	struct UProgressBar* DamageProgressBarDouble0; // 0x2d0(0x08)
	struct UProgressBar* DamageProgressBarDouble1; // 0x2d8(0x08)
	struct UHorizontalBox* DamageTripleBar; // 0x2e0(0x08)
	struct UProgressBar* DamageProgressBarTriple0; // 0x2e8(0x08)
	struct UProgressBar* DamageProgressBarTriple1; // 0x2f0(0x08)
	struct UProgressBar* DamageProgressBarTriple2; // 0x2f8(0x08)
	struct UImage* ArmorIcon; // 0x300(0x08)
	struct UImage* AnomalyResistanceIcon; // 0x308(0x08)
	struct UOverlay* CastBarOverlay; // 0x310(0x08)
	struct UProgressBar* CastProgressBar; // 0x318(0x08)
	struct UTextBlock* AbilityNameTextBlock; // 0x320(0x08)
	struct UMadUIAnomalyBreakerWidget* AnomalyBreakerWidget; // 0x328(0x08)
	struct UMadStatusBarWidget* MadStatusBarWidget; // 0x330(0x08)
	struct UScrollBox* EnemyNameScrollBox; // 0x338(0x08)
	struct FEnemyNameMarqueeEffectSettings MarqueeEffectSettings; // 0x340(0x08)
	struct UTexture2D* ArmorIcons[0x3]; // 0x348(0x18)
	struct UTexture2D* AnomalyResistanceIcons[0x3]; // 0x360(0x18)
	struct TArray<struct UProgressBar*> HealthBars; // 0x378(0x10)
	struct TArray<struct UProgressBar*> DamageBars; // 0x388(0x10)
	struct UMadHealthBarComponent* MadHealthBarComp; // 0x398(0x08)
	char UnknownData_3A0[0x18]; // 0x3a0(0x18)

	void UpdateEnemyHealthBarMode(enum class EMadHealthBarMode InMode); // Function Madness.MadHPBarWidgetV2.UpdateEnemyHealthBarMode // (Final|Native|Private) // @ game+0x162d3c0
	void OnUpdateStatusBarData(struct FMadStatusBarData InStatusBarData); // Function Madness.MadHPBarWidgetV2.OnUpdateStatusBarData // (Final|Native|Private|HasOutParms) // @ game+0x162d300
	void OnUpdateResistance(int32_t InResistance); // Function Madness.MadHPBarWidgetV2.OnUpdateResistance // (Final|Native|Private) // @ game+0x162d280
	void OnUpdateLevel(int32_t InCurrentLevel); // Function Madness.MadHPBarWidgetV2.OnUpdateLevel // (Final|Native|Private) // @ game+0x162d200
	void OnUpdateEnrageDurationProgress(float InProgress); // Function Madness.MadHPBarWidgetV2.OnUpdateEnrageDurationProgress // (Final|Native|Private) // @ game+0x162d180
	void OnUpdateCurrentHeath(float InCurrentHealth); // Function Madness.MadHPBarWidgetV2.OnUpdateCurrentHeath // (Final|Native|Private) // @ game+0x162d100
	void OnUpdateCastBar(float InProgress); // Function Madness.MadHPBarWidgetV2.OnUpdateCastBar // (Final|Native|Private) // @ game+0x162d080
	void OnUpdateArmor(int32_t InArmor); // Function Madness.MadHPBarWidgetV2.OnUpdateArmor // (Final|Native|Private) // @ game+0x162d000
	void OnUpdateAnomalyBreakerVisState(enum class EAnomalyBreakerVisState InAnomalyBreakerVisState); // Function Madness.MadHPBarWidgetV2.OnUpdateAnomalyBreakerVisState // (Final|Native|Private) // @ game+0x162cf80
	void OnSetupCastBar(struct FString InAbilityName, struct FString InAbilityIcon, bool bInIsAbilityChanneled); // Function Madness.MadHPBarWidgetV2.OnSetupCastBar // (Final|Native|Private) // @ game+0x162ce50
	void OnInitialize(struct FString InEnemyName, struct FString InEnemyClass, int32_t InTier, int32_t InMaxArmor, int32_t InMaxResistance, struct FString InSkill01Icon, struct FString InSkill02Icon); // Function Madness.MadHPBarWidgetV2.OnInitialize // (Final|Native|Private) // @ game+0x162c7f0
};

// Class Madness.MadHUD
// Size: 0x4c0 (Inherited: 0x418)
struct AMadHUD : ABaseHud {
	float MaxCharHeight; // 0x418(0x04)
	char UnknownData_41C_0 : 7; // 0x41c(0x01)
	bool bDrawCheats : 1; // 0x41c(0x01)
	char UnknownData_41D[0x3]; // 0x41d(0x03)
	float CheatsY; // 0x420(0x04)
	float CheatNameX; // 0x424(0x04)
	float CheatValueX; // 0x428(0x04)
	float CoherentStatBackgroundXSize; // 0x42c(0x04)
	float CoherentStatLastMeasureXStart; // 0x430(0x04)
	float CoherentStatTotalMeasureXStart; // 0x434(0x04)
	float CoherentStatMaxLastMeasureXStart; // 0x438(0x04)
	float CoherentStatTotalCallsXStart; // 0x43c(0x04)
	struct FLinearColor CoherentStatBackground; // 0x440(0x10)
	char UnknownData_450[0x8]; // 0x450(0x08)
	struct FLinearColor CheatNameColor; // 0x458(0x10)
	struct FLinearColor CheatValueOnColor; // 0x468(0x10)
	struct FLinearColor CheatValueOffColor; // 0x478(0x10)
	char UnknownData_488_0 : 7; // 0x488(0x01)
	bool bDrawIKTraces : 1; // 0x488(0x01)
	char UnknownData_489_0 : 7; // 0x489(0x01)
	bool bDrawSpawnedParticles : 1; // 0x489(0x01)
	char UnknownData_48A[0x36]; // 0x48a(0x36)
};

// Class Madness.MadHUDWidget
// Size: 0x288 (Inherited: 0x230)
struct UMadHUDWidget : UUserWidget {
	struct UCombatNumbersSettings* CombatNumberSettings; // 0x230(0x08)
	struct TArray<struct FDynamicScalableWidget> UMGMinimapAreaWidgets; // 0x238(0x10)
	char UnknownData_248_0 : 7; // 0x248(0x01)
	bool bIsMinimapVisible : 1; // 0x248(0x01)
	char UnknownData_249_0 : 7; // 0x249(0x01)
	bool bIsBossHealthBarVisible : 1; // 0x249(0x01)
	char UnknownData_24A[0x3e]; // 0x24a(0x3e)

	void SetBossHealthBarVisible(bool bVisible); // Function Madness.MadHUDWidget.SetBossHealthBarVisible // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnLevelTransitionStarted(struct FName FromRegionName, struct FName ToRegionName); // Function Madness.MadHUDWidget.OnLevelTransitionStarted // (Final|Native|Protected) // @ game+0x162cc10
	void OnLevelTransitionFailed(struct FString regionname); // Function Madness.MadHUDWidget.OnLevelTransitionFailed // (Final|Native|Protected) // @ game+0x162cb30
	void OnHUDElementVisibilityChanged(enum class EMadHUDElement HUDElement, bool bVisible); // Function Madness.MadHUDWidget.OnHUDElementVisibilityChanged // (Final|Native|Protected) // @ game+0x162c720
	void OnAddCombatNumber(struct FMadCombatNumber CombatNumber); // Function Madness.MadHUDWidget.OnAddCombatNumber // (Final|Native|Protected|HasOutParms) // @ game+0x162bfe0
};

// Class Madness.MadIceOrb
// Size: 0x418 (Inherited: 0x2f0)
struct AMadIceOrb : AActor {
	struct USphereComponent* AreaCollider; // 0x2f0(0x08)
	struct UParticleSystemComponent* FrostAreaEffect; // 0x2f8(0x08)
	struct UParticleSystemComponent* MarkerEffect; // 0x300(0x08)
	struct UParticleSystemComponent* IceOrbEffect; // 0x308(0x08)
	struct UParticleSystemComponent* ExplodeEffect; // 0x310(0x08)
	float DestroyDelay; // 0x318(0x04)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct FScalableFloat TimeToStartFreezing; // 0x320(0x20)
	float EffectsActivationTimeOffset; // 0x340(0x04)
	char UnknownData_344[0x4]; // 0x344(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> ForceFeedbackEffect; // 0x348(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackAttenuation> ForceFeedbackAttenuation; // 0x370(0x28)
	struct UGameplayEffect* FreezingGameplayEffect; // 0x398(0x08)
	struct FGameplayTagContainer FreezingEffectTags; // 0x3a0(0x20)
	struct FVector MarkerEffectSize; // 0x3c0(0x0c)
	struct FName MarkerEffectSizeParamName; // 0x3cc(0x08)
	char UnknownData_3D4[0xc]; // 0x3d4(0x0c)
	struct UForceFeedbackComponent* ForceFeedbackApplied; // 0x3e0(0x08)
	struct UAbilitySystemComponent* InstigatorAbilityComp; // 0x3e8(0x08)
	char UnknownData_3F0[0x28]; // 0x3f0(0x28)

	void OnAreaEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadIceOrb.OnAreaEndOverlap // (Final|Native|Protected) // @ game+0x162c310
	void OnAreaBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadIceOrb.OnAreaBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x162c0a0
	void DeactivateAfter(float LifeTime); // Function Madness.MadIceOrb.DeactivateAfter // (Net|Native|Event|NetMulticast|Public) // @ game+0x15148c0
};

// Class Madness.MadIgnorePlayerShotsInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadIgnorePlayerShotsInterface : UInterface {
};

// Class Madness.MadIndicatorProjectile
// Size: 0x5d0 (Inherited: 0x5c0)
struct AMadIndicatorProjectile : AMadProjectile {
	char UnknownData_5C0_0 : 7; // 0x5c0(0x01)
	bool bShowTimer : 1; // 0x5c0(0x01)
	char UnknownData_5C1[0x3]; // 0x5c1(0x03)
	float TimeToExplode; // 0x5c4(0x04)
	struct UBase3DWidgetComponent* Base3DWidget; // 0x5c8(0x08)
};

// Class Madness.MadInfectedSporesAura
// Size: 0x3a0 (Inherited: 0x330)
struct AMadInfectedSporesAura : AMadBaseAura {
	struct UExplosionTemplate* ExplosionTemplate; // 0x330(0x08)
	struct AActor* SporeTemplate; // 0x338(0x08)
	int32_t MaxSpores; // 0x340(0x04)
	float SporeSpawnFrequency; // 0x344(0x04)
	float ExplodeFrequency; // 0x348(0x04)
	float MinDistanceFromOthers; // 0x34c(0x04)
	float MinDistToExplode; // 0x350(0x04)
	char UnknownData_354[0x4]; // 0x354(0x04)
	struct TArray<struct AActor*> SpawnedSpores; // 0x358(0x10)
	struct TArray<struct AMadBaseCharacter*> Targets; // 0x368(0x10)
	char UnknownData_378[0x28]; // 0x378(0x28)

	void OnSporeDestroyed(struct AActor* SporeActor); // Function Madness.MadInfectedSporesAura.OnSporeDestroyed // (Final|Native|Protected) // @ game+0x1638400
	void OnMemberLeave(struct AMadBaseCharacter* Member, struct AMadBaseCharacter* AuraOwner); // Function Madness.MadInfectedSporesAura.OnMemberLeave // (Final|Native|Protected) // @ game+0x1638090
	void OnMemberKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadInfectedSporesAura.OnMemberKilled // (Final|Native|Protected) // @ game+0x1637d40
	void OnMemberJoin(struct AMadBaseCharacter* Member, struct AMadBaseCharacter* AuraOwner); // Function Madness.MadInfectedSporesAura.OnMemberJoin // (Final|Native|Protected) // @ game+0x1637c80
};

// Class Madness.MadInfoCastGlobals
// Size: 0x98 (Inherited: 0x50)
struct UMadInfoCastGlobals : UMadBackendAccessor {
	struct FMulticastInlineDelegate OnInfoCastsReceived; // 0x50(0x10)
	char UnknownData_60[0x38]; // 0x60(0x38)

	void TryBindToBackend(); // Function Madness.MadInfoCastGlobals.TryBindToBackend // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
	void OnEventsReceived(struct TArray<struct FBackendEventData> Events); // Function Madness.MadInfoCastGlobals.OnEventsReceived // (Final|Native|Public|HasOutParms) // @ game+0x1637850
	bool IsInfoCastValid(struct FInfoCastData InInfocast); // Function Madness.MadInfoCastGlobals.IsInfoCastValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1637490
	struct FInfoCastData GetInfocastWithName(struct FName InName); // Function Madness.MadInfoCastGlobals.GetInfocastWithName // (Final|Native|Public|BlueprintCallable) // @ game+0x1636a90
	void GetInfocastsWithLabels(struct TArray<struct FName> Labels, struct TArray<struct FInfoCastData> OutInfocasts); // Function Madness.MadInfoCastGlobals.GetInfocastsWithLabels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1636b70
	struct TArray<struct FInfoCastData> GetInfocasts(); // Function Madness.MadInfoCastGlobals.GetInfocasts // (Final|Native|Public|BlueprintCallable) // @ game+0x1636b30
};

// Class Madness.MadInputColorComponent
// Size: 0x1a0 (Inherited: 0x180)
struct UMadInputColorComponent : UActorComponent {
	char UnknownData_180[0x20]; // 0x180(0x20)

	void OnPlayerDBNOStateChanged(struct AMadPlayerCharacter* InCharacter, bool bInDBNOState); // Function Madness.MadInputColorComponent.OnPlayerDBNOStateChanged // (Final|Native|Public) // @ game+0x1638150
};

// Class Madness.MadInsectCharacter
// Size: 0x1800 (Inherited: 0x1790)
struct AMadInsectCharacter : AMadCharAI {
	struct FMulticastInlineDelegate OnLifeTimeout; // 0x1788(0x10)
	float LifeTimeSeconds; // 0x1798(0x04)
	char UnknownData_17A4_0 : 7; // 0x17a4(0x01)
	bool bStopLifeTimeUpdateWhenTargetIsValid : 1; // 0x179c(0x01)
	float TargetReachedRadius; // 0x17a0(0x04)
	struct AActor* AttackTarget; // 0x17a8(0x08)
	struct FInsectAutoAttackParams AutoAttackParams; // 0x17b0(0x30)
	char UnknownData_17E1[0x7]; // 0x17e1(0x07)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x17e8(0x08)
	float LifeTimeSecondsLeft; // 0x17f0(0x04)
	char UnknownData_17F4[0xc]; // 0x17f4(0x0c)

	void SetLifeTime(float Seconds); // Function Madness.MadInsectCharacter.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x163ad00
	void OnTimedOut(); // Function Madness.MadInsectCharacter.OnTimedOut // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x15a7340
	void OnTargetReached(); // Function Madness.MadInsectCharacter.OnTargetReached // (Final|Native|Protected) // @ game+0x1638480
	void OnLifeTimeout_Internal(); // Function Madness.MadInsectCharacter.OnLifeTimeout_Internal // (Final|Native|Protected) // @ game+0x1637be0
	bool IsLifeTimeOver(); // Function Madness.MadInsectCharacter.IsLifeTimeOver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637560
};

// Class Madness.MadInteractIndicatorComponent
// Size: 0x380 (Inherited: 0x370)
struct UMadInteractIndicatorComponent : UBase3DWidgetComponent {
	char UnknownData_370[0x10]; // 0x370(0x10)

	void SetInteractionComponent(struct ULocalInteractionComponent* LocalComp); // Function Madness.MadInteractIndicatorComponent.SetInteractionComponent // (Native|Public|BlueprintCallable) // @ game+0x163ac70
};

// Class Madness.MadInventory
// Size: 0x890 (Inherited: 0x308)
struct AMadInventory : AInventory {
	char UnknownData_308[0x8]; // 0x308(0x08)
	struct FMulticastInlineDelegate OnInventoryReplicated; // 0x310(0x10)
	struct FMulticastInlineDelegate OnInventoryChanged; // 0x320(0x10)
	char UnknownData_330[0x18]; // 0x330(0x18)
	char UnknownData_348_0 : 7; // 0x348(0x01)
	bool bWaitingForInitialItems : 1; // 0x348(0x01)
	char UnknownData_349[0x7]; // 0x349(0x07)
	struct FWeakObjectPtr<struct AMadPlayerCharacter> MadOwner; // 0x350(0x08)
	struct TMap<enum class EMadItemSlot, struct AActor*> DebugSlotActors; // 0x358(0x50)
	char UnknownData_3A8[0x18]; // 0x3a8(0x18)
	struct FMulticastInlineDelegate OnItemEquiped; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnItemEnhanced; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnItemImproved; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnItemModChanged; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnItemConfigVariantChanged; // 0x400(0x10)
	struct FMulticastInlineDelegate OnItemLeveled; // 0x410(0x10)
	struct FMulticastInlineDelegate OnItemBuy; // 0x420(0x10)
	struct FMulticastInlineDelegate OnItemSell; // 0x430(0x10)
	struct FMulticastInlineDelegate OnNewWeaponEquipped; // 0x440(0x10)
	struct FMulticastInlineDelegate OnOriginalItemBeforeUpgrade; // 0x450(0x10)
	struct TArray<struct AMadItem*> EquippedItems; // 0x460(0x10)
	struct TArray<struct AMadItem*> BackpackItems; // 0x470(0x10)
	struct TArray<struct AMadItem*> OnlineStashItems; // 0x480(0x10)
	enum class EMadItemSlot ActiveWeaponSlot; // 0x490(0x01)
	char UnknownData_491[0x7]; // 0x491(0x07)
	struct TArray<struct AMadItem*> EquippedItems_Local; // 0x498(0x10)
	char UnknownData_4A8[0x80]; // 0x4a8(0x80)
	struct FMadItemModsSaveData ModsSaveData; // 0x528(0x20)
	struct TArray<struct FMadItemSet> ActiveItemSets; // 0x548(0x10)
	char UnknownData_558[0x18]; // 0x558(0x18)
	struct FMulticastInlineDelegate OnResourceChange; // 0x570(0x10)
	struct TArray<struct FMadResourcePocket> ResourcePockets; // 0x580(0x10)
	struct TArray<struct FMadResourcePocket> ResourcePockets_Local; // 0x590(0x10)
	struct FMulticastInlineDelegate OnCrystalsChanged; // 0x5a0(0x10)
	char UnknownData_5B0[0x10]; // 0x5b0(0x10)
	struct TArray<struct FMadAnomalyCrystal> AnomalyCrystals; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnLootGained; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnLootItemGained; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnLootResourceGained; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnLootMasteryCardGained; // 0x600(0x10)
	struct FMulticastInlineDelegate OnLootItemsClaimed; // 0x610(0x10)
	struct TArray<struct FMadLoot> Loots; // 0x620(0x10)
	struct TArray<struct AMadItem*> ClaimedItems; // 0x630(0x10)
	struct TArray<struct AMadItem*> AutoClaimedItemsToBroadcast; // 0x640(0x10)
	char UnknownData_650[0x90]; // 0x650(0x90)
	struct TArray<struct FMadPickableItemData> DroppedItems; // 0x6e0(0x10)
	struct TArray<struct FWeakObjectPtr<struct AMadPickableItem>> SpawnedPickableItems; // 0x6f0(0x10)
	enum class EMadItemRarity AutoLootMinRarity; // 0x700(0x01)
	char UnknownData_701[0x6f]; // 0x701(0x6f)
	struct TMap<struct FName, struct FMadVendorSaveData> VendorSaveData; // 0x770(0x50)
	struct FMulticastInlineDelegate OnItemSold; // 0x7c0(0x10)
	struct AMadPickableItem* PickableItemClass; // 0x7d0(0x08)
	struct AMadPickableItem* EquipableItemClass; // 0x7d8(0x08)
	struct AMadAnomalyShard* AnomalyShardClass; // 0x7e0(0x08)
	struct TArray<struct FMadItemOfferConsumable> ItemOfferConsumables; // 0x7e8(0x10)
	char UnknownData_7F8_0 : 7; // 0x7f8(0x01)
	bool bWaitingForItemOffer : 1; // 0x7f8(0x01)
	char UnknownData_7F9[0x7]; // 0x7f9(0x07)
	struct FMulticastInlineDelegate OnItemOfferConsumablesChangedDelegate; // 0x800(0x10)
	struct FMulticastInlineDelegate OnWaitingForItemOfferStart; // 0x810(0x10)
	struct FMulticastInlineDelegate OnWaitingForItemOfferEnd; // 0x820(0x10)
	struct FMadQuestRewards QuestRewards; // 0x830(0x18)
	char UnknownData_848_0 : 7; // 0x848(0x01)
	bool bWaitingForEntitlementsSync : 1; // 0x848(0x01)
	char UnknownData_849[0x7]; // 0x849(0x07)
	struct TArray<struct FOneTimeRewardSpawnedItem> OneTimeItems; // 0x850(0x10)
	struct FMulticastInlineDelegate OnOneTimeRewardsChangedDelegate; // 0x860(0x10)
	struct TArray<struct FString> AvailableOneTimeRewards; // 0x870(0x10)
	struct TArray<struct FString> ClaimedOneTimeRewards; // 0x880(0x10)

	void ValidateItemOfferConsumables(struct TArray<struct FItemOfferData> ItemOfferDatas); // Function Madness.MadInventory.ValidateItemOfferConsumables // (Final|Native|Private|HasOutParms) // @ game+0x163ad80
	void SetActiveWeaponSlot(enum class EMadItemSlot Slot); // Function Madness.MadInventory.SetActiveWeaponSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x163abf0
	void ServerUnlockMods(struct TArray<struct FString> ModNames); // Function Madness.MadInventory.ServerUnlockMods // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163ab30
	void ServerTakeApartItems(struct TArray<struct FMadItemInventoryLocation> ItemsLocations, enum class EMadItemTakeApartAction Action); // Function Madness.MadInventory.ServerTakeApartItems // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163aa50
	void ServerTakeApart(struct AMadItem* Item, enum class EMadItemTakeApartAction Action); // Function Madness.MadInventory.ServerTakeApart // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163a980
	void ServerSortBackpack(enum class EMadInventoryOrder Order, bool bDescending); // Function Madness.MadInventory.ServerSortBackpack // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163a8b0
	void ServerSetOnlineStashCapacity(int32_t Capacity); // Function Madness.MadInventory.ServerSetOnlineStashCapacity // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x163a820
	void ServerSetBackpackCapacity(int32_t Capacity); // Function Madness.MadInventory.ServerSetBackpackCapacity // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x163a790
	void ServerSetAutoLootMinRarity(enum class EMadItemRarity MinRarity); // Function Madness.MadInventory.ServerSetAutoLootMinRarity // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x163a710
	void ServerSell(struct AMadItem* Item, struct TArray<struct FMadResourcePocket> Refund); // Function Madness.MadInventory.ServerSell // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x163a630
	void ServerRedeemItemOffer(struct FString ItemOfferName); // Function Madness.MadInventory.ServerRedeemItemOffer // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x163a570
	void ServerPickAll(struct FMadAutoPickupParams PickupParams); // Function Madness.MadInventory.ServerPickAll // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163a4f0
	void ServerMoveItemToOnlineStash(struct AMadItem* Item, int32_t Slot); // Function Madness.MadInventory.ServerMoveItemToOnlineStash // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x163a420
	void ServerMoveItemToBackpack(struct AMadItem* Item, int32_t Slot); // Function Madness.MadInventory.ServerMoveItemToBackpack // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163a350
	void ServerItemExpired(struct AMadItem* Item); // Function Madness.MadInventory.ServerItemExpired // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1604470
	void ServerGainResources(struct TMap<struct FName, int32_t> ResourcesToGain); // Function Madness.MadInventory.ServerGainResources // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x163a1d0
	void ServerGainLoot(struct AActor* SourceActor, enum class EMadRarityRollSource SourceRarity, struct FName LootName, int32_t Level, enum class EMadItemRarity Rarity, bool bEquip); // Function Madness.MadInventory.ServerGainLoot // (Final|Native|Public|BlueprintCallable) // @ game+0x163a040
	void ServerGainCrystals(struct TArray<struct FMadAnomalyCrystal> CrystalsToGain); // Function Madness.MadInventory.ServerGainCrystals // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639f70
	void ServerForgeItem(struct FMadItemSaveData SaveData); // Function Madness.MadInventory.ServerForgeItem // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639d60
	void ServerFinishRedeemItemOffer(bool bSuccess, struct FString ItemOfferName); // Function Madness.MadInventory.ServerFinishRedeemItemOffer // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1639c50
	void ServerEquipItem(struct AMadItem* Item, enum class EMadItemSlot Slot); // Function Madness.MadInventory.ServerEquipItem // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639b80
	void ServerDropItems(struct TArray<struct AMadItem*> InItems); // Function Madness.MadInventory.ServerDropItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1639ae0
	void ServerDropItem(struct AMadItem* Item, bool bBroadcastChanges); // Function Madness.MadInventory.ServerDropItem // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639a10
	void ServerConvertResources(struct FMadResourceConversionParams Params); // Function Madness.MadInventory.ServerConvertResources // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639970
	void ServerConsumeResources(struct TMap<struct FName, int32_t> ResourcesToConsume); // Function Madness.MadInventory.ServerConsumeResources // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16397f0
	void ServerConsumeCrystals(struct TArray<struct FMadAnomalyCrystal> CrystalsToConsume); // Function Madness.MadInventory.ServerConsumeCrystals // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639720
	void ServerClearOnlineStash(); // Function Madness.MadInventory.ServerClearOnlineStash // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1639700
	void ServerClear(bool bLeaveEquippedWeapons, bool bLeaveEquippedArmor); // Function Madness.MadInventory.ServerClear // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639630
	void ServerClaimOneTimeReward(struct FString RewardName); // Function Madness.MadInventory.ServerClaimOneTimeReward // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1639590
	void ServerClaimLoot(int32_t LootId); // Function Madness.MadInventory.ServerClaimLoot // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1639500
	void ServerBuy(struct FMadItemSaveData SaveData, struct TArray<struct FMadResourcePocket> Cost); // Function Madness.MadInventory.ServerBuy // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x16392a0
	void ServerAutoClaimItems(struct TArray<struct AMadItem*> ItemsToClaim, bool bEquip); // Function Madness.MadInventory.ServerAutoClaimItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16391c0
	void ServerAutoClaimItem(struct AMadItem* Item, bool bEquip); // Function Madness.MadInventory.ServerAutoClaimItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x16390f0
	void ServerAutoClaimedItemBroadcasted(); // Function Madness.MadInventory.ServerAutoClaimedItemBroadcasted // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0xbcc7b0
	void ServerApplySaveData(struct FMadInventorySaveData SaveData); // Function Madness.MadInventory.ServerApplySaveData // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1638cb0
	void ServerApplyOnlineStashSaveData(struct FMadInventorySaveData SaveData); // Function Madness.MadInventory.ServerApplyOnlineStashSaveData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1638850
	void ServerApplyItemBatchSaveData(struct FMadItemBatchSaveData SaveData); // Function Madness.MadInventory.ServerApplyItemBatchSaveData // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x16386d0
	void ServerAddLoot(struct FMadLootGainParams Params); // Function Madness.MadInventory.ServerAddLoot // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1638560
	void RefreshHeadgearCustomization(); // Function Madness.MadInventory.RefreshHeadgearCustomization // (Final|Native|Public) // @ game+0x1638540
	void RedeemItemOffer(struct FString ItemOfferName); // Function Madness.MadInventory.RedeemItemOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x16384a0
	void OnSequenceCompleted(); // Function Madness.MadInventory.OnSequenceCompleted // (Final|Native|Protected) // @ game+0x16383e0
	void OnRep_ResourcePockets(); // Function Madness.MadInventory.OnRep_ResourcePockets // (Final|Native|Protected) // @ game+0x16383c0
	void OnRep_QuestRewards(); // Function Madness.MadInventory.OnRep_QuestRewards // (Final|Native|Public) // @ game+0x16383a0
	void OnRep_OnlineStashItems(); // Function Madness.MadInventory.OnRep_OnlineStashItems // (Final|Native|Private) // @ game+0x1638380
	void OnRep_OneTimeRewards(); // Function Madness.MadInventory.OnRep_OneTimeRewards // (Final|Native|Protected) // @ game+0x1638360
	void OnRep_ModsSaveData(); // Function Madness.MadInventory.OnRep_ModsSaveData // (Final|Native|Protected) // @ game+0x1638340
	void OnRep_Loots(); // Function Madness.MadInventory.OnRep_Loots // (Final|Native|Protected) // @ game+0x1638320
	void OnRep_ItemOfferConsumables(); // Function Madness.MadInventory.OnRep_ItemOfferConsumables // (Final|Native|Private) // @ game+0x1638300
	void OnRep_EquippedItems(); // Function Madness.MadInventory.OnRep_EquippedItems // (Final|Native|Private) // @ game+0x16382e0
	void OnRep_DroppedItems(); // Function Madness.MadInventory.OnRep_DroppedItems // (Final|Native|Protected) // @ game+0x16382c0
	void OnRep_Crystals(); // Function Madness.MadInventory.OnRep_Crystals // (Final|Native|Protected) // @ game+0x16382a0
	void OnRep_ClaimedItems(); // Function Madness.MadInventory.OnRep_ClaimedItems // (Final|Native|Protected) // @ game+0x1638280
	void OnRep_BackpackItems(); // Function Madness.MadInventory.OnRep_BackpackItems // (Final|Native|Private) // @ game+0x1638260
	void OnRep_AutoClaimedItemsToBroadcast(); // Function Madness.MadInventory.OnRep_AutoClaimedItemsToBroadcast // (Final|Native|Protected) // @ game+0x1638240
	void OnRep_ActiveWeaponSlot(); // Function Madness.MadInventory.OnRep_ActiveWeaponSlot // (Final|Native|Private) // @ game+0x1638220
	void OnMaterialGroupChanged(struct FName GroupName); // Function Madness.MadInventory.OnMaterialGroupChanged // (Final|Native|Public) // @ game+0x1637c00
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadInventory.OnLevelTransitionCompleted // (Final|Native|Protected) // @ game+0x1637b60
	void OnItemOfferAccepted(bool bSuccess, struct FItemOfferData ItemOfferData); // Function Madness.MadInventory.OnItemOfferAccepted // (Final|Native|Private|HasOutParms) // @ game+0x1637a50
	void OnEntitlementsSynced(bool bSuccess); // Function Madness.MadInventory.OnEntitlementsSynced // (Final|Native|Protected) // @ game+0x16377c0
	void OnComponentsMaterialGroupReset(struct UMeshComponent* MeshComponent, enum class ECustomizationSlotType SlotType); // Function Madness.MadInventory.OnComponentsMaterialGroupReset // (Final|Native|Public) // @ game+0x1637700
	void OnComponentsMaterialGroupChanged(struct UMeshComponent* MeshComponent, struct FName GroupName, enum class ECustomizationSlotType SlotType); // Function Madness.MadInventory.OnComponentsMaterialGroupChanged // (Final|Native|Public) // @ game+0x1637600
	void MoveNextClaimedItemsToBackpack(); // Function Madness.MadInventory.MoveNextClaimedItemsToBackpack // (Final|Native|Public|BlueprintCallable) // @ game+0x16375e0
	void MembershipEntitlementsSync(); // Function Madness.MadInventory.MembershipEntitlementsSync // (Final|Native|Public|BlueprintCallable) // @ game+0x16375c0
	bool IsSafeToSave(); // Function Madness.MadInventory.IsSafeToSave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637590
	bool IsEquipSlotActive(enum class EMadItemSlot Slot); // Function Madness.MadInventory.IsEquipSlotActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637370
	bool IsEquipmentSlotOccupied(enum class EMadItemSlot Slot); // Function Madness.MadInventory.IsEquipmentSlotOccupied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637400
	bool IsBackpackSlotOccupied(int32_t Slot); // Function Madness.MadInventory.IsBackpackSlotOccupied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16372d0
	bool HasSkillDataEquipped(struct UMadSkillData* SkillData); // Function Madness.MadInventory.HasSkillDataEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637240
	bool HasEquipmentSlot(enum class EMadItemSlot Slot); // Function Madness.MadInventory.HasEquipmentSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16371b0
	struct FMadInventorySaveData GetSaveData(); // Function Madness.MadInventory.GetSaveData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637160
	struct FMadResourceConversionQuantities GetResourceConversionQuantities(struct FMadResourceConversionParams Params); // Function Madness.MadInventory.GetResourceConversionQuantities // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637090
	struct TArray<struct AMadItem*> GetOnlineStashItems(); // Function Madness.MadInventory.GetOnlineStashItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1637060
	struct AMadItem* GetOnlineStashItem(int32_t Slot); // Function Madness.MadInventory.GetOnlineStashItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636fd0
	enum class EMadLootType GetLootType(int32_t LootId); // Function Madness.MadInventory.GetLootType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636f40
	enum class EMadItemRarity GetLootRarity(int32_t LootId); // Function Madness.MadInventory.GetLootRarity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636eb0
	int32_t GetLootQuantity(); // Function Madness.MadInventory.GetLootQuantity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636e90
	int32_t GetLootLevel(int32_t LootId); // Function Madness.MadInventory.GetLootLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636e00
	void GetLastClaimedItems(struct TArray<struct AMadItem*> OutItems); // Function Madness.MadInventory.GetLastClaimedItems // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636d50
	enum class EBodyArmorWeightType GetEquippedTorsoArmorWeight(); // Function Madness.MadInventory.GetEquippedTorsoArmorWeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636a60
	struct TArray<struct AMadItem*> GetEquippedItemsWithSkillData(); // Function Madness.MadInventory.GetEquippedItemsWithSkillData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16369e0
	struct AMadItem* GetEquippedItem(enum class EMadItemSlot Slot); // Function Madness.MadInventory.GetEquippedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636950
	int32_t GetEquipItemLevelThreshold(int32_t CustomDificultyLevel); // Function Madness.MadInventory.GetEquipItemLevelThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16368c0
	struct TArray<struct FString> GetEntitlementsRewards(); // Function Madness.MadInventory.GetEntitlementsRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x1636840
	struct TArray<struct FMadAnomalyCrystal> GetCrystalsSorted(); // Function Madness.MadInventory.GetCrystalsSorted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16367c0
	int32_t GetCrystals(struct FName AttributeName); // Function Madness.MadInventory.GetCrystals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1636720
	struct AMadItem* GetBackpackItem(int32_t Slot); // Function Madness.MadInventory.GetBackpackItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636690
	int32_t GetBackpackCapacity(); // Function Madness.MadInventory.GetBackpackCapacity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636670
	int32_t GetAverageItemLevel(); // Function Madness.MadInventory.GetAverageItemLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636640
	enum class EMadItemSlot GetActiveWeaponSlot(); // Function Madness.MadInventory.GetActiveWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636620
	struct TArray<struct FMadItemSet> GetActiveItemSets(); // Function Madness.MadInventory.GetActiveItemSets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1636590
	void DebugPrintInventory(bool bEquipment, bool bBackpack, bool bStash, bool bMasteryCards, bool bResources, bool bLoot); // Function Madness.MadInventory.DebugPrintInventory // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x16363b0
	void DebugBroadcastLoot(struct UObject* WCO, struct FMadLootGainParams Params); // Function Madness.MadInventory.DebugBroadcastLoot // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1636170
	void ClientRemoveItems(struct TArray<struct FString> ItemsIds); // Function Madness.MadInventory.ClientRemoveItems // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x16360b0
	void ClientRemoveItem(struct FString ItemId); // Function Madness.MadInventory.ClientRemoveItem // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1636010
	void ClientRedeemItemOffer(struct FString ItemOfferName); // Function Madness.MadInventory.ClientRedeemItemOffer // (Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate) // @ game+0x1635f50
	void ClientNotifyAboutNewUnlockedMods(struct TArray<struct FString> UnlockedMods); // Function Madness.MadInventory.ClientNotifyAboutNewUnlockedMods // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1635e90
	void ClientNotifyAboutNewCrystals(struct TArray<struct FMadAnomalyCrystal> NewCrystals); // Function Madness.MadInventory.ClientNotifyAboutNewCrystals // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1635dc0
	void ClientMoveItemToBackpackFromOnlineStash(struct FString ItemId); // Function Madness.MadInventory.ClientMoveItemToBackpackFromOnlineStash // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1635d20
	void ClientAddItems(struct TArray<struct FString> ItemIds); // Function Madness.MadInventory.ClientAddItems // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1635c60
	void ClientAddItem(struct FString ItemId); // Function Madness.MadInventory.ClientAddItem // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1635bc0
	bool CanTakeApart(struct AMadItem* Item); // Function Madness.MadInventory.CanTakeApart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1635b30
	bool CanMoveItemToOnlineStash(struct AMadItem* Item, int32_t Slot); // Function Madness.MadInventory.CanMoveItemToOnlineStash // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1635a70
	bool CanMoveItemToBackpack(struct AMadItem* Item, int32_t Slot); // Function Madness.MadInventory.CanMoveItemToBackpack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16359b0
	bool CanEquipItem(struct AMadItem* Item, enum class EMadItemSlot Slot, bool bCheckLevel); // Function Madness.MadInventory.CanEquipItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16358b0
	bool CanDropItem(struct AMadItem* Item); // Function Madness.MadInventory.CanDropItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1635820
	bool CanClaimLoot(int32_t LootId); // Function Madness.MadInventory.CanClaimLoot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1635790
	void BroadcastLoot(struct UObject* WorldContextObject, struct AActor* Source, struct FName LootName, int32_t Level, enum class EMadItemRarity Rarity, bool bEquip); // Function Madness.MadInventory.BroadcastLoot // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1635600
	void BreakOnInventoryChangedEvent(int32_t Event, bool bOutStash, bool bOutBackpack, bool bOutEquipment, bool bOutMasteryCards, bool bOutResource, bool bOutLoot, bool bOutOnlineStash); // Function Madness.MadInventory.BreakOnInventoryChangedEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1635350
	void ApplySaveDataToCustomization(struct UCharacterCustomizationComponent* Customization, struct UMadArmorAssets* ArmorAssets, struct USkeletalMeshComponent* CharacterComponent, struct FWeaponAttachmentSockets Sockets, struct FMadInventorySaveData SaveData, enum class EMadInventoryCustomizationUpdateFilter UpdateFilter); // Function Madness.MadInventory.ApplySaveDataToCustomization // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1634da0
};

// Class Madness.MadInventoryGlobals
// Size: 0x1128 (Inherited: 0x30)
struct UMadInventoryGlobals : UDataAsset {
	struct FMadInventoryGlobalsArmor Armor; // 0x30(0x98)
	struct TMap<struct FName, struct FMadArmorData> ArmorsData; // 0xc8(0x50)
	struct TMap<struct FName, struct FMadArmorSkinData> ArmorSkinsData; // 0x118(0x50)
	struct TMap<struct FName, struct FMadArmorSetElements> ArmorsPerSet; // 0x168(0x50)
	struct FMadInventoryGlobalsResource Resource; // 0x1b8(0x60)
	struct TMap<struct FName, struct FMadResourceData> ResourcesData; // 0x218(0x50)
	struct FMadInventoryGlobalsVendor Vendor; // 0x268(0xa0)
	struct TMap<struct FName, struct FMadVendorData> VendorsData; // 0x308(0x50)
	struct TMap<struct FName, struct FMadVendorPriceData> VendorPricesData; // 0x358(0x50)
	struct TMap<struct FName, struct FMadVendorPriceTemplateData> VendorPricesTemplateData; // 0x3a8(0x50)
	struct FMadInventoryGlobalsCrafting Crafting; // 0x3f8(0x20)
	struct TMap<struct FName, struct FMadCraftingCostData> CraftingCostData; // 0x418(0x50)
	struct FMadInventoryGlobalsAttributes Attributes; // 0x468(0x20)
	struct TMap<struct FName, struct FMadAttributeData> AttributesData; // 0x488(0x50)
	struct TMap<struct FName, struct FMadAttributesGroups> AttributesGroupsData; // 0x4d8(0x50)
	struct TMap<struct FName, struct FMadPlayerStatsAttributeData> PlayerStatsAttributesData; // 0x528(0x50)
	struct FMadInventoryGlobalsItem Item; // 0x578(0x130)
	struct TMap<struct FName, struct FMadPresavedItemData> PresavedItemsData; // 0x6a8(0x50)
	struct TMap<struct FName, struct FMadPredefinedItemData> PredefinedItemsData; // 0x6f8(0x50)
	struct TMap<struct FName, struct FMadLegendaryItemData> LegendaryItemsData; // 0x748(0x50)
	struct TMap<struct FName, struct FMadPaintData> PaintsData; // 0x798(0x50)
	struct TMap<struct FName, struct FMadFactItemEntry> FactItemData; // 0x7e8(0x50)
	char UnknownData_838[0x10]; // 0x838(0x10)
	struct FMadInventoryGlobalsPickableItem PickableItem; // 0x848(0x140)
	struct FMadInventoryGlobalsWeapon Weapon; // 0x988(0x90)
	struct FMadInventoryGlobalsDebug Debug; // 0xa18(0x60)
	struct FMadInventoryGlobalsChallengeKey ChallengeKey; // 0xa78(0xa8)
	struct FMadInventoryGlobalsChallengeMod ChallengeMod; // 0xb20(0x40)
	struct FMadInventoryGlobalsAmmo Ammo; // 0xb60(0x170)
	struct FMadInventoryGlobalsLoot Loot; // 0xcd0(0x168)
	struct FMadInventoryGlobalsCombatPower CombatPower; // 0xe38(0xb0)
	struct TMap<struct FName, struct FMadItemSetData> ItemSetsData; // 0xee8(0x50)
	struct TMap<struct FName, struct FMadSetsDescriptionsData> ItemSetsDescriptionsData; // 0xf38(0x50)
	struct TMap<struct FName, struct FMadWeaponSkinData> WeaponSkinsData; // 0xf88(0x50)
	struct TMap<struct FName, struct FWeaponConfigData> WeaponConfigsData; // 0xfd8(0x50)
	struct TMap<struct FName, struct FMadItemTranslationData> WeaponTranslationData; // 0x1028(0x50)
	struct TMap<struct FName, struct FMadItemTranslationData> ArmorTranslationData; // 0x1078(0x50)
	struct TMap<struct FName, struct FMadEnemyLootData> EnemyLootsData; // 0x10c8(0x50)
	char UnknownData_1118[0x10]; // 0x1118(0x10)

	struct FName ParseWeaponConfigArchetypeName(struct FName ConfigName); // Function Madness.MadInventoryGlobals.ParseWeaponConfigArchetypeName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1643190
	struct TArray<struct FName> GetWeaponConfigsNamesAll(struct FName ConfigClassName); // Function Madness.MadInventoryGlobals.GetWeaponConfigsNamesAll // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x16430c0
	struct TArray<struct FName> GetWeaponConfigsNames(struct FName ConfigClassName, int32_t Level); // Function Madness.MadInventoryGlobals.GetWeaponConfigsNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1642fb0
	struct FText GetWeaponConfigDisplayName(struct FName ConfigName); // Function Madness.MadInventoryGlobals.GetWeaponConfigDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1642f10
	struct FWeaponConfigData GetWeaponConfig(struct FName ConfigName); // Function Madness.MadInventoryGlobals.GetWeaponConfig // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1642e70
	struct FMadVendorPriceTemplateData GetVendorPriceTemplateData(struct FName Name); // Function Madness.MadInventoryGlobals.GetVendorPriceTemplateData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642da0
	struct FMadVendorPriceData GetVendorPriceData(struct FName Name); // Function Madness.MadInventoryGlobals.GetVendorPriceData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642cf0
	struct FMadVendorData GetVendorData(struct FName Name); // Function Madness.MadInventoryGlobals.GetVendorData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642ad0
	float GetResourceProgression(struct FName Name, int32_t Level); // Function Madness.MadInventoryGlobals.GetResourceProgression // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16429f0
	struct TArray<struct FName> GetPaintNames(); // Function Madness.MadInventoryGlobals.GetPaintNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642970
	struct FMadPaintData GetPaintData(struct FName PaintName); // Function Madness.MadInventoryGlobals.GetPaintData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642810
	int32_t GetOnlineStashCapacity(); // Function Madness.MadInventoryGlobals.GetOnlineStashCapacity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16427e0
	void GetItemSetsNames(struct TArray<struct FName> OutItemSetsNames); // Function Madness.MadInventoryGlobals.GetItemSetsNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1642730
	struct FMadSetsDescriptionsData GetItemSetDescriptionData(struct FName Name); // Function Madness.MadInventoryGlobals.GetItemSetDescriptionData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642650
	struct FMadItemSetData GetItemSetData(struct FName Name); // Function Madness.MadInventoryGlobals.GetItemSetData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16425a0
	int32_t GetCrystalsGranted(int32_t Level); // Function Madness.MadInventoryGlobals.GetCrystalsGranted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642510
	int32_t GetCrystalsCost(int32_t Level); // Function Madness.MadInventoryGlobals.GetCrystalsCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642480
	struct TMap<struct FName, int32_t> GetCraftingCost(struct FMadCraftingCostParams Params); // Function Madness.MadInventoryGlobals.GetCraftingCost // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16423d0
	void GetBackpackRange(enum class EMadItemSlot Slot, int32_t OutMin, int32_t OutMax); // Function Madness.MadInventoryGlobals.GetBackpackRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16422b0
	int32_t GetBackpackCapacity(); // Function Madness.MadInventoryGlobals.GetBackpackCapacity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1642280
	struct TArray<struct FName> GetAttributesPool(enum class EMadAttributeDomain Domain); // Function Madness.MadInventoryGlobals.GetAttributesPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16421b0
	struct FMadAttributeData GetAttributeData(struct FName Name); // Function Madness.MadInventoryGlobals.GetAttributeData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16420b0
	float GetArmorValue(enum class EMadItemRarity Rarity, int32_t Level); // Function Madness.MadInventoryGlobals.GetArmorValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1641ff0
	struct TArray<struct FName> GetArmorNames(); // Function Madness.MadInventoryGlobals.GetArmorNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1641f70
	struct FMadArmorData GetArmorData(struct FName Name); // Function Madness.MadInventoryGlobals.GetArmorData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1641e40
};

// Class Madness.MadInventoryUIModel
// Size: 0x250 (Inherited: 0x50)
struct UMadInventoryUIModel : UBaseUIModel {
	char UnknownData_50[0x118]; // 0x50(0x118)
	struct FMadInventoryUIData InventoryData; // 0x168(0xa8)
	char UnknownData_210[0x28]; // 0x210(0x28)
	struct FMadOnlineStashInventoryUIData OnlineStashInventoryData; // 0x238(0x10)
	char UnknownData_248[0x8]; // 0x248(0x08)

	void ZoomPreview(float Magnitude); // Function Madness.MadInventoryUIModel.ZoomPreview // (Final|Native|Public) // @ game+0x1657fc0
	void TakeApartItems(struct TArray<uint32_t> UniqueItemIds); // Function Madness.MadInventoryUIModel.TakeApartItems // (Final|Native|Public) // @ game+0x1657ee0
	void ShowPreviewWeapon(uint32_t ItemUniqueID); // Function Madness.MadInventoryUIModel.ShowPreviewWeapon // (Final|Native|Public) // @ game+0x1657e60
	void ShowPreviewArmor(uint32_t ItemUniqueID); // Function Madness.MadInventoryUIModel.ShowPreviewArmor // (Final|Native|Public) // @ game+0x1657de0
	void RotatePreview(float Magnitude, enum class EMadRotationType RotationAxis, bool bUseLinearInterpolation); // Function Madness.MadInventoryUIModel.RotatePreview // (Final|Native|Public) // @ game+0x1657850
	void ResetItemPreviewTransform(); // Function Madness.MadInventoryUIModel.ResetItemPreviewTransform // (Final|Native|Public) // @ game+0x1657730
	struct TArray<struct FMadCraftingModsTierUIData> RequestRefreshCraftingMods(uint32_t UniqueItemId, int32_t ModSlotId); // Function Madness.MadInventoryUIModel.RequestRefreshCraftingMods // (Final|Native|Public|Const) // @ game+0x1657650
	void OnWeaponPreviewMoved(); // Function Madness.MadInventoryUIModel.OnWeaponPreviewMoved // (Final|Native|Public) // @ game+0x1657630
	void OnUIActionTriggered(enum class EMadInventoryCustomizationUpdateFilter UpdateFilter); // Function Madness.MadInventoryUIModel.OnUIActionTriggered // (Final|Native|Public) // @ game+0x16575b0
	void OnSkillAvailabilityChanged(struct UMadSkillData* SkillData, bool bIsAvailable); // Function Madness.MadInventoryUIModel.OnSkillAvailabilityChanged // (Final|Native|Public) // @ game+0x16574e0
	void OnRoomReady(); // Function Madness.MadInventoryUIModel.OnRoomReady // (Final|Native|Public) // @ game+0x15e0980
	void OnOnlineStashInventoryChanged(); // Function Madness.MadInventoryUIModel.OnOnlineStashInventoryChanged // (Final|Native|Private) // @ game+0x1657400
	void OnItemEnhanced(struct AMadItem* Item, bool bModSelectionAvailable); // Function Madness.MadInventoryUIModel.OnItemEnhanced // (Final|Native|Public) // @ game+0x1657330
	void OnItemChanged(struct AMadItem* Item); // Function Madness.MadInventoryUIModel.OnItemChanged // (Final|Native|Public) // @ game+0x16572b0
	void OnInventoryChanged(int32_t ChangeBitFlags); // Function Madness.MadInventoryUIModel.OnInventoryChanged // (Final|Native|Public) // @ game+0x1657230
	void MoveCamera(enum class EMadItemSlot Slot); // Function Madness.MadInventoryUIModel.MoveCamera // (Final|Native|Public) // @ game+0x1657170
	void ItemTakeApartItem(uint32_t UniqueId, enum class EMadItemTakeApartAction Action); // Function Madness.MadInventoryUIModel.ItemTakeApartItem // (Final|Native|Public) // @ game+0x16570b0
	void ItemSetWeaponConfig(uint32_t UniqueId, struct FName ConfigName); // Function Madness.MadInventoryUIModel.ItemSetWeaponConfig // (Final|Native|Public) // @ game+0x1656ff0
	void ItemSetSkin(uint32_t UniqueId, struct FName InSkinName); // Function Madness.MadInventoryUIModel.ItemSetSkin // (Final|Native|Public) // @ game+0x1656f30
	void ItemSetRecent(uint32_t UniqueId, bool InRecent); // Function Madness.MadInventoryUIModel.ItemSetRecent // (Final|Native|Public) // @ game+0x1656e70
	void ItemSetPaint(uint32_t UniqueId, struct FName InPaintName); // Function Madness.MadInventoryUIModel.ItemSetPaint // (Final|Native|Public) // @ game+0x1656db0
	void ItemSelectEnhanceMod(uint32_t UniqueId, int32_t ModID); // Function Madness.MadInventoryUIModel.ItemSelectEnhanceMod // (Final|Native|Public) // @ game+0x1656cf0
	void ItemMoveToOnlineStash(uint32_t UniqueId); // Function Madness.MadInventoryUIModel.ItemMoveToOnlineStash // (Final|Native|Public) // @ game+0x1656c70
	void ItemMoveToInventory(uint32_t UniqueId); // Function Madness.MadInventoryUIModel.ItemMoveToInventory // (Final|Native|Public) // @ game+0x1656bf0
	void ItemLevelUp(uint32_t UniqueId); // Function Madness.MadInventoryUIModel.ItemLevelUp // (Final|Native|Public) // @ game+0x1656b70
	void ItemImprove(uint32_t UniqueId, int32_t AttributeId); // Function Madness.MadInventoryUIModel.ItemImprove // (Final|Native|Public) // @ game+0x1656ab0
	bool ItemEnhanceIfCan(uint32_t UniqueId, bool bCheckCost); // Function Madness.MadInventoryUIModel.ItemEnhanceIfCan // (Final|Native|Public) // @ game+0x16569f0
	void ItemEnhance(uint32_t UniqueId); // Function Madness.MadInventoryUIModel.ItemEnhance // (Final|Native|Public) // @ game+0x1656970
	bool ItemChangeModIfCan(uint32_t UniqueId, int32_t SlotID, struct FName AvailableMod); // Function Madness.MadInventoryUIModel.ItemChangeModIfCan // (Final|Native|Public) // @ game+0x1656870
	void ItemChangeMod(uint32_t UniqueId, int32_t SlotID, struct FName AvailableMod); // Function Madness.MadInventoryUIModel.ItemChangeMod // (Final|Native|Public) // @ game+0x1656770
	bool ItemCanEnhance(uint32_t UniqueId, bool bCheckCost); // Function Madness.MadInventoryUIModel.ItemCanEnhance // (Final|Native|Public) // @ game+0x16566b0
	bool ItemCanChangeMod(uint32_t UniqueId, int32_t SlotID); // Function Madness.MadInventoryUIModel.ItemCanChangeMod // (Final|Native|Public|Const) // @ game+0x16565f0
	bool IsRoomReady(); // Function Madness.MadInventoryUIModel.IsRoomReady // (Final|Native|Public) // @ game+0x16565a0
	bool IsModUsedOnEquippedArmor(struct FName ModName); // Function Madness.MadInventoryUIModel.IsModUsedOnEquippedArmor // (Final|Native|Public|Const) // @ game+0x16564f0
	bool IsCameraMoving(); // Function Madness.MadInventoryUIModel.IsCameraMoving // (Final|Native|Public) // @ game+0x16564c0
	struct FMadItemCraftingPreview GetLevelUpPreview(uint32_t UniqueItemId); // Function Madness.MadInventoryUIModel.GetLevelUpPreview // (Final|Native|Public|Const) // @ game+0x1655ea0
	int32_t GetLevelUpLimit(); // Function Madness.MadInventoryUIModel.GetLevelUpLimit // (Final|Native|Public|Const) // @ game+0x1655e70
	struct FMadItemUIData GetItemDetails(uint32_t UniqueId); // Function Madness.MadInventoryUIModel.GetItemDetails // (Final|Native|Public|Const) // @ game+0x1655d50
	struct FMadItemCraftingPreview GetEnhancePreview(uint32_t UniqueItemId); // Function Madness.MadInventoryUIModel.GetEnhancePreview // (Final|Native|Public|Const) // @ game+0x1655910
	int32_t GetAmmoPerClipItem(uint32_t UniqueItemId); // Function Madness.MadInventoryUIModel.GetAmmoPerClipItem // (Final|Native|Public) // @ game+0x16553a0
	bool CanLevelUpItem(uint32_t UniqueItemId, bool bCheckCost); // Function Madness.MadInventoryUIModel.CanLevelUpItem // (Final|Native|Public) // @ game+0x1655230
	bool CanImproveItem(uint32_t UniqueItemId, int32_t AttributeId, bool bCheckCost); // Function Madness.MadInventoryUIModel.CanImproveItem // (Final|Native|Public) // @ game+0x16550a0
};

// Class Madness.MadUserWidget
// Size: 0x230 (Inherited: 0x230)
struct UMadUserWidget : UUserWidget {

	void OnAdditionalDataSet(int32_t Data); // Function Madness.MadUserWidget.OnAdditionalDataSet // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadJIRAWidget
// Size: 0x2c8 (Inherited: 0x230)
struct UMadJIRAWidget : UMadUserWidget {
	struct UOverlay* MainOverlay; // 0x230(0x08)
	struct UEditableTextBox* TitleText; // 0x238(0x08)
	struct UMultiLineEditableTextBox* DescriptionText; // 0x240(0x08)
	struct UComboBoxString* ReproRateComboBox; // 0x248(0x08)
	struct UEditableTextBox* ReporterText; // 0x250(0x08)
	struct UMultiLineEditableText* CmdLineText; // 0x258(0x08)
	struct UComboBoxString* ComponentComboBox; // 0x260(0x08)
	struct UComboBoxString* PriorityComboBox; // 0x268(0x08)
	struct UCheckBox* AddLogCheckBox; // 0x270(0x08)
	struct UCheckBox* AddScreenShotCheckBox; // 0x278(0x08)
	struct UCheckBox* AddSaveFilesCheckBox; // 0x280(0x08)
	struct UCheckBox* OpenBrowserWhenFinished; // 0x288(0x08)
	struct UButton* CreateButton; // 0x290(0x08)
	struct UMultiLineEditableText* MessageLog; // 0x298(0x08)
	struct UScrollBox* LogScrollBox; // 0x2a0(0x08)
	struct UWidgetSwitcher* ButtonSwitcher; // 0x2a8(0x08)
	char UnknownData_2B0[0x18]; // 0x2b0(0x18)

	void OnInitialScreenshotProcessed(); // Function Madness.MadJIRAWidget.OnInitialScreenshotProcessed // (Final|Native|Protected) // @ game+0x1657210
	void OnCreateButtonClicked(); // Function Madness.MadJIRAWidget.OnCreateButtonClicked // (Final|Native|Protected) // @ game+0x16571f0
	void OnCloseWidget(); // Function Madness.MadJIRAWidget.OnCloseWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0xe8aaf0
	void EditScreenShot(); // Function Madness.MadJIRAWidget.EditScreenShot // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
};

// Class Madness.MadJournalEntryContextPanel
// Size: 0x148 (Inherited: 0x138)
struct UMadJournalEntryContextPanel : UMadContextPanel {
	char UnknownData_138[0x8]; // 0x138(0x08)
	char UnknownData_140_0 : 7; // 0x140(0x01)
	bool bMultipleEntries : 1; // 0x140(0x01)
	char UnknownData_141[0x7]; // 0x141(0x07)
};

// Class Madness.MadKeywordAttributeSet
// Size: 0x70 (Inherited: 0x30)
struct UMadKeywordAttributeSet : UAttributeSet {
	float ExplosiveCooldownMultiplier; // 0x30(0x04)
	float ExplosiveDamageMultiplier; // 0x34(0x04)
	float MovementCooldownMultiplier; // 0x38(0x04)
	float MovementDamageMultiplier; // 0x3c(0x04)
	float DisruptionCooldownMultiplier; // 0x40(0x04)
	float DamageCooldownMultiplier; // 0x44(0x04)
	float KineticCooldownMultiplier; // 0x48(0x04)
	float ProtectionCooldownMultiplier; // 0x4c(0x04)
	float SeismicCooldownMultiplier; // 0x50(0x04)
	float DeploymentDurationMultiplier; // 0x54(0x04)
	float GadgetCooldownMultiplier; // 0x58(0x04)
	float OrdinanceCooldownMultiplier; // 0x5c(0x04)
	float IgniteCooldownMultiplier; // 0x60(0x04)
	float ImmobilizeCooldownMultiplier; // 0x64(0x04)
	float SeismicDamageMultiplier; // 0x68(0x04)
	char UnknownData_6C[0x4]; // 0x6c(0x04)
};

// Class Madness.MadLandMine
// Size: 0x308 (Inherited: 0x2f0)
struct AMadLandMine : AActor {
	struct UExplosionTemplate* ExplosionTemplate; // 0x2f0(0x08)
	struct USphereComponent* ProximityComp; // 0x2f8(0x08)
	char UnknownData_300_0 : 7; // 0x300(0x01)
	bool bExploded : 1; // 0x300(0x01)
	char UnknownData_301[0x7]; // 0x301(0x07)

	void Reset(); // Function Madness.MadLandMine.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x1661ad0
	void OnRep_Exploded(); // Function Madness.MadLandMine.OnRep_Exploded // (Final|Native|Protected) // @ game+0x1661800
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadLandMine.OnOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x1661570
};

// Class Madness.MadLateralAssetData
// Size: 0x40 (Inherited: 0x28)
struct UMadLateralAssetData : UAssetUserData {
	struct FString DNA; // 0x28(0x10)
	int32_t ID; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class Madness.MadLateralInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadLateralInterface : UInterface {

	struct UDNAContext* GetDNAContext(); // Function Madness.MadLateralInterface.GetDNAContext // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x16609b0
};

// Class Madness.MadLavaSpike
// Size: 0x300 (Inherited: 0x2f0)
struct AMadLavaSpike : AActor {
	float MaxRandomPositionOffset; // 0x2f0(0x04)
	char UnknownData_2F4_0 : 7; // 0x2f4(0x01)
	bool bIsDormant : 1; // 0x2f4(0x01)
	char UnknownData_2F5_0 : 7; // 0x2f5(0x01)
	bool bAllowStart : 1; // 0x2f5(0x01)
	char UnknownData_2F6[0xa]; // 0x2f6(0x0a)

	void StartLavaSpike(); // Function Madness.MadLavaSpike.StartLavaSpike // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void SetRootForOffset(struct USceneComponent* OffsetActor); // Function Madness.MadLavaSpike.SetRootForOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x1663140
	void ServerStartLavaSpike(); // Function Madness.MadLavaSpike.ServerStartLavaSpike // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1516bc0
	bool IsReadyToSpawn(); // Function Madness.MadLavaSpike.IsReadyToSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x16613b0
	void ClientStartLavaSpike(struct FVector Offset); // Function Madness.MadLavaSpike.ClientStartLavaSpike // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x1660440
};

// Class Madness.MadLavaSpikeManager
// Size: 0x308 (Inherited: 0x2f0)
struct AMadLavaSpikeManager : AActor {
	struct TArray<struct AMadLavaSpike*> LavaSpikes; // 0x2f0(0x10)
	int32_t MaxToActivatePerCall; // 0x300(0x04)
	int32_t MaxActiveTotal; // 0x304(0x04)

	void SetUpLavaSpikes(); // Function Madness.MadLavaSpikeManager.SetUpLavaSpikes // (Final|Native|Public|BlueprintCallable) // @ game+0x16632f0
	void ActivateLavaSpikes(int32_t NumberToActivate); // Function Madness.MadLavaSpikeManager.ActivateLavaSpikes // (Final|Native|Public|BlueprintCallable) // @ game+0x16602e0
};

// Class Madness.MadLevelingComponent
// Size: 0x3a8 (Inherited: 0x180)
struct UMadLevelingComponent : UActorComponent {
	char UnknownData_180_0 : 7; // 0x180(0x01)
	bool bDebugShowAllSkills : 1; // 0x180(0x01)
	char UnknownData_181_0 : 7; // 0x181(0x01)
	bool bDebugShowWipSkills : 1; // 0x181(0x01)
	char UnknownData_182_0 : 7; // 0x182(0x01)
	bool bDebugCheckActive : 1; // 0x182(0x01)
	char UnknownData_183_0 : 7; // 0x183(0x01)
	bool bDebugIgnoreNodeCost : 1; // 0x183(0x01)
	char UnknownData_184_0 : 7; // 0x184(0x01)
	bool bDebugIgnoreNodeRequirement : 1; // 0x184(0x01)
	char UnknownData_185[0x13]; // 0x185(0x13)
	struct FMulticastInlineDelegate OnCharacterLevelUpNotify; // 0x198(0x10)
	struct FMulticastInlineDelegate OnExperienceReplicated; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnPathReplicated; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnSkillChanged; // 0x1c8(0x10)
	struct FMulticastInlineDelegate OnSkillUnlocked; // 0x1d8(0x10)
	struct FMulticastInlineDelegate OnSkillLeveledUp; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnUpgradePointsReplicated; // 0x1f8(0x10)
	char UnknownData_208[0x10]; // 0x208(0x10)
	struct TArray<enum class EMadnessSkillPath> SelectedPaths; // 0x218(0x10)
	struct TArray<enum class EMadnessSkillPath> CommonPaths; // 0x228(0x10)
	int32_t SkillsUnlockedInSession; // 0x238(0x04)
	char UnknownData_23C_0 : 7; // 0x23c(0x01)
	bool BlockLevelNotification : 1; // 0x23c(0x01)
	char UnknownData_23D[0x3]; // 0x23d(0x03)
	struct TArray<struct FMadSkillLevelData> SkillsProgress; // 0x240(0x10)
	struct AMadPlayerCharacter* character; // 0x250(0x08)
	struct FMulticastInlineDelegate OnPerkReplicated; // 0x258(0x10)
	struct FMulticastInlineDelegate OnMasteryPointsReplicated; // 0x268(0x10)
	struct FMulticastInlineDelegate OnOverloadReplicated; // 0x278(0x10)
	struct FMulticastInlineDelegate OnHeroTreeUpgraded; // 0x288(0x10)
	struct FMulticastInlineDelegate OnHeroPointsChanged; // 0x298(0x10)
	struct TArray<struct FName> Upgrades; // 0x2a8(0x10)
	struct TArray<struct FName> UpgradesApplied; // 0x2b8(0x10)
	char UnknownData_2C8[0x50]; // 0x2c8(0x50)
	int32_t HeroPoints; // 0x318(0x04)
	int32_t TotalHeroPoints; // 0x31c(0x04)
	struct TArray<struct FString> AppliedPassiveSkills; // 0x320(0x10)
	char UnknownData_330_0 : 7; // 0x330(0x01)
	bool bSequenceBlockedNotification : 1; // 0x330(0x01)
	char UnknownData_331[0x7]; // 0x331(0x07)
	struct UMadLevelingUIModel* UIModel; // 0x338(0x08)
	struct TMap<enum class EMadnessSkillPath, struct FColor> ClassColors; // 0x340(0x50)
	struct TArray<bool> TutorialVariables; // 0x390(0x10)
	char UnknownData_3A0[0x8]; // 0x3a0(0x08)

	void SetTutorialVariable(struct FString VariableName, bool Value); // Function Madness.MadLevelingComponent.SetTutorialVariable // (Final|Native|Public|BlueprintCallable) // @ game+0x16631c0
	void SetDebugShowWipSkills(bool bSet); // Function Madness.MadLevelingComponent.SetDebugShowWipSkills // (Final|Native|Public|BlueprintCallable) // @ game+0x1662fc0
	void SetDebugShowAllSkills(bool bSet); // Function Madness.MadLevelingComponent.SetDebugShowAllSkills // (Final|Native|Public|BlueprintCallable) // @ game+0x1662f40
	void ServerUnlockUpgrade(struct FName UpgradeName); // Function Madness.MadLevelingComponent.ServerUnlockUpgrade // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662eb0
	void ServerUnlockSkill(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, bool AutoSlot, bool NewSkill); // Function Madness.MadLevelingComponent.ServerUnlockSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1662d60
	void ServerUnlockMultipleUpgrade(struct TArray<struct FName> Nodes); // Function Madness.MadLevelingComponent.ServerUnlockMultipleUpgrade // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662cc0
	void ServerUnlockMastery(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.ServerUnlockMastery // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662bc0
	void ServerUnlockAllSkillsInPath(enum class EMadnessSkillPath Path); // Function Madness.MadLevelingComponent.ServerUnlockAllSkillsInPath // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662b40
	void ServerSlotPerk(struct UMadSkillData* Perk, int32_t SlotIndex); // Function Madness.MadLevelingComponent.ServerSlotPerk // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662a70
	void ServerSlotMastery(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.ServerSlotMastery // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662970
	void ServerSetTutorialVariable(enum class None Index, bool Value); // Function Madness.MadLevelingComponent.ServerSetTutorialVariable // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x16628a0
	void ServerSetPlayerLevel(int32_t Level); // Function Madness.MadLevelingComponent.ServerSetPlayerLevel // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662810
	void ServerSetDebugIgnoreNodeRequirement(bool bSet); // Function Madness.MadLevelingComponent.ServerSetDebugIgnoreNodeRequirement // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662780
	void ServerSetDebugIgnoreNodeCost(bool bSet); // Function Madness.MadLevelingComponent.ServerSetDebugIgnoreNodeCost // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16626f0
	void ServerSelectPath(enum class EMadnessSkillPath PathType); // Function Madness.MadLevelingComponent.ServerSelectPath // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662670
	void ServerResetUpgrades(); // Function Madness.MadLevelingComponent.ServerResetUpgrades // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662650
	void ServerResetProgress(); // Function Madness.MadLevelingComponent.ServerResetProgress // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1662630
	void ServerRemoveSkillEffects(struct UMadSkillData* Skill, enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadLevelingComponent.ServerRemoveSkillEffects // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1662560
	void ServerRemoveMastery(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.ServerRemoveMastery // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662460
	void ServerOverloadSkill(enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadLevelingComponent.ServerOverloadSkill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16623e0
	void ServerModifyHeroPoints(int32_t Amount); // Function Madness.MadLevelingComponent.ServerModifyHeroPoints // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1662350
	void ServerLoadCharacterProgressData(struct FMadnessCharacterProgress SavedData); // Function Madness.MadLevelingComponent.ServerLoadCharacterProgressData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1662170
	void ServerClearPerk(int32_t SlotIndex); // Function Madness.MadLevelingComponent.ServerClearPerk // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16620e0
	void ServerClearOverload(); // Function Madness.MadLevelingComponent.ServerClearOverload // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x16620c0
	void ServerApplySkillTemplate(struct FString InTemplate); // Function Madness.MadLevelingComponent.ServerApplySkillTemplate // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1662020
	void ServerAddUpgradePoints(int32_t Points); // Function Madness.MadLevelingComponent.ServerAddUpgradePoints // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1661f90
	void ServerAddSkillLevel(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, bool UseGeneralPoints); // Function Madness.MadLevelingComponent.ServerAddSkillLevel // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1661e90
	void ServerAddSkillEffects(struct UMadSkillData* Skill); // Function Madness.MadLevelingComponent.ServerAddSkillEffects // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1661e00
	void ServerAddMasteryPoints(int32_t Points); // Function Madness.MadLevelingComponent.ServerAddMasteryPoints // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1661d70
	void ServerAddExperience(float GainedExperience, enum class EMadExperienceSource Source, struct AMadBaseCharacter* KilledCharacter); // Function Madness.MadLevelingComponent.ServerAddExperience // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1661c70
	struct FMadnessCharacterProgress SaveCharacterProgressData(); // Function Madness.MadLevelingComponent.SaveCharacterProgressData // (Final|Native|Public|BlueprintCallable) // @ game+0x1661af0
	void OnSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadLevelingComponent.OnSequenceStart // (Final|Native|Public|HasOutParms) // @ game+0x16619a0
	void OnSequenceEnd(); // Function Madness.MadLevelingComponent.OnSequenceEnd // (Final|Native|Public) // @ game+0x1661980
	void OnRep_Upgrades(); // Function Madness.MadLevelingComponent.OnRep_Upgrades // (Final|Native|Protected) // @ game+0x1661960
	void OnRep_SkillProgress(); // Function Madness.MadLevelingComponent.OnRep_SkillProgress // (Final|Native|Protected) // @ game+0x1661940
	void OnRep_Points(); // Function Madness.MadLevelingComponent.OnRep_Points // (Final|Native|Protected) // @ game+0x1661920
	void OnRep_Path(); // Function Madness.MadLevelingComponent.OnRep_Path // (Final|Native|Protected) // @ game+0x1661900
	void OnRep_NewSkillUnlocked(); // Function Madness.MadLevelingComponent.OnRep_NewSkillUnlocked // (Final|Native|Protected) // @ game+0x16618e0
	void OnRep_Level(float OldLevel, float Level); // Function Madness.MadLevelingComponent.OnRep_Level // (Final|Native|Public) // @ game+0x1661820
	void OnRep_CommonPath(); // Function Madness.MadLevelingComponent.OnRep_CommonPath // (Final|Native|Protected) // @ game+0x16617e0
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadLevelingComponent.OnBattleStateChanged // (Final|Native|Public) // @ game+0x16614e0
	void OnBattleMusicChanged(bool bInBattle); // Function Madness.MadLevelingComponent.OnBattleMusicChanged // (Final|Native|Public) // @ game+0x16614e0
	void OnAsyncLoadLevelUpEffects(); // Function Madness.MadLevelingComponent.OnAsyncLoadLevelUpEffects // (Final|Native|Protected) // @ game+0x16614c0
	void LoadCharacterProgress(struct FMadnessCharacterProgress SavedData); // Function Madness.MadLevelingComponent.LoadCharacterProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x16613e0
	bool IsSkillOverloaded(struct UMadSkillData* Skill); // Function Madness.MadLevelingComponent.IsSkillOverloaded // (Final|Native|Public|BlueprintCallable) // @ game+0x1661270
	bool IsPathUnlocked(enum class EMadnessSkillPath Path); // Function Madness.MadLevelingComponent.IsPathUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1661320
	bool IsPathToUnlock(); // Function Madness.MadLevelingComponent.IsPathToUnlock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16612f0
	bool IsMasteryActive(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.IsMasteryActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1660360
	bool IsCardSloted(struct UMadSkillData* Card); // Function Madness.MadLevelingComponent.IsCardSloted // (Final|Native|Public|BlueprintCallable) // @ game+0x1661270
	int32_t GetUsedMasteryPoints(); // Function Madness.MadLevelingComponent.GetUsedMasteryPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660ba0
	enum class EMadHeroTreeUpgradeState GetUpgradeState(struct FName UpgradeName); // Function Madness.MadLevelingComponent.GetUpgradeState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x16611a0
	struct FMadHeroTreeNodeDataTable GetUpgradeData(struct FName UpgradeName); // Function Madness.MadLevelingComponent.GetUpgradeData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1661070
	int32_t GetUnlockedUpgradePoints(); // Function Madness.MadLevelingComponent.GetUnlockedUpgradePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660ba0
	void GetUnlockedSkills(struct TArray<struct UMadSkillData*> SkillPool); // Function Madness.MadLevelingComponent.GetUnlockedSkills // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660fc0
	struct UMadSkillData* GetUnlockedSkill(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadLevelingComponent.GetUnlockedSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x1660f00
	int32_t GetUnlockedMasteriesPoints(); // Function Madness.MadLevelingComponent.GetUnlockedMasteriesPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660ba0
	bool GetTutorialVariable(struct FString VariableName); // Function Madness.MadLevelingComponent.GetTutorialVariable // (Final|Native|Public|BlueprintCallable) // @ game+0x1660e10
	int32_t GetTotalPathLevel(enum class EMadnessSkillPath Path); // Function Madness.MadLevelingComponent.GetTotalPathLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1660da0
	int32_t GetTotalHeroPoints(); // Function Madness.MadLevelingComponent.GetTotalHeroPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660d80
	struct UMadSkillData* GetSkillOverloaded(); // Function Madness.MadLevelingComponent.GetSkillOverloaded // (Final|Native|Public|BlueprintCallable) // @ game+0x1622400
	int32_t GetSkillLevelData(struct FMadSkillProgressKey SkillKey); // Function Madness.MadLevelingComponent.GetSkillLevelData // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1660cd0
	enum class EMadnessSkillPath GetSelectedPath(int32_t PathId); // Function Madness.MadLevelingComponent.GetSelectedPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660c40
	void GetPerkList(struct TArray<struct UMadSkillData*> Array); // Function Madness.MadLevelingComponent.GetPerkList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660bc0
	struct UMadSkillData* GetPerk(enum class None SlotID); // Function Madness.MadLevelingComponent.GetPerk // (Final|Native|Public|BlueprintCallable) // @ game+0x16606a0
	int32_t GetNumberOfPerkSlots(); // Function Madness.MadLevelingComponent.GetNumberOfPerkSlots // (Final|Native|Public|BlueprintCallable) // @ game+0x1660ba0
	void GetMasteryID(struct UMadSkillData* Mastery, enum class EMadnessSkillPath Path, int32_t SkillIndex, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.GetMasteryID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1660a40
	int32_t GetHeroPoints(); // Function Madness.MadLevelingComponent.GetHeroPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660a20
	bool GetCurrentLevel(int32_t Level); // Function Madness.MadLevelingComponent.GetCurrentLevel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660910
	bool GetCurrentExperience(float Experience); // Function Madness.MadLevelingComponent.GetCurrentExperience // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1660860
	enum class EMadnessSkillPath GetCommonPath(int32_t PathId); // Function Madness.MadLevelingComponent.GetCommonPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16607d0
	void GetAllSlotedMasteriesForSkill(struct TArray<struct UMadSkillData*> Array, struct UMadSkillData* Skill); // Function Madness.MadLevelingComponent.GetAllSlotedMasteriesForSkill // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1660710
	struct UMadSkillData* GetActivePerk(enum class None SlotID); // Function Madness.MadLevelingComponent.GetActivePerk // (Final|Native|Public|BlueprintCallable) // @ game+0x16606a0
	void GenerateSkillTemplate(); // Function Madness.MadLevelingComponent.GenerateSkillTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x1660680
	void ExperienceGained(float GainedExperience, enum class EMadExperienceSource Source, struct AMadBaseCharacter* KilledCharacter); // Function Madness.MadLevelingComponent.ExperienceGained // (Final|Native|Public) // @ game+0x1660570
	void ClientUnlockSkill(struct FString SkillID); // Function Madness.MadLevelingComponent.ClientUnlockSkill // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16604d0
	bool CanMasteryBeUnlocked(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.CanMasteryBeUnlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x1660360
	bool CanMasteryBeSloted(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath, int32_t MasteryIndex); // Function Madness.MadLevelingComponent.CanMasteryBeSloted // (Final|Native|Public|BlueprintCallable) // @ game+0x1660360
};

// Class Madness.MadLevelingUIModel
// Size: 0x2a0 (Inherited: 0x50)
struct UMadLevelingUIModel : UBaseUIModel {
	char UnknownData_50[0x68]; // 0x50(0x68)
	struct TArray<struct FUIActiveSKillData> Skills; // 0xb8(0x10)
	struct FUIActiveSKillData MeleeSkill; // 0xc8(0x78)
	struct FMadLevelingUIData LevelingData; // 0x140(0x30)
	struct FMadClassTreeUIData ClassTreeData; // 0x170(0xf0)
	char UnknownData_260_0 : 7; // 0x260(0x01)
	bool bNewSkillTrigger : 1; // 0x260(0x01)
	char UnknownData_261[0x37]; // 0x261(0x37)
	struct UMadGameInstance* MadGameInstance; // 0x298(0x08)

	void RequestUnlockPerk(struct FName PerkID); // Function Madness.MadLevelingUIModel.RequestUnlockPerk // (Final|Native|Public) // @ game+0x166d530
	void RequestUnlockMutiplePerks(struct TArray<struct FName> PerkIDs); // Function Madness.MadLevelingUIModel.RequestUnlockMutiplePerks // (Final|Native|Public) // @ game+0x166d450
	int32_t RequestUnlockLevel(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadLevelingUIModel.RequestUnlockLevel // (Final|Native|Public) // @ game+0x166d390
	enum class EMadSkillSlotResult RequestSlotSkill(enum class EMadnessSkillPath Path, int32_t SkillIndex, enum class EMadnessActiveSkillSlots SkillSlot); // Function Madness.MadLevelingUIModel.RequestSlotSkill // (Final|Native|Public) // @ game+0x166d270
	void RequestSelectPath(enum class EMadnessSkillPath Path); // Function Madness.MadLevelingUIModel.RequestSelectPath // (Final|Native|Public) // @ game+0x166d1f0
	void RequestResetClassTree(); // Function Madness.MadLevelingUIModel.RequestResetClassTree // (Final|Native|Public) // @ game+0x166d110
	void RequestPlayWingSound(); // Function Madness.MadLevelingUIModel.RequestPlayWingSound // (Final|Native|Public) // @ game+0x166d0f0
	void RequestPlayBonusSound(); // Function Madness.MadLevelingUIModel.RequestPlayBonusSound // (Final|Native|Public) // @ game+0x166d0d0
	void RequestMarkSkillAsOld(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadLevelingUIModel.RequestMarkSkillAsOld // (Final|Native|Public) // @ game+0x166d010
	void OnSlotSkill(struct UMadSkillData* Skill, enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadLevelingUIModel.OnSlotSkill // (Final|Native|Public) // @ game+0x166cd70
	void OnSkillsChanged(); // Function Madness.MadLevelingUIModel.OnSkillsChanged // (Final|Native|Public) // @ game+0x166cd50
	void OnNewSkillsUnlocked(); // Function Madness.MadLevelingUIModel.OnNewSkillsUnlocked // (Final|Native|Public) // @ game+0x166c900
	void OnLevelingDataChanged(); // Function Madness.MadLevelingUIModel.OnLevelingDataChanged // (Final|Native|Public) // @ game+0x166c790
	void OnLevelChanged(float OldLevel, float Level, bool IsSilentNotification); // Function Madness.MadLevelingUIModel.OnLevelChanged // (Final|Native|Public) // @ game+0x166c680
	void OnItemModified(struct AMadItem* Item); // Function Madness.MadLevelingUIModel.OnItemModified // (Final|Native|Public) // @ game+0x166c570
	void OnItemEquiped(struct AMadItem* Item, enum class EMadItemSlot Slot); // Function Madness.MadLevelingUIModel.OnItemEquiped // (Final|Native|Public) // @ game+0x166c4b0
	void OnHeroTreeUpgraded(struct FName UpgradeName, bool bAdded); // Function Madness.MadLevelingUIModel.OnHeroTreeUpgraded // (Final|Native|Public) // @ game+0x166c3e0
	void OnExperienceChanged(float ExperienceGained); // Function Madness.MadLevelingUIModel.OnExperienceChanged // (Final|Native|Public) // @ game+0x166c360
	bool IsTherePathToUnlock(); // Function Madness.MadLevelingUIModel.IsTherePathToUnlock // (Final|Native|Public) // @ game+0x166bde0
	struct FUIActiveSKillData GetSkillUIData(enum class EMadnessSkillPath Path, int32_t SkillIndex); // Function Madness.MadLevelingUIModel.GetSkillUIData // (Final|Native|Public) // @ game+0x166b310
	float GetSkillDuration(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadLevelingUIModel.GetSkillDuration // (Final|Native|Public) // @ game+0x166b250
	float GetSkillCooldownDuration(int32_t SkillIndex, enum class EMadnessSkillPath SkillPath); // Function Madness.MadLevelingUIModel.GetSkillCooldownDuration // (Final|Native|Public) // @ game+0x166b190
};

// Class Madness.MadLevelScriptActor
// Size: 0x300 (Inherited: 0x2f8)
struct AMadLevelScriptActor : ABaseLevelScriptActor {
	struct UMadAbilitySet* CustomAbilitySetPlayer; // 0x2f8(0x08)
};

// Class Madness.MadLoadingScreenUIModel
// Size: 0x100 (Inherited: 0x50)
struct UMadLoadingScreenUIModel : UBaseUIModel {
	struct FString LoadingScreenBackground; // 0x50(0x10)
	struct UTexture2D* LoadingImage; // 0x60(0x08)
	struct FText RegionDescription; // 0x68(0x18)
	int32_t LoadingProgress; // 0x80(0x04)
	char UnknownData_84[0x7c]; // 0x84(0x7c)
};

// Class Madness.MadLobbyActor
// Size: 0x5b0 (Inherited: 0x2f0)
struct AMadLobbyActor : AActor {
	char UnknownData_2F0[0x18]; // 0x2f0(0x18)
	struct USoundMix* LobbySoundMix; // 0x308(0x08)
	char UnknownData_310[0x4]; // 0x310(0x04)
	struct FVector2D PreviewRotationYawRange; // 0x314(0x08)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct TMap<enum class EMadGender, struct UCharacterCustomizationDataAsset*> CharacterCreationCustomizations; // 0x320(0x50)
	struct FRotator LocalPreviewTargetRotation; // 0x370(0x0c)
	char UnknownData_37C[0x4]; // 0x37c(0x04)
	struct AMadPreviewCharacter* LocalPreviewForCharacterCreation; // 0x380(0x08)
	struct AMadPreviewCharacter* LocalPreviewForFemaleCharacterCreation; // 0x388(0x08)
	enum class EMadGender CreatedCharacterGender; // 0x390(0x01)
	char UnknownData_391[0x47]; // 0x391(0x47)
	struct TArray<struct FMadPlayerSaveSlotInfo> LocalSlots; // 0x3d8(0x10)
	char UnknownData_3E8[0x88]; // 0x3e8(0x88)
	struct TArray<struct FMadPlayerSaveSlotInfo> TempLocalSlots; // 0x470(0x10)
	char UnknownData_480_0 : 7; // 0x480(0x01)
	bool bSkipStartScreen : 1; // 0x480(0x01)
	char UnknownData_481[0x7]; // 0x481(0x07)
	struct FMulticastInlineDelegate OnLobbyStateChanged; // 0x488(0x10)
	char UnknownData_498[0x2c]; // 0x498(0x2c)
	enum class EMadLobbyState CurrentLobbyState; // 0x4c4(0x01)
	char UnknownData_4C5[0x73]; // 0x4c5(0x73)
	char UnknownData_538_0 : 7; // 0x538(0x01)
	bool bShouldSkipTutorial : 1; // 0x538(0x01)
	char UnknownData_539_0 : 7; // 0x539(0x01)
	bool bCheckpointSelected : 1; // 0x539(0x01)
	char UnknownData_53A[0x6]; // 0x53a(0x06)
	struct UMadLobbyUIModel* UIModel; // 0x540(0x08)
	char UnknownData_548[0x28]; // 0x548(0x28)
	struct TArray<struct FString> CharacterLoadCompletedNames; // 0x570(0x10)
	struct TArray<struct FTimerHandle> CharacterLoadCompleteTimerHandles; // 0x580(0x10)
	struct FTimerHandle CharacterListCompletedTimerHandle; // 0x590(0x08)
	char UnknownData_598[0x18]; // 0x598(0x18)

	void StartGame(struct FName TargetRegionOverride); // Function Madness.MadLobbyActor.StartGame // (Final|Native|Public) // @ game+0x166daf0
	void ShowRelevantPreviews(enum class EMadLobbyState LobbyState); // Function Madness.MadLobbyActor.ShowRelevantPreviews // (Final|Native|Public) // @ game+0x166da70
	bool ShouldTrackTutorial(); // Function Madness.MadLobbyActor.ShouldTrackTutorial // (Final|Native|Public) // @ game+0x166da40
	bool ShouldStartSkipProlog(); // Function Madness.MadLobbyActor.ShouldStartSkipProlog // (Final|Native|Public) // @ game+0x166d9e0
	void RequestLastPlayedCharacter(); // Function Madness.MadLobbyActor.RequestLastPlayedCharacter // (Final|Native|Public) // @ game+0x166cff0
	void RequestCharacterList(); // Function Madness.MadLobbyActor.RequestCharacterList // (Final|Native|Public) // @ game+0x166cfb0
	void OnStartGameCountDownUpdated(float InCountDownTime); // Function Madness.MadLobbyActor.OnStartGameCountDownUpdated // (Final|Native|Public) // @ game+0x166ce30
	void OnPrologueCharacterSaved(bool bSuccess); // Function Madness.MadLobbyActor.OnPrologueCharacterSaved // (Final|Native|Public) // @ game+0x166ccc0
	void OnPreviewReady(struct FString CharacterName); // Function Madness.MadLobbyActor.OnPreviewReady // (Final|Native|Public) // @ game+0x166cbc0
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadLobbyActor.OnPlayerLogout // (Final|Native|Public) // @ game+0x166cb00
	void OnPlayerLogin(struct AGameModeBase* GameMode, struct APlayerController* EnteringController); // Function Madness.MadLobbyActor.OnPlayerLogin // (Final|Native|Public) // @ game+0x166ca40
	void OnPlayerLoggedAndReady(); // Function Madness.MadLobbyActor.OnPlayerLoggedAndReady // (Final|Native|Public) // @ game+0x166ca20
	void OnPlayerInitialReplicationFinished(struct AMadPlayerState* PlayerState); // Function Madness.MadLobbyActor.OnPlayerInitialReplicationFinished // (Final|Native|Public) // @ game+0x15c6560
	void OnPlayerCoopReady(struct AMadPlayerState* PlayerState); // Function Madness.MadLobbyActor.OnPlayerCoopReady // (Final|Native|Public) // @ game+0x166c9a0
	void OnPathSelected(enum class EMadnessSkillPath Path); // Function Madness.MadLobbyActor.OnPathSelected // (Final|Native|Public) // @ game+0x166c920
	void OnNewCharacterCreationCompleted(bool bSuccess, struct FString CharacterName); // Function Madness.MadLobbyActor.OnNewCharacterCreationCompleted // (Final|Native|Private) // @ game+0x166c7d0
	void OnJSSReady(struct FName StateName); // Function Madness.MadLobbyActor.OnJSSReady // (Final|Native|Public|HasOutParms) // @ game+0x166c5f0
	void OnDemoStartCinematicEnded(); // Function Madness.MadLobbyActor.OnDemoStartCinematicEnded // (Final|Native|Public) // @ game+0x166c340
	void OnDelayedCharacterSaveLoadCompleted(); // Function Madness.MadLobbyActor.OnDelayedCharacterSaveLoadCompleted // (Final|Native|Private) // @ game+0x166c320
	void OnDelayedCharacterListCompleted(); // Function Madness.MadLobbyActor.OnDelayedCharacterListCompleted // (Final|Native|Private) // @ game+0x166c300
	void OnCharacterRemovalCompleted(bool bSuccess, struct FString CharacterName); // Function Madness.MadLobbyActor.OnCharacterRemovalCompleted // (Final|Native|Private) // @ game+0x166c040
	void OnCharacterListCompleted(bool bSuccess); // Function Madness.MadLobbyActor.OnCharacterListCompleted // (Final|Native|Public) // @ game+0x166bfb0
	void OnApplyInitialUIState(); // Function Madness.MadLobbyActor.OnApplyInitialUIState // (Final|Native|Public) // @ game+0x166bf90
	void LeaveParty(); // Function Madness.MadLobbyActor.LeaveParty // (Final|Native|Public) // @ game+0x166bf50
	bool IsCharacterSlotLoaded(struct FString CharacterName); // Function Madness.MadLobbyActor.IsCharacterSlotLoaded // (Final|Native|Public) // @ game+0x166ba70
	void Initialize(struct AMadPreviewCharacter* InPreviewClass, struct AMadPreviewCharacter* InPreviewFemaleClass, struct UMadStartPromptWidget* InStartPromptWidgetClass, struct UMadLobbyWidget* InLobbyWidgetClass, struct AActor* InLocalPlayerSpot, struct AActor* InPlayerSpot2, struct AActor* InPlayerSpot3, struct AActor* InPlayerSpot4, struct ACameraActor* InMainCamera, struct ACameraActor* InCharacterListCamera, struct ACameraActor* InCloseUpCamera, struct AMadConvoyTruck* ConvoyTruckActor); // Function Madness.MadLobbyActor.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x166b680
	void HideAllPreviews(); // Function Madness.MadLobbyActor.HideAllPreviews // (Final|Native|Public) // @ game+0x166b660
	void EnableJoinInProgress(); // Function Madness.MadLobbyActor.EnableJoinInProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x166a9d0
	void DisableJoinInProgress(); // Function Madness.MadLobbyActor.DisableJoinInProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x166a900
	void CheckIsPreviewReady(); // Function Madness.MadLobbyActor.CheckIsPreviewReady // (Final|Native|Public) // @ game+0x166a820
};

// Class Madness.MadLobbyBaseWidget
// Size: 0x238 (Inherited: 0x230)
struct UMadLobbyBaseWidget : UUserWidget {
	char UnknownData_230[0x8]; // 0x230(0x08)
};

// Class Madness.MadLobbyUIModel
// Size: 0x2e8 (Inherited: 0x50)
struct UMadLobbyUIModel : UBaseUIModel {
	char UnknownData_50[0x1d0]; // 0x50(0x1d0)
	struct TArray<struct FMadPlayerSaveSlotInfo> LocalSlots; // 0x220(0x10)
	char UnknownData_230_0 : 7; // 0x230(0x01)
	bool bCurrentSlotLoaded : 1; // 0x230(0x01)
	char UnknownData_231_0 : 7; // 0x231(0x01)
	bool bCharacterListCompleted : 1; // 0x231(0x01)
	enum class None CurrentWorldLevel; // 0x232(0x01)
	char UnknownData_233[0x1]; // 0x233(0x01)
	int32_t CurrentMaxDifficultyLevel; // 0x234(0x04)
	enum class EMadLobbyState CurrentLobbyState; // 0x238(0x01)
	char UnknownData_239[0x7]; // 0x239(0x07)
	struct FMadPlayerSaveSlotInfo CurrentSlot; // 0x240(0x70)
	char UnknownData_2B0[0x18]; // 0x2b0(0x18)
	char UnknownData_2C8_0 : 7; // 0x2c8(0x01)
	bool bCanStartGame : 1; // 0x2c8(0x01)
	char UnknownData_2C9[0x1f]; // 0x2c9(0x1f)

	bool WasDemoCinematicTriggered(); // Function Madness.MadLobbyUIModel.WasDemoCinematicTriggered // (Final|Native|Public) // @ game+0x166dc30
	void TogglePlatformFeature(bool bEnabled, uint32_t FeatureFlags); // Function Madness.MadLobbyUIModel.TogglePlatformFeature // (Final|Native|Public) // @ game+0x166db70
	bool ShouldStartSkipProlog(); // Function Madness.MadLobbyUIModel.ShouldStartSkipProlog // (Final|Native|Public) // @ game+0x166da10
	bool ShouldShowSkipTutorialPopup(); // Function Madness.MadLobbyUIModel.ShouldShowSkipTutorialPopup // (Final|Native|Public) // @ game+0x166d9b0
	bool ShouldCheckSEM(); // Function Madness.MadLobbyUIModel.ShouldCheckSEM // (Final|Native|Public) // @ game+0x166d980
	void SetWorldDifficultyLevel(enum class None InDifficultyLevel); // Function Madness.MadLobbyUIModel.SetWorldDifficultyLevel // (Final|Native|Public) // @ game+0x166d900
	void SetStartGameCountDownTime(int32_t InCountDownTime); // Function Madness.MadLobbyUIModel.SetStartGameCountDownTime // (Final|Native|Public) // @ game+0x166d880
	void SetPrivacy(int32_t NewPrivacy); // Function Madness.MadLobbyUIModel.SetPrivacy // (Final|Native|Public) // @ game+0x166d800
	void SetHasAcceptedPrivacyPolicy(bool bAccepted); // Function Madness.MadLobbyUIModel.SetHasAcceptedPrivacyPolicy // (Final|Native|Public) // @ game+0x166d770
	void SetCustomizationIndex(enum class EMadCustomizationElement Element, enum class None Value); // Function Madness.MadLobbyUIModel.SetCustomizationIndex // (Final|Native|Public) // @ game+0x166d6b0
	void SelectCheckpoint(struct FName CheckpointName); // Function Madness.MadLobbyUIModel.SelectCheckpoint // (Final|Native|Public) // @ game+0x166d630
	void RotatePreview(float Magnitude); // Function Madness.MadLobbyUIModel.RotatePreview // (Final|Native|Public) // @ game+0x166d5b0
	void RequestStartGame(); // Function Madness.MadLobbyUIModel.RequestStartGame // (Final|Native|Public) // @ game+0x166d370
	void RequestSEMembershipStatus(); // Function Madness.MadLobbyUIModel.RequestSEMembershipStatus // (Final|Native|Public) // @ game+0x166d130
	void RequestSelectNewSlot(struct FString SlotCharacterName); // Function Madness.MadLobbyUIModel.RequestSelectNewSlot // (Final|Native|Public) // @ game+0x166d150
	void RequestGameSearch(); // Function Madness.MadLobbyUIModel.RequestGameSearch // (Final|Native|Public) // @ game+0x166cfd0
	void RemoveCharacter(struct FString InCharacterName); // Function Madness.MadLobbyUIModel.RemoveCharacter // (Final|Native|Public) // @ game+0x166cf10
	void QuitGame(); // Function Madness.MadLobbyUIModel.QuitGame // (Final|Native|Public) // @ game+0x166cef0
	void OnWorldLevelChanged(); // Function Madness.MadLobbyUIModel.OnWorldLevelChanged // (Final|Native|Public) // @ game+0x166ced0
	void OnStartPressed(); // Function Madness.MadLobbyUIModel.OnStartPressed // (Final|Native|Public) // @ game+0x166ceb0
	void OnPrivacyPolicyAccepted(); // Function Madness.MadLobbyUIModel.OnPrivacyPolicyAccepted // (Final|Native|Public) // @ game+0x166cca0
	void OnMaxDifficultyLevelChanged(); // Function Madness.MadLobbyUIModel.OnMaxDifficultyLevelChanged // (Final|Native|Public) // @ game+0x166c7b0
	void OnCloseSkipTutorialPopup(bool bSkipRequested); // Function Madness.MadLobbyUIModel.OnCloseSkipTutorialPopup // (Final|Native|Public) // @ game+0x166c170
	void LeavePartyChangeSlot(); // Function Madness.MadLobbyUIModel.LeavePartyChangeSlot // (Final|Native|Public) // @ game+0x166bf70
	void LaunchDemoStartCinematic(); // Function Madness.MadLobbyUIModel.LaunchDemoStartCinematic // (Final|Native|Public) // @ game+0x166bf30
	void JoinParty(struct FString PartyId); // Function Madness.MadLobbyUIModel.JoinParty // (Final|Native|Public) // @ game+0x166be90
	void JoinGame(int32_t GameIdx); // Function Madness.MadLobbyUIModel.JoinGame // (Final|Native|Public) // @ game+0x166be10
	bool IsRegionInstalled(struct FName regionname); // Function Madness.MadLobbyUIModel.IsRegionInstalled // (Final|Native|Public) // @ game+0x166bd50
	bool IsMapInstalled(struct FName TargetRegion); // Function Madness.MadLobbyUIModel.IsMapInstalled // (Final|Native|Public) // @ game+0x166bcc0
	bool IsInitalDemoFlowDone(); // Function Madness.MadLobbyUIModel.IsInitalDemoFlowDone // (Final|Native|Public) // @ game+0x166bc90
	bool IsDemoCinematicPlaying(); // Function Madness.MadLobbyUIModel.IsDemoCinematicPlaying // (Final|Native|Public) // @ game+0x166bc60
	bool IsCustomizationIndexUnlocked(enum class EMadCustomizationElement Element, enum class None Index); // Function Madness.MadLobbyUIModel.IsCustomizationIndexUnlocked // (Final|Native|Public) // @ game+0x166bb90
	bool IsCurrentSlotEmpty(); // Function Madness.MadLobbyUIModel.IsCurrentSlotEmpty // (Final|Native|Public|Const) // @ game+0x166bb60
	bool IsCharacterNameValid(struct FString InName); // Function Madness.MadLobbyUIModel.IsCharacterNameValid // (Final|Native|Public|Const) // @ game+0x166b9c0
	bool HasAcceptedPrivacyPolicy(); // Function Madness.MadLobbyUIModel.HasAcceptedPrivacyPolicy // (Final|Native|Public) // @ game+0x166b630
	enum class EPlayerVoiceStatus GetVoiceStatus(struct FString PlayerId); // Function Madness.MadLobbyUIModel.GetVoiceStatus // (Final|Native|Public) // @ game+0x166b580
	struct FString GetUserID(); // Function Madness.MadLobbyUIModel.GetUserID // (Final|Native|Public|Const) // @ game+0x166b500
	struct FString GetTargetRegionName(); // Function Madness.MadLobbyUIModel.GetTargetRegionName // (Final|Native|Public) // @ game+0x166b480
	struct FString GetPrivacyPolicyAcceptanceDate(struct FString Format); // Function Madness.MadLobbyUIModel.GetPrivacyPolicyAcceptanceDate // (Final|Native|Public|Const) // @ game+0x166b0a0
	struct FText GetPlaystationActivity(); // Function Madness.MadLobbyUIModel.GetPlaystationActivity // (Final|Native|Public) // @ game+0xda4670
	int32_t GetPlayersNum(); // Function Madness.MadLobbyUIModel.GetPlayersNum // (Final|Native|Public|Const) // @ game+0x166b070
	struct FString GetPlayerNetID(); // Function Madness.MadLobbyUIModel.GetPlayerNetID // (Final|Native|Public|Const) // @ game+0x166aff0
	enum class ELoginState GetLoginState(); // Function Madness.MadLobbyUIModel.GetLoginState // (Final|Native|Public|Const) // @ game+0x166afc0
	struct FMadCustomizationUIData GetCustomizationUIData(enum class EMadCustomizationElement Element, enum class None Index); // Function Madness.MadLobbyUIModel.GetCustomizationUIData // (Final|Native|Public) // @ game+0x166add0
	enum class None GetCustomizationMaxIndex(enum class EMadCustomizationElement Element); // Function Madness.MadLobbyUIModel.GetCustomizationMaxIndex // (Final|Native|Public) // @ game+0x166ad40
	enum class None GetCustomizationCurrentIndex(enum class EMadCustomizationElement Element); // Function Madness.MadLobbyUIModel.GetCustomizationCurrentIndex // (Final|Native|Public) // @ game+0x166acb0
	struct TArray<struct FColor> GetCustomizationColors(enum class EMadCustomizationElement Element); // Function Madness.MadLobbyUIModel.GetCustomizationColors // (Final|Native|Public) // @ game+0x166abe0
	struct FText GetCustomizationCategoryDisplayName(enum class EMadCustomizationElement Element, enum class EMadGender Gender); // Function Madness.MadLobbyUIModel.GetCustomizationCategoryDisplayName // (Final|Native|Public) // @ game+0x166aab0
	int32_t GetCurrentMaxCharacterSlots(); // Function Madness.MadLobbyUIModel.GetCurrentMaxCharacterSlots // (Final|Native|Public) // @ game+0x166aa80
	float GetChunkProgress(int32_t ChunkId); // Function Madness.MadLobbyUIModel.GetChunkProgress // (Final|Native|Public) // @ game+0x166a9f0
	bool DoesCharacterExist(struct FString InName); // Function Madness.MadLobbyUIModel.DoesCharacterExist // (Final|Native|Public|Const) // @ game+0x166a920
	void CreateNewCharacter(struct FString InCharacterName); // Function Madness.MadLobbyUIModel.CreateNewCharacter // (Final|Native|Public) // @ game+0x166a860
	void ContinueDemoFlow(); // Function Madness.MadLobbyUIModel.ContinueDemoFlow // (Final|Native|Public) // @ game+0x166a840
	void CharacterCreationRandomize(); // Function Madness.MadLobbyUIModel.CharacterCreationRandomize // (Final|Native|Public) // @ game+0x166a800
	bool ChangeLobbyState(enum class EMadLobbyState InNewState); // Function Madness.MadLobbyUIModel.ChangeLobbyState // (Final|Native|Public) // @ game+0x166a770
	void ChangeGenderForCharacterCreation(enum class EMadGender InGender); // Function Madness.MadLobbyUIModel.ChangeGenderForCharacterCreation // (Final|Native|Public) // @ game+0x166a6f0
	bool CanCharacterBeCreated(); // Function Madness.MadLobbyUIModel.CanCharacterBeCreated // (Final|Native|Public) // @ game+0x166a6a0
	void CancelStartGame(); // Function Madness.MadLobbyUIModel.CancelStartGame // (Final|Native|Public) // @ game+0x166a6d0
};

// Class Madness.MadLobbyWidget
// Size: 0x238 (Inherited: 0x238)
struct UMadLobbyWidget : UMadLobbyBaseWidget {

	void StartGame(struct FName TargetRegionOverride); // Function Madness.MadLobbyWidget.StartGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1672f30
	void SelectCharacter(struct FMadPlayerSaveSlotInfo InCharacter); // Function Madness.MadLobbyWidget.SelectCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1672b80
	void RotatePreview(float Magnitude); // Function Madness.MadLobbyWidget.RotatePreview // (Final|Native|Public|BlueprintCallable) // @ game+0x1672b00
	void RemoveCharacter(struct FString InCharacterName); // Function Madness.MadLobbyWidget.RemoveCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x16729a0
	void QuitGame(); // Function Madness.MadLobbyWidget.QuitGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1573690
	void OnPlayerWasKickedFromLobby(struct FText KickReason); // Function Madness.MadLobbyWidget.OnPlayerWasKickedFromLobby // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1a35c70
	void OnPlayerLeftLobby(struct AMadPlayerState* LeavingPlayer); // Function Madness.MadLobbyWidget.OnPlayerLeftLobby // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnPlayerEnteredLobby(struct AMadPlayerState* EnteringPlayer); // Function Madness.MadLobbyWidget.OnPlayerEnteredLobby // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnLobbyClosing(); // Function Madness.MadLobbyWidget.OnLobbyClosing // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void NewCharacterCreationFailed(struct FString InCharacterName); // Function Madness.MadLobbyWidget.NewCharacterCreationFailed // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void LobbyStateChanged(enum class EMadLobbyState NewState); // Function Madness.MadLobbyWidget.LobbyStateChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void LeaveParty(); // Function Madness.MadLobbyWidget.LeaveParty // (Final|Native|Public|BlueprintCallable) // @ game+0x1671c70
	bool GetSelectedCharacter(struct FMadPlayerSaveSlotInfo OutSelectedCharacter); // Function Madness.MadLobbyWidget.GetSelectedCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1671b10
	struct AMadPreviewCharacter* GetPreviewForCharacterCreation(); // Function Madness.MadLobbyWidget.GetPreviewForCharacterCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1671930
	struct TArray<struct FMadPlayerSaveSlotInfo> GetCharacterList(); // Function Madness.MadLobbyWidget.GetCharacterList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1671780
	void CreateNewCharacter(struct FString InCharacterName); // Function Madness.MadLobbyWidget.CreateNewCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x16716e0
	void CharacterRemovalCompleted(bool bSuccess, struct FString RemovedCharacterName); // Function Madness.MadLobbyWidget.CharacterRemovalCompleted // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void ChangeLobbyState(enum class EMadLobbyState NewState); // Function Madness.MadLobbyWidget.ChangeLobbyState // (Final|Native|Public|BlueprintCallable) // @ game+0x1671660
	struct AMadPreviewCharacter* ChangeGenderForCharacterCreation(enum class EMadGender InGender); // Function Madness.MadLobbyWidget.ChangeGenderForCharacterCreation // (Final|Native|Public|BlueprintCallable) // @ game+0x16715d0
};

// Class Madness.MadLocalInteractionActor
// Size: 0x340 (Inherited: 0x2f0)
struct AMadLocalInteractionActor : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FName InteractionName; // 0x2f8(0x08)
	struct FText InteractionText; // 0x300(0x18)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bStartDisabled : 1; // 0x318(0x01)
	char UnknownData_319[0x7]; // 0x319(0x07)
	struct FMulticastInlineDelegate OnActorInteractedLocal; // 0x320(0x10)
	struct ULocalInteractionComponent* LocalInteraction; // 0x330(0x08)
	struct FGameplayTag GameplayName; // 0x338(0x08)

	void UpdateInteractionText(struct FText Text); // Function Madness.MadLocalInteractionActor.UpdateInteractionText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1672fb0
	void SetInteractionEnabled(bool bInEnabled); // Function Madness.MadLocalInteractionActor.SetInteractionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1672ca0
	void OnInteractionStateChanged(bool bEnabled); // Function Madness.MadLocalInteractionActor.OnInteractionStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadLocalInteractionActor.OnInteracted // (Final|Native|Protected) // @ game+0x16722d0
	bool IsInteractionEnabled(); // Function Madness.MadLocalInteractionActor.IsInteractionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1671c40
	struct ULocalInteractionComponent* GetInteraction(); // Function Madness.MadLocalInteractionActor.GetInteraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1671900
	struct FGameplayTag GetGameplayName(); // Function Madness.MadLocalInteractionActor.GetGameplayName // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16718c0
};

// Class Madness.MadLocalisedResourcesUIModel
// Size: 0xa0 (Inherited: 0x50)
struct UMadLocalisedResourcesUIModel : UBaseUIModel {
	char UnknownData_50[0x18]; // 0x50(0x18)
	struct TArray<struct FLocalisedResourceUIData> ResourceDatas; // 0x68(0x10)
	char UnknownData_78[0x28]; // 0x78(0x28)

	void RespondToEvent(struct FName Name, enum class EMadBackendEventResponse response); // Function Madness.MadLocalisedResourcesUIModel.RespondToEvent // (Final|Native|Public) // @ game+0x1672a40
	void OnInfoCastsReceived(struct TArray<struct FInfoCastData> InfoCasts); // Function Madness.MadLocalisedResourcesUIModel.OnInfoCastsReceived // (Final|Native|Public|HasOutParms) // @ game+0x1672160
	void OnEventsReceived(struct TArray<struct FBackendEventData> Events); // Function Madness.MadLocalisedResourcesUIModel.OnEventsReceived // (Final|Native|Public|HasOutParms) // @ game+0x1671f60
	void OnEventResponseReceived(bool bSuccess, struct FBackendEventData Event, enum class EMadBackendEventResponse response, struct FEventParticipationResponseData EventParticipationResponseData); // Function Madness.MadLocalisedResourcesUIModel.OnEventResponseReceived // (Final|Native|Public|HasOutParms) // @ game+0x1671cb0
	struct TArray<struct FLocalisedResourceUIData> GetResourcesWithLabel(struct FString Label); // Function Madness.MadLocalisedResourcesUIModel.GetResourcesWithLabel // (Final|Native|Public) // @ game+0x1671960
};

// Class Madness.MadLocalPlayer
// Size: 0x2b0 (Inherited: 0x2b0)
struct UMadLocalPlayer : UOnlineLocalPlayer {
};

// Class Madness.MadLocomotionState
// Size: 0x70 (Inherited: 0x28)
struct UMadLocomotionState : UObject {
	char UnknownData_28_0 : 7; // 0x28(0x01)
	bool bRandomizeStartLoopPosition : 1; // 0x28(0x01)
	char UnknownData_29_0 : 7; // 0x29(0x01)
	bool bUseLocomotionCurveForStartPosition : 1; // 0x29(0x01)
	char UnknownData_2A[0x6]; // 0x2a(0x06)
	struct AMadPlayerCharacter* PlayerChar; // 0x30(0x08)
	struct UMadAnimationProxyDataPlayer* ProxyData; // 0x38(0x08)
	struct UMadPlayerMovementComponent* MoveComp; // 0x40(0x08)
	struct UMadPlayerAnimInstance* AnimInstance; // 0x48(0x08)
	struct UMadPlayerAnimSet* AnimSet; // 0x50(0x08)
	struct UMadLocomotionBlendspaceMetadata* BlendspaceMetadata; // 0x58(0x08)
	char UnknownData_60[0x10]; // 0x60(0x10)
};

// Class Madness.MadLocomotionBlendspaceMetadata
// Size: 0x30 (Inherited: 0x28)
struct UMadLocomotionBlendspaceMetadata : UAnimMetaData {
	enum class EMadLocomotionBlendspaceParameterType ParameterType; // 0x28(0x01)
	char UnknownData_29[0x7]; // 0x29(0x07)
};

// Class Madness.MadLocomotionStateCoverBase
// Size: 0x80 (Inherited: 0x70)
struct UMadLocomotionStateCoverBase : UMadLocomotionState {
	struct UMadAnimationProxyDataPlayerCover* ProxyDataCover; // 0x70(0x08)
	struct UMadPlayerCoverMovementComponent* CoverMoveComp; // 0x78(0x08)
};

// Class Madness.MadLocomotionStateCoverIdle
// Size: 0x80 (Inherited: 0x80)
struct UMadLocomotionStateCoverIdle : UMadLocomotionStateCoverBase {
};

// Class Madness.MadLocomotionStateCoverMovement
// Size: 0x80 (Inherited: 0x80)
struct UMadLocomotionStateCoverMovement : UMadLocomotionStateCoverBase {
};

// Class Madness.MadLocomotionStateMovement
// Size: 0x70 (Inherited: 0x70)
struct UMadLocomotionStateMovement : UMadLocomotionState {
};

// Class Madness.MadLocomotionStateSprintToCover
// Size: 0x70 (Inherited: 0x70)
struct UMadLocomotionStateSprintToCover : UMadLocomotionStateMovement {
};

// Class Madness.MadLocomotionStateIdle
// Size: 0x70 (Inherited: 0x70)
struct UMadLocomotionStateIdle : UMadLocomotionState {
};

// Class Madness.LookAtState
// Size: 0x30 (Inherited: 0x28)
struct ULookAtState : UObject {
	struct UMadLookAtControllerComponent* LookAtController; // 0x28(0x08)
};

// Class Madness.LookAtStandby
// Size: 0x30 (Inherited: 0x30)
struct ULookAtStandby : ULookAtState {
};

// Class Madness.LookAtActiveCameraState
// Size: 0x38 (Inherited: 0x30)
struct ULookAtActiveCameraState : ULookAtState {
	char UnknownData_30[0x8]; // 0x30(0x08)
};

// Class Madness.LookAtWaitForInteraction
// Size: 0x30 (Inherited: 0x30)
struct ULookAtWaitForInteraction : ULookAtState {
};

// Class Madness.MadLookAtControllerComponent
// Size: 0x250 (Inherited: 0x180)
struct UMadLookAtControllerComponent : UActorComponent {
	struct ULookAtState* ActiveState; // 0x180(0x08)
	struct ULocalInteractionComponent* LocalInteraction; // 0x188(0x08)
	struct UInputComponent* InputComponent; // 0x190(0x08)
	char UnknownData_198[0x60]; // 0x198(0x60)
	struct TMap<struct ULookAtState*, struct ULookAtState*> CachedLookAtStates; // 0x1f8(0x50)
	char UnknownData_248[0x8]; // 0x248(0x08)

	void OnInteraction(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadLookAtControllerComponent.OnInteraction // (Final|Native|Private) // @ game+0x1672450
};

// Class Madness.MadLookAtVolume
// Size: 0x388 (Inherited: 0x328)
struct AMadLookAtVolume : AVolume {
	char UnknownData_328_0 : 7; // 0x328(0x01)
	bool bActivateOnOverlap : 1; // 0x328(0x01)
	char UnknownData_329[0x7]; // 0x329(0x07)
	struct FLookAtParams LookAtParams; // 0x330(0x58)
};

// Class Madness.MadLoopComponent
// Size: 0x198 (Inherited: 0x180)
struct UMadLoopComponent : UActorComponent {
	char UnknownData_180[0x18]; // 0x180(0x18)
};

// Class Madness.MadLootDropComponent
// Size: 0x190 (Inherited: 0x180)
struct UMadLootDropComponent : UActorComponent {
	struct TArray<struct FMadLootDropRewardDetails> Rewards; // 0x180(0x10)

	void OnWssWaveKilled(struct AFWWaveSpawningSystem* Wss, int32_t WaveIndex, struct FName WaveName, int32_t NumWavesKilled, struct ABaseCharacter* KilledCharacter); // Function Madness.MadLootDropComponent.OnWssWaveKilled // (Final|Native|Protected) // @ game+0x1672810
	void OnWSSShutdown(struct AFWWaveSpawningSystem* Wss); // Function Madness.MadLootDropComponent.OnWSSShutdown // (Final|Native|Protected) // @ game+0x1672790
};

// Class Madness.MadMainWidget
// Size: 0x248 (Inherited: 0x238)
struct UMadMainWidget : UMainUIWidget {
	struct UMadCoherentUIGTWidget* CoherentGTWidget; // 0x238(0x08)
	char UnknownData_240[0x8]; // 0x240(0x08)
};

// Class Madness.MadMapPickerComponent
// Size: 0x2e0 (Inherited: 0x180)
struct UMadMapPickerComponent : UActorComponent {
	char UnknownData_180[0x98]; // 0x180(0x98)
	struct TArray<int32_t> ChallengeList; // 0x218(0x10)
	char UnknownData_228[0xb8]; // 0x228(0xb8)

	void OnSecretChallengeChanceDataTableLoaded(struct UDataTable* DataTable); // Function Madness.MadMapPickerComponent.OnSecretChallengeChanceDataTableLoaded // (Final|Native|Private) // @ game+0x1679d90
	void OnRep_ChallengeList(); // Function Madness.MadMapPickerComponent.OnRep_ChallengeList // (Final|Native|Private) // @ game+0x15a7380
	void OnChallengeDataTableLoaded(struct UDataTable* DataTable); // Function Madness.MadMapPickerComponent.OnChallengeDataTableLoaded // (Final|Native|Private) // @ game+0x1679040
	void OnAllTablesPreloaded(); // Function Madness.MadMapPickerComponent.OnAllTablesPreloaded // (Final|Native|Public) // @ game+0x1679020
};

// Class Madness.MadMapVoteComponent
// Size: 0x188 (Inherited: 0x180)
struct UMadMapVoteComponent : UActorComponent {
	char UnknownData_180[0x8]; // 0x180(0x08)
};

// Class Madness.MadMarketingCameraHUD
// Size: 0x3e0 (Inherited: 0x3e0)
struct AMadMarketingCameraHUD : AHUD {
};

// Class Madness.MadMarketingController
// Size: 0x648 (Inherited: 0x648)
struct AMadMarketingController : APlayerController {

	void ServerDestroyCamera(); // Function Madness.MadMarketingController.ServerDestroyCamera // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x167a370
};

// Class Madness.MadMarketingLocalPlayer
// Size: 0x258 (Inherited: 0x258)
struct UMadMarketingLocalPlayer : ULocalPlayer {
};

// Class Madness.MadMarketingPawn
// Size: 0x5a8 (Inherited: 0x378)
struct AMadMarketingPawn : ASpectatorPawn {
	struct UCameraShake* CameraShakeClass; // 0x378(0x08)
	struct UCameraComponent* CameraComp; // 0x380(0x08)
	float BaseRollRate; // 0x388(0x04)
	float BaseFocalDistanceChangeRate; // 0x38c(0x04)
	float BaseFOVChangeRate; // 0x390(0x04)
	char UnknownData_394[0x214]; // 0x394(0x214)

	void MarketingCamera.ToggleMotionBlur(); // Function Madness.MadMarketingPawn.MarketingCamera.ToggleMotionBlur // (Final|Exec|Native|Public) // @ game+0x167b290
	void MarketingCamera.ToggleDoF(); // Function Madness.MadMarketingPawn.MarketingCamera.ToggleDoF // (Final|Exec|Native|Public) // @ game+0x167b270
	void MarketingCamera.Slomo.ToggleReactionToTimeSpeedChange(); // Function Madness.MadMarketingPawn.MarketingCamera.Slomo.ToggleReactionToTimeSpeedChange // (Final|Exec|Native|Public) // @ game+0x167b250
	void MarketingCamera.Movement.TurnInterpSpeed(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.TurnInterpSpeed // (Final|Exec|Native|Public) // @ game+0x167b050
	void MarketingCamera.CameraShake.NumberOfConcurentCameraShakes(int32_t Number); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.NumberOfConcurentCameraShakes // (Final|Exec|Native|Public) // @ game+0x167afd0
	void MarketingCamera.Movement.MoveUpDownInterpSpeed(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.MoveUpDownInterpSpeed // (Final|Exec|Native|Public) // @ game+0x167ae50
	void MarketingCamera.Movement.MoveSideInterpSpeed(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.MoveSideInterpSpeed // (Final|Exec|Native|Public) // @ game+0x167add0
	void MarketingCamera.Movement.Deceleration(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.Deceleration // (Final|Exec|Native|Public) // @ game+0x167af50
	void MarketingCamera.Movement.Acceleration(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.Acceleration // (Final|Exec|Native|Public) // @ game+0x167aed0
	void MarketingCamera.Movement.MoveForwardInterpSpeed(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.MoveForwardInterpSpeed // (Final|Exec|Native|Public) // @ game+0x167ad50
	void MarketingCamera.MotionBlurAmount(float NewSize); // Function Madness.MadMarketingPawn.MarketingCamera.MotionBlurAmount // (Final|Exec|Native|Public) // @ game+0x167acd0
	void MarketingCamera.Movement.LookUpDownInterpSpeed(float Value); // Function Madness.MadMarketingPawn.MarketingCamera.Movement.LookUpDownInterpSpeed // (Final|Exec|Native|Public) // @ game+0x167ac50
	void MarketingCamera.DOF.SensorWidth(float NewSize); // Function Madness.MadMarketingPawn.MarketingCamera.DOF.SensorWidth // (Final|Exec|Native|Public) // @ game+0x167abd0
	void MarketingCamera.DOF.FocalDistance(float NewDistance); // Function Madness.MadMarketingPawn.MarketingCamera.DOF.FocalDistance // (Final|Exec|Native|Public) // @ game+0x167ab50
	void MarketingCamera.DOF.Aperture(F-stop)(float NewSize); // Function Madness.MadMarketingPawn.MarketingCamera.DOF.Aperture(F-stop) // (Final|Exec|Native|Public) // @ game+0x167aad0
	void MarketingCamera.CameraShake.YawAmplituteAndFrequency(float AmpMin, float AmpMax, float FreqMin, float FreqMax); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.YawAmplituteAndFrequency // (Final|Exec|Native|Public) // @ game+0x167a980
	void MarketingCamera.CameraShake.RollAmplituteAndFrequency(float AmpMin, float AmpMax, float FreqMin, float FreqMax); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.RollAmplituteAndFrequency // (Final|Exec|Native|Public) // @ game+0x167a830
	void MarketingCamera.CameraShake.PitchAmplituteAndFrequency(float AmpMin, float AmpMax, float FreqMin, float FreqMax); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.PitchAmplituteAndFrequency // (Final|Exec|Native|Public) // @ game+0x167a6e0
	void MarketingCamera.CameraShake.UpDownAmplituteAndFrequency(float AmpMin, float AmpMax, float FreqMin, float FreqMax); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.UpDownAmplituteAndFrequency // (Final|Exec|Native|Public) // @ game+0x167a590
	void MarketingCamera.CameraShake.SideAmplituteAndFrequency(float AmpMin, float AmpMax, float FreqMin, float FreqMax); // Function Madness.MadMarketingPawn.MarketingCamera.CameraShake.SideAmplituteAndFrequency // (Final|Exec|Native|Public) // @ game+0x167a440
	void MarketingCamera.ParticleEffects.Remove(struct FName EffectId); // Function Madness.MadMarketingPawn.MarketingCamera.ParticleEffects.Remove // (Final|Exec|Native|Public) // @ game+0x167a2f0
	void MarketingCamera.ParticleEffects.RemoveAll(); // Function Madness.MadMarketingPawn.MarketingCamera.ParticleEffects.RemoveAll // (Final|Exec|Native|Public) // @ game+0x167a2d0
	void MarketingCamera.ParticleEffects.Add(struct FName EffectId, bool bAllowDuplicates); // Function Madness.MadMarketingPawn.MarketingCamera.ParticleEffects.Add // (Final|Exec|Native|Public) // @ game+0x1678e70
};

// Class Madness.MadMasteryCardEntry
// Size: 0x4c8 (Inherited: 0x4c0)
struct AMadMasteryCardEntry : AMadItem {
	char UnknownData_4C0_0 : 7; // 0x4c0(0x01)
	bool bInUse : 1; // 0x4c0(0x01)
	char UnknownData_4C1[0x3]; // 0x4c1(0x03)
	int32_t Stacks; // 0x4c4(0x04)

	struct AMadMasteryCardEntry* SpawnMasteryCardEntry(struct UObject* WorldContextObject, struct UMadSkillData* SkillData, struct AMadPlayerCharacter* FutureOwner, bool bInUse, int32_t Stacks); // Function Madness.MadMasteryCardEntry.SpawnMasteryCardEntry // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x167b0d0
	void ServerSetInUse(bool bIsInUse); // Function Madness.MadMasteryCardEntry.ServerSetInUse // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x167a3b0
	void ServerIncrementStacks(); // Function Madness.MadMasteryCardEntry.ServerIncrementStacks // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x167a390
	bool IsInUse(); // Function Madness.MadMasteryCardEntry.IsInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1678f80
	int32_t GetStacks(); // Function Madness.MadMasteryCardEntry.GetStacks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1678f60
	struct UMadSkillData* GetMasteryCardSkillData(); // Function Madness.MadMasteryCardEntry.GetMasteryCardSkillData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1678f40
};

// Class Madness.MadMatchmakingContextPanel
// Size: 0x150 (Inherited: 0x138)
struct UMadMatchmakingContextPanel : UMadContextPanel {
	struct FString UIMatchmakingStateName; // 0x138(0x10)
	char UnknownData_148[0x8]; // 0x148(0x08)
};

// Class Madness.MadMeleeData
// Size: 0x30 (Inherited: 0x28)
struct UMadMeleeData : UObject {
	enum class EMadPlayerMeleeAttackDirection PlayerMeleeAttackDirection; // 0x28(0x01)
	enum class EMadMeleeReactionDistance MeleeReactionDistance; // 0x29(0x01)
	char UnknownData_2A[0x6]; // 0x2a(0x06)
};

// Class Madness.MadMeshShaderEffect
// Size: 0x1b0 (Inherited: 0x1b0)
struct UMadMeshShaderEffect : UMadShaderEffect {
};

// Class Madness.MadMetricsComponent
// Size: 0x6b8 (Inherited: 0x180)
struct UMadMetricsComponent : UActorComponent {
	char UnknownData_180[0x8]; // 0x180(0x08)
	struct FMulticastInlineDelegate OnDataRecived; // 0x188(0x10)
	struct FMadStatArray PlayerStatsChallenge; // 0x198(0x118)
	struct FMadStatArray EnemiesKilledChallenge; // 0x2b0(0x118)
	struct FMadStatArray DamageStatsChallenge; // 0x3c8(0x118)
	struct FMadStatArray AbilityStatsChallenge; // 0x4e0(0x118)
	char UnknownData_5F8[0xc0]; // 0x5f8(0xc0)

	void OnWeaponFired(struct FHitResult Trace, struct TArray<struct ABaseCharacter*> EnemiesHit, enum class EHitMarkerType HitMarkerType); // Function Madness.MadMetricsComponent.OnWeaponFired // (Final|Native|Public|HasOutParms) // @ game+0x1679ed0
	void OnPlayerReloadWeapon(struct AWeapon* PlayerWeapon); // Function Madness.MadMetricsComponent.OnPlayerReloadWeapon // (Final|Native|Public) // @ game+0x1679cd0
	void OnPlayerMultiKill(int32_t ComboNumer); // Function Madness.MadMetricsComponent.OnPlayerMultiKill // (Final|Native|Public) // @ game+0x1679c50
	void OnPlayerExitDBNO(struct FGlobalEventParams InEventParams); // Function Madness.MadMetricsComponent.OnPlayerExitDBNO // (Final|Native|Public) // @ game+0x1679b10
	void OnPlayerEnterDBNO(struct FGlobalEventParams InEventParams); // Function Madness.MadMetricsComponent.OnPlayerEnterDBNO // (Final|Native|Public) // @ game+0x16799d0
	void OnPlayerAdjustIncomingDamage(float ActuralDamage, float IncomingDamage, struct UMadDamageType* DmgType); // Function Madness.MadMetricsComponent.OnPlayerAdjustIncomingDamage // (Final|Native|Public) // @ game+0x16798c0
	void OnEnemyKilledByFakeDeath(struct AActor* EnemyActor, struct UDamageType* DamageTypeClass); // Function Madness.MadMetricsComponent.OnEnemyKilledByFakeDeath // (Final|Native|Public) // @ game+0x1679580
	void OnEnemyKilled(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadMetricsComponent.OnEnemyKilled // (Final|Native|Public) // @ game+0x1679400
	void OnDamageTaken(struct FTakeHitInfo TakeHitInfo); // Function Madness.MadMetricsComponent.OnDamageTaken // (Final|Native|Public) // @ game+0x16792d0
	void OnDamageDone(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadMetricsComponent.OnDamageDone // (Final|Native|Public) // @ game+0x1679150
	void OnCoverStatusChanged(bool bIsInCover); // Function Madness.MadMetricsComponent.OnCoverStatusChanged // (Final|Native|Public) // @ game+0x16790c0
	void OnAblilityActivated(struct UMadSkillData* InAbilityData); // Function Madness.MadMetricsComponent.OnAblilityActivated // (Final|Native|Public) // @ game+0x1678fa0
};

// Class Madness.MadMinigun
// Size: 0x2000 (Inherited: 0x1f38)
struct AMadMinigun : AMadHeavyWeapon {
	float SpinUpDuration; // 0x1f38(0x04)
	float SpinDownDuration; // 0x1f3c(0x04)
	struct USoundCue* SpinUpSound; // 0x1f40(0x08)
	struct USoundCue* SpinDownSound; // 0x1f48(0x08)
	struct USoundCue* SpinLoopSound; // 0x1f50(0x08)
	float HeatingDuration; // 0x1f58(0x04)
	float CoolingDuration; // 0x1f5c(0x04)
	struct FName MuzzleShaderParam; // 0x1f60(0x08)
	float MuzzleShaderValueMult; // 0x1f68(0x04)
	char UnknownData_1F6C[0x4]; // 0x1f6c(0x04)
	struct UParticleSystem* PostFiringSmokePS; // 0x1f70(0x08)
	float PostFiringSmokeHeatRequired; // 0x1f78(0x04)
	float PostFiringSmokeDelay; // 0x1f7c(0x04)
	struct USoundCue* OverheatStartSound; // 0x1f80(0x08)
	struct USoundCue* OverheatStopSound; // 0x1f88(0x08)
	int32_t OverheatBurstRequired; // 0x1f90(0x04)
	float SpinRatePct; // 0x1f94(0x04)
	float HeatPct; // 0x1f98(0x04)
	enum class EMadMinigunSpinState SpinState; // 0x1f9c(0x01)
	char UnknownData_1F9D[0x3]; // 0x1f9d(0x03)
	struct FRotator BarrelRotation; // 0x1fa0(0x0c)
	char UnknownData_1FAC[0x4]; // 0x1fac(0x04)
	struct UForceFeedbackEffect* SpinFeedback; // 0x1fb0(0x08)
	struct UAudioComponent* SpinUpAC; // 0x1fb8(0x08)
	struct UAudioComponent* SpinDownAC; // 0x1fc0(0x08)
	struct UAudioComponent* SpinLoopAC; // 0x1fc8(0x08)
	struct UAudioComponent* OverheatStartAC; // 0x1fd0(0x08)
	struct UAudioComponent* OverheatStopAC; // 0x1fd8(0x08)
	float SpinUpFadeOutDuration; // 0x1fe0(0x04)
	float SpinDownFadeOutDuration; // 0x1fe4(0x04)
	float SpinLoopFadeOutDuration; // 0x1fe8(0x04)
	float OverheatStartFadeOutDuration; // 0x1fec(0x04)
	float OverheatStopFadeOutDuration; // 0x1ff0(0x04)
	char UnknownData_1FF4[0xc]; // 0x1ff4(0x0c)
};

// Class Madness.MadMiningResource
// Size: 0x338 (Inherited: 0x2f8)
struct AMadMiningResource : AMadRandomlyAvailableActor {
	enum class EMadOreSize OreSize; // 0x2f8(0x01)
	char UnknownData_2F9[0x3]; // 0x2f9(0x03)
	struct FName OreType; // 0x2fc(0x08)
	char UnknownData_304_0 : 7; // 0x304(0x01)
	bool bAlwaysSpawn : 1; // 0x304(0x01)
	enum class EMadOreSize MinOreSize; // 0x305(0x01)
	enum class EMadOreSize MaxOreSize; // 0x306(0x01)
	char UnknownData_307[0x1]; // 0x307(0x01)
	struct UAnimMontage* PlayerDrillingMontage; // 0x308(0x08)
	struct UStaticMeshComponent* ResourceStaticMeshComp; // 0x310(0x08)
	struct FVector InteractionRelativeLocation; // 0x318(0x0c)
	float InteractionRadius; // 0x324(0x04)
	float SynchronizationRange; // 0x328(0x04)
	float SynchronizationProximity; // 0x32c(0x04)
	struct UMiningInteractionComponent* InteractionComponent; // 0x330(0x08)

	void OnRep_OreType(); // Function Madness.MadMiningResource.OnRep_OreType // (Final|Native|Protected) // @ game+0x1679d70
	void OnRep_OreSize(); // Function Madness.MadMiningResource.OnRep_OreSize // (Final|Native|Protected) // @ game+0x1679d50
	void OnOreTypeChanged(struct FName OutOreType); // Function Madness.MadMiningResource.OnOreTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnInteractionNotify(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith, struct FName NotifyName); // Function Madness.MadMiningResource.OnInteractionNotify // (Final|Native|Protected) // @ game+0x1679700
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadMiningResource.OnInteracted // (Final|Native|Protected) // @ game+0x1679640
};

// Class Madness.MadModComponent
// Size: 0x1b8 (Inherited: 0x180)
struct UMadModComponent : UActorComponent {
	char UnknownData_180[0x18]; // 0x180(0x18)
	struct TArray<struct UMadChallengeModDataAsset*> PendingMods; // 0x198(0x10)
	struct TArray<struct UMadChallengeModDataAsset*> ActiveMods; // 0x1a8(0x10)
};

// Class Madness.MadPlayerCharacter
// Size: 0x21d0 (Inherited: 0x1400)
struct AMadPlayerCharacter : AMadBaseCharacter {
	char UnknownData_1400[0x68]; // 0x1400(0x68)
	float BaseTurnRate; // 0x1468(0x04)
	float BaseLookUpRate; // 0x146c(0x04)
	float TargetingTurnRate; // 0x1470(0x04)
	float TargetingLookUpRate; // 0x1474(0x04)
	float SprintTurnRate; // 0x1478(0x04)
	float SprintLookUpRate; // 0x147c(0x04)
	float RotationSpeedIncreaseMax; // 0x1480(0x04)
	float RotationSpeedDecreaseFactor; // 0x1484(0x04)
	char UnknownData_1488_0 : 7; // 0x1488(0x01)
	bool bAutoLootOnHold : 1; // 0x1488(0x01)
	char UnknownData_1489[0x3]; // 0x1489(0x03)
	float TimeToExecuteAutoLoot; // 0x148c(0x04)
	char UnknownData_1490[0x58]; // 0x1490(0x58)
	float PreviousTurnAtRate; // 0x14e8(0x04)
	float PreviousLookUpAtRate; // 0x14ec(0x04)
	float AuxiliaryMoveForwardRateMultiplier; // 0x14f0(0x04)
	float AuxiliaryMoveRightRateMultiplier; // 0x14f4(0x04)
	float LastFrameRightTriggerAxisValue; // 0x14f8(0x04)
	float CurrentPressingDistance; // 0x14fc(0x04)
	float CurrentTriggerHoldingDuration; // 0x1500(0x04)
	float CurrentReleasingDistance; // 0x1504(0x04)
	char UnknownData_1508_0 : 7; // 0x1508(0x01)
	bool bIfForceShotNeeded : 1; // 0x1508(0x01)
	char UnknownData_1509_0 : 7; // 0x1509(0x01)
	bool bSwappedInputSticks : 1; // 0x1509(0x01)
	char UnknownData_150A_0 : 7; // 0x150a(0x01)
	bool bLobbyDisableLoadGame : 1; // 0x150a(0x01)
	char UnknownData_150B[0x5]; // 0x150b(0x05)
	struct FMulticastInlineDelegate OnWeaponSwap; // 0x1510(0x10)
	struct FMulticastInlineDelegate OnWeaponSlotChanged; // 0x1520(0x10)
	char UnknownData_1530[0x18]; // 0x1530(0x18)
	struct UMadPlayerHealthBarComponent* PlayerHealthBarComponent; // 0x1548(0x08)
	struct FMulticastInlineDelegate OnPlayerVoteSuccess; // 0x1550(0x10)
	char UnknownData_1560[0x10]; // 0x1560(0x10)
	struct UAudioComponent* LowHealthSound; // 0x1570(0x08)
	char UnknownData_1578[0x5c]; // 0x1578(0x5c)
	float SidearmWeaponSwapDelay; // 0x15d4(0x04)
	struct FWeakObjectPtr<struct AWeapon> CurrWeaponAnimOverride; // 0x15d8(0x08)
	char UnknownData_15E0[0x8]; // 0x15e0(0x08)
	float LastPingObjectivesTime; // 0x15e8(0x04)
	float PingObjectiveDelay; // 0x15ec(0x04)
	char UnknownData_15F0[0x8]; // 0x15f0(0x08)
	struct UBlastRadialDamageComponent* BlastDamageComponent; // 0x15f8(0x08)
	struct UPlayerFollowInputComponent* CurrentFollowComponent; // 0x1600(0x08)
	enum class EMadGender AnimationGender; // 0x1608(0x01)
	char UnknownData_1609[0x7]; // 0x1609(0x07)
	struct FMulticastInlineDelegate OnMovementImpact; // 0x1610(0x10)
	struct FMulticastInlineDelegate OnSpeedChanged; // 0x1620(0x10)
	struct UMadAnimationProxyDataPlayer* AnimationProxyData; // 0x1630(0x08)
	struct FMadAnimProxyOverrideData OverrideData; // 0x1638(0x03)
	char UnknownData_163B[0x5]; // 0x163b(0x05)
	struct UMadPlayerAnimData* DefaultAnimationData; // 0x1640(0x08)
	struct UMadPlayerAnimSet* PlayerAnimationSet; // 0x1648(0x08)
	struct TSet<struct UAnimationAsset*> PreloadedPlayerAnimationAssets; // 0x1650(0x50)
	float MovementSpeedOverriddenTimeDilation; // 0x16a0(0x04)
	char UnknownData_16A4_0 : 7; // 0x16a4(0x01)
	bool bUsesMoveActions : 1; // 0x16a4(0x01)
	char UnknownData_16A5[0x3]; // 0x16a5(0x03)
	struct FMulticastInlineDelegate OnMoveActionTriggered; // 0x16a8(0x10)
	char UnknownData_16B8_0 : 7; // 0x16b8(0x01)
	bool bUseDebugAimOffset : 1; // 0x16b8(0x01)
	char UnknownData_16B9[0x3]; // 0x16b9(0x03)
	struct FRotator DebugAimOffset; // 0x16bc(0x0c)
	struct FRotator ReplicatedBaseAimRotation; // 0x16c8(0x0c)
	char UnknownData_16D4_0 : 7; // 0x16d4(0x01)
	bool bUseReplicatedAimOffset : 1; // 0x16d4(0x01)
	char UnknownData_16D5[0x3]; // 0x16d5(0x03)
	float ServerAORepInterval; // 0x16d8(0x04)
	char UnknownData_16DC[0x4]; // 0x16dc(0x04)
	float MulticastAORepInterval; // 0x16e0(0x04)
	char UnknownData_16E4[0x4]; // 0x16e4(0x04)
	float MinAimOffsetDifferenceToUpdate; // 0x16e8(0x04)
	char UnknownData_16EC_0 : 7; // 0x16ec(0x01)
	bool bWantsAimOffsetTargetPointOverride : 1; // 0x16ec(0x01)
	char UnknownData_16ED[0x3]; // 0x16ed(0x03)
	struct FVector_NetQuantize AimOffsetTargetPointOverride; // 0x16f0(0x0c)
	char UnknownData_16FC[0x4]; // 0x16fc(0x04)
	struct FWeakObjectPtr<struct AActor> ScriptedLookAtActor; // 0x1700(0x08)
	struct FLayeredBlendSetup CurrentLayeredBlendSetup; // 0x1708(0x18)
	char UnknownData_1720_0 : 7; // 0x1720(0x01)
	bool bDisableGroundIKInCover : 1; // 0x1720(0x01)
	char UnknownData_1721[0x17]; // 0x1721(0x17)
	float SprintDelay; // 0x1738(0x04)
	char UnknownData_173C_0 : 7; // 0x173c(0x01)
	bool bSprintOnToggle : 1; // 0x173c(0x01)
	char UnknownData_173D_0 : 7; // 0x173d(0x01)
	bool bHoldingSprintButton : 1; // 0x173d(0x01)
	char UnknownData_173E_0 : 7; // 0x173e(0x01)
	bool bWantsToSprint : 1; // 0x173e(0x01)
	char UnknownData_173F_0 : 7; // 0x173f(0x01)
	bool bAutoRun : 1; // 0x173f(0x01)
	float JumpOverCoverFromMovementFarRadius; // 0x1740(0x04)
	float JumpOverCoverFromMovementNearRadius; // 0x1744(0x04)
	float JumpOverCoverFromStandingRadius; // 0x1748(0x04)
	float MaxAllowedAngleToJumpOverCover; // 0x174c(0x04)
	float JumpOverCoverClampAngle; // 0x1750(0x04)
	char UnknownData_1754[0x4]; // 0x1754(0x04)
	float DelayBetweenQuickMovementsToRoll; // 0x1758(0x04)
	float LastFrameForwardInputValue; // 0x175c(0x04)
	float LastFrameBackwardsInputValue; // 0x1760(0x04)
	float LastFrameRightInputValue; // 0x1764(0x04)
	float LastFrameLeftInputValue; // 0x1768(0x04)
	float KeyboardForwardTimestamp; // 0x176c(0x04)
	float KeyboardLeftTimestamp; // 0x1770(0x04)
	float KeyboardRightTimestamp; // 0x1774(0x04)
	float KeyboardBackTimestamp; // 0x1778(0x04)
	float UseCoverActionTimestamp; // 0x177c(0x04)
	float UseCoverRollDoubleTapDelay; // 0x1780(0x04)
	float bDoubleTapToRoll; // 0x1784(0x04)
	struct FCoverLeaveInfo DesiredCoverLeaveInfo; // 0x1788(0x08)
	float CoverDetectionRadiusInDirection; // 0x1790(0x04)
	float CoverDetectionRadiusProximityAround; // 0x1794(0x04)
	float CoverDetectionRadiusProximityAroundCrosshair; // 0x1798(0x04)
	float CoverDetectionRadiusProximityAroundCrosshairOffset; // 0x179c(0x04)
	float CoverDetectionRadiusProximityAroundCrosshairMaxDistanceFromPlayer; // 0x17a0(0x04)
	float CoverToCoverDetectionRadius; // 0x17a4(0x04)
	float CoverSwapDetectionRadius; // 0x17a8(0x04)
	float CoverSwapDetectionDot; // 0x17ac(0x04)
	float CoverSwapControllerAngleThreshold; // 0x17b0(0x04)
	float CoverDetectionDotBetweenThumbstickAndSlotDirectionThresholdToEnterCover; // 0x17b4(0x04)
	float CoverDetectionDotThumbstick; // 0x17b8(0x04)
	float CoverDetectionDotThumbstickWhenLookingToTheSide; // 0x17bc(0x04)
	float CoverDetectionProximityDot; // 0x17c0(0x04)
	float CoverDetectionMaxDistanceToIgnoreDot; // 0x17c4(0x04)
	float CoverDetectionMaxDistanceToLOS; // 0x17c8(0x04)
	float CoverDetectionDistanceToPlayerWeight; // 0x17cc(0x04)
	float CoverDetectionDotBetweenSlotDirectionAndSearchDirectionWeight; // 0x17d0(0x04)
	float CoverDetectionDotBetweenSlotDirectionAndCameraDirectionWeight; // 0x17d4(0x04)
	float CoverDetectionDistanceToLOSWeight; // 0x17d8(0x04)
	float CoverToCoverCollisionCheckOriginOffset; // 0x17dc(0x04)
	float NarrowPathCoverToCoverCollisionCheckOriginOffset; // 0x17e0(0x04)
	float FromCrosshairCoverToCoverCollisionCheckOriginOffset; // 0x17e4(0x04)
	float NonBoundarySlotCoverToCoverSprintOutMaxAngle; // 0x17e8(0x04)
	float CoverDetectionDistToLOSToConsiderOtherPlayerAsObstructing; // 0x17ec(0x04)
	char UnknownData_17F0_0 : 7; // 0x17f0(0x01)
	bool bIgnoreThumbstickForCoverSelection : 1; // 0x17f0(0x01)
	char UnknownData_17F1[0x3]; // 0x17f1(0x03)
	float CoverEnterDirectionPrioritizeLookDirectionTolerance; // 0x17f4(0x04)
	enum class EAutoCoverMode AutoCoverMode; // 0x17f8(0x01)
	char UnknownData_17F9[0x3]; // 0x17f9(0x03)
	float AutoCoverDistance; // 0x17fc(0x04)
	char UnknownData_1800[0x2]; // 0x1800(0x02)
	char UnknownData_1802_0 : 7; // 0x1802(0x01)
	bool bCoverToCoverMovement : 1; // 0x1802(0x01)
	char UnknownData_1803_0 : 7; // 0x1803(0x01)
	bool bCoverToCoverMarker : 1; // 0x1803(0x01)
	char UnknownData_1804_0 : 7; // 0x1804(0x01)
	bool bAlwaysShowCoverMarker : 1; // 0x1804(0x01)
	char UnknownData_1805[0xb]; // 0x1805(0x0b)
	float CoverMarkerUpdatePeriod; // 0x1810(0x04)
	float CoverToCoverMovementHoldDuration; // 0x1814(0x04)
	char UnknownData_1818[0x8]; // 0x1818(0x08)
	struct FMulticastInlineDelegate OnCoverStatusChange; // 0x1820(0x10)
	struct FMulticastInlineDelegate OnCoverToCoverIconShow; // 0x1830(0x10)
	struct FMulticastInlineDelegate OnCoverToCoverIconHide; // 0x1840(0x10)
	char UnknownData_1850[0x8]; // 0x1850(0x08)
	struct FMulticastInlineDelegate OnCoverToCoverIconHoldBegin; // 0x1858(0x10)
	struct FMulticastInlineDelegate OnCoverToCoverIconHoldEnd; // 0x1868(0x10)
	struct FCoverMarkerCoverPeek CoverMarkerCoverPeek; // 0x1878(0x38)
	char UnknownData_18B0_0 : 7; // 0x18b0(0x01)
	bool LastCoverFoundStatus : 1; // 0x18b0(0x01)
	char UnknownData_18B1_0 : 7; // 0x18b1(0x01)
	bool LastInCoverPosition : 1; // 0x18b1(0x01)
	char UnknownData_18B2[0x2]; // 0x18b2(0x02)
	struct FRotator LastInputRotation; // 0x18b4(0x0c)
	enum class ECoverLeaveType LastLeaveType; // 0x18c0(0x01)
	char UnknownData_18C1[0x7]; // 0x18c1(0x07)
	struct FOccupiedCoverInfo OccupiedCover; // 0x18c8(0x10)
	struct FOccupiedCoverInfo LastOccupiedCover; // 0x18d8(0x10)
	struct FOccupiedCoverInfo PreviousCoverInfo; // 0x18e8(0x10)
	struct FOccupiedCoverInfo RememberedCoverInfo; // 0x18f8(0x10)
	char UnknownData_1908[0x8]; // 0x1908(0x08)
	struct UMadPlayerMovementComponent* MadMovementComponent; // 0x1910(0x08)
	struct UMadPlayerCoverMovementComponent* MadCoverMovementComponent; // 0x1918(0x08)
	struct UMadPlayerAnimInstance* MadAnimInstance; // 0x1920(0x08)
	struct UMadCoverHintComponent* CoverSlipHintComponent; // 0x1928(0x08)
	struct UMadCoverHintComponent* CoverVaultHintComponent; // 0x1930(0x08)
	struct TMap<struct FNameWrapper, int32_t> DefaultResources; // 0x1938(0x50)
	struct UMadArmorAssets* ArmorAssets; // 0x1988(0x08)
	char UnknownData_1990[0x18]; // 0x1990(0x18)
	struct FMulticastInlineDelegate OnInventoryItemsTakenApart; // 0x19a8(0x10)
	struct FMulticastInlineDelegate OnInventoryItemSold; // 0x19b8(0x10)
	struct FMulticastInlineDelegate OnInventoryResourceChanged; // 0x19c8(0x10)
	struct FMulticastInlineDelegate OnItemPickedUp; // 0x19d8(0x10)
	struct FMulticastInlineDelegate OnItemCollected; // 0x19e8(0x10)
	struct FMulticastInlineDelegate OnShardDrained; // 0x19f8(0x10)
	struct FMulticastInlineDelegate OnArmorAssetLoaded; // 0x1a08(0x10)
	struct FMulticastInlineDelegate OnInventoryItemEnhanced; // 0x1a18(0x10)
	struct FMulticastInlineDelegate OnInventoryItemModChanged; // 0x1a28(0x10)
	struct FMulticastInlineDelegate OnInventoryItemConfigVariantChanged; // 0x1a38(0x10)
	struct FMulticastInlineDelegate OnInventoryItemLeveled; // 0x1a48(0x10)
	struct FMulticastInlineDelegate OnInventoryItemImproved; // 0x1a58(0x10)
	struct FMulticastInlineDelegate OnInventoryItemEquiped; // 0x1a68(0x10)
	struct FMulticastInlineDelegate OnInventoryItemBuy; // 0x1a78(0x10)
	struct FMulticastInlineDelegate OnInventoryItemSell; // 0x1a88(0x10)
	struct FMulticastInlineDelegate OnItemDropComplete; // 0x1a98(0x10)
	struct FMulticastInlineDelegate OnOriginalItemBeforeUpgrade; // 0x1aa8(0x10)
	struct UMadModManager* ModManager; // 0x1ab8(0x08)
	struct FWeakObjectPtr<struct AMadWeapon> HolsteredWeapon; // 0x1ac0(0x08)
	char UnknownData_1AC8[0x8]; // 0x1ac8(0x08)
	struct AMadConvoy* Convoy; // 0x1ad0(0x08)
	struct UMadLevelingComponent* LevelingComponent; // 0x1ad8(0x08)
	struct FCharacterCustomiationData CustomizationData; // 0x1ae0(0x0b)
	char UnknownData_1AEB[0x5]; // 0x1aeb(0x05)
	struct FMulticastInlineDelegate OnCustomizationDataReplicated; // 0x1af0(0x10)
	struct FMulticastInlineDelegate OnCustomizationRuleReplicated; // 0x1b00(0x10)
	struct FTimerHandle CustomizationTimerHandle; // 0x1b10(0x08)
	char UnknownData_1B18_0 : 7; // 0x1b18(0x01)
	bool bCanReload : 1; // 0x1b18(0x01)
	enum class EMadItemSlot PrevWeaponSlot; // 0x1b19(0x01)
	char UnknownData_1B1A[0x16]; // 0x1b1a(0x16)
	struct FMadnessMontageCameraOverrideData MontageCameraOverride; // 0x1b30(0x40)
	float ObstacleTraceZOffset; // 0x1b70(0x04)
	float ObstacleTraceLength; // 0x1b74(0x04)
	float DelayBeforeCancelingWantsToFire; // 0x1b78(0x04)
	char UnknownData_1B7C[0xc]; // 0x1b7c(0x0c)
	struct AWeapon* WeaponOverride; // 0x1b88(0x08)
	struct FWeakObjectPtr<struct AActor> MagnetTarget; // 0x1b90(0x08)
	struct FVector MagnetTargetOffset; // 0x1b98(0x0c)
	float MaxHealthPercentageForMaxTrauma; // 0x1ba4(0x04)
	struct AMadLookAtVolume* ActiveLookAtVolume; // 0x1ba8(0x08)
	char UnknownData_1BB0_0 : 7; // 0x1bb0(0x01)
	bool bEnablePitchCentering : 1; // 0x1bb0(0x01)
	char UnknownData_1BB1[0x3]; // 0x1bb1(0x03)
	float PitchCenteringAfterSprintStartDelay; // 0x1bb4(0x04)
	float PitchCenteringAfterCameraMovementDelay; // 0x1bb8(0x04)
	float PitchCenteringSlopeMultiplier; // 0x1bbc(0x04)
	struct UMadSpringArmComponent* CameraBoomComponent; // 0x1bc0(0x08)
	struct UCameraComponent* FollowCameraComponent; // 0x1bc8(0x08)
	struct UPostProcessComponent* PostProcessComponent; // 0x1bd0(0x08)
	struct UHitReactionComponent* HitReactionComponent; // 0x1bd8(0x08)
	char UnknownData_1BE0[0x8]; // 0x1be0(0x08)
	struct FWeakObjectPtr<struct AActor> TargetUnderCrosshair; // 0x1be8(0x08)
	struct FWeakObjectPtr<struct UHealthBarComponent> TargetHealthBarComponent; // 0x1bf0(0x08)
	char UnknownData_1BF8[0x20]; // 0x1bf8(0x20)
	struct FMulticastInlineDelegate OnMultiKill; // 0x1c18(0x10)
	char UnknownData_1C28_0 : 7; // 0x1c28(0x01)
	bool bMovingBackwards : 1; // 0x1c28(0x01)
	char UnknownData_1C29_0 : 7; // 0x1c29(0x01)
	bool bInCombat : 1; // 0x1c29(0x01)
	char UnknownData_1C2A_0 : 7; // 0x1c2a(0x01)
	bool bStrafeMovementOutOfCombat : 1; // 0x1c2a(0x01)
	char UnknownData_1C2B_0 : 7; // 0x1c2b(0x01)
	bool bUseControllerRotationInCombatState : 1; // 0x1c2b(0x01)
	float SwitchToBackwardsThreshold; // 0x1c2c(0x04)
	float SwitchOutOfBackwardsThreshold; // 0x1c30(0x04)
	float DurationToRemainInCombat; // 0x1c34(0x04)
	float StartedCombatTimeStamp; // 0x1c38(0x04)
	float DelayBeforeFiringIfJustEnteredCombatAndStandingStill; // 0x1c3c(0x04)
	float DelayBeforeFiringIfJustEnteredCombatAndMoving; // 0x1c40(0x04)
	float MinWeaponDirectioDotToAllowFireInCover; // 0x1c44(0x04)
	struct FMulticastInlineDelegate OnCombatPermitModeChanged; // 0x1c48(0x10)
	enum class ECombatModePermit CombatPermitMode; // 0x1c58(0x01)
	char UnknownData_1C59[0x3]; // 0x1c59(0x03)
	struct FGameplayTag ForceInCombatTag; // 0x1c5c(0x08)
	struct FGameplayTag ForceNoCombatTag; // 0x1c64(0x08)
	struct FGameplayTag ForceNoLowCoverTag; // 0x1c6c(0x08)
	struct FGameplayTag ForceNoHighCoverTag; // 0x1c74(0x08)
	struct FGameplayTag ForceNoCoverTag; // 0x1c7c(0x08)
	struct FGameplayTag ForceNoCoverMovementTag; // 0x1c84(0x08)
	struct FGameplayTag ForceInCoverTag; // 0x1c8c(0x08)
	struct FGameplayTag ForceNoMoveActionTag; // 0x1c94(0x08)
	struct FGameplayTag ForceNoTargetingTag; // 0x1c9c(0x08)
	struct FGameplayTag ForceNoCameraMirrorTag; // 0x1ca4(0x08)
	float DamageReductionAngleMin; // 0x1cac(0x04)
	float DamageReductionAngleMax; // 0x1cb0(0x04)
	float DamageReductionFraction; // 0x1cb4(0x04)
	char UnknownData_1CB8_0 : 7; // 0x1cb8(0x01)
	bool bDamageReductionEvenIfTargeting : 1; // 0x1cb8(0x01)
	char UnknownData_1CB9[0x7]; // 0x1cb9(0x07)
	struct TArray<struct UObject*> DamageReductionIgnoredDamageTypes; // 0x1cc0(0x10)
	float MinDistanceToIgnoreFrontalDamageInCover; // 0x1cd0(0x04)
	float DotToIgnoreFrontalDamageInCover; // 0x1cd4(0x04)
	char UnknownData_1CD8[0x20]; // 0x1cd8(0x20)
	struct UMadAbilitySet* SaveFromDeathAbilitySet; // 0x1cf8(0x08)
	struct FMulticastInlineDelegate OnExperienceGained; // 0x1d00(0x10)
	char UnknownData_1D10[0x10]; // 0x1d10(0x10)
	char UnknownData_1D20_0 : 7; // 0x1d20(0x01)
	bool bAbilityGamepadSkill3Pressed : 1; // 0x1d20(0x01)
	char UnknownData_1D21_0 : 7; // 0x1d21(0x01)
	bool bDebugAbilityGamepadSkillInput : 1; // 0x1d21(0x01)
	char UnknownData_1D22[0x2]; // 0x1d22(0x02)
	float AbilityGamepadSkillInputThreshold; // 0x1d24(0x04)
	char UnknownData_1D28[0x8]; // 0x1d28(0x08)
	struct FMulticastInlineDelegate OnActiveskillSlotAttempt; // 0x1d30(0x10)
	struct FMulticastInlineDelegate OnSkillStarted; // 0x1d40(0x10)
	struct FMulticastInlineDelegate OnSkillFinished; // 0x1d50(0x10)
	struct FMulticastInlineDelegate OnSkillActivated; // 0x1d60(0x10)
	struct FMulticastInlineDelegate OnSkillActivateFailCost; // 0x1d70(0x10)
	struct FMulticastInlineDelegate OnSkillCooldownApplied; // 0x1d80(0x10)
	struct FMulticastInlineDelegate OnSkillAvailabilityChanged; // 0x1d90(0x10)
	struct FMulticastInlineDelegate OnSkillDurationApplied; // 0x1da0(0x10)
	struct FMulticastInlineDelegate OnStopSkillDuration; // 0x1db0(0x10)
	struct FMulticastInlineDelegate OnStopSkillCooldown; // 0x1dc0(0x10)
	struct FMulticastInlineDelegate OnSkillMessage; // 0x1dd0(0x10)
	struct FMulticastInlineDelegate OnSkillNotification; // 0x1de0(0x10)
	struct FMulticastInlineDelegate OnSkillBarRefreshRequest; // 0x1df0(0x10)
	struct FMulticastInlineDelegate OnSkillDamageAbsorbed; // 0x1e00(0x10)
	struct FMulticastInlineDelegate OnSpecificAbilityEffectApplied; // 0x1e10(0x10)
	struct FMulticastInlineDelegate OnRicochetEffectApplied; // 0x1e20(0x10)
	struct FMulticastInlineDelegate OnSlowTrapBulletsCaught; // 0x1e30(0x10)
	char UnknownData_1E40[0x10]; // 0x1e40(0x10)
	struct UMadDurationAttributeSet* DurationAttributeSet; // 0x1e50(0x08)
	struct UMadCooldownAttributeSet* CooldownAttributeSet; // 0x1e58(0x08)
	struct UMadCustomAttributeSet* CustomAttributeSet; // 0x1e60(0x08)
	struct UMadConvoyAttributeSet* ConvoyAttributeSet; // 0x1e68(0x08)
	struct UMadModsAttributeSet* MadModAttributeSet; // 0x1e70(0x08)
	struct UMadKeywordAttributeSet* KeywordAttributeSet; // 0x1e78(0x08)
	float CurrentGlobalCooldownMultiplierBonus; // 0x1e80(0x04)
	char UnknownData_1E84[0x4]; // 0x1e84(0x04)
	struct TArray<struct FMadActiveSkill> ActiveSkills; // 0x1e88(0x10)
	struct TMap<struct FName, struct FMadPassiveSkill> PassiveSkills; // 0x1e98(0x50)
	char UnknownData_1EE8_0 : 7; // 0x1ee8(0x01)
	bool bEnableOutOfCombatHealthRegen : 1; // 0x1ee8(0x01)
	char UnknownData_1EE9_0 : 7; // 0x1ee9(0x01)
	bool bEnableInCombatHealthRegen : 1; // 0x1ee9(0x01)
	char UnknownData_1EEA[0x2]; // 0x1eea(0x02)
	float TimeSinceLastConstantHealthRegen; // 0x1eec(0x04)
	float TimeSinceLastInCombatHealthRegen; // 0x1ef0(0x04)
	float TimeSinceLastOutOfCombatHealthRegen; // 0x1ef4(0x04)
	float TimeSinceLastShieldDepletion; // 0x1ef8(0x04)
	char UnknownData_1EFC[0x1c]; // 0x1efc(0x1c)
	struct UMadPlayerCharacterCustomState* CharacterCustomState; // 0x1f18(0x08)
	char UnknownData_1F20[0x41]; // 0x1f20(0x41)
	char UnknownData_1F61_0 : 7; // 0x1f61(0x01)
	bool bAllowEnterDownButNotOutState : 1; // 0x1f61(0x01)
	char UnknownData_1F62[0x6]; // 0x1f62(0x06)
	struct UMadPlayerAnimData* DownButNotOutAnimOverride; // 0x1f68(0x08)
	struct UAnimMontage* DownButNotOutMontage; // 0x1f70(0x08)
	struct UInteractionComponent* RevivePlayerInteraction; // 0x1f78(0x08)
	struct UWaterSplashComponent* WaterSplashComponent; // 0x1f80(0x08)
	char UnknownData_1F88[0x18]; // 0x1f88(0x18)
	struct UMadPlayerUIModel* UIModel; // 0x1fa0(0x08)
	struct UMadEmotesUIModel* EmotesUIModel; // 0x1fa8(0x08)
	struct UMadActionPromptUIModel* ActionPromptUIModel; // 0x1fb0(0x08)
	char UnknownData_1FB8[0x20]; // 0x1fb8(0x20)
	char UnknownData_1FD8_0 : 7; // 0x1fd8(0x01)
	bool bInitialReplicationFinished : 1; // 0x1fd8(0x01)
	char UnknownData_1FD9_0 : 7; // 0x1fd9(0x01)
	bool bIsReadyForCoopPlay : 1; // 0x1fd9(0x01)
	char UnknownData_1FDA[0x2]; // 0x1fda(0x02)
	float NoDamageAfterJoinedDuration; // 0x1fdc(0x04)
	float NoPerceptionAfterJoinedDuration; // 0x1fe0(0x04)
	char UnknownData_1FE4[0xc]; // 0x1fe4(0x0c)
	struct UEnvQuery* TeleportEnvQuery; // 0x1ff0(0x08)
	char UnknownData_1FF8[0x8]; // 0x1ff8(0x08)
	SoftClassProperty BaseEmoteAbility; // 0x2000(0x28)
	struct FGameplayTag EmoteTag; // 0x2028(0x08)
	struct UMadEmoteSet* DefaultOwnedEmoteSet; // 0x2030(0x08)
	struct TArray<struct UMadEmoteData*> OwnedEmotes; // 0x2038(0x10)
	char UnknownData_2048[0x8]; // 0x2048(0x08)
	struct TArray<struct UMadEmoteData*> FavouriteEmotes; // 0x2050(0x10)
	struct UMadEmoteData* QuickEmote; // 0x2060(0x08)
	struct FMulticastInlineDelegate OnChangeInEmotesDelegate; // 0x2068(0x10)
	struct UMadPlayerCharacterData* PlayerData; // 0x2078(0x08)
	char UnknownData_2080[0x8]; // 0x2080(0x08)
	struct USkeletalMeshComponent* DrillMeshComp; // 0x2088(0x08)
	char UnknownData_2090[0x20]; // 0x2090(0x20)
	char UnknownData_20B0_0 : 7; // 0x20b0(0x01)
	bool bIsInDialogue : 1; // 0x20b0(0x01)
	char UnknownData_20B1[0x17]; // 0x20b1(0x17)
	struct AActor* AbilityTarget; // 0x20c8(0x08)
	char UnknownData_20D0[0x10]; // 0x20d0(0x10)
	struct FApproachData CurrentApproachData; // 0x20e0(0x38)
	struct AWeapon* WeaponToEquipOnEnd; // 0x2118(0x08)
	struct TArray<struct FTriggerVolumesEventQueueData> TriggerEventQueue; // 0x2120(0x10)
	char UnknownData_2130[0x60]; // 0x2130(0x60)
	struct FTransform ViewpointTransform; // 0x2190(0x30)
	float ViewpointFoV; // 0x21c0(0x04)
	char UnknownData_21C4[0xc]; // 0x21c4(0x0c)

	void UpdateHealthBarHealth(float OldValue, float CurrentValue); // Function Madness.MadPlayerCharacter.UpdateHealthBarHealth // (Final|Native|Private) // @ game+0x16a0280
	void TryRestoreRememberedCover(); // Function Madness.MadPlayerCharacter.TryRestoreRememberedCover // (Final|Native|Public|BlueprintCallable) // @ game+0x16a0260
	void TriggerTriggersOnPathBetweenPoints(struct FVector PathStart, struct FVector PathEnd, bool bShouldTriggerOverlapEventsOnSelf); // Function Madness.MadPlayerCharacter.TriggerTriggersOnPathBetweenPoints // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x16a0130
	void PCF.Debug.TriggerHostMigration(); // Function Madness.MadPlayerCharacter.PCF.Debug.TriggerHostMigration // (Final|Exec|Native|Public) // @ game+0x16a0110
	void ToggleAimAssist(); // Function Madness.MadPlayerCharacter.ToggleAimAssist // (Final|Exec|Native|Public) // @ game+0x16a00f0
	void StartApproach(struct FApproachData InApproachData); // Function Madness.MadPlayerCharacter.StartApproach // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x16a0020
	void SlotActiveSkill(enum class EMadnessActiveSkillSlots InSlot, struct UMadSkillData* InSkill); // Function Madness.MadPlayerCharacter.SlotActiveSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x169ff60
	void SkillsUpdateAfterEquipmentChange(); // Function Madness.MadPlayerCharacter.SkillsUpdateAfterEquipmentChange // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169ff40
	void SetWeaponSwapEnabled(bool bEnabled); // Function Madness.MadPlayerCharacter.SetWeaponSwapEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169feb0
	void SetWeaponPassFilters(struct TArray<struct AMadWeapon*> AvailableWeaponTypes); // Function Madness.MadPlayerCharacter.SetWeaponPassFilters // (Final|Native|Public|BlueprintCallable) // @ game+0x169fd70
	void SetSwappedInputSticks(bool bSwapped); // Function Madness.MadPlayerCharacter.SetSwappedInputSticks // (Final|Native|Public|BlueprintCallable) // @ game+0x169fcf0
	void SetRenderCustomDepth(bool bValue, bool bForce); // Function Madness.MadPlayerCharacter.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x169fc20
	void SetQuickEmote(struct UMadEmoteData* InEmoteData); // Function Madness.MadPlayerCharacter.SetQuickEmote // (Final|Native|Public|BlueprintCallable) // @ game+0x169fba0
	void SetOutOfCombatHealthRegenEnabled(bool bEnabled); // Function Madness.MadPlayerCharacter.SetOutOfCombatHealthRegenEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169fb10
	void SetMaxAllowedSpeed(enum class EPlayerMovementSpeed MoveSpeed); // Function Madness.MadPlayerCharacter.SetMaxAllowedSpeed // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x169fa90
	void SetMagnetTarget(struct AActor* Target, struct FVector Offset); // Function Madness.MadPlayerCharacter.SetMagnetTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x169f9c0
	void SetInCombatHealthRegenEnabled(bool bEnabled); // Function Madness.MadPlayerCharacter.SetInCombatHealthRegenEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169f930
	void SetIKEnabled(bool bEnable); // Function Madness.MadPlayerCharacter.SetIKEnabled // (Final|Exec|Native|Public) // @ game+0x169f8a0
	void SetForceWalk(); // Function Madness.MadPlayerCharacter.SetForceWalk // (Final|Exec|Native|Public) // @ game+0x169f880
	void SetForceStop(); // Function Madness.MadPlayerCharacter.SetForceStop // (Final|Exec|Native|Public) // @ game+0x169f860
	void SetFireWeapon(bool bInFireWeapon); // Function Madness.MadPlayerCharacter.SetFireWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x169f7d0
	void SetFavouriteEmoteAt(struct UMadEmoteData* InEmoteData, int32_t Index); // Function Madness.MadPlayerCharacter.SetFavouriteEmoteAt // (Final|Native|Public|BlueprintCallable) // @ game+0x169f710
	void SetFaceCameraDirection(bool bFaceCameraDirection); // Function Madness.MadPlayerCharacter.SetFaceCameraDirection // (Final|Native|Public|BlueprintCallable) // @ game+0x169f680
	void SetDoubleTapToRoll(bool bEnable); // Function Madness.MadPlayerCharacter.SetDoubleTapToRoll // (Final|Exec|Native|Public) // @ game+0x169f5f0
	void SetCombatModeForced(bool bForced); // Function Madness.MadPlayerCharacter.SetCombatModeForced // (Final|Native|Public|BlueprintCallable) // @ game+0x169f560
	void SetCombatModeAllowed(bool bAllowed); // Function Madness.MadPlayerCharacter.SetCombatModeAllowed // (Final|Native|Public|BlueprintCallable) // @ game+0x169f4d0
	void SetColorFromConvoy(int32_t InColorIdx, int32_t InDecalIdx); // Function Madness.MadPlayerCharacter.SetColorFromConvoy // (Final|Native|Protected) // @ game+0x169f410
	void SetCameraDist(float DistanceMod); // Function Madness.MadPlayerCharacter.SetCameraDist // (Final|Exec|Native|Public) // @ game+0x169f390
	void SetAutomonousTickPose(bool bAutomonousTickPose); // Function Madness.MadPlayerCharacter.SetAutomonousTickPose // (Final|Native|Public|BlueprintCallable) // @ game+0x169f300
	void SetAutoCoverMode(enum class EAutoCoverMode Mode); // Function Madness.MadPlayerCharacter.SetAutoCoverMode // (Final|Exec|Native|Public) // @ game+0x169f280
	void SetAllowEnterDownButNotOutState(bool bAllowEnterDBNO); // Function Madness.MadPlayerCharacter.SetAllowEnterDownButNotOutState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169f1f0
	void SetAimOffsetTargetPointOverride(bool bInEnable, struct FVector InLocation); // Function Madness.MadPlayerCharacter.SetAimOffsetTargetPointOverride // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x169f110
	void SetAimAssistEnabled(bool InEnable); // Function Madness.MadPlayerCharacter.SetAimAssistEnabled // (Final|Exec|Native|Public) // @ game+0x169f080
	void SetAbilityTarget(struct AActor* Target); // Function Madness.MadPlayerCharacter.SetAbilityTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x169f000
	void SetAbilityStartLocation(struct FVector Location, bool bSnapToNavmesh); // Function Madness.MadPlayerCharacter.SetAbilityStartLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x169ef20
	void ServerUpdateViewpoint(float NewViewpointFoV); // Function Madness.MadPlayerCharacter.ServerUpdateViewpoint // (Final|Net|Native|Event|Private|NetServer) // @ game+0x169eea0
	void ServerUpdateDesiredCoverLeaveInfo(struct FCoverLeaveInfo LeaveInfo); // Function Madness.MadPlayerCharacter.ServerUpdateDesiredCoverLeaveInfo // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x169ee10
	void ServerTeleportToPlayer(struct FString PlayerName); // Function Madness.MadPlayerCharacter.ServerTeleportToPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169ed70
	void ServerSlotActiveSkill(enum class EMadnessActiveSkillSlots InSlot, struct UMadSkillData* InSkill); // Function Madness.MadPlayerCharacter.ServerSlotActiveSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x169ec70
	void ServerSetWantsToSprint(bool bNewWantsToSprint); // Function Madness.MadPlayerCharacter.ServerSetWantsToSprint // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169ebe0
	void ServerSetInCombat(bool bNewInCombat); // Function Madness.MadPlayerCharacter.ServerSetInCombat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15aa680
	void ServerSetCurrentAnimMontagePosition(float InPosition); // Function Madness.MadPlayerCharacter.ServerSetCurrentAnimMontagePosition // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169eb60
	void ServerSendAimOffset(struct FRotator Rotator); // Function Madness.MadPlayerCharacter.ServerSendAimOffset // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x169eab0
	void ServerSelectWeapon(enum class EMadItemSlot FromSlot); // Function Madness.MadPlayerCharacter.ServerSelectWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x169ea30
	void ServerRequestReviveChatter(); // Function Madness.MadPlayerCharacter.ServerRequestReviveChatter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x15b4a00
	void ServerRemovePassiveSkill(struct FName SkillID); // Function Madness.MadPlayerCharacter.ServerRemovePassiveSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169e9a0
	void ServerRemoveDownButNotOutState(struct AMadPlayerCharacter* Reviver); // Function Madness.MadPlayerCharacter.ServerRemoveDownButNotOutState // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169e910
	void ServerPlayEmote(struct UMadEmoteData* InEmoteData); // Function Madness.MadPlayerCharacter.ServerPlayEmote // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x169e880
	void ServerPawnInitializedForCoopPlay(); // Function Madness.MadPlayerCharacter.ServerPawnInitializedForCoopPlay // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1579020
	void ServerNotifyPlayerHasChangedDialogueState(bool bIsInDialogueState); // Function Madness.MadPlayerCharacter.ServerNotifyPlayerHasChangedDialogueState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169e7f0
	void ServerNotifyDBNOStateChanged(bool bIsInDBNOState); // Function Madness.MadPlayerCharacter.ServerNotifyDBNOStateChanged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169e760
	void ServerNotifyCoverFacingChanged(enum class ECoverMovementDirection NewCoverFacing); // Function Madness.MadPlayerCharacter.ServerNotifyCoverFacingChanged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169e6e0
	void ServerMoveToLocationInterpolated(struct FVector InLocation); // Function Madness.MadPlayerCharacter.ServerMoveToLocationInterpolated // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x169e660
	void ServerLoadEmotesFromSaveStruct(struct FMadEmoteSaveData InStruct); // Function Madness.MadPlayerCharacter.ServerLoadEmotesFromSaveStruct // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169e3d0
	void ServerLoadCustomiationData(struct FCharacterCustomiationData SavedData); // Function Madness.MadPlayerCharacter.ServerLoadCustomiationData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169e320
	void ServerLeaveCover(struct FCoverLeaveInfo LeaveInfo); // Function Madness.MadPlayerCharacter.ServerLeaveCover // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x169e290
	void ServerKillEnemies(); // Function Madness.MadPlayerCharacter.ServerKillEnemies // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x169e270
	void ServerKillCharacter(); // Function Madness.MadPlayerCharacter.ServerKillCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169e250
	void ServerForceUpdateForAllPlayers(); // Function Madness.MadPlayerCharacter.ServerForceUpdateForAllPlayers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169e230
	void ServerFaceRotationInterpolated(struct FRotator InRotation); // Function Madness.MadPlayerCharacter.ServerFaceRotationInterpolated // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x169e1b0
	void ServerEquipWeaponOverride(struct FWeaponNameWrapper WeaponName, float Damage); // Function Madness.MadPlayerCharacter.ServerEquipWeaponOverride // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169e0c0
	void ServerEnterCover(struct ACover* NewCover, int32_t NewSlot, enum class ECoverMovementDirection NewFacing, struct FCoverEnterInfo EnterInfo); // Function Madness.MadPlayerCharacter.ServerEnterCover // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x169df50
	void ServerConditionalClearCharacterCustomState(struct UMadPlayerCharacterCustomState* StateClass); // Function Madness.MadPlayerCharacter.ServerConditionalClearCharacterCustomState // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169dec0
	void ServerCompleteObjectives(bool bOnlyTrackedQuest); // Function Madness.MadPlayerCharacter.ServerCompleteObjectives // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169de30
	void ServerClearWeaponOverride(); // Function Madness.MadPlayerCharacter.ServerClearWeaponOverride // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x15a7320
	void ServerClearCharacterCustomState(); // Function Madness.MadPlayerCharacter.ServerClearCharacterCustomState // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169de10
	void ServerApplyCustomizedLook(struct FCharacterCustomiationData Data); // Function Madness.MadPlayerCharacter.ServerApplyCustomizedLook // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x169dd60
	void ServerAddPassiveSkill(struct FName SkillID, float InSkillLevel, struct UMadSkillData* InSkill); // Function Madness.MadPlayerCharacter.ServerAddPassiveSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x169dc60
	void SelectWeapon(enum class EMadItemSlot FromSlot); // Function Madness.MadPlayerCharacter.SelectWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x169dbe0
	void ResetHealthMitigationCooldowns(); // Function Madness.MadPlayerCharacter.ResetHealthMitigationCooldowns // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169dbc0
	void RememberCurrentCover(bool bSuppressLocomotionAnimationChange); // Function Madness.MadPlayerCharacter.RememberCurrentCover // (Final|Native|Public|BlueprintCallable) // @ game+0x169db30
	void PutCharacterIntoDownButNotOutState(struct AActor* DamageCauser); // Function Madness.MadPlayerCharacter.PutCharacterIntoDownButNotOutState // (Final|Native|Protected|BlueprintCallable) // @ game+0x169dab0
	void PlayQuickEmote(); // Function Madness.MadPlayerCharacter.PlayQuickEmote // (Final|Native|Public|BlueprintCallable) // @ game+0x169da90
	void PlayOwnedEmote(struct UMadEmoteData* InEmoteData); // Function Madness.MadPlayerCharacter.PlayOwnedEmote // (Final|Native|Public|BlueprintCallable) // @ game+0x169da10
	void PlayMoveAction(enum class EPlayerMoveAction MoveAction, float MoveAngle, struct UObject* OptionalActionParameter); // Function Madness.MadPlayerCharacter.PlayMoveAction // (Final|BlueprintAuthorityOnly|Exec|Native|Public|BlueprintCallable) // @ game+0x169d900
	void PlayFavouriteEmote(int32_t EmoteIndex); // Function Madness.MadPlayerCharacter.PlayFavouriteEmote // (Final|Native|Public|BlueprintCallable) // @ game+0x169d880
	void PlayAnimOnApproached(struct FName WeaponName); // Function Madness.MadPlayerCharacter.PlayAnimOnApproached // (Final|Native|Private) // @ game+0x169d800
	enum class ECoverMovementDirection PickEnteringCoverFacing(struct ACover* Cover, int32_t Slot); // Function Madness.MadPlayerCharacter.PickEnteringCoverFacing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169d740
	enum class ECoverMovementDirection PickEnterCoverFacing(struct FCoverPickInfo PickInfo); // Function Madness.MadPlayerCharacter.PickEnterCoverFacing // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169d650
	struct ACover* PickCoverToUse(int32_t PreferredSlotIdx, struct FCoverSearchParams CoverSearchParams); // Function Madness.MadPlayerCharacter.PickCoverToUse // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169d4e0
	void PickCoverAroundPlayer(struct FCoverPickInfo OutPickInfo, enum class ECoverUseReason UseReason); // Function Madness.MadPlayerCharacter.PickCoverAroundPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169d3c0
	void PickCover(struct FCoverSearchParams CoverSearchParams, struct FCoverPickInfo OutPickInfo); // Function Madness.MadPlayerCharacter.PickCover // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169d210
	void OpenEmoteWindow(); // Function Madness.MadPlayerCharacter.OpenEmoteWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x169d1f0
	void OnWeaponAmmoCountChanged(); // Function Madness.MadPlayerCharacter.OnWeaponAmmoCountChanged // (Final|Native|Private) // @ game+0x169d1d0
	void OnShowTeammateHealthBarsChanged(bool bVisible); // Function Madness.MadPlayerCharacter.OnShowTeammateHealthBarsChanged // (Final|Native|Private) // @ game+0x169d080
	void OnReviveStarted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacter.OnReviveStarted // (Final|Native|Public) // @ game+0x169cfc0
	void OnReviveInterrupted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacter.OnReviveInterrupted // (Final|Native|Public) // @ game+0x169cf00
	void OnRep_WeaponOverride(); // Function Madness.MadPlayerCharacter.OnRep_WeaponOverride // (Final|Native|Protected) // @ game+0x169cee0
	void OnRep_OccupiedCover(); // Function Madness.MadPlayerCharacter.OnRep_OccupiedCover // (Final|Native|Public) // @ game+0x169cec0
	void OnRep_IsReadyForCoopPlay(); // Function Madness.MadPlayerCharacter.OnRep_IsReadyForCoopPlay // (Final|Native|Private) // @ game+0x169cea0
	void OnRep_Emotes(); // Function Madness.MadPlayerCharacter.OnRep_Emotes // (Final|Native|Public) // @ game+0x169ce80
	void OnRep_CustomizationData(); // Function Madness.MadPlayerCharacter.OnRep_CustomizationData // (Final|Native|Protected) // @ game+0x169ce60
	void OnRep_Convoy(); // Function Madness.MadPlayerCharacter.OnRep_Convoy // (Final|Native|Protected) // @ game+0x169ce40
	void OnRep_CharacterCustomState(struct UMadPlayerCharacterCustomState* OldState); // Function Madness.MadPlayerCharacter.OnRep_CharacterCustomState // (Final|Native|Private) // @ game+0x169cdc0
	void OnRep_ActiveSkills(struct TArray<struct FMadActiveSkill> OldActiveSkills); // Function Madness.MadPlayerCharacter.OnRep_ActiveSkills // (Final|Native|Private) // @ game+0x169ccd0
	void OnLocalCharacterPossessedDel__DelegateSignature(struct AMadPlayerCharacter* InCharacter); // DelegateFunction Madness.MadPlayerCharacter.OnLocalCharacterPossessedDel__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnLevelingPathUpdated(); // Function Madness.MadPlayerCharacter.OnLevelingPathUpdated // (Final|Native|Public) // @ game+0x169ccb0
	void OnInventoryUIActionHandler(enum class EMadInventoryCustomizationUpdateFilter UpdateFilter); // Function Madness.MadPlayerCharacter.OnInventoryUIActionHandler // (Final|Native|Private) // @ game+0x169cc30
	void OnInventoryChanged(int32_t ChangeBitFlags); // Function Madness.MadPlayerCharacter.OnInventoryChanged // (Final|Native|Protected) // @ game+0x169cbb0
	void OnInputTypeChanged(enum class EInputType NewInputType); // Function Madness.MadPlayerCharacter.OnInputTypeChanged // (Final|Native|Protected) // @ game+0x169cb30
	void OnHistoryProcessedInputStateChanged(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerCharacter.OnHistoryProcessedInputStateChanged // (Final|Native|Public|HasOutParms) // @ game+0x169ca90
	void OnHeroTreeChanged(struct FName UpgradeName, bool bAdded); // Function Madness.MadPlayerCharacter.OnHeroTreeChanged // (Final|Native|Protected) // @ game+0x169c9c0
	void OnHealthChanged(float OldValue, float CurrentValue); // Function Madness.MadPlayerCharacter.OnHealthChanged // (Final|Native|Private) // @ game+0x169c900
	void OnCustomizationTextureLoaded(struct UTexture2D* Texture); // Function Madness.MadPlayerCharacter.OnCustomizationTextureLoaded // (Final|Native|Protected) // @ game+0x169c880
	void OnCustomizationMeshLoaded(struct USkeletalMesh* SkeletalMesh, struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Madness.MadPlayerCharacter.OnCustomizationMeshLoaded // (Final|Native|Protected) // @ game+0x169c7c0
	void OnCustomizationMaterialLoaded(struct UMaterialInstance* Material, bool bIsLiteMaterial); // Function Madness.MadPlayerCharacter.OnCustomizationMaterialLoaded // (Final|Native|Protected) // @ game+0x169c6f0
	void OnCharacterLeavesWater(); // Function Madness.MadPlayerCharacter.OnCharacterLeavesWater // (Final|Native|Private) // @ game+0x169c6d0
	void OnCharacterEnterShallowWater(); // Function Madness.MadPlayerCharacter.OnCharacterEnterShallowWater // (Final|Native|Private) // @ game+0x169c6b0
	void OnCharacterEnterDeepWater(); // Function Madness.MadPlayerCharacter.OnCharacterEnterDeepWater // (Final|Native|Private) // @ game+0x169c690
	void OnActiveSkillChanged(struct UMadSkillData* Skill, enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadPlayerCharacter.OnActiveSkillChanged // (Final|Native|Protected) // @ game+0x169c500
	void NotifySpecificAbilityEffectApplied(struct AMadBaseCharacter* Enemy, struct UMadGameplayAbility* Ability, struct UMadGameplayEffect* Effect, struct FGameplayTag Tag); // Function Madness.MadPlayerCharacter.NotifySpecificAbilityEffectApplied // (Final|Native|Public|BlueprintCallable) // @ game+0x169c3b0
	void NotifySkillDamageAbsorbed(struct UMadGameplayAbility* Ability, float DamageAbsorbed); // Function Madness.MadPlayerCharacter.NotifySkillDamageAbsorbed // (Final|Native|Public|BlueprintCallable) // @ game+0x169c2e0
	void NotifyItemDropComplete(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.NotifyItemDropComplete // (Final|Native|Private) // @ game+0x169c260
	void NetMulticastNotifyPlayerHasChangedDialogueState(bool bIsInDialogueState); // Function Madness.MadPlayerCharacter.NetMulticastNotifyPlayerHasChangedDialogueState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x169c1d0
	void NetMulticastNotifyPlayerHasBeenRevived(struct AMadPlayerCharacter* RevivedPlayer, struct AMadPlayerCharacter* Reviver); // Function Madness.MadPlayerCharacter.NetMulticastNotifyPlayerHasBeenRevived // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x169c100
	void NetMulticastNotifyDBNOStateChanged(bool bIsInDBNOState); // Function Madness.MadPlayerCharacter.NetMulticastNotifyDBNOStateChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x169c070
	void MulticastRequestReviveChatter(); // Function Madness.MadPlayerCharacter.MulticastRequestReviveChatter // (Net|Native|Event|NetMulticast|Public) // @ game+0x169c050
	void MulticastFaceRotationInterpolated(struct FRotator InRotation); // Function Madness.MadPlayerCharacter.MulticastFaceRotationInterpolated // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x169bfd0
	void LookAt(struct AActor* LookAtActor); // Function Madness.MadPlayerCharacter.LookAt // (Final|Native|Public|BlueprintCallable) // @ game+0x169bed0
	void LoadEmotesFromSaveStruct(struct FMadEmoteSaveData InStruct); // Function Madness.MadPlayerCharacter.LoadEmotesFromSaveStruct // (Final|Native|Public|BlueprintCallable) // @ game+0x169bc50
	void KillEnemies(); // Function Madness.MadPlayerCharacter.KillEnemies // (Final|Exec|Native|Protected) // @ game+0xe8aaf0
	void K2_OnReadyForCoopPlayClient(); // Function Madness.MadPlayerCharacter.K2_OnReadyForCoopPlayClient // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnReadyForCoopPlay(); // Function Madness.MadPlayerCharacter.K2_OnReadyForCoopPlay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void JoinFriendAsParty(struct FString FriendName); // Function Madness.MadPlayerCharacter.JoinFriendAsParty // (Final|Exec|Native|Public) // @ game+0x15bf8a0
	bool IsTemporarilyRemovedFromCoverByAbility(bool bOutAbilityWantsToSuppressLocomotionAnimationChange); // Function Madness.MadPlayerCharacter.IsTemporarilyRemovedFromCoverByAbility // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169bbb0
	bool IsSlottedSkillOnCooldown(enum class EMadnessActiveSkillSlots InSlot); // Function Madness.MadPlayerCharacter.IsSlottedSkillOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169bb20
	bool IsSlottedSkillActive(enum class EMadnessActiveSkillSlots InSlot); // Function Madness.MadPlayerCharacter.IsSlottedSkillActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ba90
	bool IsSkillInActiveSlot(struct UMadSkillData* InSkill, enum class EMadnessActiveSkillSlots OutSlot); // Function Madness.MadPlayerCharacter.IsSkillInActiveSlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x169b9c0
	bool IsReadyForCoopPlay(); // Function Madness.MadPlayerCharacter.IsReadyForCoopPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b970
	bool IsLeavingCover(); // Function Madness.MadPlayerCharacter.IsLeavingCover // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b910
	bool IsInDownButNotOutState(); // Function Madness.MadPlayerCharacter.IsInDownButNotOutState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b8e0
	bool IsFaceCameraDirectionSet(); // Function Madness.MadPlayerCharacter.IsFaceCameraDirectionSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b8b0
	bool IsEnteringCover(); // Function Madness.MadPlayerCharacter.IsEnteringCover // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b880
	bool IsEmoteOwned(struct UMadEmoteData* InEmoteData); // Function Madness.MadPlayerCharacter.IsEmoteOwned // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b7e0
	bool IsCoverNearby(); // Function Madness.MadPlayerCharacter.IsCoverNearby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b7b0
	void InventoryResourceChanged(struct FName Name, int32_t Delta); // Function Madness.MadPlayerCharacter.InventoryResourceChanged // (Final|Native|Private) // @ game+0x169b6f0
	void InventoryOriginalItem(struct AMadItem* Item); // Function Madness.MadPlayerCharacter.InventoryOriginalItem // (Final|Native|Private) // @ game+0x169b670
	void InventoryItemsTakenApart(struct TArray<struct AMadItem*> InItems); // Function Madness.MadPlayerCharacter.InventoryItemsTakenApart // (Final|Native|Private|HasOutParms) // @ game+0x169b5c0
	void InventoryItemSold(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.InventoryItemSold // (Final|Native|Private) // @ game+0x169b540
	void InventoryItemSell(); // Function Madness.MadPlayerCharacter.InventoryItemSell // (Final|Native|Private) // @ game+0x169b520
	void InventoryItemModChanged(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.InventoryItemModChanged // (Final|Native|Private) // @ game+0x169b4a0
	void InventoryItemLeveled(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.InventoryItemLeveled // (Final|Native|Private) // @ game+0x169b420
	void InventoryItemImproved(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.InventoryItemImproved // (Final|Native|Private) // @ game+0x169b3a0
	void InventoryItemEquiped(struct AMadItem* InItem, enum class EMadItemSlot InSlot); // Function Madness.MadPlayerCharacter.InventoryItemEquiped // (Final|Native|Private) // @ game+0x169b2e0
	void InventoryItemEnhanced(struct AMadItem* InItem, bool bModSelectionAvailable); // Function Madness.MadPlayerCharacter.InventoryItemEnhanced // (Final|Native|Private) // @ game+0x169b210
	void InventoryItemConfigVariantChanged(struct AMadItem* InItem); // Function Madness.MadPlayerCharacter.InventoryItemConfigVariantChanged // (Final|Native|Private) // @ game+0x169b190
	void InventoryItemBuy(); // Function Madness.MadPlayerCharacter.InventoryItemBuy // (Final|Native|Private) // @ game+0x169b170
	void HandleCharacterHealthChanged(float OldValue, float CurrentValue); // Function Madness.MadPlayerCharacter.HandleCharacterHealthChanged // (Final|Native|Private) // @ game+0x169b0b0
	void GetUnboundEmotes(struct TArray<struct UMadEmoteData*> OutEmotes); // Function Madness.MadPlayerCharacter.GetUnboundEmotes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x169afd0
	enum class EMadnessSkillPath GetSelectedClass(); // Function Madness.MadPlayerCharacter.GetSelectedClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169aee0
	struct UMadEmoteData* GetQuickEmote(); // Function Madness.MadPlayerCharacter.GetQuickEmote // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x169aeb0
	enum class EMadGender GetPlayerGender(); // Function Madness.MadPlayerCharacter.GetPlayerGender // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ae80
	struct TArray<struct UMadEmoteData*> GetOwnedEmotes(); // Function Madness.MadPlayerCharacter.GetOwnedEmotes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x169ae40
	enum class EPlayerMovementSpeed GetMaxAllowedSpeed(); // Function Madness.MadPlayerCharacter.GetMaxAllowedSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ae10
	struct FVector GetMagnetTargetLocation(); // Function Madness.MadPlayerCharacter.GetMagnetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x169add0
	struct AActor* GetMagnetTarget(); // Function Madness.MadPlayerCharacter.GetMagnetTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ad90
	struct UMadLevelingComponent* GetLevelingComponent(); // Function Madness.MadPlayerCharacter.GetLevelingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ac00
	struct TArray<struct UMadEmoteData*> GetFavouriteEmotes(); // Function Madness.MadPlayerCharacter.GetFavouriteEmotes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x169abc0
	struct UMadEmoteData* GetFavouriteEmoteAt(int32_t Index); // Function Madness.MadPlayerCharacter.GetFavouriteEmoteAt // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x169ab30
	struct TArray<struct FString> GetEmotesFromBackendItems(struct TArray<struct FItemData> ItemDatas); // Function Madness.MadPlayerCharacter.GetEmotesFromBackendItems // (Final|Native|Public|HasOutParms) // @ game+0x169a970
	struct FMadEmoteSaveData GetEmoteSaveStruct(); // Function Madness.MadPlayerCharacter.GetEmoteSaveStruct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a8b0
	struct UMadPlayerCharacterCustomState* GetCustomState(); // Function Madness.MadPlayerCharacter.GetCustomState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a850
	struct FCharacterCustomiationData GetCustomizationData(); // Function Madness.MadPlayerCharacter.GetCustomizationData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a870
	enum class EPlayerMoveAction GetCurrentMoveAction(); // Function Madness.MadPlayerCharacter.GetCurrentMoveAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a820
	float GetCrosshairOpacity(); // Function Madness.MadPlayerCharacter.GetCrosshairOpacity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a7f0
	bool GetCoverLeaveAction(enum class ECoverLeaveType CoverLeaveInfo); // Function Madness.MadPlayerCharacter.GetCoverLeaveAction // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a750
	struct AMadConvoy* GetConvoy(); // Function Madness.MadPlayerCharacter.GetConvoy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a730
	int32_t GetCombatPower(); // Function Madness.MadPlayerCharacter.GetCombatPower // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a700
	bool GetAutomonousTickPose(); // Function Madness.MadPlayerCharacter.GetAutomonousTickPose // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a6d0
	struct UMadSkillData* GetActiveSkillInSlot(enum class EMadnessActiveSkillSlots InSlot); // Function Madness.MadPlayerCharacter.GetActiveSkillInSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x169a610
	struct FVector GetAbilityTargetLocation(); // Function Madness.MadPlayerCharacter.GetAbilityTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a520
	struct AActor* GetAbilityTarget(); // Function Madness.MadPlayerCharacter.GetAbilityTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a500
	struct FVector GetAbilityStartLocation(); // Function Madness.MadPlayerCharacter.GetAbilityStartLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a4c0
	void ForgetRememberedCover(); // Function Madness.MadPlayerCharacter.ForgetRememberedCover // (Final|Native|Public|BlueprintCallable) // @ game+0x169a4a0
	void EquipWeaponOverride(struct FWeaponNameWrapper WeaponName, float Damage); // Function Madness.MadPlayerCharacter.EquipWeaponOverride // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x169a390
	void DisableMontageAbilityCameraOverride(); // Function Madness.MadPlayerCharacter.DisableMontageAbilityCameraOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x169a370
	void DebugIgnoreCoverCollisionCheck(); // Function Madness.MadPlayerCharacter.DebugIgnoreCoverCollisionCheck // (Final|Exec|Native|Public) // @ game+0x169a350
	void DebugCoverDetection(); // Function Madness.MadPlayerCharacter.DebugCoverDetection // (Final|Exec|Native|Public) // @ game+0x169a330
	void CloseEmoteWindow(); // Function Madness.MadPlayerCharacter.CloseEmoteWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x169a310
	void ClientStartMoveActionUnreliable(struct AMadPlayerCharacter* ActingPawn, enum class EPlayerMoveAction MoveAction, struct FMoveActionStartData MoveActionData, struct TArray<enum class None> ActionSerializedData); // Function Madness.MadPlayerCharacter.ClientStartMoveActionUnreliable // (Net|Native|Event|Public|NetClient) // @ game+0x169a180
	void ClientStartMoveAction(struct AMadPlayerCharacter* ActingPawn, enum class EPlayerMoveAction MoveAction, struct FMoveActionStartData MoveActionData, struct TArray<enum class None> ActionSerializedData); // Function Madness.MadPlayerCharacter.ClientStartMoveAction // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699ff0
	void ClientShowNewEmoteReceived(struct UMadEmoteData* NewEmote); // Function Madness.MadPlayerCharacter.ClientShowNewEmoteReceived // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1699f60
	void ClientSetPhantomStabberMarkOnTarget(struct AMadBaseAICharacter* InTarget, bool bShow); // Function Madness.MadPlayerCharacter.ClientSetPhantomStabberMarkOnTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699e90
	void ClientPossessed(); // Function Madness.MadPlayerCharacter.ClientPossessed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699e70
	void ClientPlayMoveActionLocal(enum class EPlayerMoveAction MoveAction, float MoveAngle, struct UObject* OptionalActionParameter); // Function Madness.MadPlayerCharacter.ClientPlayMoveActionLocal // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1699d70
	void ClientOnWeaponSwap(struct FMadWeaponsHudData WeaponsHud); // Function Madness.MadPlayerCharacter.ClientOnWeaponSwap // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1699cc0
	void ClientOnSessionOwnerChanged_Debug(struct FName SessionName, bool bHostOwner, int32_t HostMigrationPort); // Function Madness.MadPlayerCharacter.ClientOnSessionOwnerChanged_Debug // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699bb0
	void ClientOnItemCollected(struct AMadItem* Item); // Function Madness.MadPlayerCharacter.ClientOnItemCollected // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1699b20
	void ClientNotifyReviveStarted(struct ABaseCharacter* InteractingPawn); // Function Madness.MadPlayerCharacter.ClientNotifyReviveStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699a90
	void ClientNotifyReviveInterrupted(struct ABaseCharacter* InteractingPawn); // Function Madness.MadPlayerCharacter.ClientNotifyReviveInterrupted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699a00
	void ClientMakeUIModel(); // Function Madness.MadPlayerCharacter.ClientMakeUIModel // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16999e0
	void ClientInventoryItemsTakenApart(struct TArray<struct AMadItem*> InItems); // Function Madness.MadPlayerCharacter.ClientInventoryItemsTakenApart // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1699940
	void ClientFollowCharacter(struct Acharacter* character); // Function Madness.MadPlayerCharacter.ClientFollowCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16998b0
	void ClientFinishMoveActionUnreliable(struct AMadPlayerCharacter* ActingPawn, enum class EPlayerMoveAction MoveAction); // Function Madness.MadPlayerCharacter.ClientFinishMoveActionUnreliable // (Net|Native|Event|Public|NetClient) // @ game+0x16997e0
	void ClientFinishMoveAction(struct AMadPlayerCharacter* ActingPawn, enum class EPlayerMoveAction MoveAction); // Function Madness.MadPlayerCharacter.ClientFinishMoveAction // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1699710
	void ClientEnterCoverCancel(); // Function Madness.MadPlayerCharacter.ClientEnterCoverCancel // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x16996f0
	void ClientBlueprintEnterSpecificCover(struct FCoverPickInfo CoverPickInfo, bool bPlayAnimation, bool bForce); // Function Madness.MadPlayerCharacter.ClientBlueprintEnterSpecificCover // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1699580
	void ClientBlueprintEnterCover(struct FCoverSearchParams CoverSearchParams, bool bPlayAnimation, bool bForce); // Function Madness.MadPlayerCharacter.ClientBlueprintEnterCover // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x16993c0
	void ClearWeaponOverride(); // Function Madness.MadPlayerCharacter.ClearWeaponOverride // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1699360
	void ClearForceWalk(); // Function Madness.MadPlayerCharacter.ClearForceWalk // (Final|Exec|Native|Public) // @ game+0x1699340
	void ClearForceStop(); // Function Madness.MadPlayerCharacter.ClearForceStop // (Final|Exec|Native|Public) // @ game+0x1699320
	bool CanShowCrosshairDot(); // Function Madness.MadPlayerCharacter.CanShowCrosshairDot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16992f0
	bool CanPlayEmote(); // Function Madness.MadPlayerCharacter.CanPlayEmote // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16992c0
	bool CanEnterDownButNotOutState(); // Function Madness.MadPlayerCharacter.CanEnterDownButNotOutState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1699230
	void BlueprintPlayMoveAction(enum class EPlayerMoveAction MoveAction, struct FMoveActionStartData MoveActionData); // Function Madness.MadPlayerCharacter.BlueprintPlayMoveAction // (Final|BlueprintAuthorityOnly|Exec|Native|Public|BlueprintCallable) // @ game+0x1699120
	void BlueprintLeaveCover(bool bPlayAnimation); // Function Madness.MadPlayerCharacter.BlueprintLeaveCover // (Final|Native|Public|BlueprintCallable) // @ game+0x1699090
	void BlueprintFaceCoverBoundary(); // Function Madness.MadPlayerCharacter.BlueprintFaceCoverBoundary // (Final|Native|Public|BlueprintCallable) // @ game+0x1699070
	void BlueprintEnterSpecificCover(struct ACover* Cover, int32_t SlotIdx, bool bPlayAnimation, bool bForce); // Function Madness.MadPlayerCharacter.BlueprintEnterSpecificCover // (Final|Native|Public|BlueprintCallable) // @ game+0x1698f20
	void BlueprintEnterCover(struct FCoverSearchParams CoverSearchParams, bool bPlayAnimation, bool bForce); // Function Madness.MadPlayerCharacter.BlueprintEnterCover // (Final|Native|Public|BlueprintCallable) // @ game+0x1698d70
	void BlueprintEnterACover(struct FCoverPickInfo CoverPickInfo, bool bPlayAnimation, bool bForce); // Function Madness.MadPlayerCharacter.BlueprintEnterACover // (Final|Native|Public|BlueprintCallable) // @ game+0x1698c00
	void BlueprintClientPlayMoveActionLocal(enum class EPlayerMoveAction MoveAction, struct FMoveActionStartData MoveActionData); // Function Madness.MadPlayerCharacter.BlueprintClientPlayMoveActionLocal // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1698ae0
	void ApplySkinColorToItems(bool bUseHeadTint); // Function Madness.MadPlayerCharacter.ApplySkinColorToItems // (Final|Native|Public|BlueprintCallable) // @ game+0x1698a50
	void ApplyDefaultHead(); // Function Madness.MadPlayerCharacter.ApplyDefaultHead // (Final|Native|Public|BlueprintCallable) // @ game+0x1698a30
	void AddOwnedEmote(struct UMadEmoteData* InEmoteData); // Function Madness.MadPlayerCharacter.AddOwnedEmote // (Final|Native|Public|BlueprintCallable) // @ game+0x16989b0
	void ActivateAbility(enum class EMadnessActiveSkillSlots SlotToActivate, float HoldDuration); // Function Madness.MadPlayerCharacter.ActivateAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x16988f0
};

// Class Madness.MadModManager
// Size: 0x130 (Inherited: 0x28)
struct UMadModManager : UObject {
	struct TMap<enum class EMadModTriggerType, struct FMadModList> TriggerMods; // 0x28(0x50)
	char UnknownData_78[0x50]; // 0x78(0x50)
	struct TArray<struct FMadModPassive> ModPassives; // 0xc8(0x10)
	char UnknownData_D8_0 : 7; // 0xd8(0x01)
	bool bAllModsDisabled : 1; // 0xd8(0x01)
	char UnknownData_D9[0x7]; // 0xd9(0x07)
	struct TMap<struct FName, struct FMadModCooldownData> RemovedModCooldownMap; // 0xe0(0x50)

	void OnWeaponReloadBegin(struct AWeapon* PlayerWeapon); // Function Madness.MadModManager.OnWeaponReloadBegin // (Final|Native|Protected) // @ game+0x167a250
	void OnWeaponReload(struct AWeapon* PlayerWeapon); // Function Madness.MadModManager.OnWeaponReload // (Final|Native|Protected) // @ game+0x167a1d0
	void OnWeaponFiredFull(struct TArray<struct FWeaponHit> Hits, enum class EHitMarkerType HitMarkerType); // Function Madness.MadModManager.OnWeaponFiredFull // (Final|Native|Protected|HasOutParms) // @ game+0x167a0b0
	void OnShieldChanged(float LastShield, float CurrentShield); // Function Madness.MadModManager.OnShieldChanged // (Final|Native|Protected) // @ game+0x1679e10
	void OnMoveActionTriggered(enum class EPlayerMoveAction MoveAction, float Angle); // Function Madness.MadModManager.OnMoveActionTriggered // (Final|Native|Protected) // @ game+0x1679800
};

// Class Madness.MadModsAttributeSet
// Size: 0x40 (Inherited: 0x30)
struct UMadModsAttributeSet : UAttributeSet {
	float ArmorModSkillDamageMultiplier; // 0x30(0x04)
	float ArmorModSkillHealMultiplier; // 0x34(0x04)
	float WeaponModChanceMultiplier; // 0x38(0x04)
	char UnknownData_3C[0x4]; // 0x3c(0x04)
};

// Class Madness.MadMortarAreaDamageProjectile
// Size: 0x628 (Inherited: 0x5c0)
struct AMadMortarAreaDamageProjectile : AMadProjectile {
	struct USoundBase* ThrowProjectileSound; // 0x5c0(0x08)
	float DamageAreaSize; // 0x5c8(0x04)
	float DamageAreaTimeInterval; // 0x5cc(0x04)
	float DamageAreaBaseDamage; // 0x5d0(0x04)
	char UnknownData_5D4[0x4]; // 0x5d4(0x04)
	struct FScalableFloat DamageTable; // 0x5d8(0x20)
	float DamageAreaLifeTime; // 0x5f8(0x04)
	char UnknownData_5FC[0x4]; // 0x5fc(0x04)
	struct UDamageType* DamageAreaDamageType; // 0x600(0x08)
	struct UParticleSystemComponent* DamageAreaParticle; // 0x608(0x08)
	struct UParticleSystemComponent* Marker; // 0x610(0x08)
	char UnknownData_618[0x10]; // 0x618(0x10)

	void SetupMortarProjectile(struct UParticleSystemComponent* InMarker, struct FVector NewVelocity, float InBaseDamage, float InExplosionRadius); // Function Madness.MadMortarAreaDamageProjectile.SetupMortarProjectile // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x167f3e0
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function Madness.MadMortarAreaDamageProjectile.OnHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x167efd0
};

// Class Madness.MadMortarProjectile
// Size: 0x608 (Inherited: 0x5c0)
struct AMadMortarProjectile : AMadProjectile {
	struct UDamageType* RadialDamageTypeClass; // 0x5c0(0x08)
	enum class ECollisionChannel DamagePreventionChannel; // 0x5c8(0x01)
	char UnknownData_5C9[0xf]; // 0x5c9(0x0f)
	struct UParticleSystemComponent* MarkerComponent; // 0x5d8(0x08)
	struct FVector TargetLocation; // 0x5e0(0x0c)
	char UnknownData_5EC[0x4]; // 0x5ec(0x04)
	struct UParticleSystemComponent* MortarHitExplosion; // 0x5f0(0x08)
	struct UAudioComponent* Audio_Projectile_Loop; // 0x5f8(0x08)
	struct UParticleSystem* Marker; // 0x600(0x08)
};

// Class Madness.MadMountedGun
// Size: 0x3a8 (Inherited: 0x2f0)
struct AMadMountedGun : AActor {
	struct USceneComponent* SceneRoot; // 0x2f0(0x08)
	struct USceneComponent* TopPlatform; // 0x2f8(0x08)
	struct USkeletalMeshComponent* Gun; // 0x300(0x08)
	struct UInteractionComponent* InteractionEnter; // 0x308(0x08)
	struct UInteractionComponent* InteractionExit; // 0x310(0x08)
	struct FNameWrapper Weapon; // 0x318(0x10)
	struct FMadMountedGunAxisSettings YawSettings; // 0x328(0x1c)
	struct FMadMountedGunAxisSettings PitchSettings; // 0x344(0x1c)
	float ClientInterpSpeed; // 0x360(0x04)
	char UnknownData_364[0x4]; // 0x364(0x04)
	struct TArray<struct UAnimMontage*> GunRecoils; // 0x368(0x10)
	struct FRotator CurrentRotation; // 0x378(0x0c)
	struct FRotator TargetRotation; // 0x384(0x0c)
	int32_t CurrentGunRecoil; // 0x390(0x04)
	char UnknownData_394[0x14]; // 0x394(0x14)

	void ServerSetTargetRotation(struct FRotator Rot); // Function Madness.MadMountedGun.ServerSetTargetRotation // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x15c22a0
	void OnFired(struct FHitResult Trace, struct TArray<struct ABaseCharacter*> EnemiesHit, enum class EHitMarkerType HitMarkerType); // Function Madness.MadMountedGun.OnFired // (Final|Native|Protected|HasOutParms) // @ game+0x167edf0
	void MulticastOnPreExit(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadMountedGun.MulticastOnPreExit // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x167ed20
	void MulticastOnPreEnter(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadMountedGun.MulticastOnPreEnter // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x167ec50
	void MulticastOnPostExit(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadMountedGun.MulticastOnPostExit // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x167eb80
	void MulticastOnPostEnter(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadMountedGun.MulticastOnPostEnter // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x167eab0
};

// Class Madness.MadMoveAction
// Size: 0x1c0 (Inherited: 0x28)
struct UMadMoveAction : UObject {
	enum class EMoveActionAnimationType AnimationType; // 0x28(0x01)
	enum class EPlayerMoveAction MoveActionType; // 0x29(0x01)
	enum class EMoveActionInstigationMode InstigationMode; // 0x2a(0x01)
	char UnknownData_2B_0 : 7; // 0x2b(0x01)
	bool bAllowOnSimulatedProxy : 1; // 0x2b(0x01)
	enum class EMoveActionMontageStyleType MontageStyleType; // 0x2c(0x01)
	enum class EMoveActionMontageDirectionalityType MontageDirectionalityType; // 0x2d(0x01)
	enum class EMoveActionMontageDirectionalBackalityType MontageDirectionalBackalityType; // 0x2e(0x01)
	enum class EMoveActionMontageLoopType MontageLoopType; // 0x2f(0x01)
	char UnknownData_30_0 : 7; // 0x30(0x01)
	bool bUsesCustomGroup : 1; // 0x30(0x01)
	char UnknownData_31_0 : 7; // 0x31(0x01)
	bool bAllowActionMontageStopping : 1; // 0x31(0x01)
	char UnknownData_32[0x6]; // 0x32(0x06)
	struct FGameplayTagContainer TagsToApplyToOwner; // 0x38(0x20)
	struct FGameplayTag BlockingTag; // 0x58(0x08)
	struct FInputThumbstickDirections ActionAngle; // 0x60(0xa0)
	struct UObject* OptionalActionParameter; // 0x100(0x08)
	float LoopedLengthFailsafe; // 0x108(0x04)
	float DurationIfNoMontage; // 0x10c(0x04)
	float MaxProgressAllowingSpeedChange; // 0x110(0x04)
	char UnknownData_114_0 : 7; // 0x114(0x01)
	bool bInterruptOnCombatStart : 1; // 0x114(0x01)
	char UnknownData_115_0 : 7; // 0x115(0x01)
	bool bInterruptOnCombatEnd : 1; // 0x115(0x01)
	char UnknownData_116_0 : 7; // 0x116(0x01)
	bool bUseRotationFix : 1; // 0x116(0x01)
	char UnknownData_117_0 : 7; // 0x117(0x01)
	bool bApplyRotationFixDuringBlendIn : 1; // 0x117(0x01)
	enum class EMoveActionRotationFixApplianceType RotationFixAppliance; // 0x118(0x01)
	enum class EMoveActionRotationFixApplianceMode RotationFixApplianceMode; // 0x119(0x01)
	char UnknownData_11A_0 : 7; // 0x11a(0x01)
	bool bShouldLockMovement : 1; // 0x11a(0x01)
	char UnknownData_11B_0 : 7; // 0x11b(0x01)
	bool bShouldMovementLockAffectWeaponFire : 1; // 0x11b(0x01)
	float ProgressToStartRotationFix; // 0x11c(0x04)
	float ProgressToCompleteRotationFix; // 0x120(0x04)
	float UnlockMovementOnlyIfAngleDiffGreater; // 0x124(0x04)
	char UnknownData_128_0 : 7; // 0x128(0x01)
	bool bShouldBeInterruptedIfMovementLockBreaks : 1; // 0x128(0x01)
	char UnknownData_129_0 : 7; // 0x129(0x01)
	bool bUseControllerRotation : 1; // 0x129(0x01)
	char UnknownData_12A_0 : 7; // 0x12a(0x01)
	bool bOrientRotationToMovement : 1; // 0x12a(0x01)
	char UnknownData_12B[0x1]; // 0x12b(0x01)
	float ProgressToAllowLocomotionAnimationChange; // 0x12c(0x04)
	char UnknownData_130_0 : 7; // 0x130(0x01)
	bool bSyncLocomotionAnimationPosition : 1; // 0x130(0x01)
	char UnknownData_131_0 : 7; // 0x131(0x01)
	bool bUpdateMontageOnAnimDataChange : 1; // 0x131(0x01)
	char UnknownData_132_0 : 7; // 0x132(0x01)
	bool bDisableMovementReplication : 1; // 0x132(0x01)
	char UnknownData_133_0 : 7; // 0x133(0x01)
	bool bDisableRootMotion : 1; // 0x133(0x01)
	char UnknownData_134_0 : 7; // 0x134(0x01)
	bool bSyncWorldRotation : 1; // 0x134(0x01)
	char UnknownData_135_0 : 7; // 0x135(0x01)
	bool bKeepFiringAimOffset : 1; // 0x135(0x01)
	char UnknownData_136_0 : 7; // 0x136(0x01)
	bool bKeepIdleAimOffset : 1; // 0x136(0x01)
	char UnknownData_137_0 : 7; // 0x137(0x01)
	bool bResetWeaponFiredRecently : 1; // 0x137(0x01)
	char UnknownData_138_0 : 7; // 0x138(0x01)
	bool bLockWeaponFireWhenNotTargeting : 1; // 0x138(0x01)
	char UnknownData_139_0 : 7; // 0x139(0x01)
	bool bAllowsRecalculatingAimOffset : 1; // 0x139(0x01)
	char UnknownData_13A[0x1]; // 0x13a(0x01)
	char UnknownData_13B_0 : 7; // 0x13b(0x01)
	bool bSuppressFacingChange : 1; // 0x13b(0x01)
	char UnknownData_13C[0x4]; // 0x13c(0x04)
	struct UMadCameraState_MoveAction* MoveActionCameraState; // 0x140(0x08)
	char UnknownData_148_0 : 7; // 0x148(0x01)
	bool bIsMoveStartAction : 1; // 0x148(0x01)
	char UnknownData_149_0 : 7; // 0x149(0x01)
	bool bIsMoveStopAction : 1; // 0x149(0x01)
	char UnknownData_14A_0 : 7; // 0x14a(0x01)
	bool bStopCameraStateManually : 1; // 0x14a(0x01)
	enum class EPlayerMovementSpeed EnforcedMoveSpeed; // 0x14b(0x01)
	char UnknownData_14C_0 : 7; // 0x14c(0x01)
	bool bRollSeedOnStart : 1; // 0x14c(0x01)
	char UnknownData_14D_0 : 7; // 0x14d(0x01)
	bool bReplicateSeed : 1; // 0x14d(0x01)
	char UnknownData_14E_0 : 7; // 0x14e(0x01)
	bool bBlockSkillUsage : 1; // 0x14e(0x01)
	enum class EMovementSpeedValidity PreferredMoveSpeed; // 0x14f(0x01)
	char UnknownData_150_0 : 7; // 0x150(0x01)
	bool bIsGameplayImportant : 1; // 0x150(0x01)
	char UnknownData_151_0 : 7; // 0x151(0x01)
	bool bCanBeAlwaysExecuted : 1; // 0x151(0x01)
	char UnknownData_152_0 : 7; // 0x152(0x01)
	bool bCanCancelWantsToFire : 1; // 0x152(0x01)
	char UnknownData_153[0x35]; // 0x153(0x35)
	struct AMadPlayerCharacter* PlayerChar; // 0x188(0x08)
	struct UMadAnimationProxyDataPlayer* ProxyData; // 0x190(0x08)
	struct UMadPlayerMovementComponent* MoveComp; // 0x198(0x08)
	struct UMadPlayerAnimInstance* AnimInstance; // 0x1a0(0x08)
	struct UMadPlayerAnimSet* AnimSet; // 0x1a8(0x08)
	struct UAnimMontage* PlayedMontage; // 0x1b0(0x08)
	char UnknownData_1B8[0x8]; // 0x1b8(0x08)

	void OnNotifyImplementation(struct FName NotifyName); // Function Madness.MadMoveAction.OnNotifyImplementation // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void BPOnStarted(); // Function Madness.MadMoveAction.BPOnStarted // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void BPOnFinished(); // Function Madness.MadMoveAction.BPOnFinished // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadGameplayAbility_PlayMoveAction
// Size: 0x4e0 (Inherited: 0x4b8)
struct UMadGameplayAbility_PlayMoveAction : UMadGameplayAbility {
	struct UMadMoveAction* AssociatedMoveAction; // 0x4b8(0x08)
	struct FName DirectionalMontageSectionName; // 0x4c0(0x08)
	int32_t DirectionalMontageSectionIndex; // 0x4c8(0x04)
	float DirectionalMontageDirection; // 0x4cc(0x04)
	float DirectionalMontagePlayRate; // 0x4d0(0x04)
	float DurationIfNoMontage; // 0x4d4(0x04)
	float DirectionalMontageStartPosition; // 0x4d8(0x04)
	char UnknownData_4DC[0x4]; // 0x4dc(0x04)

	void OnNotify(struct FName NotifyName); // Function Madness.MadGameplayAbility_PlayMoveAction.OnNotify // (Final|Native|Public|BlueprintCallable) // @ game+0x167f200
	void OnMontageUpdated(); // Function Madness.MadGameplayAbility_PlayMoveAction.OnMontageUpdated // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct UAnimMontage* GetDirectionalMontageToPlay(); // Function Madness.MadGameplayAbility_PlayMoveAction.GetDirectionalMontageToPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x167ea80
};

// Class Madness.MadMoveActionApproachInteraction
// Size: 0x218 (Inherited: 0x1c0)
struct UMadMoveActionApproachInteraction : UMadMoveAction {
	float DefaultProximityThreshold; // 0x1c0(0x04)
	char UnknownData_1C4[0x4]; // 0x1c4(0x04)
	struct FApproachData ApproachData; // 0x1c8(0x38)
	char UnknownData_200[0x18]; // 0x200(0x18)

	void OnSkillStarted(struct UMadSkillData* ActivatedSkill, bool IsBlocked, bool IsOnCooldown, bool IsSkillActive); // Function Madness.MadMoveActionApproachInteraction.OnSkillStarted // (Final|Native|Private) // @ game+0x167f280
};

// Class Madness.MadMoveActionCoverBase
// Size: 0x200 (Inherited: 0x1c0)
struct UMadMoveActionCoverBase : UMadMoveAction {
	char UnknownData_1C0_0 : 7; // 0x1c0(0x01)
	bool bIsEnterCoverMove : 1; // 0x1c0(0x01)
	char UnknownData_1C1_0 : 7; // 0x1c1(0x01)
	bool bIsLeaveCoverMove : 1; // 0x1c1(0x01)
	char UnknownData_1C2_0 : 7; // 0x1c2(0x01)
	bool bNeedsSerializedCoverData : 1; // 0x1c2(0x01)
	char UnknownData_1C3_0 : 7; // 0x1c3(0x01)
	bool bUpdateMontageOnCoverHeightChange : 1; // 0x1c3(0x01)
	char UnknownData_1C4[0x4]; // 0x1c4(0x04)
	struct UMadAnimationProxyDataPlayerCover* ProxyDataCover; // 0x1c8(0x08)
	struct UMadPlayerCoverMovementComponent* CoverMoveComp; // 0x1d0(0x08)
	struct FWeakObjectPtr<struct UCoverSlot> UsedSlot; // 0x1d8(0x08)
	char UnknownData_1E0[0x20]; // 0x1e0(0x20)
};

// Class Madness.MadMoveActionLeaveCoverBase
// Size: 0x208 (Inherited: 0x200)
struct UMadMoveActionLeaveCoverBase : UMadMoveActionCoverBase {
	char UnknownData_200_0 : 7; // 0x200(0x01)
	bool bResetCameraMirror : 1; // 0x200(0x01)
	char UnknownData_201[0x3]; // 0x201(0x03)
	float ProgressToStartSimulatingInputIfPreparingForSprintToCover; // 0x204(0x04)
};

// Class Madness.MadMoveActionClimbUp
// Size: 0x220 (Inherited: 0x208)
struct UMadMoveActionClimbUp : UMadMoveActionLeaveCoverBase {
	char UnknownData_208[0x18]; // 0x208(0x18)
};

// Class Madness.MadAnimNotify_JumpOver
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotify_JumpOver : UAnimNotify {
};

// Class Madness.MadMoveActionCombatTurnInPlace
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionCombatTurnInPlace : UMadMoveAction {
};

// Class Madness.MadMoveActionCoverPeekBase
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionCoverPeekBase : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionTargetToBlind
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionTargetToBlind : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionBlindToTarget
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionBlindToTarget : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionIdleToPeek
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionIdleToPeek : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionPeekToIdle
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionPeekToIdle : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionUpToSide
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionUpToSide : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionSideToUp
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionSideToUp : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionSideToBack
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionSideToBack : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionBackToSide
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionBackToSide : UMadMoveActionCoverPeekBase {
};

// Class Madness.MadMoveActionCoverTurn
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionCoverTurn : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionCoverMovementTurn
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionCoverMovementTurn : UMadMoveActionCoverTurn {
};

// Class Madness.MadMoveActionEnterCoverBase
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionEnterCoverBase : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionEnterCover
// Size: 0x3b0 (Inherited: 0x200)
struct UMadMoveActionEnterCover : UMadMoveActionEnterCoverBase {
	char UnknownData_200[0x28]; // 0x200(0x28)
	struct FCoverEnterData EnterCoverData; // 0x228(0x180)
	char UnknownData_3A8[0x8]; // 0x3a8(0x08)
};

// Class Madness.MadMoveActionEnterCoverLong
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMadMoveActionEnterCoverLong : UMadMoveActionEnterCover {
};

// Class Madness.MadMoveActionEnterCoverFromSwap
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMadMoveActionEnterCoverFromSwap : UMadMoveActionEnterCover {
};

// Class Madness.MadMoveActionEnterCoverAroundCorner
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMadMoveActionEnterCoverAroundCorner : UMadMoveActionEnterCover {
};

// Class Madness.MadMoveActionEnterCoverNoAnimation
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMadMoveActionEnterCoverNoAnimation : UMadMoveActionEnterCover {
};

// Class Madness.MadAnimNotify_CoverEnterStart
// Size: 0x38 (Inherited: 0x38)
struct UMadAnimNotify_CoverEnterStart : UAnimNotify {
};

// Class Madness.MadMoveActionJumpOver
// Size: 0x248 (Inherited: 0x220)
struct UMadMoveActionJumpOver : UMadMoveActionClimbUp {
	float AdditionalJumpAdjustment; // 0x220(0x04)
	float JumpAdjustmentDuration; // 0x224(0x04)
	char UnknownData_228[0x20]; // 0x228(0x20)
};

// Class Madness.MadMoveActionLanding
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionLanding : UMadMoveAction {
};

// Class Madness.MadMoveActionLandingSoft
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionLandingSoft : UMadMoveActionLanding {
};

// Class Madness.MadMoveActionLandingHard
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionLandingHard : UMadMoveActionLanding {
};

// Class Madness.MadMoveActionLeaveCover
// Size: 0x208 (Inherited: 0x208)
struct UMadMoveActionLeaveCover : UMadMoveActionLeaveCoverBase {
};

// Class Madness.MadMoveActionLeaveCoverNoAnimation
// Size: 0x208 (Inherited: 0x208)
struct UMadMoveActionLeaveCoverNoAnimation : UMadMoveActionLeaveCover {
};

// Class Madness.MadMoveActionLeaveCoverNoAnimationForced
// Size: 0x208 (Inherited: 0x208)
struct UMadMoveActionLeaveCoverNoAnimationForced : UMadMoveActionLeaveCoverNoAnimation {
};

// Class Madness.MadMoveActionMovePrematureStop
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionMovePrematureStop : UMadMoveAction {
};

// Class Madness.MadMoveActionMoveStart
// Size: 0x1e0 (Inherited: 0x1c0)
struct UMadMoveActionMoveStart : UMadMoveAction {
	enum class EMoveStartType StartType; // 0x1c0(0x01)
	char UnknownData_1C1[0x1f]; // 0x1c1(0x1f)
};

// Class Madness.MadMoveActionStartWalk
// Size: 0x1e0 (Inherited: 0x1e0)
struct UMadMoveActionStartWalk : UMadMoveActionMoveStart {
};

// Class Madness.MadMoveActionStartJog
// Size: 0x1e0 (Inherited: 0x1e0)
struct UMadMoveActionStartJog : UMadMoveActionMoveStart {
};

// Class Madness.MadMoveActionStartCoverMove
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionStartCoverMove : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionMoveStop
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionMoveStop : UMadMoveAction {
};

// Class Madness.MadMoveActionStopWalk
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionStopWalk : UMadMoveActionMoveStop {
};

// Class Madness.MadMoveActionStopJog
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionStopJog : UMadMoveActionMoveStop {
};

// Class Madness.MadMoveActionStopCoverMove
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionStopCoverMove : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionNonCombatTurn
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionNonCombatTurn : UMadMoveAction {
};

// Class Madness.MadMoveActionNonCombatTurnWalk
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionNonCombatTurnWalk : UMadMoveActionNonCombatTurn {
};

// Class Madness.MadMoveActionNonCombatTurnJog
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionNonCombatTurnJog : UMadMoveActionNonCombatTurn {
};

// Class Madness.MadMoveActionCameraSwap
// Size: 0x200 (Inherited: 0x200)
struct UMadMoveActionCameraSwap : UMadMoveActionCoverBase {
};

// Class Madness.MadMoveActionRoll
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionRoll : UMadMoveAction {
};

// Class Madness.MadMoveActionRollOut
// Size: 0x208 (Inherited: 0x208)
struct UMadMoveActionRollOut : UMadMoveActionLeaveCoverBase {
};

// Class Madness.MadMoveActionSprintOutBase
// Size: 0x228 (Inherited: 0x208)
struct UMadMoveActionSprintOutBase : UMadMoveActionLeaveCoverBase {
	float ProgressToStopSuppressingInput; // 0x208(0x04)
	char UnknownData_20C[0x1c]; // 0x20c(0x1c)
};

// Class Madness.MadMoveActionSprintOutDirectional
// Size: 0x228 (Inherited: 0x228)
struct UMadMoveActionSprintOutDirectional : UMadMoveActionSprintOutBase {
};

// Class Madness.MadMoveActionSprintOutStrafe
// Size: 0x230 (Inherited: 0x228)
struct UMadMoveActionSprintOutStrafe : UMadMoveActionSprintOutBase {
	float RotationRate; // 0x228(0x04)
	char UnknownData_22C[0x4]; // 0x22c(0x04)
};

// Class Madness.MadMoveActionSprintToCover
// Size: 0x230 (Inherited: 0x200)
struct UMadMoveActionSprintToCover : UMadMoveActionCoverBase {
	float MaxAngleToEnterCover; // 0x200(0x04)
	float MaxDistanceToImmediatelyEnterCover; // 0x204(0x04)
	char UnknownData_208[0x8]; // 0x208(0x08)
	struct FOccupiedCoverInfo CoverToSprintTo; // 0x210(0x10)
	float SprintToCoverRotationRate; // 0x220(0x04)
	float MinimumSprintDuration; // 0x224(0x04)
	enum class ECoverUseReason DesiredCoverUseReason; // 0x228(0x01)
	char UnknownData_229[0x7]; // 0x229(0x07)
};

// Class Madness.MadMoveActionSprintToHop
// Size: 0x230 (Inherited: 0x230)
struct UMadMoveActionSprintToHop : UMadMoveActionSprintToCover {
};

// Class Madness.MadMoveActionWeaponTransitionBase
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionWeaponTransitionBase : UMadMoveAction {
};

// Class Madness.MadMoveActionIdleToTargeting
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionIdleToTargeting : UMadMoveActionWeaponTransitionBase {
};

// Class Madness.MadMoveActionTargetingToIdle
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionTargetingToIdle : UMadMoveActionWeaponTransitionBase {
};

// Class Madness.MadMoveActionIdleToBlindfiring
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionIdleToBlindfiring : UMadMoveActionWeaponTransitionBase {
};

// Class Madness.MadMoveActionBlindfiringToIdle
// Size: 0x1c0 (Inherited: 0x1c0)
struct UMadMoveActionBlindfiringToIdle : UMadMoveActionWeaponTransitionBase {
};

// Class Madness.MadMoveDataContainer
// Size: 0x80 (Inherited: 0x30)
struct UMadMoveDataContainer : UDataAsset {
	struct TMap<enum class EPlayerMoveAction, struct UMadMoveAction*> MoveActionClasses; // 0x30(0x50)
};

// Class Madness.MadMultiInteractionComponent
// Size: 0x710 (Inherited: 0x4f0)
struct UMadMultiInteractionComponent : USphereComponent {
	char UnknownData_4F0[0x68]; // 0x4f0(0x68)
	struct FInteractionComponentConstraints ConstraintsOnInteractingPawn; // 0x558(0x40)
	struct FMulticastInlineDelegate OnInteractionStarted; // 0x598(0x10)
	struct FMulticastInlineDelegate OnInteractionEnded; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnInteractionProgressChanged; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnInteractionFailed; // 0x5c8(0x10)
	struct TMap<int32_t, struct FMadMultiInteractionUser> InteractingPlayers; // 0x5d8(0x50)
	struct UActionPromptWidgetComponent* ActionPrompt; // 0x628(0x08)
	struct UInputComponent* InteractionInputComponent; // 0x630(0x08)
	struct UAnimMontage* InteractionMontage; // 0x638(0x08)
	struct FName InteractionName; // 0x640(0x08)
	float RetriggerDelay; // 0x648(0x04)
	float DotCheck; // 0x64c(0x04)
	struct FText InteractionText; // 0x650(0x18)
	int32_t Priority; // 0x668(0x04)
	enum class EPlayerSynchronizationType SynchronizationType; // 0x66c(0x01)
	char UnknownData_66D_0 : 7; // 0x66d(0x01)
	bool bHideWeapon : 1; // 0x66d(0x01)
	char UnknownData_66E_0 : 7; // 0x66e(0x01)
	bool bStartEnabled : 1; // 0x66e(0x01)
	char UnknownData_66F[0x1]; // 0x66f(0x01)
	float ProgressPerSecond; // 0x670(0x04)
	float ExtraPlayerModifier; // 0x674(0x04)
	float StartProgress; // 0x678(0x04)
	float CurrentProgress; // 0x67c(0x04)
	float LastTriggerTime; // 0x680(0x04)
	char UnknownData_684[0x2c]; // 0x684(0x2c)
	char UnknownData_6B0_0 : 7; // 0x6b0(0x01)
	bool bEnabled : 1; // 0x6b0(0x01)
	char UnknownData_6B1_0 : 7; // 0x6b1(0x01)
	bool bIsHoldingInput : 1; // 0x6b1(0x01)
	char UnknownData_6B2_0 : 7; // 0x6b2(0x01)
	bool bShouldChangeHighlightMaterial : 1; // 0x6b2(0x01)
	char UnknownData_6B3[0x5]; // 0x6b3(0x05)
	struct TMap<struct UMeshComponent*, struct FHighlightMaterialLayerMap> HighlightMaterialMap; // 0x6b8(0x50)
	char UnknownData_708[0x8]; // 0x708(0x08)

	void UpdateProgress(float AddedProgress); // Function Madness.MadMultiInteractionComponent.UpdateProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1684190
	void SetInteractionText(struct FText NewText); // Function Madness.MadMultiInteractionComponent.SetInteractionText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1683e50
	void SetInteractionSoundObject(struct FBaseSoundObject InSoundObject); // Function Madness.MadMultiInteractionComponent.SetInteractionSoundObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1683da0
	void SetEnabled(bool bInEnabled); // Function Madness.MadMultiInteractionComponent.SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1683d10
	void OnWeaponHidden(struct FName WeaponName); // Function Madness.MadMultiInteractionComponent.OnWeaponHidden // (Final|Native|Protected) // @ game+0x1683c10
	void OnTakeDamage(struct ABaseCharacter* character, float Damage); // Function Madness.MadMultiInteractionComponent.OnTakeDamage // (Final|Native|Protected) // @ game+0x1683b40
	void OnRep_Progress(); // Function Madness.MadMultiInteractionComponent.OnRep_Progress // (Final|Native|Protected) // @ game+0x1683b20
	void OnRep_Enabled(); // Function Madness.MadMultiInteractionComponent.OnRep_Enabled // (Final|Native|Protected) // @ game+0x1683ae0
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadMultiInteractionComponent.OnOverlapEnd // (Final|Native|Public) // @ game+0x16839a0
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadMultiInteractionComponent.OnOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x1683730
	void OnCharacterDied(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadMultiInteractionComponent.OnCharacterDied // (Final|Native|Protected) // @ game+0x1683020
	float GetCurrentProgress(); // Function Madness.MadMultiInteractionComponent.GetCurrentProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1682e60
};

// Class Madness.MadNavArea_MantleOverCover
// Size: 0x48 (Inherited: 0x48)
struct UMadNavArea_MantleOverCover : UNavAreaMeta {
};

// Class Madness.MadNavArea_ObstacleExcludingPathMarker
// Size: 0x48 (Inherited: 0x48)
struct UMadNavArea_ObstacleExcludingPathMarker : UNavArea_Obstacle {
};

// Class Madness.MadNavBlockBoxComponent
// Size: 0x510 (Inherited: 0x500)
struct UMadNavBlockBoxComponent : UBoxComponent {
	char UnknownData_500[0x10]; // 0x500(0x10)

	void UnBlockMesh(); // Function Madness.MadNavBlockBoxComponent.UnBlockMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1684170
	void BlockMesh(); // Function Madness.MadNavBlockBoxComponent.BlockMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1682e40
};

// Class Madness.MadNavDestructibleComponent
// Size: 0x1d8 (Inherited: 0x1b0)
struct UMadNavDestructibleComponent : UNavRelevantComponent {
	struct UNavArea* ObstacleAreaClass; // 0x1b0(0x08)
	float Radius; // 0x1b8(0x04)
	float Height; // 0x1bc(0x04)
	struct FVector Offset; // 0x1c0(0x0c)
	struct FName NavDataName; // 0x1cc(0x08)
	char UnknownData_1D4[0x4]; // 0x1d4(0x04)
};

// Class Madness.MadNavigationFilter_PathMarker
// Size: 0x48 (Inherited: 0x48)
struct UMadNavigationFilter_PathMarker : UFWNavigationFilter_NoLinks {
};

// Class Madness.MadNavigationFilter_Perforo
// Size: 0x48 (Inherited: 0x48)
struct UMadNavigationFilter_Perforo : UNavigationQueryFilter {
};

// Class Madness.MadNavModVolume
// Size: 0x398 (Inherited: 0x328)
struct AMadNavModVolume : AVolume {
	char UnknownData_328[0xc]; // 0x328(0x0c)
	uint32_t AreaID; // 0x334(0x04)
	char UnknownData_338[0x50]; // 0x338(0x50)
	struct UNavArea* LastNavArea; // 0x388(0x08)
	struct UNavArea* AreaClass; // 0x390(0x08)

	void SetAreaClass(struct UNavArea* NewAreaClass); // Function Madness.MadNavModVolume.SetAreaClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1683c90
};

// Class Madness.MadNPC
// Size: 0x1860 (Inherited: 0x1710)
struct AMadNPC : AMadBaseAICharacter {
	char UnknownData_1710_0 : 7; // 0x1710(0x01)
	bool bHideMeDuringDialogue : 1; // 0x1710(0x01)
	char UnknownData_1711_0 : 7; // 0x1711(0x01)
	bool bNPCHidden : 1; // 0x1711(0x01)
	char UnknownData_1712_0 : 7; // 0x1712(0x01)
	bool bIsPlayingSequence : 1; // 0x1712(0x01)
	char UnknownData_1713_0 : 7; // 0x1713(0x01)
	bool bUseHiddenReplicationHack : 1; // 0x1713(0x01)
	char UnknownData_1714_0 : 7; // 0x1714(0x01)
	bool bFadeToDialogue : 1; // 0x1714(0x01)
	char UnknownData_1715_0 : 7; // 0x1715(0x01)
	bool bFadeFromDialogue : 1; // 0x1715(0x01)
	char UnknownData_1716[0x2]; // 0x1716(0x02)
	struct TSoftObjectPtr<struct UWorld> DialogueLevel; // 0x1718(0x28)
	struct TSoftObjectPtr<struct ULevelSequence> DialogueAsset; // 0x1740(0x28)
	struct FName DialogueCollectibleKey; // 0x1768(0x08)
	struct TArray<struct FName> AuxiliaryDialogueCollectibleKeys; // 0x1770(0x10)
	struct FFactNameFromList DialogEnabledFact; // 0x1780(0x08)
	struct FFactExpression DialogEnabledFactExp; // 0x1788(0x18)
	struct FNameWrapper LocalizedNameKey; // 0x17a0(0x10)
	struct USoundCue* DialogDisabledCue; // 0x17b0(0x08)
	struct FFactNameFromList MarkAsHiddenFact; // 0x17b8(0x08)
	struct FFactExpression NPCIsVisibleFactExp; // 0x17c0(0x18)
	char UnknownData_17D8_0 : 7; // 0x17d8(0x01)
	bool bOnlyVisibleDurringEvent : 1; // 0x17d8(0x01)
	char UnknownData_17D9[0x7]; // 0x17d9(0x07)
	struct FString EventName; // 0x17e0(0x10)
	char bNoStartWeapon : 1; // 0x17f0(0x01)
	char UnknownData_17F0_1 : 7; // 0x17f0(0x01)
	char UnknownData_17F1[0x3]; // 0x17f1(0x03)
	char UnknownData_17F4_0 : 7; // 0x17f4(0x01)
	bool bIsKillable : 1; // 0x17f4(0x01)
	char UnknownData_17F5[0x3]; // 0x17f5(0x03)
	struct UMadQuestPool* QuestPool; // 0x17f8(0x08)
	struct FFactExpression PoolIconVisibleFactExp; // 0x1800(0x18)
	char UnknownData_1818_0 : 7; // 0x1818(0x01)
	bool bIsDead : 1; // 0x1818(0x01)
	char UnknownData_1819[0x7]; // 0x1819(0x07)
	struct UNavModifierComponent* NavModifierComponent; // 0x1820(0x08)
	struct ULocalInteractionComponent* LocalInteraction; // 0x1828(0x08)
	char UnknownData_1830_0 : 7; // 0x1830(0x01)
	bool bOverrideMinimapIconVisibilityRange : 1; // 0x1830(0x01)
	char UnknownData_1831[0x3]; // 0x1831(0x03)
	float MinimapIconVisibilityRange; // 0x1834(0x04)
	char UnknownData_1838[0x11]; // 0x1838(0x11)
	char UnknownData_1849_0 : 7; // 0x1849(0x01)
	bool bHideInDialogues : 1; // 0x1849(0x01)
	char UnknownData_184A[0x6]; // 0x184a(0x06)
	struct TArray<struct FName> DontHideInTheseDialogues; // 0x1850(0x10)

	void OnRep_NPCHidden(); // Function Madness.MadNPC.OnRep_NPCHidden // (Final|Native|Protected) // @ game+0x1683b00
	void OnInteractionStarted(struct ABaseCharacter* InteractingPawn, bool bPressed); // Function Madness.MadNPC.OnInteractionStarted // (Final|Native|Protected) // @ game+0x1683660
	void OnInteractionInterrupted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadNPC.OnInteractionInterrupted // (Final|Native|Protected) // @ game+0x16835a0
	void OnInteractionCompleted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadNPC.OnInteractionCompleted // (Final|Native|Protected) // @ game+0x16834e0
	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadNPC.OnFrameworkSequenceStart // (Final|Native|Public|HasOutParms) // @ game+0x16833b0
	void OnFrameworkSequenceEnd(); // Function Madness.MadNPC.OnFrameworkSequenceEnd // (Final|Native|Public) // @ game+0x1683390
	void OnDialogueFinished(); // Function Madness.MadNPC.OnDialogueFinished // (Final|Native|Protected) // @ game+0x1683370
	void KillNPC(); // Function Madness.MadNPC.KillNPC // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1683000
	bool IsDialogEnabled(struct APlayerController* InteractingPC, bool bPlayDialogDisabledCue); // Function Madness.MadNPC.IsDialogEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1682f40
	struct FText GetLocalizedName(); // Function Madness.MadNPC.GetLocalizedName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1682ea0
	struct ULocalInteractionComponent* GetLocalInteraction(); // Function Madness.MadNPC.GetLocalInteraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1682e80
};

// Class Madness.MadNPCReactionComponent
// Size: 0x268 (Inherited: 0x180)
struct UMadNPCReactionComponent : UActorComponent {
	struct UMadAnimInstance_AntFarmSimple* OwnerAnimInstance; // 0x180(0x08)
	struct Acharacter* CurrentTargetCharacter; // 0x188(0x08)
	struct Acharacter* OwnerCharacter; // 0x190(0x08)
	struct TArray<struct Acharacter*> TargetsToIgnore; // 0x198(0x10)
	char UnknownData_1A8[0xc]; // 0x1a8(0x0c)
	float IdleLoopAnimStartPos; // 0x1b4(0x04)
	char UnknownData_1B8[0x30]; // 0x1b8(0x30)
	struct UAnimSequenceBase* IdleLoopAnim; // 0x1e8(0x08)
	float ReactionCheckChance; // 0x1f0(0x04)
	char UnknownData_1F4_0 : 7; // 0x1f4(0x01)
	bool bRandomizeIdleLoopAnimStartPos : 1; // 0x1f4(0x01)
	char UnknownData_1F5_0 : 7; // 0x1f5(0x01)
	bool bEnableReactionAnimation : 1; // 0x1f5(0x01)
	char UnknownData_1F6_0 : 7; // 0x1f6(0x01)
	bool bPlayReactionAnimationOnce : 1; // 0x1f6(0x01)
	char UnknownData_1F7_0 : 7; // 0x1f7(0x01)
	bool bEnableLookAtAnimation : 1; // 0x1f7(0x01)
	struct FFactExpression PlayReactionAnimationOnceFactExp; // 0x1f8(0x18)
	struct UAnimSequenceBase* ReactionAnim; // 0x210(0x08)
	struct FName LookAtAnimationSocket; // 0x218(0x08)
	float ReactionCooldownDuration; // 0x220(0x04)
	float LookAtAnimationSpeed; // 0x224(0x04)
	int32_t LookAtUpdateRate; // 0x228(0x04)
	char UnknownData_22C_0 : 7; // 0x22c(0x01)
	bool bInterpolateLookAtAnimation : 1; // 0x22c(0x01)
	char UnknownData_22D_0 : 7; // 0x22d(0x01)
	bool bMirrorLookAtDirFromBehind : 1; // 0x22d(0x01)
	char UnknownData_22E[0x2]; // 0x22e(0x02)
	float LookAtAnimationDuration; // 0x230(0x04)
	float LookAtCooldownDuration; // 0x234(0x04)
	struct AAnimSyncHelper* SyncHelper; // 0x238(0x08)
	float ReactionCheckUpdateRate; // 0x240(0x04)
	float ReactionCheckDistance; // 0x244(0x04)
	char UnknownData_248[0x4]; // 0x248(0x04)
	struct FVector ReactionCheckOffset; // 0x24c(0x0c)
	char UnknownData_258[0x10]; // 0x258(0x10)

	void OnTargetCharacterBeingDestroyed(struct AActor* Actor); // Function Madness.MadNPCReactionComponent.OnTargetCharacterBeingDestroyed // (Final|Native|Protected) // @ game+0x168b7d0
	void MulticastUpdateLookAtAnimation(bool EnableLookAt, struct FVector LookAtAimLocation); // Function Madness.MadNPCReactionComponent.MulticastUpdateLookAtAnimation // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x168b2d0
	void MulticastPlayReactionAnimation(); // Function Madness.MadNPCReactionComponent.MulticastPlayReactionAnimation // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1662650
	void EnableLookAtAnimation(bool bEnable); // Function Madness.MadNPCReactionComponent.EnableLookAtAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x168aa80
};

// Class Madness.MadObjective_KillSquad
// Size: 0x240 (Inherited: 0x230)
struct UMadObjective_KillSquad : UBaseObjective {
	struct FName SquadName; // 0x230(0x08)
	struct FWeakObjectPtr<struct UFWAISquad> Squad; // 0x238(0x08)

	void OnCharacterDied(struct FGlobalEventParams GlobalEvent); // Function Madness.MadObjective_KillSquad.OnCharacterDied // (Final|Native|Public|HasOutParms) // @ game+0x168b3c0
};

// Class Madness.MadOnlineSaveSystem
// Size: 0xa08 (Inherited: 0x28)
struct UMadOnlineSaveSystem : UObject {
	char UnknownData_28[0x9e0]; // 0x28(0x9e0)

	void TryPostponedSave(); // Function Madness.MadOnlineSaveSystem.TryPostponedSave // (Final|Native|Private) // @ game+0x168be80
};

// Class Madness.MadOrientToGroundComponent
// Size: 0x1a8 (Inherited: 0x180)
struct UMadOrientToGroundComponent : UActorComponent {
	float SampleGroundRate; // 0x180(0x04)
	float OrientSpeed; // 0x184(0x04)
	float GroundDistance; // 0x188(0x04)
	char UnknownData_18C[0x1c]; // 0x18c(0x1c)
};

// Class Madness.MadPartyUIModel
// Size: 0x330 (Inherited: 0x50)
struct UMadPartyUIModel : UBaseUIModel {
	char UnknownData_50[0x144]; // 0x50(0x144)
	char UnknownData_194_0 : 7; // 0x194(0x01)
	bool bCanInviteToParty : 1; // 0x194(0x01)
	char UnknownData_195_0 : 7; // 0x195(0x01)
	bool bIsMatchmakingEnabled : 1; // 0x195(0x01)
	char UnknownData_196_0 : 7; // 0x196(0x01)
	bool bShowLocalPlayerPartyWidget : 1; // 0x196(0x01)
	char UnknownData_197[0x1]; // 0x197(0x01)
	float FriendsListRefreshTimerUpdateTime; // 0x198(0x04)
	int32_t CurrentPrivacy; // 0x19c(0x04)
	struct TArray<struct FMadPartyMemberData> Members; // 0x1a0(0x10)
	char UnknownData_1B0_0 : 7; // 0x1b0(0x01)
	bool bIsMatchmakingInProgress : 1; // 0x1b0(0x01)
	char UnknownData_1B1_0 : 7; // 0x1b1(0x01)
	bool bIsStartGameCountdownCancelable : 1; // 0x1b1(0x01)
	char UnknownData_1B2[0x6]; // 0x1b2(0x06)
	struct TArray<struct FUIFriend> FriendsList; // 0x1b8(0x10)
	char UnknownData_1C8[0x28]; // 0x1c8(0x28)
	struct UMadGameInstance* MadGameInstance; // 0x1f0(0x08)
	char UnknownData_1F8_0 : 7; // 0x1f8(0x01)
	bool bCheckpointSelected : 1; // 0x1f8(0x01)
	char UnknownData_1F9[0x137]; // 0x1f9(0x137)

	bool ViewGamecard(struct FString NetId); // Function Madness.MadPartyUIModel.ViewGamecard // (Final|Native|Public) // @ game+0x168c010
	void UnblockUser(int32_t MemberIndex, bool bUpdatePresenceImmediately); // Function Madness.MadPartyUIModel.UnblockUser // (Final|Native|Public) // @ game+0x168bf50
	bool UnblockPlayer(struct FString NetId); // Function Madness.MadPartyUIModel.UnblockPlayer // (Final|Native|Public) // @ game+0x168bea0
	void ToggleMemberMuted(int32_t MemberIndex); // Function Madness.MadPartyUIModel.ToggleMemberMuted // (Final|Native|Public) // @ game+0x168be00
	void StopMatchmaking(); // Function Madness.MadPartyUIModel.StopMatchmaking // (Final|Native|Public) // @ game+0x168bde0
	void StartMatchmaking(bool bMatchForChallenges); // Function Madness.MadPartyUIModel.StartMatchmaking // (Final|Native|Public) // @ game+0x168bd50
	bool ShowSendMessage(struct FText Message, struct FText Title); // Function Madness.MadPartyUIModel.ShowSendMessage // (Final|Native|Public) // @ game+0x168bbc0
	void ShowFirstPartyPremiumStoreUI(); // Function Madness.MadPartyUIModel.ShowFirstPartyPremiumStoreUI // (Final|Native|Public) // @ game+0x168bba0
	void SetPrivacy(int32_t NewPrivacy); // Function Madness.MadPartyUIModel.SetPrivacy // (Final|Native|Public) // @ game+0x168bb20
	void SetMatchmakingEnabled(bool bEnabled); // Function Madness.MadPartyUIModel.SetMatchmakingEnabled // (Final|Native|Public) // @ game+0x168ba90
	void SetCanInviteToParty(bool bCanInvite); // Function Madness.MadPartyUIModel.SetCanInviteToParty // (Final|Native|Public) // @ game+0x168ba00
	void RestartMatchmaking(); // Function Madness.MadPartyUIModel.RestartMatchmaking // (Final|Native|Public) // @ game+0x168b9e0
	void RefreshFriendsList(); // Function Madness.MadPartyUIModel.RefreshFriendsList // (Final|Native|Public) // @ game+0x168b9c0
	void PlayerVote(struct FString PlayerNetID, enum class EPlayerVoteType VoteType); // Function Madness.MadPartyUIModel.PlayerVote // (Final|Native|Public) // @ game+0x168b8e0
	void OnVoipChanged(bool bEnable); // Function Madness.MadPartyUIModel.OnVoipChanged // (Final|Native|Private) // @ game+0x168b850
	void OnSendMessageUIClosed(bool bMessageSent); // Function Madness.MadPartyUIModel.OnSendMessageUIClosed // (Final|Native|Public) // @ game+0x168b740
	void OnPartyMemberLobbyActorSlotChanged(struct FString NetId, int32_t SlotIdx); // Function Madness.MadPartyUIModel.OnPartyMemberLobbyActorSlotChanged // (Final|Native|Public) // @ game+0x168b660
	void OnMatchmakingStatusChanged(bool bEnabled); // Function Madness.MadPartyUIModel.OnMatchmakingStatusChanged // (Final|Native|Public) // @ game+0x168b5d0
	void OnEnterUIState(struct FName StateName); // Function Madness.MadPartyUIModel.OnEnterUIState // (Final|Native|Public|HasOutParms) // @ game+0x168b540
	void OnCoherentReady(struct FName NewStateName); // Function Madness.MadPartyUIModel.OnCoherentReady // (Final|Native|Public|HasOutParms) // @ game+0x168b4b0
	void LeaveParty(); // Function Madness.MadPartyUIModel.LeaveParty // (Final|Native|Public) // @ game+0x168b2b0
	void KickMember(int32_t PlayerIndex); // Function Madness.MadPartyUIModel.KickMember // (Final|Native|Public) // @ game+0x168b230
	void JoinRecentlyFoundMatch(); // Function Madness.MadPartyUIModel.JoinRecentlyFoundMatch // (Final|Native|Public) // @ game+0x168b210
	void JoinParty(struct FString PartyId); // Function Madness.MadPartyUIModel.JoinParty // (Final|Native|Public) // @ game+0x168b170
	void JoinMatchedParty(); // Function Madness.MadPartyUIModel.JoinMatchedParty // (Final|Native|Public) // @ game+0x168b150
	void JoinFromJoinCode(struct FString JoinCode); // Function Madness.MadPartyUIModel.JoinFromJoinCode // (Final|Native|Public) // @ game+0x168b0b0
	void JoinFriendWithExistingParty(struct FString NetId); // Function Madness.MadPartyUIModel.JoinFriendWithExistingParty // (Final|Native|Public) // @ game+0x168b010
	void JoinFriend(struct FString NetId); // Function Madness.MadPartyUIModel.JoinFriend // (Final|Native|Public) // @ game+0x168af70
	bool IsUserUnderage(); // Function Madness.MadPartyUIModel.IsUserUnderage // (Final|Native|Public|Const) // @ game+0x168af40
	void IsPlayWithFriendsOpened(bool bIsOpened); // Function Madness.MadPartyUIModel.IsPlayWithFriendsOpened // (Final|Native|Public) // @ game+0x168ae00
	bool IsPlayerBlocked(struct FString NetId); // Function Madness.MadPartyUIModel.IsPlayerBlocked // (Final|Native|Public) // @ game+0x168ae90
	bool IsPendingInviteToJoin(); // Function Madness.MadPartyUIModel.IsPendingInviteToJoin // (Final|Native|Public|Const) // @ game+0x168add0
	bool IsPartyLeader(); // Function Madness.MadPartyUIModel.IsPartyLeader // (Final|Native|Public|Const) // @ game+0x168ada0
	bool IsMatchmakingEnabled(); // Function Madness.MadPartyUIModel.IsMatchmakingEnabled // (Final|Native|Public) // @ game+0x168ad70
	bool IsCoopEnabled(); // Function Madness.MadPartyUIModel.IsCoopEnabled // (Final|Native|Public|Const) // @ game+0x168ad40
	void InviteFriend(struct FString NetId); // Function Madness.MadPartyUIModel.InviteFriend // (Final|Native|Public) // @ game+0x168aca0
	int32_t GetPlayerJoinBlockerReasonId(); // Function Madness.MadPartyUIModel.GetPlayerJoinBlockerReasonId // (Final|Native|Public|Const) // @ game+0x168ac70
	struct FString GetLocalPlayerName(); // Function Madness.MadPartyUIModel.GetLocalPlayerName // (Final|Native|Public|Const) // @ game+0x168abf0
	void GetJoinCodeUserInfo(struct FString JoinCode); // Function Madness.MadPartyUIModel.GetJoinCodeUserInfo // (Final|Native|Public) // @ game+0x168ab50
	void GenerateJoinCode(); // Function Madness.MadPartyUIModel.GenerateJoinCode // (Final|Native|Public) // @ game+0x168ab30
	void ExitAllMembersToLobby(); // Function Madness.MadPartyUIModel.ExitAllMembersToLobby // (Final|Native|Public) // @ game+0x168ab10
	bool CheckStoryMismatch(struct FString NetId); // Function Madness.MadPartyUIModel.CheckStoryMismatch // (Final|Native|Public) // @ game+0x168a9d0
	void CancelMatchMaking(); // Function Madness.MadPartyUIModel.CancelMatchMaking // (Final|Native|Public) // @ game+0x168a9b0
	void BlockUser(int32_t MemberIndex, bool bUpdatePresenceImmediately); // Function Madness.MadPartyUIModel.BlockUser // (Final|Native|Public) // @ game+0x168a8f0
	bool BlockPlayer(struct FString NetId); // Function Madness.MadPartyUIModel.BlockPlayer // (Final|Native|Public) // @ game+0x168a840
};

// Class Madness.MadPathFollowingComponent_CustomCreature
// Size: 0x3f0 (Inherited: 0x3f0)
struct UMadPathFollowingComponent_CustomCreature : UFWPathFollowingComponent {
};

// Class Madness.MadPathFollowingComponent_DesertSciathan
// Size: 0x440 (Inherited: 0x3f0)
struct UMadPathFollowingComponent_DesertSciathan : UFWPathFollowingComponent {
	float RotateSpeed; // 0x3f0(0x04)
	float LinearAcceleration; // 0x3f4(0x04)
	float LinearDeceleration; // 0x3f8(0x04)
	float MaxVelocityAngle; // 0x3fc(0x04)
	float MaxGlideSpeed; // 0x400(0x04)
	float MaxHoverSpeed; // 0x404(0x04)
	char UnknownData_408[0x38]; // 0x408(0x38)

	void OverrideMaxSpeed(float NewMaxSpeed); // Function Madness.MadPathFollowingComponent_DesertSciathan.OverrideMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1691ed0
	void InjectSideSpeed(float InExtraSpeed); // Function Madness.MadPathFollowingComponent_DesertSciathan.InjectSideSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1691240
};

// Class Madness.MadPathFollowingComponent_MiniBoss
// Size: 0x3f8 (Inherited: 0x3f0)
struct UMadPathFollowingComponent_MiniBoss : UFWPathFollowingComponent {
	struct UMadAITask_RotateRequest* RotateToFaceTask; // 0x3f0(0x08)

	void OnRotateFaceTaskEnded(struct UFWAITask* Task, enum class EFWAITaskResult Result); // Function Madness.MadPathFollowingComponent_MiniBoss.OnRotateFaceTaskEnded // (Final|Native|Protected) // @ game+0x1691d50
};

// Class Madness.MadPathFollowingComponent_Sciathan
// Size: 0x400 (Inherited: 0x3f0)
struct UMadPathFollowingComponent_Sciathan : UFWPathFollowingComponent {
	char UnknownData_3F0[0x10]; // 0x3f0(0x10)

	void SetSciathanBlockDetectionParameters(float DistanceThreshold, float Interval, int32_t NumSamples); // Function Madness.MadPathFollowingComponent_Sciathan.SetSciathanBlockDetectionParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x1692040
	void SaveBlockDetectionParameters(); // Function Madness.MadPathFollowingComponent_Sciathan.SaveBlockDetectionParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x1692020
	void RestoreBlockDetectionParameters(); // Function Madness.MadPathFollowingComponent_Sciathan.RestoreBlockDetectionParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x1692000
	void OnRotateToFaceEnded(struct UFWAITask* Task, enum class EFWAITaskResult Result); // Function Madness.MadPathFollowingComponent_Sciathan.OnRotateToFaceEnded // (Final|Native|Protected) // @ game+0x1691e10
	bool IsSciathanBlocked(); // Function Madness.MadPathFollowingComponent_Sciathan.IsSciathanBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16912f0
};

// Class Madness.MadPathFollowingComponent_WarzoneSciathan
// Size: 0x440 (Inherited: 0x440)
struct UMadPathFollowingComponent_WarzoneSciathan : UMadPathFollowingComponent_DesertSciathan {
};

// Class Madness.MadPet
// Size: 0x320 (Inherited: 0x2f0)
struct AMadPet : AActor {
	char UnknownData_2F0_0 : 7; // 0x2f0(0x01)
	bool bIsOwnerNearby : 1; // 0x2f0(0x01)
	char UnknownData_2F1[0x7]; // 0x2f1(0x07)
	struct USceneComponent* SceneComponent; // 0x2f8(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x300(0x08)
	struct USkeletalMeshComponent* MeshComponent; // 0x308(0x08)
	struct USphereComponent* VisibilitySphereComponent; // 0x310(0x08)
	struct ULocalInteractionComponent* InteractionComponent; // 0x318(0x08)

	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadPet.OnOverlapEnd // (Final|Native|Private) // @ game+0x1691b40
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadPet.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x16918d0
	void OnLocallyInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadPet.OnLocallyInteracted // (Final|Native|Private) // @ game+0x1691810
	void OnLeftInteractionRange(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadPet.OnLeftInteractionRange // (Final|Native|Private) // @ game+0x16916d0
};

// Class Madness.MadPhaseShiftWave
// Size: 0x330 (Inherited: 0x2f0)
struct AMadPhaseShiftWave : AActor {
	struct UParticleSystem* TeleportToParticleTemplate; // 0x2f0(0x08)
	struct UParticleSystem* TeleportFromParticleTemplate; // 0x2f8(0x08)
	struct UParticleSystem* TrailParticleTemplate; // 0x300(0x08)
	struct UParticleSystemComponent* TeleportToParticle; // 0x308(0x08)
	struct UParticleSystemComponent* TeleportFromParticle; // 0x310(0x08)
	struct UParticleSystemComponent* TrailParticle; // 0x318(0x08)
	char UnknownData_320[0x10]; // 0x320(0x10)

	void MulticastShowTrail(struct FVector Location); // Function Madness.MadPhaseShiftWave.MulticastShowTrail // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1660440
	void MulticastShowEnd(); // Function Madness.MadPhaseShiftWave.MulticastShowEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1516bc0
};

// Class Madness.MadPhysicalBarrierComponent
// Size: 0x1d0 (Inherited: 0x180)
struct UMadPhysicalBarrierComponent : UActorComponent {
	struct FMulticastInlineDelegate OnBarrierTriggerred; // 0x180(0x10)
	struct FMulticastInlineDelegate OnBarrierLifted; // 0x190(0x10)
	struct FMulticastInlineDelegate OnBarrierReset; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnConditionBeganTracking; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnConditionMet; // 0x1c0(0x10)
};

// Class Madness.MadPickableItem
// Size: 0x420 (Inherited: 0x2f0)
struct AMadPickableItem : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct ULocalInteractionComponent* LocalInteraction; // 0x2f8(0x08)
	struct UStaticMeshComponent* Mesh; // 0x300(0x08)
	struct UParticleSystemComponent* SpawnEffect; // 0x308(0x08)
	struct UParticleSystemComponent* ImpactEffect; // 0x310(0x08)
	struct FWeakObjectPtr<struct AMadInventory> Inventory; // 0x318(0x08)
	struct FMadPickableItemData PickableItemData; // 0x320(0x50)
	char UnknownData_370[0x8]; // 0x370(0x08)
	struct FMadPickableItemDropConfig DropConfig; // 0x378(0x28)
	struct FVector DropLocation; // 0x3a0(0x0c)
	float DropDuration; // 0x3ac(0x04)
	float DropTraceLength; // 0x3b0(0x04)
	float DropTraceZOffset; // 0x3b4(0x04)
	struct FVector NavQueryExtent; // 0x3b8(0x0c)
	char UnknownData_3C4[0x4]; // 0x3c4(0x04)
	struct TArray<struct FPredictProjectilePathPointData> DropPathData; // 0x3c8(0x10)
	char UnknownData_3D8_0 : 7; // 0x3d8(0x01)
	bool bDropStarted : 1; // 0x3d8(0x01)
	char UnknownData_3D9[0x3]; // 0x3d9(0x03)
	float LifeTime; // 0x3dc(0x04)
	char UnknownData_3E0_0 : 7; // 0x3e0(0x01)
	bool bPlayerInRange : 1; // 0x3e0(0x01)
	char UnknownData_3E1_0 : 7; // 0x3e1(0x01)
	bool bRequireLookAtToInteract : 1; // 0x3e1(0x01)
	char UnknownData_3E2[0x2]; // 0x3e2(0x02)
	float LooktAtDot; // 0x3e4(0x04)
	char UnknownData_3E8[0x38]; // 0x3e8(0x38)

	void UpdateVisibility(bool bShowWidget); // Function Madness.MadPickableItem.UpdateVisibility // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void PlaySpawnParticles(); // Function Madness.MadPickableItem.PlaySpawnParticles // (Final|Native|Protected|Const) // @ game+0x1691fe0
	void PickAndDestroy(bool bEquip); // Function Madness.MadPickableItem.PickAndDestroy // (Final|Native|Public|BlueprintCallable) // @ game+0x1691f50
	void OnPlayerInRange(bool bInRange, bool bCanInteract); // Function Madness.MadPickableItem.OnPlayerInRange // (Final|Native|Protected) // @ game+0x1691c80
	void OnItemPickedUp(); // Function Madness.MadPickableItem.OnItemPickedUp // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnInteractedPressedLocal(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadPickableItem.OnInteractedPressedLocal // (Final|Native|Protected) // @ game+0x1691610
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadPickableItem.OnInteracted // (Final|Native|Protected) // @ game+0x1691550
	void OnFrameworkSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadPickableItem.OnFrameworkSequenceStart // (Final|Native|Public|HasOutParms) // @ game+0x1691420
	void OnFrameworkSequenceEnd(); // Function Madness.MadPickableItem.OnFrameworkSequenceEnd // (Final|Native|Public) // @ game+0x1691400
	void OnExpired(); // Function Madness.MadPickableItem.OnExpired // (Final|Native|Public) // @ game+0x16913e0
	void OnDropComplete(); // Function Madness.MadPickableItem.OnDropComplete // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnAlternativeInteractedLocal(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadPickableItem.OnAlternativeInteractedLocal // (Final|Native|Protected) // @ game+0x1691320
	bool IsAutoPickable(); // Function Madness.MadPickableItem.IsAutoPickable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16912c0
	void Init(struct AMadInventory* InInventory, struct FMadPickableItemData InPickableItemData); // Function Madness.MadPickableItem.Init // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1691140
	enum class EMadItemType GetItemType(); // Function Madness.MadPickableItem.GetItemType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1691110
	struct AMadItem* GetItem(); // Function Madness.MadPickableItem.GetItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16910f0
};

// Class Madness.MadPickableItemMinimapNodeStrategy
// Size: 0x40 (Inherited: 0x30)
struct UMadPickableItemMinimapNodeStrategy : UMinimapNodeStrategy {
	char UnknownData_30[0x10]; // 0x30(0x10)
};

// Class Madness.MadPlatformSpecificWidget
// Size: 0x138 (Inherited: 0x120)
struct UMadPlatformSpecificWidget : UContentWidget {
	char UnknownData_120_0 : 7; // 0x120(0x01)
	bool bShowOnConsole : 1; // 0x120(0x01)
	char UnknownData_121_0 : 7; // 0x121(0x01)
	bool bShowOnPC : 1; // 0x121(0x01)
	char UnknownData_122[0x16]; // 0x122(0x16)
};

// Class Madness.MadPlayerAnimData
// Size: 0x4998 (Inherited: 0x138)
struct UMadPlayerAnimData : UWeaponAnimData {
	char UnknownData_138[0x8]; // 0x138(0x08)
	struct FTurnInPlaceData TurnInPlaceData; // 0x140(0x20)
	struct FMovementData MovementData_NonCombat; // 0x160(0x5d8)
	struct FAnimMontageData NonCombatTurnWalk; // 0x738(0x20)
	struct FAnimMontageData NonCombatTurnJog; // 0x758(0x20)
	struct FMovementData MovementData_Combat; // 0x778(0x5d8)
	struct FMovementData MovementData_CombatTargeting; // 0xd50(0x5d8)
	struct FMovementData MovementData_CombatTargeting_CameraLeft; // 0x1328(0x5d8)
	struct FCoverMovementData MovementData_CoverHi; // 0x1900(0xd8)
	struct FCoverData CoverData_Hi; // 0x19d8(0x1660)
	struct FCoverMovementData MovementData_CoverLo; // 0x3038(0xd8)
	struct FCoverData CoverData_Lo; // 0x3110(0x1660)
	struct FFacingDependantData MiscAnimationsLeft; // 0x4770(0x18)
	struct FFacingDependantData MiscAnimationsRight; // 0x4788(0x18)
	struct FAnimMontageData IdleToTargeting; // 0x47a0(0x20)
	struct FAnimMontageData TargetingToIdle; // 0x47c0(0x20)
	struct FAnimMontageData IdleToBlindfiring; // 0x47e0(0x20)
	struct FAnimMontageData BlindfiringToIdle; // 0x4800(0x20)
	enum class EPlayerAnimDataType AnimDataType; // 0x4820(0x01)
	char UnknownData_4821[0x3]; // 0x4821(0x03)
	struct FVelocityData MovementVelocity; // 0x4824(0x50)
	enum class EMadCoverWeaponAttachmentMode WeaponAttachmentMode[0x2]; // 0x4874(0x02)
	enum class EMadCoverWeaponAttachmentMode WeaponAttachmentModeOutOfCover; // 0x4876(0x01)
	char UnknownData_4877[0x1]; // 0x4877(0x01)
	struct TArray<struct UAnimSequence*> FaceAnimations; // 0x4878(0x10)
	struct FDeathAnimationData DeathAnimData; // 0x4888(0x28)
	struct FAnimMontageData LandingSoftAnimData; // 0x48b0(0x20)
	struct FAnimMontageData LandingHardAnimData; // 0x48d0(0x20)
	struct FWeaponAnim FemaleReloadAnim; // 0x48f0(0x38)
	struct FWeaponAnim FemaleFireAnim; // 0x4928(0x38)
	struct FWeaponAnim FemaleHipFireAnim; // 0x4960(0x38)
};

// Class Madness.AnimMetaData_SectionWeight
// Size: 0x30 (Inherited: 0x28)
struct UAnimMetaData_SectionWeight : UAnimMetaData {
	float Weight; // 0x28(0x04)
	char UnknownData_2C[0x4]; // 0x2c(0x04)
};

// Class Madness.MadPlayerAnimDataInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadPlayerAnimDataInterface : UInterface {
};

// Class Madness.MadPlayerAnimInstance
// Size: 0xdd0 (Inherited: 0x9b0)
struct UMadPlayerAnimInstance : UAnimProxyBasedAnimInstance {
	char UnknownData_9B0[0x8]; // 0x9b0(0x08)
	struct UMadAnimationProxyDataPlayerCover* DefaultProxyDataPlayer; // 0x9b8(0x08)
	char UnknownData_9C0_0 : 7; // 0x9c0(0x01)
	bool bIsProxyValid : 1; // 0x9c0(0x01)
	char UnknownData_9C1[0x7]; // 0x9c1(0x07)
	struct AMadPlayerCharacter* PlayerCharacter; // 0x9c8(0x08)
	char UnknownData_9D0_0 : 7; // 0x9d0(0x01)
	bool bIsRightWeaponAttachment : 1; // 0x9d0(0x01)
	char UnknownData_9D1_0 : 7; // 0x9d1(0x01)
	bool bEndingTurnInPlace : 1; // 0x9d1(0x01)
	char UnknownData_9D2_0 : 7; // 0x9d2(0x01)
	bool bCanEnterTurningState : 1; // 0x9d2(0x01)
	char UnknownData_9D3_0 : 7; // 0x9d3(0x01)
	bool bCanExitTurningState : 1; // 0x9d3(0x01)
	char UnknownData_9D4_0 : 7; // 0x9d4(0x01)
	bool bCanTransitToSettle : 1; // 0x9d4(0x01)
	char UnknownData_9D5_0 : 7; // 0x9d5(0x01)
	bool bCanPlayTurnInPlace : 1; // 0x9d5(0x01)
	char UnknownData_9D6_0 : 7; // 0x9d6(0x01)
	bool bTurningInPlace : 1; // 0x9d6(0x01)
	char UnknownData_9D7_0 : 7; // 0x9d7(0x01)
	bool bEndingTurnInPlaceAnimation : 1; // 0x9d7(0x01)
	struct UAnimSequence* TurnInPlaceSettleAnim; // 0x9d8(0x08)
	struct UBlendSpace1D* TurnInPlaceBlendspace; // 0x9e0(0x08)
	float CurrentTurnInPlaceSpeedRate; // 0x9e8(0x04)
	float CurrentTurnInPlaceSpeedRateMapped; // 0x9ec(0x04)
	float LastDifference; // 0x9f0(0x04)
	char UnknownData_9F4_0 : 7; // 0x9f4(0x01)
	bool bIsFalling : 1; // 0x9f4(0x01)
	char UnknownData_9F5[0x3]; // 0x9f5(0x03)
	float FallingForceRatio; // 0x9f8(0x04)
	char UnknownData_9FC_0 : 7; // 0x9fc(0x01)
	bool bIsSliding : 1; // 0x9fc(0x01)
	char UnknownData_9FD[0x3]; // 0x9fd(0x03)
	float FallingForceRatioSliding; // 0xa00(0x04)
	char UnknownData_A04_0 : 7; // 0xa04(0x01)
	bool bCanEnterFallingState : 1; // 0xa04(0x01)
	char UnknownData_A05[0x3]; // 0xa05(0x03)
	struct FName CanEndTurnInPlaceCurveName; // 0xa08(0x08)
	struct FName ShouldPlaySettleCurveName; // 0xa10(0x08)
	struct FName CanEndSettleCurveName; // 0xa18(0x08)
	char UnknownData_A20_0 : 7; // 0xa20(0x01)
	bool bShouldPlaySettle : 1; // 0xa20(0x01)
	char UnknownData_A21_0 : 7; // 0xa21(0x01)
	bool bCanEndSettle : 1; // 0xa21(0x01)
	char UnknownData_A22_0 : 7; // 0xa22(0x01)
	bool bIsWeaponGripAnimationValid : 1; // 0xa22(0x01)
	char UnknownData_A23_0 : 7; // 0xa23(0x01)
	bool bDisableIKinema : 1; // 0xa23(0x01)
	float GripMode; // 0xa24(0x04)
	struct UBlendSpaceBase* WeaponGripAnimation; // 0xa28(0x08)
	struct APawn* PawnOwner; // 0xa30(0x08)
	struct UMadPlayerMovementComponent* CharacterMovementComponent; // 0xa38(0x08)
	struct FVector FloorHitResult; // 0xa40(0x0c)
	float AimAlpha; // 0xa4c(0x04)
	char UnknownData_A50_0 : 7; // 0xa50(0x01)
	bool bShouldKeepFiringAimOffset : 1; // 0xa50(0x01)
	char UnknownData_A51_0 : 7; // 0xa51(0x01)
	bool bShouldKeepIdleAimOffset : 1; // 0xa51(0x01)
	char UnknownData_A52[0x1]; // 0xa52(0x01)
	char UnknownData_A53_0 : 7; // 0xa53(0x01)
	bool bIsWeaponActive : 1; // 0xa53(0x01)
	char UnknownData_A54_0 : 7; // 0xa54(0x01)
	bool bIsWeaponSideArm : 1; // 0xa54(0x01)
	char UnknownData_A55_0 : 7; // 0xa55(0x01)
	bool bIsWeaponAndGripAnimationValid : 1; // 0xa55(0x01)
	char UnknownData_A56_0 : 7; // 0xa56(0x01)
	bool bShouldAdjustSpineToHips : 1; // 0xa56(0x01)
	char UnknownData_A57[0x1]; // 0xa57(0x01)
	float DisableWeaponGripValue; // 0xa58(0x04)
	char UnknownData_A5C[0x4]; // 0xa5c(0x04)
	struct UWeaponType* WeaponType; // 0xa60(0x08)
	struct UWeaponType* PendingWeaponType; // 0xa68(0x08)
	struct FName AdjustSpineToHipsCurveName; // 0xa70(0x08)
	struct FName DisableWeaponGripCurveName; // 0xa78(0x08)
	float SideArcStrength; // 0xa80(0x04)
	char UnknownData_A84_0 : 7; // 0xa84(0x01)
	bool bIsInMidLevelCover : 1; // 0xa84(0x01)
	char UnknownData_A85_0 : 7; // 0xa85(0x01)
	bool bIsInCover : 1; // 0xa85(0x01)
	char UnknownData_A86_0 : 7; // 0xa86(0x01)
	bool bUseRecoilRightSlot : 1; // 0xa86(0x01)
	char UnknownData_A87_0 : 7; // 0xa87(0x01)
	bool bIsDualWield : 1; // 0xa87(0x01)
	struct UWeaponType* RpgWeaponType; // 0xa88(0x08)
	float RpgCoverLeftHandAlpha; // 0xa90(0x04)
	float RpgCoverRightHandAlpha; // 0xa94(0x04)
	float RpgCoverHandCorrectionSpeed; // 0xa98(0x04)
	float InCoverRecoilBlendWeight; // 0xa9c(0x04)
	struct FVector LookAtLocation; // 0xaa0(0x0c)
	struct FName DisableLookAtCurveName; // 0xaac(0x08)
	float LookAtAlphaLerp; // 0xab4(0x04)
	float LookAtClamp; // 0xab8(0x04)
	int32_t CurrentWeaponBaseMesh; // 0xabc(0x04)
	struct FVector2D LocomotionBlendSpaceValue; // 0xac0(0x08)
	float DebugAlpha; // 0xac8(0x04)
	struct FName LeftHandOffCurveName; // 0xacc(0x08)
	float LeftHandOff; // 0xad4(0x04)
	struct FName RightHandOffCurveName; // 0xad8(0x08)
	float RightHandOff; // 0xae0(0x04)
	struct FName IkinemaTurnOffCurveName; // 0xae4(0x08)
	struct FName IkinemaTurnOffUpperbodyCurveName; // 0xaec(0x08)
	float DisableIKinemaLocallyLerp; // 0xaf4(0x04)
	float IkinemaTurnOffUpperbodyValue; // 0xaf8(0x04)
	float IkinemaTurnOffUpperbodyBlendWeight; // 0xafc(0x04)
	char UnknownData_B00_0 : 7; // 0xb00(0x01)
	bool bRevolverIKActive : 1; // 0xb00(0x01)
	char UnknownData_B01[0x3]; // 0xb01(0x03)
	struct FName OverrideArmsLOffCurveName; // 0xb04(0x08)
	float OverrideArmsLOffValue; // 0xb0c(0x04)
	float OverrideArmsLOffWeight; // 0xb10(0x04)
	struct FName OverrideArmsROffCurveName; // 0xb14(0x08)
	float OverrideArmsROffValue; // 0xb1c(0x04)
	float OverrideArmsROffWeight; // 0xb20(0x04)
	char UnknownData_B24_0 : 7; // 0xb24(0x01)
	bool bIsSidearms : 1; // 0xb24(0x01)
	char UnknownData_B25_0 : 7; // 0xb25(0x01)
	bool bTransitionSlotLeftEnabled : 1; // 0xb25(0x01)
	char UnknownData_B26_0 : 7; // 0xb26(0x01)
	bool bIsDefSlotForSidearms : 1; // 0xb26(0x01)
	char UnknownData_B27[0x1]; // 0xb27(0x01)
	float ReloadAlphaLerp; // 0xb28(0x04)
	float HMGWristOffsetLerpValue; // 0xb2c(0x04)
	float HipsMultiplierLLerpValue; // 0xb30(0x04)
	float PhysicalVelocityLerp; // 0xb34(0x04)
	float SpineOverrideReloadsAlphaLerp; // 0xb38(0x04)
	float FiringLerpValue; // 0xb3c(0x04)
	float FeetPlacementAlpha; // 0xb40(0x04)
	char UnknownData_B44_0 : 7; // 0xb44(0x01)
	bool bIsDead : 1; // 0xb44(0x01)
	char UnknownData_B45[0x3]; // 0xb45(0x03)
	struct UAnimSequence* CachedOverrideArms; // 0xb48(0x08)
	char UnknownData_B50_0 : 7; // 0xb50(0x01)
	bool bOverrideArms : 1; // 0xb50(0x01)
	char UnknownData_B51[0x3]; // 0xb51(0x03)
	float UpperBodyHipsCurveValue; // 0xb54(0x04)
	int32_t ActiveAdditivePose; // 0xb58(0x04)
	int32_t SettleRCurveValue; // 0xb5c(0x04)
	int32_t SettleLCurveValue; // 0xb60(0x04)
	float IKinemaFootPlacementMaxHipMultiplier; // 0xb64(0x04)
	float AfterSpineBoneTransformAlpha; // 0xb68(0x04)
	struct FRotator AfterSpine01; // 0xb6c(0x0c)
	struct FRotator AfterSpine02; // 0xb78(0x0c)
	struct FRotator AfterSpine03; // 0xb84(0x0c)
	char UnknownData_B90_0 : 7; // 0xb90(0x01)
	bool bShouldUsePerArmBlends : 1; // 0xb90(0x01)
	char UnknownData_B91[0x3]; // 0xb91(0x03)
	struct FName TransitionSlotName; // 0xb94(0x08)
	struct FName DefaultMontageGroupName; // 0xb9c(0x08)
	struct FName TransitionMontageGroupName; // 0xba4(0x08)
	struct FName WeaponMontageGroupName; // 0xbac(0x08)
	struct FName SidearmsSlotName; // 0xbb4(0x08)
	char UnknownData_BBC[0x4]; // 0xbbc(0x04)
	struct TArray<struct FName> WeaponMontageFiringSlotNames; // 0xbc0(0x10)
	struct TArray<struct FName> WeaponMontageReloadSlotNames; // 0xbd0(0x10)
	struct UMadPlayerAnimSet* AnimationSet; // 0xbe0(0x08)
	struct FTransitionGateNodeData MovementGateName; // 0xbe8(0xb0)
	struct FName LookAtPitchModifierCurveName; // 0xc98(0x08)
	struct FName DisableGroundIKModifierCurveName; // 0xca0(0x08)
	struct FName HMGWristOffsetCurveName; // 0xca8(0x08)
	struct FName FiringCurveName; // 0xcb0(0x08)
	struct FName UpperBodyHipsCurveName; // 0xcb8(0x08)
	struct FName PlayAdditiveCurveName; // 0xcc0(0x08)
	struct FName SettleRCurveName; // 0xcc8(0x08)
	struct FName SettleLCurveName; // 0xcd0(0x08)
	struct FName ForceStopCurveName; // 0xcd8(0x08)
	struct UMadAnimationProxyDataPlayerCover* ProxyDataPlayer; // 0xce0(0x08)
	struct FFloatInterval FlavorPlayRate; // 0xce8(0x08)
	struct FFloatInterval FlavorDelay; // 0xcf0(0x08)
	struct TArray<struct FAnimRootMotionAdjuster> RootMotionAdjustments; // 0xcf8(0x10)
	char UnknownData_D08[0x30]; // 0xd08(0x30)
	struct UDNAContext* DNAContext; // 0xd38(0x08)
	char UnknownData_D40[0x18]; // 0xd40(0x18)
	struct UAimOffsetBlendSpace* CachedAimOffsetFirst; // 0xd58(0x08)
	struct UAimOffsetBlendSpace* CachedAimOffsetSecond; // 0xd60(0x08)
	char UnknownData_D68_0 : 7; // 0xd68(0x01)
	bool bLeadingAimOffsetFirst : 1; // 0xd68(0x01)
	char UnknownData_D69[0x3]; // 0xd69(0x03)
	float AimOffsetBlendStrength; // 0xd6c(0x04)
	struct FVector2D AimOffsetValue; // 0xd70(0x08)
	char UnknownData_D78[0x8]; // 0xd78(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Start_Fwd; // 0xd80(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Start_R; // 0xd88(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Start_L; // 0xd90(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Stop_Fwd; // 0xd98(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Stop_Bwd; // 0xda0(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Stop_R; // 0xda8(0x08)
	struct UAnimMontage* Rifle_Aim_Strafe_Stop_L; // 0xdb0(0x08)
	struct UWeaponType* HeavyWeaponType; // 0xdb8(0x08)
	char UnknownData_DC0[0x10]; // 0xdc0(0x10)

	void OnSpeedChanged(enum class EPlayerMovementSpeed PreviousSpeed, enum class EPlayerMovementSpeed NewSpeed); // Function Madness.MadPlayerAnimInstance.OnSpeedChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x169d110
	void OnAdditiveMontageBlendingOut(struct UAnimMontage* FlavorMontage, bool bInterrupted); // Function Madness.MadPlayerAnimInstance.OnAdditiveMontageBlendingOut // (Final|Native|Private) // @ game+0x169c5c0
	bool IsRightWeaponAttachment(); // Function Madness.MadPlayerAnimInstance.IsRightWeaponAttachment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b990
	bool IsProxyValid(); // Function Madness.MadPlayerAnimInstance.IsProxyValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b940
	struct UBlendSpaceBase* GetWeaponGripAnimation(); // Function Madness.MadPlayerAnimInstance.GetWeaponGripAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169b080
	struct UAnimSequence* GetTurnInPlaceSettleAnim(); // Function Madness.MadPlayerAnimInstance.GetTurnInPlaceSettleAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169af90
	struct UBlendSpace1D* GetTurnInPlaceBlendspace(); // Function Madness.MadPlayerAnimInstance.GetTurnInPlaceBlendspace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169af50
	struct FTurnInPlaceAnimations GetTurnInPlaceAnimations(); // Function Madness.MadPlayerAnimInstance.GetTurnInPlaceAnimations // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169af10
	void GetLocomotionBlendSpaceCoordinates(float OutX, float OutY); // Function Madness.MadPlayerAnimInstance.GetLocomotionBlendSpaceCoordinates // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x169acb0
	struct UAnimationAsset* GetLocomotionAnimation(enum class EPlayerAnimDataType AnimDataType); // Function Madness.MadPlayerAnimInstance.GetLocomotionAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ac20
	struct UAnimationAsset* GetFaceAnimation(); // Function Madness.MadPlayerAnimInstance.GetFaceAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169ab00
	struct UAimOffsetBlendSpace* GetAimOffset(); // Function Madness.MadPlayerAnimInstance.GetAimOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a6a0
	struct FLayeredBlendSetup GetActiveLayeredBlendSetup(); // Function Madness.MadPlayerAnimInstance.GetActiveLayeredBlendSetup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x169a560
	bool CanExitTurningState(); // Function Madness.MadPlayerAnimInstance.CanExitTurningState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1699290
	bool CanEnterTurningState(); // Function Madness.MadPlayerAnimInstance.CanEnterTurningState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1699260
};

// Class Madness.MadPlayerAnimSet
// Size: 0x38 (Inherited: 0x28)
struct UMadPlayerAnimSet : UObject {
	struct UMadPlayerAnimStack* AnimStacks[0x2]; // 0x28(0x10)
};

// Class Madness.MadPlayerAnimStack
// Size: 0x48 (Inherited: 0x40)
struct UMadPlayerAnimStack : UWeaponAnimStack {
	char UnknownData_40[0x8]; // 0x40(0x08)
};

// Class Madness.MadPlayerCharacterCustomState
// Size: 0x38 (Inherited: 0x28)
struct UMadPlayerCharacterCustomState : UObject {
	char UnknownData_28[0x10]; // 0x28(0x10)
};

// Class Madness.MadPlayerCharacterAbilityAnimState
// Size: 0x50 (Inherited: 0x38)
struct UMadPlayerCharacterAbilityAnimState : UMadPlayerCharacterCustomState {
	struct TArray<struct UMadPlayerAnimData*> AnimDataOverride; // 0x38(0x10)
	char UnknownData_48[0x8]; // 0x48(0x08)
};

// Class Madness.MadPlayerCharacterData
// Size: 0x70 (Inherited: 0x30)
struct UMadPlayerCharacterData : UDataAsset {
	struct UCurveFloat* RotationRateWhenUseControllerRotationMultiplier; // 0x30(0x08)
	struct UCurveFloat* SideArcVelocityCurve; // 0x38(0x08)
	struct UCurveFloat* SideArcTimeSinceMoveStartCurve; // 0x40(0x08)
	SoftClassProperty CoverMarkerClass; // 0x48(0x28)
};

// Class Madness.MadPlayerCharacterDownButNotOutState
// Size: 0xd0 (Inherited: 0x38)
struct UMadPlayerCharacterDownButNotOutState : UMadPlayerCharacterCustomState {
	char UnknownData_38[0x24]; // 0x38(0x24)
	char UnknownData_5C_0 : 7; // 0x5c(0x01)
	bool bStateJustInitialized : 1; // 0x5c(0x01)
	char UnknownData_5D[0x3]; // 0x5d(0x03)
	int32_t DBNOCounter; // 0x60(0x04)
	char UnknownData_64[0x8]; // 0x64(0x08)
	int32_t MaxDBNOCount; // 0x6c(0x04)
	int32_t MaxCombatSelfReviveAmount; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
	struct AActor* ArrowMarker; // 0x78(0x08)
	struct UAudioComponent* HeartbeatSound; // 0x80(0x08)
	struct UParticleSystemComponent* BloodParticle; // 0x88(0x08)
	struct AMadCallForHelpInteraction* CallForHelpInteractionActor; // 0x90(0x08)
	char UnknownData_98[0x38]; // 0x98(0x38)

	void StopRequestingRevive(); // Function Madness.MadPlayerCharacterDownButNotOutState.StopRequestingRevive // (Final|Native|Private) // @ game+0x16a6560
	void ServerTriggerSelfReviveAbility(struct ABasePlayerController* Controller); // Function Madness.MadPlayerCharacterDownButNotOutState.ServerTriggerSelfReviveAbility // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x16a6180
	void OnRequestingReviveChatter(); // Function Madness.MadPlayerCharacterDownButNotOutState.OnRequestingReviveChatter // (Final|Native|Public) // @ game+0x16a5820
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadPlayerCharacterDownButNotOutState.OnPlayerLogout // (Final|Native|Private) // @ game+0x16a5760
	void OnOtherPlayerStartInteracting(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacterDownButNotOutState.OnOtherPlayerStartInteracting // (Final|Native|Private) // @ game+0x16a56a0
	void OnOtherPlayerInteractionInterrupted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacterDownButNotOutState.OnOtherPlayerInteractionInterrupted // (Final|Native|Private) // @ game+0x16a55e0
	void OnOtherPlayerInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacterDownButNotOutState.OnOtherPlayerInteracted // (Final|Native|Private) // @ game+0x16a5520
	void OnLocalPlayerStartInteracting(struct ABasePlayerController* LocalController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadPlayerCharacterDownButNotOutState.OnLocalPlayerStartInteracting // (Final|Native|Private) // @ game+0x16a5360
	void OnCharacterDied(struct FGlobalEventParams GlobalEvent); // Function Madness.MadPlayerCharacterDownButNotOutState.OnCharacterDied // (Final|Native|Private|HasOutParms) // @ game+0x16a5010
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadPlayerCharacterDownButNotOutState.OnBattleStateChanged // (Final|Native|Private) // @ game+0x16a4f80
	void MulticastPlayReviveSucceededSound(); // Function Madness.MadPlayerCharacterDownButNotOutState.MulticastPlayReviveSucceededSound // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x16a4f60
};

// Class Madness.MadCallForHelpInteraction
// Size: 0x2f8 (Inherited: 0x2f0)
struct AMadCallForHelpInteraction : AActor {
	struct ULocalInteractionComponent* InteractionComponent; // 0x2f0(0x08)

	void OnInteracted(struct ABasePlayerController* InteractingContrller, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadCallForHelpInteraction.OnInteracted // (Final|Native|Protected) // @ game+0x16a5190
	struct ULocalInteractionComponent* GetInteractionComponent(); // Function Madness.MadCallForHelpInteraction.GetInteractionComponent // (Final|Native|Public|Const) // @ game+0x16a4f10
};

// Class Madness.MadPlayerCharacterHangingState
// Size: 0x90 (Inherited: 0x38)
struct UMadPlayerCharacterHangingState : UMadPlayerCharacterCustomState {
	struct USceneComponent* AimTargetComponent; // 0x38(0x08)
	struct FName AimTargetSocket; // 0x40(0x08)
	struct FCameraViewLimits CameraViewLimits; // 0x48(0x14)
	char UnknownData_5C[0x14]; // 0x5c(0x14)
	struct UMadPlayerAnimData* AnimDataOverride; // 0x70(0x08)
	struct APlayerController* PlayerController; // 0x78(0x08)
	struct APlayerCameraManager* CameraManager; // 0x80(0x08)
	char UnknownData_88[0x8]; // 0x88(0x08)
};

// Class Madness.MadPlayerMovementComponent
// Size: 0x11f0 (Inherited: 0xf20)
struct UMadPlayerMovementComponent : UBasePlayerMovementComponent {
	char UnknownData_F20[0x8]; // 0xf20(0x08)
	struct FMulticastInlineDelegate OnWantsToStartMoveAction; // 0xf28(0x10)
	char UnknownData_F38[0x10]; // 0xf38(0x10)
	float RotationRateWhenOrientRotationToMovement; // 0xf48(0x04)
	float RotationRateWhenUseControllerRotation; // 0xf4c(0x04)
	float WalkInputThreshold; // 0xf50(0x04)
	float JogInputThreshold; // 0xf54(0x04)
	enum class EPlayerMovementSpeed MinAllowedSpeed; // 0xf58(0x01)
	enum class EPlayerMovementSpeed MaxAllowedSpeed; // 0xf59(0x01)
	char UnknownData_F5A[0x2]; // 0xf5a(0x02)
	float MinimumDotToSlideAlongWall; // 0xf5c(0x04)
	float MinimumSpeedValueToConsiderMoving; // 0xf60(0x04)
	float WalkSpeedValue; // 0xf64(0x04)
	float JogSpeedValue; // 0xf68(0x04)
	float SprintSpeedValue; // 0xf6c(0x04)
	float MaxVelocity[0x4]; // 0xf70(0x10)
	float GlobalSpeedModifier; // 0xf80(0x04)
	float WalkModifier; // 0xf84(0x04)
	float JogModifier; // 0xf88(0x04)
	float SprintModifier; // 0xf8c(0x04)
	float AngleThresholdToSwitchToAimOffsetBack; // 0xf90(0x04)
	float AngleThresholdToSwitchToAimOffsetFront; // 0xf94(0x04)
	float NonCombatTurnMinimumAngle; // 0xf98(0x04)
	char UnknownData_F9C_0 : 7; // 0xf9c(0x01)
	bool bRotateTowardsCamera : 1; // 0xf9c(0x01)
	char UnknownData_F9D_0 : 7; // 0xf9d(0x01)
	bool bPlayStartAnim : 1; // 0xf9d(0x01)
	char UnknownData_F9E_0 : 7; // 0xf9e(0x01)
	bool bPlayStopAnim : 1; // 0xf9e(0x01)
	char UnknownData_F9F[0x1]; // 0xf9f(0x01)
	float MinDurationOfMovementToPlayStopAnim; // 0xfa0(0x04)
	enum class EPlayerMovementSpeed DesiredMoveType; // 0xfa4(0x01)
	char UnknownData_FA5[0x3]; // 0xfa5(0x03)
	float MaxHeadAimOffsetStrength; // 0xfa8(0x04)
	float AimOffsetStrengthInterpSpeed; // 0xfac(0x04)
	float AimOffsetPitchInterpSpeed; // 0xfb0(0x04)
	float LookAtInterpSpeedIn; // 0xfb4(0x04)
	float LookAtInterpSpeedOut; // 0xfb8(0x04)
	float SideArcMultiplier; // 0xfbc(0x04)
	float HardLandingMaxZThreshold; // 0xfc0(0x04)
	float LookAtDistance; // 0xfc4(0x04)
	float HeadInterpSpeed; // 0xfc8(0x04)
	char UnknownData_FCC[0x1c]; // 0xfcc(0x1c)
	struct FGameplayTag MoveActionEventTag[0x2]; // 0xfe8(0x10)
	float MoveActionStartedTimestamp; // 0xff8(0x04)
	float MoveActionFinishedTimestamp; // 0xffc(0x04)
	float MovementStartingTimestamp; // 0x1000(0x04)
	float MovementStoppingTimestamp; // 0x1004(0x04)
	float StartSprintTimeStamp; // 0x1008(0x04)
	float StopSprintTimeStamp; // 0x100c(0x04)
	float EnteredCombatTimestamp; // 0x1010(0x04)
	float LeftCombatTimestamp; // 0x1014(0x04)
	char UnknownData_1018[0x10]; // 0x1018(0x10)
	struct FVector2D AimOffsetVector; // 0x1028(0x08)
	struct AMadPlayerCharacter* PlayerChar; // 0x1030(0x08)
	char UnknownData_1038[0x10]; // 0x1038(0x10)
	struct UMadMoveDataContainer* MoveDataContainer; // 0x1048(0x08)
	struct TMap<enum class EPlayerMoveAction, struct UMadMoveAction*> MoveActions; // 0x1050(0x50)
	struct TMap<enum class EPlayerLocomotionState, struct UMadLocomotionState*> LocomotionStateClasses; // 0x10a0(0x50)
	struct TMap<enum class EPlayerLocomotionState, struct UMadLocomotionState*> LocomotionStates; // 0x10f0(0x50)
	struct UMadGameplayEffect* FallingGameplayEffectClass; // 0x1140(0x08)
	struct UCameraShake* LandingCameraShakeClass; // 0x1148(0x08)
	struct AActor* LastHitImpactActor; // 0x1150(0x08)
	float TurnInPlaceMinimumAngle; // 0x1158(0x04)
	char UnknownData_115C_0 : 7; // 0x115c(0x01)
	bool bPlayNonCombatTurnAnim : 1; // 0x115c(0x01)
	char UnknownData_115D_0 : 7; // 0x115d(0x01)
	bool bPlayCombatTurnInPlaceAnim : 1; // 0x115d(0x01)
	char UnknownData_115E_0 : 7; // 0x115e(0x01)
	bool bApplyAimRotation : 1; // 0x115e(0x01)
	char UnknownData_115F_0 : 7; // 0x115f(0x01)
	bool bAlwaysUseControllerRotation : 1; // 0x115f(0x01)
	float LastDesiredSpeedMultiplier; // 0x1160(0x04)
	float TurnInPlaceSpeedBase; // 0x1164(0x04)
	char UnknownData_1168_0 : 7; // 0x1168(0x01)
	bool bLastDesiredRotationUpdated : 1; // 0x1168(0x01)
	char UnknownData_1169_0 : 7; // 0x1169(0x01)
	bool bCanPlayTurnInPlace : 1; // 0x1169(0x01)
	char UnknownData_116A_0 : 7; // 0x116a(0x01)
	bool bTurningInPlace : 1; // 0x116a(0x01)
	char UnknownData_116B_0 : 7; // 0x116b(0x01)
	bool bShouldUpdateTurnInPlaceTargetRot : 1; // 0x116b(0x01)
	char UnknownData_116C_0 : 7; // 0x116c(0x01)
	bool bEndingTurnInPlace : 1; // 0x116c(0x01)
	char UnknownData_116D[0x3]; // 0x116d(0x03)
	float LastDesiredSpeed; // 0x1170(0x04)
	char UnknownData_1174_0 : 7; // 0x1174(0x01)
	bool bLastDifferenceLooping : 1; // 0x1174(0x01)
	char UnknownData_1175[0x3]; // 0x1175(0x03)
	float LastDifference; // 0x1178(0x04)
	float LastDifference_LastFramesAvg; // 0x117c(0x04)
	char UnknownData_1180[0x30]; // 0x1180(0x30)
	float LastDifferenceAbs; // 0x11b0(0x04)
	float RotationDifferenceWeight; // 0x11b4(0x04)
	float MinRotationSpeed; // 0x11b8(0x04)
	float LastCollectedMouseYaw; // 0x11bc(0x04)
	struct FRotator LastLegRotation; // 0x11c0(0x0c)
	struct FRotator LastUpperBodyRotation; // 0x11cc(0x0c)
	struct FRotator LastDesiredRotation; // 0x11d8(0x0c)
	struct FGameplayTag TurnInPlaceTag; // 0x11e4(0x08)
	char UnknownData_11EC[0x4]; // 0x11ec(0x04)

	void OnWeaponReloadFinished(struct AWeapon* Weapon); // Function Madness.MadPlayerMovementComponent.OnWeaponReloadFinished // (Final|Native|Public) // @ game+0x16a9310
	void OnWantsToStartMoveAction__DelegateSignature(enum class EPlayerMoveAction MoveAction); // DelegateFunction Madness.MadPlayerMovementComponent.OnWantsToStartMoveAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnRawInputStopped(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnRawInputStopped // (Native|Public|HasOutParms) // @ game+0x16a8f90
	void OnRawInputStarted(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnRawInputStarted // (Native|Public|HasOutParms) // @ game+0x16a8ef0
	void OnMoveActionFinished__DelegateSignature(enum class EPlayerMoveAction MoveAction); // DelegateFunction Madness.MadPlayerMovementComponent.OnMoveActionFinished__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void OnHistoryProcessedInputStopped(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnHistoryProcessedInputStopped // (Native|Public|HasOutParms) // @ game+0x16a8db0
	void OnHistoryProcessedInputStarted(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnHistoryProcessedInputStarted // (Native|Public|HasOutParms) // @ game+0x16a8d10
	void OnFullyProcessedInputStopped(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnFullyProcessedInputStopped // (Native|Public|HasOutParms) // @ game+0x16a8c70
	void OnFullyProcessedInputStarted(struct FInputThumbstickDirections InputDirections); // Function Madness.MadPlayerMovementComponent.OnFullyProcessedInputStarted // (Native|Public|HasOutParms) // @ game+0x16a8bd0
	void OnAnimDataChanged(); // Function Madness.MadPlayerMovementComponent.OnAnimDataChanged // (Native|Public) // @ game+0x16a8a10
};

// Class Madness.MadPlayerCoverMovementComponent
// Size: 0x14a0 (Inherited: 0x11f0)
struct UMadPlayerCoverMovementComponent : UMadPlayerMovementComponent {
	char UnknownData_11F0_0 : 7; // 0x11f0(0x01)
	bool bUseSplineToMovePlayerInCover : 1; // 0x11f0(0x01)
	char UnknownData_11F1[0x3]; // 0x11f1(0x03)
	float CoverWalkSpeedValue; // 0x11f4(0x04)
	float CoverWalkInputThreshold; // 0x11f8(0x04)
	char UnknownData_11FC_0 : 7; // 0x11fc(0x01)
	bool bCanAlwaysUseWeaponInHighCover : 1; // 0x11fc(0x01)
	char UnknownData_11FD[0x3]; // 0x11fd(0x03)
	float RotationRateWhenUseControllerRotationInCover; // 0x1200(0x04)
	char UnknownData_1204_0 : 7; // 0x1204(0x01)
	bool bPlayEnterAnim : 1; // 0x1204(0x01)
	char UnknownData_1205_0 : 7; // 0x1205(0x01)
	bool bPlayLeaveAnim : 1; // 0x1205(0x01)
	char UnknownData_1206[0x2]; // 0x1206(0x02)
	float InputAngleKickOutOfCover; // 0x1208(0x04)
	float InputSizeKickOutOfCover; // 0x120c(0x04)
	float InputAngleJumpOverCoverInBoundary; // 0x1210(0x04)
	float InputAngleJumpOverCoverInTheMiddle; // 0x1214(0x04)
	float InputAngleJumpOverCoverToCover; // 0x1218(0x04)
	float InputAngleSprintOutCover; // 0x121c(0x04)
	float SidePeekAimOffsetThreshold; // 0x1220(0x04)
	float SidePeekAimOffsetThresholdDifference; // 0x1224(0x04)
	float HighCoverPopupThreshold; // 0x1228(0x04)
	float HighCoverPopupThresholdDifference; // 0x122c(0x04)
	float StandingOverMidLevelSlotWeaponUsageThreshold; // 0x1230(0x04)
	float StandingOverMidLevelSlotWeaponUsageMinAimOffset; // 0x1234(0x04)
	float AimPitchLimitInCover; // 0x1238(0x04)
	float ApplyPitchLimitInCoverYawThresholdInner; // 0x123c(0x04)
	float ApplyPitchLimitInCoverYawThresholdInBoundary; // 0x1240(0x04)
	char UnknownData_1244_0 : 7; // 0x1244(0x01)
	bool bCanSidePeekFromLowCover : 1; // 0x1244(0x01)
	char UnknownData_1245_0 : 7; // 0x1245(0x01)
	bool bPreferSidePeekFromLowCover : 1; // 0x1245(0x01)
	char UnknownData_1246[0x2]; // 0x1246(0x02)
	float LowCoverSidePeekLocationOffset; // 0x1248(0x04)
	float HiCoverSidePeekLocationOffset; // 0x124c(0x04)
	float CapsuleRadiusWhenInCover; // 0x1250(0x04)
	char UnknownData_1254[0x4]; // 0x1254(0x04)
	struct FName EnableStickToCoverCurveName; // 0x1258(0x08)
	struct FName DisableFiringCurveName; // 0x1260(0x08)
	char UnknownData_1268_0 : 7; // 0x1268(0x01)
	bool bEnableStickToCover : 1; // 0x1268(0x01)
	char UnknownData_1269[0x3]; // 0x1269(0x03)
	float AngleThresholdToSwitchCoverDirection; // 0x126c(0x04)
	float AngleThresholdToSwitchCoverDirectionIfFacingSlotHigh; // 0x1270(0x04)
	float AngleThresholdToSwitchCoverDirectionIfFacingSlotInHighBoundary; // 0x1274(0x04)
	float FarEnterDistance; // 0x1278(0x04)
	float NearEnterDistance; // 0x127c(0x04)
	float DelayAfterReleasingInputToRememberSlotDetectionDirection; // 0x1280(0x04)
	float BoundarySlotPlayerAdjustmentAimAngleThresghold; // 0x1284(0x04)
	float CoverMovementModifier; // 0x1288(0x04)
	char UnknownData_128C[0x5c]; // 0x128c(0x5c)
	char UnknownData_12E8_0 : 7; // 0x12e8(0x01)
	bool bReachedBoundary : 1; // 0x12e8(0x01)
	char UnknownData_12E9[0x3]; // 0x12e9(0x03)
	struct FVector CachedNearJumpOverResultLocation; // 0x12ec(0x0c)
	char UnknownData_12F8[0x8]; // 0x12f8(0x08)
	struct UCoverSlot* OccupiedCoverBoundarySlots[0x4]; // 0x1300(0x20)
	struct UCoverSlot* OccupiedSoftHighCoverBoundarySlots[0x4]; // 0x1320(0x20)
	char UnknownData_1340_0 : 7; // 0x1340(0x01)
	bool bReachedSidePeekLocation : 1; // 0x1340(0x01)
	char UnknownData_1341_0 : 7; // 0x1341(0x01)
	bool bReallyWantsToSidePeekAtBoundary : 1; // 0x1341(0x01)
	char UnknownData_1342[0x2]; // 0x1342(0x02)
	float EnteredCoverTimeStamp; // 0x1344(0x04)
	float LeftCoverTimeStamp; // 0x1348(0x04)
	char UnknownData_134C[0x4]; // 0x134c(0x04)
	struct TArray<bool> bNearbySlotValid; // 0x1350(0x10)
	char UnknownData_1360[0x28]; // 0x1360(0x28)
	float ApplyCoverConstraintsInterpSpeed; // 0x1388(0x04)
	float BehindCoverTraceLengthForJumpOver; // 0x138c(0x04)
	float SideCoverTraceLength; // 0x1390(0x04)
	float SideCoverTraceAngleMultiplier; // 0x1394(0x04)
	float CoverJumpHeight; // 0x1398(0x04)
	float BoundarySidePeekAllowedLimit; // 0x139c(0x04)
	float BoundaryInputLimit[0x3]; // 0x13a0(0x0c)
	float BoundaryHardLimit[0x3]; // 0x13ac(0x0c)
	float TriggerJumpOverExtendSize; // 0x13b8(0x04)
	struct FGameplayTag InCoverGameplayTag; // 0x13bc(0x08)
	char UnknownData_13C4[0x24]; // 0x13c4(0x24)
	struct TMap<enum class ECoverLeaveType, enum class EPlayerMoveAction> LeaveCoverMoveActionTypes; // 0x13e8(0x50)
	struct TMap<enum class ECoverEnterType, enum class EPlayerMoveAction> EnterCoverMoveActionTypes; // 0x1438(0x50)
	struct USplineComponent* CoverSplineComp; // 0x1488(0x08)
	char UnknownData_1490[0x8]; // 0x1490(0x08)
	float SplineDistance; // 0x1498(0x04)
	char UnknownData_149C[0x4]; // 0x149c(0x04)

	void OnWeaponAttachedToHandNotify(struct AWeapon* AttachedWeapon, bool bRight); // Function Madness.MadPlayerCoverMovementComponent.OnWeaponAttachedToHandNotify // (Final|Native|Public) // @ game+0x16a9240
	void OnEnteredCover(); // Function Madness.MadPlayerCoverMovementComponent.OnEnteredCover // (Final|Native|Public) // @ game+0x16a8bb0
	void HandleTriggerJumpOverEndOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadPlayerCoverMovementComponent.HandleTriggerJumpOverEndOverlap // (Final|Native|Protected) // @ game+0x16a8950
	void HandleTriggerJumpOverBeginOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadPlayerCoverMovementComponent.HandleTriggerJumpOverBeginOverlap // (Final|Native|Protected) // @ game+0x16a8890
	void HandleCharacterMovement(float DeltaSeconds, struct FVector OldLocation, struct FVector OldVelocity); // Function Madness.MadPlayerCoverMovementComponent.HandleCharacterMovement // (Final|Native|Protected|HasDefaults) // @ game+0x16a8770
	struct FOccupiedCoverInfo GetCoverToSprintTo(); // Function Madness.MadPlayerCoverMovementComponent.GetCoverToSprintTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a8630
};

// Class Madness.MadPlayerEffectsSpawner
// Size: 0x350 (Inherited: 0x2f0)
struct AMadPlayerEffectsSpawner : AInfo {
	struct TArray<struct AVolume*> TriggerVolumes; // 0x2f0(0x10)
	struct TArray<struct FPlayerParticleEffectData> EffectsToSpawnOnEnter; // 0x300(0x10)
	struct TArray<struct FPlayerParticleEffectData> EffectsToSpawnOnExit; // 0x310(0x10)
	struct TArray<struct UParticleSystemComponent*> EffectsSpawnedOnEnter; // 0x320(0x10)
	struct TArray<struct UParticleSystemComponent*> EffectsSpawnedOnExit; // 0x330(0x10)
	char UnknownData_340_0 : 7; // 0x340(0x01)
	bool bSpawnOnStart : 1; // 0x340(0x01)
	char UnknownData_341[0xf]; // 0x341(0x0f)

	void RemoveExitEffects(); // Function Madness.MadPlayerEffectsSpawner.RemoveExitEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x16a93d0
	void RemoveEnterEffects(); // Function Madness.MadPlayerEffectsSpawner.RemoveEnterEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x16a93b0
	void RemoveAllEffects(); // Function Madness.MadPlayerEffectsSpawner.RemoveAllEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x16a9390
	void OnEndOverlapArea(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadPlayerEffectsSpawner.OnEndOverlapArea // (Final|Native|Protected) // @ game+0x16a8af0
	void OnBeginOverlapArea(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.MadPlayerEffectsSpawner.OnBeginOverlapArea // (Final|Native|Protected) // @ game+0x16a8a30
	void ApplyExitEffects(); // Function Madness.MadPlayerEffectsSpawner.ApplyExitEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x16a8610
	void ApplyEnterEffects(); // Function Madness.MadPlayerEffectsSpawner.ApplyEnterEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x16a85f0
	void ApplyEffectsByVolumes(); // Function Madness.MadPlayerEffectsSpawner.ApplyEffectsByVolumes // (Final|Native|Public|BlueprintCallable) // @ game+0x16a85d0
};

// Class Madness.MadPlayerFollowInputComponent
// Size: 0x228 (Inherited: 0x218)
struct UMadPlayerFollowInputComponent : UPlayerFollowInputComponent {
	char UnknownData_218[0x10]; // 0x218(0x10)
};

// Class Madness.MadPlayerForceFeedbackData
// Size: 0x180 (Inherited: 0x30)
struct UMadPlayerForceFeedbackData : UDataAsset {
	struct TMap<struct FName, struct TSoftObjectPtr<struct UForceFeedbackEffect>> FromAnimation; // 0x30(0x50)
	float CoverFarDistance; // 0x80(0x04)
	char UnknownData_84[0x4]; // 0x84(0x04)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> CoverEnterNear; // 0x88(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> CoverEnterFar; // 0xb0(0x28)
	struct TSoftObjectPtr<struct UForceFeedbackEffect> DefaultPickUpEffect; // 0xd8(0x28)
	struct TArray<enum class EMadItemType> DefaultItems; // 0x100(0x10)
	struct TMap<enum class EMadItemRarity, struct TSoftObjectPtr<struct UForceFeedbackEffect>> ItemRarityEffect; // 0x110(0x50)
	float XboxControllerFFMultiplier; // 0x160(0x04)
	float Dualshock4FFMultiplier; // 0x164(0x04)
	float DualSenseFFMultiplier; // 0x168(0x04)
	char UnknownData_16C[0x4]; // 0x16c(0x04)
	struct TArray<struct UForceFeedbackEffect*> LoadedForceFeedback; // 0x170(0x10)
};

// Class Madness.MadPlayerHealthBarComponent
// Size: 0x3d0 (Inherited: 0x370)
struct UMadPlayerHealthBarComponent : UBase3DWidgetComponent {
	char UnknownData_370[0x40]; // 0x370(0x40)
	struct TArray<struct FMadPlayerHealthBarTintSettings> BarTintSettings; // 0x3b0(0x10)
	struct FLinearColor DefaultTintColor; // 0x3c0(0x10)
};

// Class Madness.MadPlayerHealthBarWidget
// Size: 0x288 (Inherited: 0x260)
struct UMadPlayerHealthBarWidget : UBaseWidget {
	struct UTextBlock* NameTextBlock; // 0x260(0x08)
	struct UTextBlock* LevelTextBlock; // 0x268(0x08)
	struct UProgressBar* HealthProgressBar; // 0x270(0x08)
	struct UMadStatusBarWidget* MadStatusBarWidget; // 0x278(0x08)
	int32_t DotsTextBlockWidth; // 0x280(0x04)
	char UnknownData_284[0x4]; // 0x284(0x04)

	void OnUpdateStatusBarData(struct FMadStatusBarData InStatusBarData); // Function Madness.MadPlayerHealthBarWidget.OnUpdateStatusBarData // (Final|Native|Private|HasOutParms) // @ game+0x16a9180
	void OnUpdateLevel(int32_t InCurrentLevel); // Function Madness.MadPlayerHealthBarWidget.OnUpdateLevel // (Final|Native|Private) // @ game+0x16a9100
	void OnUpdateCurrentHealth(float InCurrentHealth, struct FLinearColor BarTint); // Function Madness.MadPlayerHealthBarWidget.OnUpdateCurrentHealth // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x16a9030
	void OnInitialize(struct FString InName); // Function Madness.MadPlayerHealthBarWidget.OnInitialize // (Final|Native|Private) // @ game+0x16a8e50
};

// Class Madness.MadPlayerInput
// Size: 0x450 (Inherited: 0x3c0)
struct UMadPlayerInput : UGameplayPlayerInput {
	char UnknownData_3C0[0x90]; // 0x3c0(0x90)
};

// Class Madness.MadPlayerKnockbackGameplayAbility
// Size: 0x560 (Inherited: 0x4b8)
struct UMadPlayerKnockbackGameplayAbility : UMadGameplayAbility {
	struct AMadPlayerCharacter* OwnerPlayer; // 0x4b8(0x08)
	struct AController* InstigatorController; // 0x4c0(0x08)
	struct UMadDamageType* DamageTypeClass; // 0x4c8(0x08)
	struct AActor* DamageCauser; // 0x4d0(0x08)
	char UnknownData_4D8_0 : 7; // 0x4d8(0x01)
	bool bBlockPlayer : 1; // 0x4d8(0x01)
	char UnknownData_4D9[0x7]; // 0x4d9(0x07)
	struct FMadHardRefReactionAnimData RifleLight; // 0x4e0(0x20)
	struct FMadHardRefReactionAnimData RifleHeavy; // 0x500(0x20)
	struct FMadHardRefReactionAnimData PistolLight; // 0x520(0x20)
	struct FMadHardRefReactionAnimData PistolHeavy; // 0x540(0x20)

	void UnblockPlayer(); // Function Madness.MadPlayerKnockbackGameplayAbility.UnblockPlayer // (Final|Native|Protected|BlueprintCallable) // @ game+0x16a93f0
	void GetReactionData(struct FMadReactionAnimData OutReaction); // Function Madness.MadPlayerKnockbackGameplayAbility.GetReactionData // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x16a86c0
	struct AMadPlayerCharacter* GetOwnerPlayer(); // Function Madness.MadPlayerKnockbackGameplayAbility.GetOwnerPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x16557d0
	struct AController* GetInstigatorController(); // Function Madness.MadPlayerKnockbackGameplayAbility.GetInstigatorController // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a86a0
	struct AActor* GetDamageCauser(); // Function Madness.MadPlayerKnockbackGameplayAbility.GetDamageCauser // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1622530
};

// Class Madness.MadPlayerMinimapNodeStrategy
// Size: 0x40 (Inherited: 0x30)
struct UMadPlayerMinimapNodeStrategy : UMinimapNodeStrategy {
	char UnknownData_30[0x10]; // 0x30(0x10)
};

// Class Madness.MadPlayerPostAnimInstance
// Size: 0x300 (Inherited: 0x2c0)
struct UMadPlayerPostAnimInstance : UAnimInstance {
	struct UMadAnimationProxyDataPlayerCover* DefaultProxyDataPlayer; // 0x2c0(0x08)
	struct AMadPlayerCharacter* PlayerCharacter; // 0x2c8(0x08)
	struct UMadAnimationProxyDataPlayerCover* ProxyDataPlayer; // 0x2d0(0x08)
	struct FRotator WeapHolsterInCoverRotationLerp; // 0x2d8(0x0c)
	float WeapHolsterInCoverAnimDynAlphaLerp; // 0x2e4(0x04)
	struct FVector WeapHolsterInCoverTranslationLerp; // 0x2e8(0x0c)
	char UnknownData_2F4[0xc]; // 0x2f4(0x0c)
};

// Class Madness.MadPlayerUIModel
// Size: 0x390 (Inherited: 0x50)
struct UMadPlayerUIModel : UBaseUIModel {
	char UnknownData_50[0xf0]; // 0x50(0xf0)
	struct FString WeaponSideIconPath; // 0x140(0x10)
	struct FString Weapon1IconPath; // 0x150(0x10)
	struct FString Weapon2IconPath; // 0x160(0x10)
	enum class EMadItemRarity WeaponSideRarity; // 0x170(0x01)
	enum class EMadItemRarity Weapon1Rarity; // 0x171(0x01)
	enum class EMadItemRarity Weapon2Rarity; // 0x172(0x01)
	enum class None ActiveWeaponSlotId; // 0x173(0x01)
	int32_t CurrentAmmo; // 0x174(0x04)
	int32_t MaxCurrentAmmo; // 0x178(0x04)
	int32_t MaxWearableItemLevel; // 0x17c(0x04)
	struct TArray<struct FMadStatusUIData> Buffs; // 0x180(0x10)
	struct TArray<struct FMadStatusUIData> Debuffs; // 0x190(0x10)
	struct FMadOnlineStashInventoryUIData OnlineStashInventoryData; // 0x1a0(0x10)
	struct FMadMinimalEquippedItemsUIData EquippedItemsData; // 0x1b0(0x18)
	struct TArray<struct FMadItemOfferConsumable> ItemOfferConsumablesData; // 0x1c8(0x10)
	struct TArray<struct FOneTimeRewardUIData> OneTimeRewards; // 0x1d8(0x10)
	struct TArray<struct FMadDifficultyUnlockUI> DifficultyRewards; // 0x1e8(0x10)
	enum class None CurrentWorldLevel; // 0x1f8(0x01)
	char UnknownData_1F9_0 : 7; // 0x1f9(0x01)
	bool IsSavingIconVisible : 1; // 0x1f9(0x01)
	char UnknownData_1FA_0 : 7; // 0x1fa(0x01)
	bool bIsPartyLeader : 1; // 0x1fa(0x01)
	char UnknownData_1FB[0x1]; // 0x1fb(0x01)
	float CurrentWorldLevelProgress; // 0x1fc(0x04)
	int32_t CurrentMaxDifficultyLevel; // 0x200(0x04)
	char UnknownData_204[0x4]; // 0x204(0x04)
	struct TArray<struct FMadDifficultyUnlockUI> BlockedDifficultyRewards; // 0x208(0x10)
	struct TArray<struct FMadResourceUIData> Resources; // 0x218(0x10)
	struct TArray<struct FMadAnomalyCrystal> AnomalyCrystals; // 0x228(0x10)
	float HealthMitigationFirstThreshold; // 0x238(0x04)
	float HealthMitigationSecondThreshold; // 0x23c(0x04)
	char UnknownData_240_0 : 7; // 0x240(0x01)
	bool bIsFirstHealthMitigationEffectOnCooldown : 1; // 0x240(0x01)
	char UnknownData_241_0 : 7; // 0x241(0x01)
	bool bIsSecondHealthMitigationEffectOnCooldown : 1; // 0x241(0x01)
	char UnknownData_242[0x6]; // 0x242(0x06)
	struct FString CharacterName; // 0x248(0x10)
	char UnknownData_258[0x78]; // 0x258(0x78)
	struct TArray<bool> HUDElementsVisibility; // 0x2d0(0x10)
	struct TArray<struct FMadHeroScreenTabStateUIData> HeroScreenTabStates; // 0x2e0(0x10)
	struct FString PlayerNetID; // 0x2f0(0x10)
	struct FString UserId; // 0x300(0x10)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bIsInBattle : 1; // 0x310(0x01)
	char UnknownData_311_0 : 7; // 0x311(0x01)
	bool bReviveInProgress : 1; // 0x311(0x01)
	char UnknownData_312_0 : 7; // 0x312(0x01)
	bool bReviveInterrupted : 1; // 0x312(0x01)
	char UnknownData_313[0x5]; // 0x313(0x05)
	struct FString ReviverName; // 0x318(0x10)
	char UnknownData_328_0 : 7; // 0x328(0x01)
	bool bShowHUD : 1; // 0x328(0x01)
	char UnknownData_329[0x67]; // 0x329(0x67)

	void TakeApartItems(struct TArray<struct FMadItemInventoryLocation> ItemsLocations, enum class EMadItemTakeApartAction Action); // Function Madness.MadPlayerUIModel.TakeApartItems // (Final|Native|Public) // @ game+0x16b5240
	void SetWorldDifficultyLevel(enum class None InDifficultyLevel); // Function Madness.MadPlayerUIModel.SetWorldDifficultyLevel // (Final|Native|Public) // @ game+0x16b5110
	void SetPreviewHiddenInGame(bool bIsHidden); // Function Madness.MadPlayerUIModel.SetPreviewHiddenInGame // (Final|Native|Public) // @ game+0x16b5080
	void SetForceHeroScreenTabEnabled(struct FName InHeroScreenTabName, bool bInDebugForceEnabled); // Function Madness.MadPlayerUIModel.SetForceHeroScreenTabEnabled // (Final|Native|Public) // @ game+0x16b4fb0
	void SetAutoWorldLevelUp(bool InWorldLevelUpAutomatic); // Function Madness.MadPlayerUIModel.SetAutoWorldLevelUp // (Final|Native|Public) // @ game+0x16b4f20
	void SetActiveWeaponSlot(enum class EMadItemSlot Slot); // Function Madness.MadPlayerUIModel.SetActiveWeaponSlot // (Final|Native|Public) // @ game+0x16b4ea0
	void ResendSkillNotifications(); // Function Madness.MadPlayerUIModel.ResendSkillNotifications // (Final|Native|Public) // @ game+0x16b4750
	void RemoveSingleIndicatorId(uint32_t ID, uint32_t MinorID); // Function Madness.MadPlayerUIModel.RemoveSingleIndicatorId // (Final|Native|Public) // @ game+0x16b4690
	void RefreshSkillsDurationAndStatus(); // Function Madness.MadPlayerUIModel.RefreshSkillsDurationAndStatus // (Final|Native|Public) // @ game+0x16b4670
	void RefreshSkillsCooldownDuration(); // Function Madness.MadPlayerUIModel.RefreshSkillsCooldownDuration // (Final|Native|Public) // @ game+0x16b4650
	void RedeemItemOffer(struct FString ItemOfferName); // Function Madness.MadPlayerUIModel.RedeemItemOffer // (Final|Native|Public) // @ game+0x16b45b0
	void OnWorldLevelEperienceChanged(float InCurrentWorldLevelProgress); // Function Madness.MadPlayerUIModel.OnWorldLevelEperienceChanged // (Final|Native|Public) // @ game+0x16b4530
	void OnWorldLevelChanged(); // Function Madness.MadPlayerUIModel.OnWorldLevelChanged // (Final|Native|Public) // @ game+0x16b4510
	void OnWeaponSwap(struct FMadWeaponsHudData WeaponsHud); // Function Madness.MadPlayerUIModel.OnWeaponSwap // (Final|Native|Public) // @ game+0x16b4460
	void OnWeaponFired(struct FHitResult Trace, struct TArray<struct ABaseCharacter*> EnemiesHit, enum class EHitMarkerType HitMarkerType); // Function Madness.MadPlayerUIModel.OnWeaponFired // (Final|Native|Public|HasOutParms) // @ game+0x16b4280
	void OnUpdateSaveIconVisibility(bool bVisible); // Function Madness.MadPlayerUIModel.OnUpdateSaveIconVisibility // (Final|Native|Public) // @ game+0x16b41f0
	void OnSkillStarted(struct UMadSkillData* SkillData, bool IsBlocked, bool IsOnCooldown, bool IsActive); // Function Madness.MadPlayerUIModel.OnSkillStarted // (Final|Native|Public) // @ game+0x16b4070
	void OnSkillNotification(bool bShow, enum class EMadSkillNotificationType NotificationType, struct UMadSkillData* Skill, enum class EMadnessActiveSkillSlots Slot, int32_t InNumber); // Function Madness.MadPlayerUIModel.OnSkillNotification // (Final|Native|Public) // @ game+0x16b3ee0
	void OnSkillMessage(struct UMadSkillData* ActivatedSkill, struct FString MsgString, int32_t InDuration); // Function Madness.MadPlayerUIModel.OnSkillMessage // (Final|Native|Public) // @ game+0x16b3dc0
	void OnSkillDurationStopped(struct UMadSkillData* ActivatedSkill); // Function Madness.MadPlayerUIModel.OnSkillDurationStopped // (Final|Native|Public) // @ game+0x16b3d40
	void OnSkillDurationApplied(struct UMadSkillData* ActivatedSkill, float DURATION, bool bReset); // Function Madness.MadPlayerUIModel.OnSkillDurationApplied // (Final|Native|Public) // @ game+0x16b3c30
	void OnSkillCooldownStopped(struct UMadSkillData* ActivatedSkill); // Function Madness.MadPlayerUIModel.OnSkillCooldownStopped // (Final|Native|Public) // @ game+0x16b3bb0
	void OnSkillCooldownApplied(struct UMadSkillData* SkillData, float DURATION); // Function Madness.MadPlayerUIModel.OnSkillCooldownApplied // (Final|Native|Public) // @ game+0x16b3ae0
	void OnSkillBarRefreshRequest(); // Function Madness.MadPlayerUIModel.OnSkillBarRefreshRequest // (Final|Native|Public) // @ game+0x16b3ac0
	void OnSkillAvailabilityChanged(struct UMadSkillData* SkillData, bool bIsAvailable); // Function Madness.MadPlayerUIModel.OnSkillAvailabilityChanged // (Final|Native|Public) // @ game+0x16b39f0
	void OnShowTravelDestination(struct FString Destination, float NotificationTime); // Function Madness.MadPlayerUIModel.OnShowTravelDestination // (Final|Native|Public) // @ game+0x16b3910
	void OnReviveFinished(struct AMadPlayerCharacter* InReviver); // Function Madness.MadPlayerUIModel.OnReviveFinished // (Final|Native|Public) // @ game+0x16b3870
	void OnResourcesChanged(struct FName Name, int32_t Delta); // Function Madness.MadPlayerUIModel.OnResourcesChanged // (Final|Native|Public) // @ game+0x16b37b0
	void OnOneTimeRewardsChanged(); // Function Madness.MadPlayerUIModel.OnOneTimeRewardsChanged // (Final|Native|Public) // @ game+0x16b3720
	void OnNewWeaponEquipped(); // Function Madness.MadPlayerUIModel.OnNewWeaponEquipped // (Final|Native|Public) // @ game+0x16b3700
	void OnNewAreaDiscovered(struct FGameplayTag InTag, bool bFirstTime); // Function Madness.MadPlayerUIModel.OnNewAreaDiscovered // (Final|Native|Public|HasOutParms) // @ game+0x16b3630
	void OnModsUnlocked(struct TArray<struct FString> NewMods); // Function Madness.MadPlayerUIModel.OnModsUnlocked // (Final|Native|Public|HasOutParms) // @ game+0x16b3560
	void OnMaxDifficultyLevelChanged(); // Function Madness.MadPlayerUIModel.OnMaxDifficultyLevelChanged // (Final|Native|Public) // @ game+0x16b3540
	void OnItemOfferConsumablesChanged(); // Function Madness.MadPlayerUIModel.OnItemOfferConsumablesChanged // (Final|Native|Public) // @ game+0x16b3520
	void OnItemImprove(struct AMadItem* Item); // Function Madness.MadPlayerUIModel.OnItemImprove // (Final|Native|Public) // @ game+0x16b34a0
	void OnItemEnhance(struct AMadItem* Item, bool bModSelectionAvailable); // Function Madness.MadPlayerUIModel.OnItemEnhance // (Final|Native|Public) // @ game+0x16b33d0
	void OnHeroPointsChanged(); // Function Madness.MadPlayerUIModel.OnHeroPointsChanged // (Final|Native|Public) // @ game+0x16b33b0
	void OnHealthMitigationCooldownStateChanged(int32_t ThresholdIdx, bool bIsActivated); // Function Madness.MadPlayerUIModel.OnHealthMitigationCooldownStateChanged // (Final|Native|Public) // @ game+0x16b32f0
	void OnExperienceGained(float GainedExp); // Function Madness.MadPlayerUIModel.OnExperienceGained // (Final|Native|Public) // @ game+0x16b3270
	void OnDifficultyRewardChanged(); // Function Madness.MadPlayerUIModel.OnDifficultyRewardChanged // (Final|Native|Public) // @ game+0x16b3250
	void OnCrystalsChanged(); // Function Madness.MadPlayerUIModel.OnCrystalsChanged // (Final|Native|Public) // @ game+0x16b31a0
	void OnCharacterShieldChanged(float LastShield, float CurrentShield); // Function Madness.MadPlayerUIModel.OnCharacterShieldChanged // (Final|Native|Public) // @ game+0x16b3050
	void OnCharacterMaxHealthChanged(float LastMaxHealth, float CurrentMaxHealth); // Function Madness.MadPlayerUIModel.OnCharacterMaxHealthChanged // (Final|Native|Public) // @ game+0x16b2f90
	void OnCharacterLevelNotification(float OldLevel, float Level, bool IsSilentNotification); // Function Madness.MadPlayerUIModel.OnCharacterLevelNotification // (Final|Native|Public) // @ game+0x16b2e80
	void OnCharacterFocusChanged(float LastFocus, float CurrentFocus); // Function Madness.MadPlayerUIModel.OnCharacterFocusChanged // (Final|Native|Public) // @ game+0x16b2dc0
	void OnBattleStateChanged(bool bIsInBattle); // Function Madness.MadPlayerUIModel.OnBattleStateChanged // (Final|Native|Public) // @ game+0x16b2cf0
	void OnActiveskillSlotAttempt(struct UMadSkillData* SkillData, enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadPlayerUIModel.OnActiveskillSlotAttempt // (Final|Native|Public) // @ game+0x16b2ba0
	void MoveOnlineStashItemToBackpack(int32_t ItemIndex); // Function Madness.MadPlayerUIModel.MoveOnlineStashItemToBackpack // (Final|Native|Public) // @ game+0x16b2b20
	void MoveItemToOnlineStash(int32_t ItemIndex); // Function Madness.MadPlayerUIModel.MoveItemToOnlineStash // (Final|Native|Public) // @ game+0x16b2aa0
	struct FMadSkillWithCharges IsSkillWithCharges(enum class EMadnessActiveSkillSlots InSlot); // Function Madness.MadPlayerUIModel.IsSkillWithCharges // (Final|Native|Public) // @ game+0x16b27c0
	bool IsPlayerInDBNO(); // Function Madness.MadPlayerUIModel.IsPlayerInDBNO // (Final|Native|Public|Const) // @ game+0x16b2790
	bool HasAcceptedPrivacyPolicy(); // Function Madness.MadPlayerUIModel.HasAcceptedPrivacyPolicy // (Final|Native|Public|Const) // @ game+0x16b2760
	struct FString GetPrivacyPolicyAcceptanceDate(struct FString Format); // Function Madness.MadPlayerUIModel.GetPrivacyPolicyAcceptanceDate // (Final|Native|Public|Const) // @ game+0x16b2640
	struct TArray<struct FMadPlayerStatsAttributeUIData> GetPlayerStatsAttributes(); // Function Madness.MadPlayerUIModel.GetPlayerStatsAttributes // (Final|Native|Public|Const) // @ game+0x16b2500
	struct FMadItemUIData GetOnlineStashItem(int32_t ItemIndex); // Function Madness.MadPlayerUIModel.GetOnlineStashItem // (Final|Native|Public|Const) // @ game+0x16b2440
	bool GetAutoWorldLevelUp(); // Function Madness.MadPlayerUIModel.GetAutoWorldLevelUp // (Final|Native|Public|Const) // @ game+0x16b2350
	struct UMadSkillData* GetActiveSkillInSlot(enum class EMadnessActiveSkillSlots InSlot); // Function Madness.MadPlayerUIModel.GetActiveSkillInSlot // (Final|Native|Public) // @ game+0x16b22c0
	void ClaimOneTimeReward(struct FString RewardToClaim); // Function Madness.MadPlayerUIModel.ClaimOneTimeReward // (Final|Native|Public) // @ game+0x16b2220
	void ClaimDifficultyReward(enum class None InDifficultyLevel); // Function Madness.MadPlayerUIModel.ClaimDifficultyReward // (Final|Native|Public) // @ game+0x16b21a0
	bool CanMoveOnlineStashItemToBackpack(int32_t ItemIndex, int32_t Slot); // Function Madness.MadPlayerUIModel.CanMoveOnlineStashItemToBackpack // (Final|Native|Public|Const) // @ game+0x16b20e0
	bool CanMoveItemToOnlineStash(int32_t ItemIndex, int32_t Slot); // Function Madness.MadPlayerUIModel.CanMoveItemToOnlineStash // (Final|Native|Public|Const) // @ game+0x16b2020
};

// Class Madness.MadPrepRoomComponent
// Size: 0x1c8 (Inherited: 0x180)
struct UMadPrepRoomComponent : UActorComponent {
	char UnknownData_180[0x48]; // 0x180(0x48)

	void StartBlendToGameplayCamera(); // Function Madness.MadPrepRoomComponent.StartBlendToGameplayCamera // (Final|Native|Private) // @ game+0x16c0d10
	void OnCoopSyncSuccess(); // Function Madness.MadPrepRoomComponent.OnCoopSyncSuccess // (Final|Native|Private) // @ game+0x16bfea0
	void OnCinematicFlybyStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadPrepRoomComponent.OnCinematicFlybyStart // (Final|Native|Private|HasOutParms) // @ game+0x16bfd70
	void OnCinematicFlybyEnd(); // Function Madness.MadPrepRoomComponent.OnCinematicFlybyEnd // (Final|Native|Private) // @ game+0x16bfd50
	void MulticastOnCoopSyncSuccess(); // Function Madness.MadPrepRoomComponent.MulticastOnCoopSyncSuccess // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x15a7380
	void CreateCinematicRequestOnCoopReady(struct AMadPlayerState* MadPS); // Function Madness.MadPrepRoomComponent.CreateCinematicRequestOnCoopReady // (Final|Native|Private) // @ game+0x16bf5d0
};

// Class Madness.MadPreviewCharacter
// Size: 0x2290 (Inherited: 0x21d0)
struct AMadPreviewCharacter : AMadPlayerCharacter {
	char UnknownData_21D0[0x28]; // 0x21d0(0x28)
	SoftClassProperty CharacterToPreview; // 0x21f8(0x28)
	enum class EMadGender PreviewGender; // 0x2220(0x01)
	enum class EMadPreviewMode PreviewMode; // 0x2221(0x01)
	char UnknownData_2222[0x6]; // 0x2222(0x06)
	struct AMadBannerFlag* LobbyBannerFlag; // 0x2228(0x08)
	struct USceneComponent* LobbyBannerPlaceholderSingleplayer; // 0x2230(0x08)
	enum class EMadArmorPreviewView PreviewView; // 0x2238(0x01)
	char UnknownData_2239[0x7]; // 0x2239(0x07)
	struct USceneComponent* LobbyBannerPlaceholderCoop1; // 0x2240(0x08)
	struct USceneComponent* LobbyBannerPlaceholderCoop2; // 0x2248(0x08)
	struct USceneComponent* LobbyBannerPlaceholderCoop3; // 0x2250(0x08)
	char UnknownData_2258[0x20]; // 0x2258(0x20)
	struct TArray<struct USceneComponent*> CoopBannerPlaceholders; // 0x2278(0x10)
	char UnknownData_2288[0x8]; // 0x2288(0x08)

	void SynchronizeCustomization(); // Function Madness.MadPreviewCharacter.SynchronizeCustomization // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0e10
	void SetPreviewMode(enum class EMadPreviewMode Mode); // Function Madness.MadPreviewCharacter.SetPreviewMode // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0b90
	void OnPreviewChanged(struct FString CharacterName, int32_t CharacterLevel); // Function Madness.MadPreviewCharacter.OnPreviewChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnMeshChanged(struct USkeletalMesh* SkeletalMesh, struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Madness.MadPreviewCharacter.OnMeshChanged // (Final|Native|Public) // @ game+0x16bff20
	struct UWeaponType* GetWeaponType(); // Function Madness.MadPreviewCharacter.GetWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bfbe0
	struct AMadWeapon* GetWeaponClass(); // Function Madness.MadPreviewCharacter.GetWeaponClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bfba0
	enum class EMadArmorPreviewView GetPreviewView(); // Function Madness.MadPreviewCharacter.GetPreviewView // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bf710
	enum class EMadPreviewMode GetPreviewMode(); // Function Madness.MadPreviewCharacter.GetPreviewMode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bf6f0
	struct UBlendSpaceBase* GetGripAnimation(); // Function Madness.MadPreviewCharacter.GetGripAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bf690
	struct AMadWeapon* GetCachedWeaponClass(); // Function Madness.MadPreviewCharacter.GetCachedWeaponClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16bf650
};

// Class Madness.MadPreviewInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadPreviewInterface : UInterface {
};

// Class Madness.MadPreviewWidget
// Size: 0x190 (Inherited: 0x130)
struct UMadPreviewWidget : UPreviewWidget {
	struct UMadPlayerAnimData* CustomizationAnimationData; // 0x130(0x08)
	struct UMadPlayerAnimData* InventoryAnimationData; // 0x138(0x08)
	struct TMap<enum class EMadGender, SoftClassProperty> PreviewClasses; // 0x140(0x50)

	void SyncInventory(); // Function Madness.MadPreviewWidget.SyncInventory // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16c0df0
	void SyncCustomizationComponents(); // Function Madness.MadPreviewWidget.SyncCustomizationComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0dd0
	void SyncCharacterCustomization(); // Function Madness.MadPreviewWidget.SyncCharacterCustomization // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16c0db0
	void SetInventoryAnimData(); // Function Madness.MadPreviewWidget.SetInventoryAnimData // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0af0
	void SetCustomizationAnimData(); // Function Madness.MadPreviewWidget.SetCustomizationAnimData // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0a00
	struct AMadPlayerCharacter* GetPreviewCharacter(); // Function Madness.MadPreviewWidget.GetPreviewCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16bf6c0
	void ApplyCharacterCustomizationToPreview(struct FCharacterCustomiationData Data); // Function Madness.MadPreviewWidget.ApplyCharacterCustomizationToPreview // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16bf160
};

// Class Madness.MadProjectile_StoneShards
// Size: 0x5d0 (Inherited: 0x5c0)
struct AMadProjectile_StoneShards : AMadProjectile {
	char UnknownData_5C0[0x10]; // 0x5c0(0x10)
};

// Class Madness.MadProjectileForestBoss
// Size: 0x5c8 (Inherited: 0x5c0)
struct AMadProjectileForestBoss : AMadProjectile {
	char UnknownData_5C0[0x8]; // 0x5c0(0x08)

	void TurnOffDecal(); // Function Madness.MadProjectileForestBoss.TurnOffDecal // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void SetTargettingDecal(struct FVector ImpactLocation); // Function Madness.MadProjectileForestBoss.SetTargettingDecal // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1a35c70
	void OverrideDecalTemplate(struct UParticleSystem* Template); // Function Madness.MadProjectileForestBoss.OverrideDecalTemplate // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadProjectileVolcanoBoss
// Size: 0x5e0 (Inherited: 0x5c0)
struct AMadProjectileVolcanoBoss : AMadProjectile {
	float SubProjectileSpeed; // 0x5c0(0x04)
	char UnknownData_5C4[0x4]; // 0x5c4(0x04)
	struct AProjectile* SubVolcanoProjectileClass; // 0x5c8(0x08)
	int32_t NumberOfTriesToThrowTargetedProjectile; // 0x5d0(0x04)
	float ThrowSpeedMultiplierInSuccesiveThrowTries; // 0x5d4(0x04)
	float ArbitraryTimeToGetToTarget; // 0x5d8(0x04)
	char UnknownData_5DC[0x4]; // 0x5dc(0x04)

	bool TryCorrectVelocityToHitTarget_CustomArc(struct FVector ProjectileOrigin, struct AActor* TargetActor, float ArcParam); // Function Madness.MadProjectileVolcanoBoss.TryCorrectVelocityToHitTarget_CustomArc // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x16c1060
	bool TryCorrectVelocityToHitTarget(struct FVector ProjectileOrigin, struct AActor* TargetActor); // Function Madness.MadProjectileVolcanoBoss.TryCorrectVelocityToHitTarget // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x16c0f80
	bool TryCorrectVelocityToHitLocation_CustomArc(struct FVector ProjectileOrigin, struct FVector TargetLocation, float ArcParam); // Function Madness.MadProjectileVolcanoBoss.TryCorrectVelocityToHitLocation_CustomArc // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x16c0e50
	void SpawnSubProjectile(float Yaw); // Function Madness.MadProjectileVolcanoBoss.SpawnSubProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x16c0c90
	void OnTrajectoryUpdated(struct FVector NewDropLocation); // Function Madness.MadProjectileVolcanoBoss.OnTrajectoryUpdated // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadQueryContext_AllLiveEnemies
// Size: 0x28 (Inherited: 0x28)
struct UMadQueryContext_AllLiveEnemies : UQueryContext_AllEnemies {
};

// Class Madness.MadQueryContext_AllLiveEnemiesWithinHostileRange
// Size: 0x30 (Inherited: 0x30)
struct UMadQueryContext_AllLiveEnemiesWithinHostileRange : UQueryContext_AllEnemiesWithinHostileRange {
};

// Class Madness.MadQueryContext_AllLiveEnemiesWithinEffectiveRange
// Size: 0x30 (Inherited: 0x30)
struct UMadQueryContext_AllLiveEnemiesWithinEffectiveRange : UMadQueryContext_AllLiveEnemiesWithinHostileRange {
};

// Class Madness.MadQueryContext_PlayerAbilityTarget
// Size: 0x28 (Inherited: 0x28)
struct UMadQueryContext_PlayerAbilityTarget : UEnvQueryContext {
};

// Class Madness.MadQueryContext_PlayerAbilityTargetLocation
// Size: 0x28 (Inherited: 0x28)
struct UMadQueryContext_PlayerAbilityTargetLocation : UEnvQueryContext {
};

// Class Madness.MadQueryContext_PlayerAbilityStartLocation
// Size: 0x28 (Inherited: 0x28)
struct UMadQueryContext_PlayerAbilityStartLocation : UEnvQueryContext {
};

// Class Madness.MadQuestUnlockedContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadQuestUnlockedContextPanel : UMadContextPanel {
};

// Class Madness.MadQuestCancelledContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadQuestCancelledContextPanel : UMadContextPanel {
};

// Class Madness.MadShareableQuestContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadShareableQuestContextPanel : UMadContextPanel {
};

// Class Madness.MadQuestBeganContextPanel
// Size: 0x140 (Inherited: 0x138)
struct UMadQuestBeganContextPanel : UMadContextPanel {
	char UnknownData_138[0x8]; // 0x138(0x08)
};

// Class Madness.MadSwitchQuestContextPanel
// Size: 0x140 (Inherited: 0x138)
struct UMadSwitchQuestContextPanel : UMadContextPanel {
	char UnknownData_138[0x8]; // 0x138(0x08)
};

// Class Madness.MadSideQuestCompletedContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadSideQuestCompletedContextPanel : UMadContextPanel {
};

// Class Madness.MadQuestIsAlreadyInProgressContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadQuestIsAlreadyInProgressContextPanel : UMadContextPanel {
};

// Class Madness.MadQuestIndicatorComponent
// Size: 0x1e0 (Inherited: 0x180)
struct UMadQuestIndicatorComponent : UActorComponent {
	struct UParticleSystem* QuestIndicatorTemplate; // 0x180(0x08)
	struct FName QuestIndicatorAttachSocket; // 0x188(0x08)
	struct FVector QuestIndicatorLocationOffset; // 0x190(0x0c)
	struct FRotator QuestIndicatorRotationOffset; // 0x19c(0x0c)
	struct UParticleSystem* OnKilledEmitterTemplate; // 0x1a8(0x08)
	struct FName OnKilledAttachSocket; // 0x1b0(0x08)
	struct FVector OnKilledEmitterLocationOffset; // 0x1b8(0x0c)
	struct FRotator OnKilledEmitterRotationOffset; // 0x1c4(0x0c)
	struct UParticleSystemComponent* QuestIndicatorParticles; // 0x1d0(0x08)
	struct ABaseCharacter* OwnerCharacter; // 0x1d8(0x08)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadQuestIndicatorComponent.OnOwnerKilled // (Final|Native|Private) // @ game+0x16c0080
};

// Class Madness.MadQuestManager
// Size: 0x6f8 (Inherited: 0x5a0)
struct AMadQuestManager : AQuestManager {
	struct TSoftObjectPtr<struct USoundCue> ObjectiveReceivedSound; // 0x5a0(0x28)
	struct TSoftObjectPtr<struct USoundCue> QuestReceivedSound; // 0x5c8(0x28)
	struct FMulticastInlineDelegate OnQuestRewardsClosed; // 0x5f0(0x10)
	char UnknownData_600[0x78]; // 0x600(0x78)
	int32_t NumberOfPlayersSharingQuest; // 0x678(0x04)
	char UnknownData_67C[0x1c]; // 0x67c(0x1c)
	struct UQuestEventHandler* RewardSelectionQuestOrObjective; // 0x698(0x08)
	char UnknownData_6A0_0 : 7; // 0x6a0(0x01)
	bool bIsSelectingRepeatableReward : 1; // 0x6a0(0x01)
	char UnknownData_6A1[0x7]; // 0x6a1(0x07)
	struct TArray<struct AMadItem*> RewardSelectionItems; // 0x6a8(0x10)
	char UnknownData_6B8[0x8]; // 0x6b8(0x08)
	char UnknownData_6C0_0 : 7; // 0x6c0(0x01)
	bool bTrackPartyQuest : 1; // 0x6c0(0x01)
	char UnknownData_6C1[0x7]; // 0x6c1(0x07)
	struct UMadQuestsUIModel* UIModel; // 0x6c8(0x08)
	char UnknownData_6D0[0x28]; // 0x6d0(0x28)

	void ServerRequestNumberOfPlayersSharingQuest(struct FName QuestID, struct ABasePlayerController* PC); // Function Madness.MadQuestManager.ServerRequestNumberOfPlayersSharingQuest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x16c0930
	bool SelectQuestOrObjectiveReward(struct UQuestEventHandler* InQuestOrObjective, bool bIsRepeatableReward); // Function Madness.MadQuestManager.SelectQuestOrObjectiveReward // (Native|Public|BlueprintCallable) // @ game+0x16c0860
	void OnUIStateChanged(struct FName StateName); // Function Madness.MadQuestManager.OnUIStateChanged // (Final|Native|Public|HasOutParms) // @ game+0x16c0600
	void OnRep_NumberOfPlayersSharingQuest(); // Function Madness.MadQuestManager.OnRep_NumberOfPlayersSharingQuest // (Final|Native|Public) // @ game+0x16c05e0
	void OnLastActiveObjectiveIDChanged(); // Function Madness.MadQuestManager.OnLastActiveObjectiveIDChanged // (Final|Native|Public) // @ game+0x16bfee0
	bool GetRewardData(struct FName RewardName, bool bUseRepeatableReward, struct FUniversalReward OutUniversalReward); // Function Madness.MadQuestManager.GetRewardData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x16bfa50
	void ConfirmQuestOrObjectiveRewardSelection(int32_t RewardIndex); // Function Madness.MadQuestManager.ConfirmQuestOrObjectiveRewardSelection // (Native|Public|BlueprintCallable) // @ game+0x16bf4c0
	void CloseQuestOrObjectiveRewardSelection(); // Function Madness.MadQuestManager.CloseQuestOrObjectiveRewardSelection // (Native|Public|BlueprintCallable) // @ game+0x16bf480
	void ClientNumberOfPlayersSharingQuestUpdated(int32_t NumberOfPlayers); // Function Madness.MadQuestManager.ClientNumberOfPlayersSharingQuestUpdated // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x16bf3f0
};

// Class Madness.MadQuestPool
// Size: 0x240 (Inherited: 0x38)
struct UMadQuestPool : UBaseQuestPool {
	struct FText DisplayName; // 0x38(0x18)
	struct FText Description; // 0x50(0x18)
	struct FText RestartDescription; // 0x68(0x18)
	char UnknownData_80_0 : 7; // 0x80(0x01)
	bool bShouldUnlockAllQuestsWhenUnlocked : 1; // 0x80(0x01)
	char UnknownData_81[0x7]; // 0x81(0x07)
	struct TArray<struct UBaseQuest*> Quests; // 0x88(0x10)
	struct TMap<int32_t, struct UMadQuestReward*> Rewards; // 0x98(0x50)
	struct FSlateBrush MarkerBrush; // 0xe8(0x88)
	struct FQuestMarkerIcon QuestIcon; // 0x170(0x18)
	struct FSlateBrush RewardMarkerBrush; // 0x188(0x88)
	struct FQuestMarkerIcon RewardIcon; // 0x210(0x18)
	struct FFactExpression WorldmapIconVisibleFactExp; // 0x228(0x18)
};

// Class Madness.MadQuestReward
// Size: 0x30 (Inherited: 0x28)
struct UMadQuestReward : UBaseQuestReward {
	struct FName RewardId; // 0x28(0x08)
};

// Class Madness.MadQuestsGlobals
// Size: 0x158 (Inherited: 0x30)
struct UMadQuestsGlobals : UDataAsset {
	struct UParticleSystem* PingObjectiveParticleTemplate; // 0x30(0x08)
	struct USoundCue* PingObjectiveSound; // 0x38(0x08)
	struct AWaypointPathMarker* PathMarkerClass; // 0x40(0x08)
	struct AWaypointMarker* StaticMarkerClass; // 0x48(0x08)
	struct TMap<struct FName, struct FQuestMarkerIcon> QuestIcons; // 0x50(0x50)
	struct TArray<struct UBaseQuest*> Quests; // 0xa0(0x10)
	struct UQuestTimeline* QuestTimeline; // 0xb0(0x08)
	struct TArray<struct UMadQuestPool*> QuestPools; // 0xb8(0x10)
	int32_t MaxSuggestQuestCharges; // 0xc8(0x04)
	float SuggestQuestRechargeDelay; // 0xcc(0x04)
	struct UDataTable* QuestDataPatch; // 0xd0(0x08)
	struct UDataTable* StoryRecapDT; // 0xd8(0x08)
	struct FGameplayTag GlobalTrackerOverrideTag; // 0xe0(0x08)
	struct TArray<struct FMadFactData> SkipPrologFacts; // 0xe8(0x10)
	struct TArray<struct FMadFactData> StoryMismatchFacts; // 0xf8(0x10)
	struct TMap<struct FName, struct FMadStoryRecapData> StoryRecapDataMap; // 0x108(0x50)
};

// Class Madness.MadQuestsUIModel
// Size: 0x340 (Inherited: 0x50)
struct UMadQuestsUIModel : UBaseUIModel {
	char UnknownData_50[0xa0]; // 0x50(0xa0)
	struct TArray<struct FQuestUIWrapper> Quests; // 0xf0(0x10)
	struct FTimelineUIWrapper_DEPRECATED Timeline; // 0x100(0x10)
	struct FText ActiveQuestName; // 0x110(0x18)
	struct TArray<struct FString> ActiveObjectivesNames; // 0x128(0x10)
	struct TArray<struct FObjectiveUIWrapper> ActiveObjectives; // 0x138(0x10)
	struct FText LastActiveObjectiveName; // 0x148(0x18)
	struct FName LastActiveCheckpointID; // 0x160(0x08)
	struct FText LastActiveQuestName; // 0x168(0x18)
	struct FName TrackedQuestID; // 0x180(0x08)
	struct FName CurrentRegionName; // 0x188(0x08)
	struct TMap<struct FName, struct FQuestUIPopup> ShareableQuestsPopups; // 0x190(0x50)
	struct TArray<struct FQuestPool> QuestPools; // 0x1e0(0x10)
	struct FPartyQuestInfoUIData PartyQuest; // 0x1f0(0x50)
	struct TArray<struct FQuestZoneUIWrapper> TimelineZones; // 0x240(0x10)
	struct TArray<uint32_t> SelectableQuestRewardOptions; // 0x250(0x10)
	int32_t SuggestQuestCharges; // 0x260(0x04)
	char UnknownData_264[0x4]; // 0x264(0x04)
	struct FQuestUIWrapper TrackedQuest; // 0x268(0x90)
	char UnknownData_2F8_0 : 7; // 0x2f8(0x01)
	bool bTrackPartyQuest : 1; // 0x2f8(0x01)
	char UnknownData_2F9[0xf]; // 0x2f9(0x0f)
	char UnknownData_308_0 : 7; // 0x308(0x01)
	bool bIsPartyQuestValid : 1; // 0x308(0x01)
	char UnknownData_309_0 : 7; // 0x309(0x01)
	bool bPartyQuestInfoVisible : 1; // 0x309(0x01)
	char UnknownData_30A[0x36]; // 0x30a(0x36)

	void ToggleTrackPartyQuest(); // Function Madness.MadQuestsUIModel.ToggleTrackPartyQuest // (Final|Native|Public) // @ game+0x16c0e30
	void SuggestQuest(struct FName QuestID); // Function Madness.MadQuestsUIModel.SuggestQuest // (Final|Native|Public) // @ game+0x16c0d30
	void SetQuestTracked(struct FName QuestIDName); // Function Madness.MadQuestsUIModel.SetQuestTracked // (Final|Native|Public) // @ game+0x16c0c10
	void SetObjectiveSeen(struct FName ObjectiveID); // Function Madness.MadQuestsUIModel.SetObjectiveSeen // (Final|Native|Public) // @ game+0x16c0b10
	void RequestNumberOfPlayersSharingQuest(struct FName QuestID); // Function Madness.MadQuestsUIModel.RequestNumberOfPlayersSharingQuest // (Final|Native|Public) // @ game+0x16c07e0
	bool OpenQuestRewardSelectionScreen(struct FName InQuestOrObjectiveID, bool bRepeatableReward); // Function Madness.MadQuestsUIModel.OpenQuestRewardSelectionScreen // (Final|Native|Public) // @ game+0x16c0720
	void OnUIStateChanged(struct FName StateName); // Function Madness.MadQuestsUIModel.OnUIStateChanged // (Final|Native|Public|HasOutParms) // @ game+0x16c0690
	void OnQuestTrackingChanged(struct UBaseQuest* Inquest, bool bTracked); // Function Madness.MadQuestsUIModel.OnQuestTrackingChanged // (Final|Native|Public) // @ game+0x16c0510
	void OnQuestHandleStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus); // Function Madness.MadQuestsUIModel.OnQuestHandleStatusChanged // (Final|Native|Public) // @ game+0x16c0450
	void OnPlayerCoopReady(struct AMadPlayerState* PlayerState); // Function Madness.MadQuestsUIModel.OnPlayerCoopReady // (Final|Native|Private) // @ game+0x16c03d0
	void OnNumberOfPlayersSharingQuestUpdated(int32_t NumberOfPlayersSharingQuest); // Function Madness.MadQuestsUIModel.OnNumberOfPlayersSharingQuestUpdated // (Final|Native|Public) // @ game+0x16c0000
	void OnNewPlayerCoopReady(); // Function Madness.MadQuestsUIModel.OnNewPlayerCoopReady // (Final|Native|Private) // @ game+0x16bffe0
	void OnLastActiveObjectiveIDChanged(); // Function Madness.MadQuestsUIModel.OnLastActiveObjectiveIDChanged // (Final|Native|Public) // @ game+0x16bff00
	void OnCurrentAreaFactChanged(); // Function Madness.MadQuestsUIModel.OnCurrentAreaFactChanged // (Final|Native|Public) // @ game+0x16bfec0
	void OnCheckpointSelected(struct FName CheckpointName); // Function Madness.MadQuestsUIModel.OnCheckpointSelected // (Final|Native|Public) // @ game+0x16bfcd0
	bool IsCheckpointUnlocked(struct FName CheckpointId); // Function Madness.MadQuestsUIModel.IsCheckpointUnlocked // (Final|Native|Public) // @ game+0x16bfc20
	struct TArray<struct FQuestUIWrapper> GetQuestsForWorldMapNode(struct FName WorldMapNodeID); // Function Madness.MadQuestsUIModel.GetQuestsForWorldMapNode // (Final|Native|Public|Const) // @ game+0x16bf9a0
	struct TArray<struct FQuestUIWrapper> GetQuestsForRegion(struct FName RegionId); // Function Madness.MadQuestsUIModel.GetQuestsForRegion // (Final|Native|Public|Const) // @ game+0x16bf8f0
	struct TArray<struct FQuestUIWrapper> GetQuestsForAreaMapNode(struct FName AreaMapNodeID); // Function Madness.MadQuestsUIModel.GetQuestsForAreaMapNode // (Final|Native|Public|Const) // @ game+0x16bf840
	struct FMadUniversalRewardUIData GetQuestReward(struct FName QuestIDName); // Function Madness.MadQuestsUIModel.GetQuestReward // (Final|Native|Public) // @ game+0x16bf730
	void ConfirmQuestOrObjectiveRewardSelection(int32_t RewardIndex); // Function Madness.MadQuestsUIModel.ConfirmQuestOrObjectiveRewardSelection // (Final|Native|Public) // @ game+0x16bf550
	void CloseQuestOrObjectiveRewardSelection(); // Function Madness.MadQuestsUIModel.CloseQuestOrObjectiveRewardSelection // (Final|Native|Public) // @ game+0x16bf4a0
	bool CanClaimRewardForQuestOrObjective(struct FName InQuestOrObjectiveID, bool bCheckRepeatableReward); // Function Madness.MadQuestsUIModel.CanClaimRewardForQuestOrObjective // (Final|Native|Public|Const) // @ game+0x16bf2b0
	void CancelQuest(struct FName QuestIDName); // Function Madness.MadQuestsUIModel.CancelQuest // (Final|Native|Public) // @ game+0x16bf370
	void BeginQuest(struct FName QuestIDName); // Function Madness.MadQuestsUIModel.BeginQuest // (Final|Native|Public) // @ game+0x16bf210
};

// Class Madness.MadRadio
// Size: 0x330 (Inherited: 0x2f0)
struct AMadRadio : AActor {
	struct TArray<struct TSoftObjectPtr<struct USoundCue>> MusicTracks; // 0x2f0(0x10)
	int32_t NumberOfTracksToBeAlwaysLoaded; // 0x300(0x04)
	char UnknownData_304[0x4]; // 0x304(0x04)
	struct UAudioComponent* AudioComponent; // 0x308(0x08)
	struct UInteractionComponent* InteractionComponent; // 0x310(0x08)
	struct TArray<struct USoundCue*> LoadedTracks; // 0x318(0x10)
	int32_t CurrentlyPlayingIndex; // 0x328(0x04)
	char UnknownData_32C_0 : 7; // 0x32c(0x01)
	bool bIsActive : 1; // 0x32c(0x01)
	char UnknownData_32D_0 : 7; // 0x32d(0x01)
	bool bInitialized : 1; // 0x32d(0x01)
	char UnknownData_32E[0x2]; // 0x32e(0x02)

	void Stop(); // Function Madness.MadRadio.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x16c7860
	void Play(); // Function Madness.MadRadio.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x16c6d30
	void OnInteracted(struct ABaseCharacter* InteractingPawn, struct UInteractionComponent* InteractedWith); // Function Madness.MadRadio.OnInteracted // (Final|Native|Protected) // @ game+0x16c68c0
	void OnAudioFinished(); // Function Madness.MadRadio.OnAudioFinished // (Final|Native|Protected) // @ game+0x16c6800
};

// Class Madness.MadReinvigorateAuraWave
// Size: 0x330 (Inherited: 0x2f0)
struct AMadReinvigorateAuraWave : AActor {
	struct UAudioComponent* AuraEffectSound; // 0x2f0(0x08)
	struct USphereComponent* SphereCollider; // 0x2f8(0x08)
	struct UCurveFloat* ScaleCurve; // 0x300(0x08)
	float ScaleTickRate; // 0x308(0x04)
	char UnknownData_30C[0x4]; // 0x30c(0x04)
	struct AActor* ShieldActorClass; // 0x310(0x08)
	float TimeToDestroyAfterWave; // 0x318(0x04)
	char UnknownData_31C[0x14]; // 0x31c(0x14)

	void StartEffect(float InEffectRange); // Function Madness.MadReinvigorateAuraWave.StartEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15148c0
	void OnWaveBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadReinvigorateAuraWave.OnWaveBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x16c6ac0
};

// Class Madness.MadResource
// Size: 0x4e0 (Inherited: 0x4c0)
struct AMadResource : AMadItem {
	struct FName Name; // 0x4c0(0x08)
	int32_t Quantity; // 0x4c8(0x04)
	struct FMadExchangeOfferItemData ExchangeOfferItemData; // 0x4cc(0x10)
	char UnknownData_4DC[0x4]; // 0x4dc(0x04)
};

// Class Madness.MadResourceComponent
// Size: 0x1e8 (Inherited: 0x180)
struct UMadResourceComponent : UActorComponent {
	char UnknownData_180[0x68]; // 0x180(0x68)
};

// Class Madness.MadRewardComponent
// Size: 0x1e0 (Inherited: 0x180)
struct UMadRewardComponent : UActorComponent {
	char UnknownData_180[0x60]; // 0x180(0x60)

	void OnDataTableLoaded(struct UDataTable* DataTable); // Function Madness.MadRewardComponent.OnDataTableLoaded // (Final|Native|Protected) // @ game+0x16c6820
	void OnAllTablesPreloaded(); // Function Madness.MadRewardComponent.OnAllTablesPreloaded // (Final|Native|Protected) // @ game+0x16c67e0
};

// Class Madness.MadRichPresence
// Size: 0x30 (Inherited: 0x28)
struct UMadRichPresence : UObject {
	struct FGameplayTag ChallengesHUBRegion; // 0x28(0x08)

	void OnLevelTransitionStarted(struct FName FromRegionName, struct FName ToRegionName); // Function Madness.MadRichPresence.OnLevelTransitionStarted // (Final|Native|Private) // @ game+0x16c6a00
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadRichPresence.OnLevelTransitionCompleted // (Final|Native|Private) // @ game+0x16c6980
};

// Class Madness.MadRichTextBox
// Size: 0x6b0 (Inherited: 0x668)
struct UMadRichTextBox : URichTextBlock {
	struct FDelegate TextDelegate; // 0x668(0x10)
	struct UActionMappingWidget* ActionMappingWidgetClass; // 0x678(0x08)
	struct TArray<struct FMadWidgetDecoratorParams> WidgetDecorators; // 0x680(0x10)
	struct FMadActionMappingDecoratorParams ActionMappingParams; // 0x690(0x20)
};

// Class Madness.MadRPG
// Size: 0x1f88 (Inherited: 0x1f38)
struct AMadRPG : AMadHeavyWeapon {
	struct TMap<struct UExplosionTemplate*, struct FGameplayTagContainer> Explosions; // 0x1f38(0x50)
};

// Class Madness.MadScaleEaseComponent
// Size: 0x1c0 (Inherited: 0x180)
struct UMadScaleEaseComponent : UActorComponent {
	struct FMadEaseAnimation ScaleInAnimation; // 0x180(0x18)
	struct FMadEaseAnimation ScaleOutAnimation; // 0x198(0x18)
	enum class EMadEaseAnimationState ScaleAnimationState; // 0x1b0(0x01)
	char UnknownData_1B1[0xf]; // 0x1b1(0x0f)
};

// Class Madness.MadSciathanAnimInstance
// Size: 0x530 (Inherited: 0x2c0)
struct UMadSciathanAnimInstance : UAnimInstance {
	char UnknownData_2C0[0x10]; // 0x2c0(0x10)
	struct AMadCharAI_Sciathan* MyCharacter; // 0x2d0(0x08)
	struct UCharacterMovementComponent* MovementComponent; // 0x2d8(0x08)
	struct USkeletalMeshComponent* SkelMeshComponent; // 0x2e0(0x08)
	char UnknownData_2E8[0x8]; // 0x2e8(0x08)
	struct FMadSciathanCapsuleAnimData CapsuleData; // 0x2f0(0x60)
	struct FMadSciathanCharacterAnimData CharacterData; // 0x350(0x4c)
	struct FMadSciathanCharacterAnimData LastFrameCharacterData; // 0x39c(0x4c)
	char bIsOnGround : 1; // 0x3e8(0x01)
	char bIsMoving2D : 1; // 0x3e8(0x01)
	char UnknownData_3E8_2 : 6; // 0x3e8(0x01)
	char UnknownData_3E9[0x3]; // 0x3e9(0x03)
	char UnknownData_3EC_0 : 7; // 0x3ec(0x01)
	bool bIsFlyingMode : 1; // 0x3ec(0x01)
	char UnknownData_3ED[0x3]; // 0x3ed(0x03)
	char bStopTransitionTriggered : 1; // 0x3f0(0x01)
	char bStartTransitionTriggered : 1; // 0x3f0(0x01)
	char bStartGlideTriggered : 1; // 0x3f0(0x01)
	char bStopGlideTriggered : 1; // 0x3f0(0x01)
	char bTransitionToGlideStateTriggered : 1; // 0x3f0(0x01)
	char bTransitionToFlyingIdleStateTriggered : 1; // 0x3f0(0x01)
	char bInGlideState : 1; // 0x3f0(0x01)
	char bInIdleState : 1; // 0x3f0(0x01)
	char bRotateTowardScriptedPath : 1; // 0x3f1(0x01)
	char UnknownData_3F1_1 : 7; // 0x3f1(0x01)
	char UnknownData_3F2[0x2]; // 0x3f2(0x02)
	struct FVector Velocity; // 0x3f4(0x0c)
	float Speed; // 0x400(0x04)
	float StartingGlideAngle; // 0x404(0x04)
	float StoppingGlideAngle; // 0x408(0x04)
	char UnknownData_40C[0x4]; // 0x40c(0x04)
	struct FPcfCachedStateData StartingCachedState; // 0x410(0x20)
	struct FPcfCachedStateData StoppingCachedState; // 0x430(0x20)
	struct FPcfCachedStateData LocomotionCachedState; // 0x450(0x20)
	struct FPcfCachedStateData FlyingIdleCachedState; // 0x470(0x20)
	struct FPcfCachedStateData StartingGlideCachedState; // 0x490(0x20)
	struct FMadSciathanCachedAssetPlayerData StartingGlideCachedAssetPlayerData; // 0x4b0(0x18)
	struct FPcfCachedStateData GlideCachedState; // 0x4c8(0x20)
	struct FPcfCachedStateData StoppingGlideCachedState; // 0x4e8(0x20)
	struct FMadSciathanCachedAssetPlayerData StoppingGlideCachedAssetPlayerData; // 0x508(0x18)
	char UnknownData_520[0x8]; // 0x520(0x08)
	char UnknownData_528_0 : 7; // 0x528(0x01)
	bool bIsStompActive : 1; // 0x528(0x01)
	char UnknownData_529[0x7]; // 0x529(0x07)
};

// Class Madness.MadSettingsUIModel
// Size: 0x2d0 (Inherited: 0x50)
struct UMadSettingsUIModel : UBaseUIModel {
	char UnknownData_50[0xc0]; // 0x50(0xc0)
	char UnknownData_110_0 : 7; // 0x110(0x01)
	bool bIsDebugEnabled : 1; // 0x110(0x01)
	char UnknownData_111[0x7]; // 0x111(0x07)
	struct TArray<struct FMadOptionUIData> Options; // 0x118(0x10)
	struct TMap<struct FName, struct FMadOptionCategoryUIData> OptionCategories; // 0x128(0x50)
	struct FName KeyBindingsCategoryID; // 0x178(0x08)
	char UnknownData_180[0x150]; // 0x180(0x150)

	void UninstallAudioLanguage(int32_t LanguageIndex); // Function Madness.MadSettingsUIModel.UninstallAudioLanguage // (Final|Native|Public) // @ game+0x15c6f70
	bool ShouldDisplayOption(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.ShouldDisplayOption // (Final|Native|Public) // @ game+0x16c77d0
	bool ShouldDisplayCategory(struct FName CategoryID); // Function Madness.MadSettingsUIModel.ShouldDisplayCategory // (Final|Native|Public|Const) // @ game+0x16c7740
	void SetWrittenLanguage(struct FString NewLanguageCode); // Function Madness.MadSettingsUIModel.SetWrittenLanguage // (Final|Native|Public) // @ game+0x16c76a0
	void SetVectorValue(struct FName OptionIDName, struct FVector2D Value); // Function Madness.MadSettingsUIModel.SetVectorValue // (Final|Native|Public|HasDefaults) // @ game+0x16c75e0
	void SetToggleValue(struct FName OptionIDName, bool Value); // Function Madness.MadSettingsUIModel.SetToggleValue // (Final|Native|Public) // @ game+0x16c7510
	void SetSliderValue(struct FName OptionIDName, float Value); // Function Madness.MadSettingsUIModel.SetSliderValue // (Final|Native|Public) // @ game+0x16c7440
	void SetSelectorValue(struct FName OptionIDName, int32_t Value); // Function Madness.MadSettingsUIModel.SetSelectorValue // (Final|Native|Public) // @ game+0x16c7380
	void SetCategoryToDefaults(struct FName CategoryID); // Function Madness.MadSettingsUIModel.SetCategoryToDefaults // (Final|Native|Public) // @ game+0x16c7300
	void RevertDisplaySettings(); // Function Madness.MadSettingsUIModel.RevertDisplaySettings // (Final|Native|Public) // @ game+0x16c72e0
	void RevertDisplayAdvancedSettings(); // Function Madness.MadSettingsUIModel.RevertDisplayAdvancedSettings // (Final|Native|Public) // @ game+0x16c72c0
	void RevertAudioLanguage(); // Function Madness.MadSettingsUIModel.RevertAudioLanguage // (Final|Native|Public) // @ game+0x16c72a0
	bool IsAudioLanguageDownloading(int32_t LanguageIndex); // Function Madness.MadSettingsUIModel.IsAudioLanguageDownloading // (Final|Native|Public|Const) // @ game+0x16c6750
	bool IsAudioLanguageChanged(); // Function Madness.MadSettingsUIModel.IsAudioLanguageChanged // (Final|Native|Public|Const) // @ game+0x16c6720
	bool HaveDisplaySettingsChanged(); // Function Madness.MadSettingsUIModel.HaveDisplaySettingsChanged // (Final|Native|Public) // @ game+0x16c6370
	bool HaveDisplayAdvancedSettingsChanged(); // Function Madness.MadSettingsUIModel.HaveDisplayAdvancedSettingsChanged // (Final|Native|Public) // @ game+0x16c6340
	struct FString GetWrittenLanguage(); // Function Madness.MadSettingsUIModel.GetWrittenLanguage // (Final|Native|Public|Const) // @ game+0x16c62f0
	struct FVector2D GetVectorValue(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.GetVectorValue // (Final|Native|Public|HasDefaults) // @ game+0x16c6260
	int32_t GetTotalVRAM(); // Function Madness.MadSettingsUIModel.GetTotalVRAM // (Final|Native|Public|Const) // @ game+0x16c6230
	bool GetToggleValue(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.GetToggleValue // (Final|Native|Public) // @ game+0x16c61a0
	float GetSliderValue(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.GetSliderValue // (Final|Native|Public) // @ game+0x16c6100
	struct TArray<struct FText> GetSelectorValues(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.GetSelectorValues // (Final|Native|Public|Const) // @ game+0x16c5fc0
	int32_t GetSelectorValue(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.GetSelectorValue // (Final|Native|Public) // @ game+0x16c5f30
	struct TArray<struct FMadDlcInfo> GetInstalledDLCs(); // Function Madness.MadSettingsUIModel.GetInstalledDLCs // (Final|Native|Public|Const) // @ game+0x16c5d30
	struct FString GetGameVersion(); // Function Madness.MadSettingsUIModel.GetGameVersion // (Final|Native|Public|Const) // @ game+0x16c5ce0
	int32_t GetCurrentVRAM(); // Function Madness.MadSettingsUIModel.GetCurrentVRAM // (Final|Native|Public|Const) // @ game+0x16c5cb0
	float GetAudioDownloadProgress(int32_t LanguageIndex); // Function Madness.MadSettingsUIModel.GetAudioDownloadProgress // (Final|Native|Public|Const) // @ game+0x16c5b20
	void ApplyDisplaySettings(); // Function Madness.MadSettingsUIModel.ApplyDisplaySettings // (Final|Native|Public) // @ game+0x16c5ac0
	void ApplyDisplayAdvancedSettings(); // Function Madness.MadSettingsUIModel.ApplyDisplayAdvancedSettings // (Final|Native|Public) // @ game+0x16c5aa0
	void ApplyAudioLanguage(); // Function Madness.MadSettingsUIModel.ApplyAudioLanguage // (Final|Native|Public) // @ game+0x16c5a80
	void ActivateTrigger(struct FName OptionIDName); // Function Madness.MadSettingsUIModel.ActivateTrigger // (Final|Native|Public) // @ game+0x16c5a00
};

// Class Madness.MadShaderEffectController
// Size: 0x120 (Inherited: 0x28)
struct UMadShaderEffectController : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct TSet<struct UMadShaderEffect*> ShaderTickSet; // 0x30(0x50)
	struct TSet<struct UMadShaderEffect*> ShaderAddSet; // 0x80(0x50)
	struct TSet<struct UMadShaderEffect*> ShaderRemoveSet; // 0xd0(0x50)
};

// Class Madness.MadShaderEffectFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMadShaderEffectFunctionLibrary : UBlueprintFunctionLibrary {
};

// Class Madness.MadShaderEffectGroupController
// Size: 0x170 (Inherited: 0x120)
struct UMadShaderEffectGroupController : UMadShaderEffectController {
	struct TMap<struct AActor*, struct FShaderGroupMap> ActorMap; // 0x120(0x50)
};

// Class Madness.MadShaderEffectIndependentController
// Size: 0x170 (Inherited: 0x120)
struct UMadShaderEffectIndependentController : UMadShaderEffectController {
	struct TMap<struct AActor*, struct FIndependentShaderEffect> ActorShaderMap; // 0x120(0x50)
};

// Class Madness.MadShaderEffectManager
// Size: 0x210 (Inherited: 0x28)
struct UMadShaderEffectManager : UObject {
	char UnknownData_28[0xa0]; // 0x28(0xa0)
	struct TMap<struct UMadShaderEffectController*, struct UMadShaderEffectController*> ControllerMap; // 0xc8(0x50)
	struct FMadShaderEffectManagerTickFunction TickFunction; // 0x118(0xf8)

	void PlayEffect(struct UMadShaderEffect* InEffect); // Function Madness.MadShaderEffectManager.PlayEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x16ccde0
	struct UMadShaderEffectManager* GetShaderManager(struct UObject* WorldContextObject); // Function Madness.MadShaderEffectManager.GetShaderManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16cbcb0
	void EndEffect(struct UMadShaderEffect* InEffect); // Function Madness.MadShaderEffectManager.EndEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x16cb930
};

// Class Madness.MadShotgun
// Size: 0x1fa0 (Inherited: 0x1f30)
struct AMadShotgun : AMadWeapon {
	int32_t PelletsNum; // 0x1f30(0x04)
	float SweepSize; // 0x1f34(0x04)
	enum class EMadShotgunType SubType; // 0x1f38(0x01)
	char UnknownData_1F39[0x67]; // 0x1f39(0x67)

	void ServerProcessInstantHits(struct TArray<struct FHitResult> Impacts); // Function Madness.MadShotgun.ServerProcessInstantHits // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x161bc40
	void MulticastProcessInstantHits(struct TArray<struct FHitResult> Impacts); // Function Madness.MadShotgun.MulticastProcessInstantHits // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x161b2a0
};

// Class Madness.MadShotgunnerBackpackComponent
// Size: 0x1120 (Inherited: 0x1110)
struct UMadShotgunnerBackpackComponent : UMadBackpackComponent {
	struct FName BackpackWeakSpotBoneName; // 0x1110(0x08)
	char UnknownData_1118[0x8]; // 0x1118(0x08)
};

// Class Madness.MadSidearm
// Size: 0x1f38 (Inherited: 0x1f30)
struct AMadSidearm : AMadWeapon {
	enum class EMadSidearmType SubType; // 0x1f30(0x01)
	char UnknownData_1F31[0x7]; // 0x1f31(0x07)
};

// Class Madness.MadSideQuestTrigger
// Size: 0x388 (Inherited: 0x2f0)
struct AMadSideQuestTrigger : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	struct FMulticastInlineDelegate OnSideQuestTriggerCompleted; // 0x2f8(0x10)
	struct ULocalInteractionComponent* LocalInteraction; // 0x308(0x08)
	struct FMadSideQuestInfo SideQuestInfo; // 0x310(0x38)
	struct FName RequiredObjectiveID; // 0x348(0x08)
	char UnknownData_350_0 : 7; // 0x350(0x01)
	bool bHideIfMarkedObjectiveNotActive : 1; // 0x350(0x01)
	char UnknownData_351[0x3]; // 0x351(0x03)
	struct FName LastAllowedObjectiveID; // 0x354(0x08)
	char UnknownData_35C_0 : 7; // 0x35c(0x01)
	bool bOverrideMinimapIconVisibilityRange : 1; // 0x35c(0x01)
	char UnknownData_35D[0x3]; // 0x35d(0x03)
	float MinimapIconVisibilityRange; // 0x360(0x04)
	char UnknownData_364[0x4]; // 0x364(0x04)
	struct FGameplayTag GameplayName; // 0x368(0x08)
	char UnknownData_370[0x8]; // 0x370(0x08)
	struct UBaseObjective* SideQuestObjective; // 0x378(0x08)
	struct UBaseObjective* LastAllowedObjective; // 0x380(0x08)

	void OnQuestTrackingChanged(struct UBaseQuest* Inquest, bool bTracked); // Function Madness.MadSideQuestTrigger.OnQuestTrackingChanged // (Final|Native|Protected) // @ game+0x16ccc50
	void OnQuestHandleStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bIsLoading); // Function Madness.MadSideQuestTrigger.OnQuestHandleStatusChanged // (Final|Native|Protected) // @ game+0x16ccb40
	void OnLocalQuestManagerReady(); // Function Madness.MadSideQuestTrigger.OnLocalQuestManagerReady // (Final|Native|Protected) // @ game+0x16cc770
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadSideQuestTrigger.OnInteracted // (Final|Native|Protected) // @ game+0x16cc6b0
};

// Class Madness.MadSimpleHealthBarComponent
// Size: 0x380 (Inherited: 0x370)
struct UMadSimpleHealthBarComponent : UBase3DWidgetComponent {
	char UnknownData_370[0x10]; // 0x370(0x10)
};

// Class Madness.MadSimpleHealthBarWidget
// Size: 0x268 (Inherited: 0x260)
struct UMadSimpleHealthBarWidget : UBaseWidget {
	struct UProgressBar* HealthProgressBar; // 0x260(0x08)

	void OnUpdateCurrentHeath(float InCurrentHealth); // Function Madness.MadSimpleHealthBarWidget.OnUpdateCurrentHeath // (Final|Native|Private) // @ game+0x16ccd60
};

// Class Madness.MadSkeletalMeshComponent
// Size: 0xdc0 (Inherited: 0xda0)
struct UMadSkeletalMeshComponent : USkeletalMeshComponent {
	char UnknownData_DA0[0x20]; // 0xda0(0x20)
};

// Class Madness.MadSkillData
// Size: 0x2d8 (Inherited: 0x30)
struct UMadSkillData : UDataAsset {
	enum class EMadSkillType Type; // 0x30(0x01)
	char UnknownData_31_0 : 7; // 0x31(0x01)
	bool bIsWorkInProgress : 1; // 0x31(0x01)
	enum class EMadnessSkillPath Path; // 0x32(0x01)
	char UnknownData_33_0 : 7; // 0x33(0x01)
	bool bUsesFocus : 1; // 0x33(0x01)
	char UnknownData_34_0 : 7; // 0x34(0x01)
	bool IsUnlockedAtStart : 1; // 0x34(0x01)
	char UnknownData_35_0 : 7; // 0x35(0x01)
	bool bLoopLastEffect : 1; // 0x35(0x01)
	char UnknownData_36[0x2]; // 0x36(0x02)
	SoftClassProperty Ability; // 0x38(0x28)
	struct TArray<struct UMadSkillData*> Masteries; // 0x60(0x10)
	struct FGameplayTagContainer MasteryTags; // 0x70(0x20)
	struct TMap<int32_t, struct FMadnessStackEffect> StackEffects; // 0x90(0x50)
	int32_t MaxStacks; // 0xe0(0x04)
	char UnknownData_E4[0x4]; // 0xe4(0x04)
	SoftClassProperty Effect; // 0xe8(0x28)
	struct FGameplayTagContainer Keywords; // 0x110(0x20)
	struct TSoftObjectPtr<struct UMadSkillData> MasterySkill; // 0x130(0x28)
	int32_t PerkLevelRequirement; // 0x158(0x04)
	char UnknownData_15C_0 : 7; // 0x15c(0x01)
	bool bIsPerk : 1; // 0x15c(0x01)
	char UnknownData_15D_0 : 7; // 0x15d(0x01)
	bool bChangesMeleeWeapon : 1; // 0x15d(0x01)
	enum class EMadSkillTier Tier; // 0x15e(0x01)
	char UnknownData_15F[0x1]; // 0x15f(0x01)
	SoftClassProperty ModTriggerEffect; // 0x160(0x28)
	enum class EMadModTriggerType TriggerType; // 0x188(0x01)
	char UnknownData_189[0x3]; // 0x189(0x03)
	float AuxiliaryTriggerData; // 0x18c(0x04)
	char UnknownData_190_0 : 7; // 0x190(0x01)
	bool bTriggerOnSelf : 1; // 0x190(0x01)
	char UnknownData_191_0 : 7; // 0x191(0x01)
	bool bTriggerOnlyWhenTargeting : 1; // 0x191(0x01)
	char UnknownData_192_0 : 7; // 0x192(0x01)
	bool bTriggerOnlyWhenShieldActive : 1; // 0x192(0x01)
	char UnknownData_193[0x5]; // 0x193(0x05)
	struct FGameplayTagContainer TriggerOnlyWhenAnyTagPresentOnInstigator; // 0x198(0x20)
	struct FGameplayTagContainer TriggerOnlyWhenAnyTagPresentOnVictim; // 0x1b8(0x20)
	char UnknownData_1D8_0 : 7; // 0x1d8(0x01)
	bool bShouldGatherTargets : 1; // 0x1d8(0x01)
	char UnknownData_1D9[0x7]; // 0x1d9(0x07)
	struct FText DisplayName; // 0x1e0(0x18)
	struct FText Description; // 0x1f8(0x18)
	struct FName AssetName; // 0x210(0x08)
	struct FString IconPath; // 0x218(0x10)
	struct UMadSkillDataObject* SkillDataObject; // 0x228(0x08)
	char UnknownData_230_0 : 7; // 0x230(0x01)
	bool bIsAlreadyUnlockedForCrafting : 1; // 0x230(0x01)
	char UnknownData_231[0x2f]; // 0x231(0x2f)
	struct TSoftObjectPtr<struct UTexture2D> PreviewImage; // 0x260(0x28)
	struct TSoftObjectPtr<struct UObject> PreviewVideo; // 0x288(0x28)
	struct FNameWrapper MetricSystemAbilityID; // 0x2b0(0x10)
	char UnknownData_2C0_0 : 7; // 0x2c0(0x01)
	bool bManullyCommitUsage : 1; // 0x2c0(0x01)
	char UnknownData_2C1[0x7]; // 0x2c1(0x07)
	struct UMadGameplayEffect* CooldownEffect; // 0x2c8(0x08)
	struct UMadGameplayEffect* DurationEffect; // 0x2d0(0x08)

	float GetSkillTertiaryExtraData(struct AMadBaseCharacter* OnPawn, int32_t ItemLevel); // Function Madness.MadSkillData.GetSkillTertiaryExtraData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cc280
	float GetSkillSecondaryExtraData(struct AMadBaseCharacter* OnPawn, int32_t ItemLevel); // Function Madness.MadSkillData.GetSkillSecondaryExtraData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cc1c0
	float GetSkillPrimaryExtraData(struct AMadBaseCharacter* OnPawn, int32_t ItemLevel); // Function Madness.MadSkillData.GetSkillPrimaryExtraData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cc100
	float GetSkillDuration(struct AMadBaseCharacter* OnPawn); // Function Madness.MadSkillData.GetSkillDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cc060
	float GetSkillCooldownDuration(struct AMadBaseCharacter* OnPawn); // Function Madness.MadSkillData.GetSkillCooldownDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cbfc0
	float GetSkillCalculatedDamage(struct AMadBaseCharacter* OnPawn); // Function Madness.MadSkillData.GetSkillCalculatedDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cbf20
	struct FText GetSkillBarText(struct AMadBaseCharacter* MadInstigatorCharacter); // Function Madness.MadSkillData.GetSkillBarText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cbd30
	struct TSoftObjectPtr<struct UTexture2D> GetIcon(); // Function Madness.MadSkillData.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cba50
	bool CheckSkillCost(struct AMadBaseCharacter* OnPawn); // Function Madness.MadSkillData.CheckSkillCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16cb8a0
};

// Class Madness.MadSkillDataObject
// Size: 0x28 (Inherited: 0x28)
struct UMadSkillDataObject : UObject {

	void ResetSkillCharges(struct AMadBaseCharacter* MadInstigatorCharacter); // Function Madness.MadSkillDataObject.ResetSkillCharges // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x16cce60
	bool IsSkillWithCharges(struct AMadBaseCharacter* MadInstigatorCharacter, int32_t OutCurrentCharges, int32_t OutMaxCharges); // Function Madness.MadSkillDataObject.IsSkillWithCharges // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x16cc440
	float GetTertiaryExtraData(struct AMadBaseCharacter* MadInstigatorCharacter, int32_t ItemLevel); // Function Madness.MadSkillDataObject.GetTertiaryExtraData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16cc370
	struct FText GetSkillBarText(struct AMadBaseCharacter* MadInstigatorCharacter); // Function Madness.MadSkillDataObject.GetSkillBarText // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x16cbe20
	float GetSecondaryExtraData(struct AMadBaseCharacter* MadInstigatorCharacter, int32_t ItemLevel); // Function Madness.MadSkillDataObject.GetSecondaryExtraData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16cbbe0
	float GetPrimaryExtraData(struct AMadBaseCharacter* MadInstigatorCharacter, int32_t ItemLevel); // Function Madness.MadSkillDataObject.GetPrimaryExtraData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16cbb10
	float GetCalculatedDamage(struct AMadBaseCharacter* MadInstigatorCharacter); // Function Madness.MadSkillDataObject.GetCalculatedDamage // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x16cb9b0
};

// Class Madness.MadSkillTargeting
// Size: 0x50 (Inherited: 0x30)
struct UMadSkillTargeting : UDataAsset {
	struct UCurveFloat* DistanceCurve; // 0x30(0x08)
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bDistanceFromCamera : 1; // 0x38(0x01)
	char UnknownData_39_0 : 7; // 0x39(0x01)
	bool bDotFromPlayer : 1; // 0x39(0x01)
	char UnknownData_3A[0x2]; // 0x3a(0x02)
	float TargetInCrosshairWeight; // 0x3c(0x04)
	struct UCurveFloat* DotCurve; // 0x40(0x08)
	int32_t ExpectedTargets; // 0x48(0x04)
	char UnknownData_4C[0x4]; // 0x4c(0x04)
};

// Class Madness.MadSlowSphere
// Size: 0x340 (Inherited: 0x2f0)
struct AMadSlowSphere : AActor {
	char UnknownData_2F0[0x8]; // 0x2f0(0x08)
	int32_t MaxSlowBullets; // 0x2f8(0x04)
	float BulletsScatterMaxDuration; // 0x2fc(0x04)
	float BulletsScatterDelay; // 0x300(0x04)
	char UnknownData_304_0 : 7; // 0x304(0x01)
	bool bEnabled : 1; // 0x304(0x01)
	char UnknownData_305[0x3]; // 0x305(0x03)
	struct AMadSlowSphereBullet* BulletProj; // 0x308(0x08)
	struct USphereComponent* SphereComp; // 0x310(0x08)
	struct UCustomPhysicsComponent* CustomPhysicsComp; // 0x318(0x08)
	struct UParticleSystemComponent* SphereParticle; // 0x320(0x08)
	struct TArray<struct AMadSlowSphereBullet*> MyBullets; // 0x328(0x10)
	int32_t DebugMaxBullets; // 0x338(0x04)
	char UnknownData_33C[0x4]; // 0x33c(0x04)

	void SetSlowSphereRadius(float NewRadius); // Function Madness.MadSlowSphere.SetSlowSphereRadius // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x15148c0
	void SetEnabled(bool bInEnabled); // Function Madness.MadSlowSphere.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x16ccef0
	void OnOverlapEndCallback(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadSlowSphere.OnOverlapEndCallback // (Final|Native|Public) // @ game+0x16cca00
	float GetSlowSphereRadius(); // Function Madness.MadSlowSphere.GetSlowSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x16cc340
};

// Class Madness.MadSlowSphereBullet
// Size: 0x338 (Inherited: 0x2f0)
struct AMadSlowSphereBullet : AActor {
	struct USoundCue* SpeedUpCue; // 0x2f0(0x08)
	struct FInstantHitInfo HitNotify; // 0x2f8(0x18)
	struct AActor* OwnerSphere; // 0x310(0x08)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bAlreadyHit : 1; // 0x318(0x01)
	char UnknownData_319[0x7]; // 0x319(0x07)
	struct USlowProjectileMovementComponent* MovementComp; // 0x320(0x08)
	struct UParticleSystemComponent* ParticleComp; // 0x328(0x08)
	struct UStaticMeshComponent* Mesh; // 0x330(0x08)

	void OnRep_HitNotify(); // Function Madness.MadSlowSphereBullet.OnRep_HitNotify // (Final|Native|Protected) // @ game+0x16ccd40
	void OnRep_AlreadyHit(); // Function Madness.MadSlowSphereBullet.OnRep_AlreadyHit // (Final|Native|Private) // @ game+0x16ccd20
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadSlowSphereBullet.OnOverlapBegin // (Final|Native|Protected|HasOutParms) // @ game+0x16cc790
	void OnImpact(struct FHitResult HitResult); // Function Madness.MadSlowSphereBullet.OnImpact // (Native|Public|HasOutParms) // @ game+0x16cc560
};

// Class Madness.MadSoundNodeCharacter
// Size: 0x58 (Inherited: 0x50)
struct UMadSoundNodeCharacter : USoundNode {
	char UnknownData_50_0 : 7; // 0x50(0x01)
	bool bUnloadUnusedGenderSound : 1; // 0x50(0x01)
	char UnknownData_51[0x7]; // 0x51(0x07)
};

// Class Madness.MadSpider
// Size: 0x3d0 (Inherited: 0x2f0)
struct AMadSpider : AActor {
	struct UStaticMeshComponent* SpiderMesh; // 0x2f0(0x08)
	struct USphereComponent* SphereCollider; // 0x2f8(0x08)
	struct UParticleSystem* DeathParticle; // 0x300(0x08)
	char UnknownData_308[0xc8]; // 0x308(0xc8)

	void MulticastInit(struct AMadSwarm* InSwarm); // Function Madness.MadSpider.MulticastInit // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1516d80
};

// Class Madness.MadSpiderMovementComponent
// Size: 0xb70 (Inherited: 0xa30)
struct UMadSpiderMovementComponent : UMadCharacterMovementComponent {
	float GroundCheckDepth; // 0xa28(0x04)
	float NormalAdjustRate; // 0xa2c(0x04)
	float TimeToPanicAfterSurfaceLost; // 0xa30(0x04)
	char UnknownData_A3C_0 : 7; // 0xa3c(0x01)
	bool bTraceComplex : 1; // 0xa34(0x01)
	bool bUseSweepByChannelForWalking : 1; // 0xa35(0x01)
	enum class ECollisionChannel WalkingCollisionChannel; // 0xa36(0x01)
	char UnknownData_A3E[0x132]; // 0xa3e(0x132)

	void AddIgnoredActor(struct AActor* Actor); // Function Madness.MadSpiderMovementComponent.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x16d0f80
};

// Class Madness.MadSpikeComponent
// Size: 0x550 (Inherited: 0x4f0)
struct UMadSpikeComponent : UCapsuleComponent {
	struct UExplosionTemplate* SpikeSpawnExploion; // 0x4f0(0x08)
	struct FMadAITargetMarker MarkerParticle; // 0x4f8(0x28)
	float MarkerSpawnRandomTimeDeviation; // 0x520(0x04)
	char UnknownData_524[0x2c]; // 0x524(0x2c)
};

// Class Madness.MadSpringArmComponent
// Size: 0x560 (Inherited: 0x450)
struct UMadSpringArmComponent : UBaseSpringArmComponent {
	struct FVector CameraLagDirectionalMaxDistance; // 0x450(0x0c)
	char UnknownData_45C[0x4]; // 0x45c(0x04)
	float WaitForRecoveryAfterHitTime; // 0x460(0x04)
	float WaitForRecoveryDuringHitTime; // 0x464(0x04)
	float SafeDistanceToRecoverDuringHit; // 0x468(0x04)
	float RecoveryCameraSpeed; // 0x46c(0x04)
	char UnknownData_470[0xa8]; // 0x470(0xa8)
	float MinDistanceForUpOffset; // 0x518(0x04)
	float MaxDistanceForUpOffset; // 0x51c(0x04)
	float UpOffsetInterpSpeed; // 0x520(0x04)
	float MaxUpOffset; // 0x524(0x04)
	char UnknownData_528_0 : 7; // 0x528(0x01)
	bool bUseLegacyCollisionTest : 1; // 0x528(0x01)
	char UnknownData_529[0x1f]; // 0x529(0x1f)
	float MaxSearchAngle; // 0x548(0x04)
	char UnknownData_54C[0x8]; // 0x54c(0x08)
	float MaxCameraInterpSpeed; // 0x554(0x04)
	char UnknownData_558[0x8]; // 0x558(0x08)
};

// Class Madness.MadStartPromptWidget
// Size: 0x240 (Inherited: 0x238)
struct UMadStartPromptWidget : UMadLobbyBaseWidget {
	char UnknownData_238[0x8]; // 0x238(0x08)

	void StartPressed(); // Function Madness.MadStartPromptWidget.StartPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x16d1630
	void StartPressAllowed(); // Function Madness.MadStartPromptWidget.StartPressAllowed // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadStaticNavModifierBoxComponent
// Size: 0x560 (Inherited: 0x560)
struct UMadStaticNavModifierBoxComponent : UStaticNavModifierBoxComponent {
};

// Class Madness.MadStatusBarWidget
// Size: 0x288 (Inherited: 0x260)
struct UMadStatusBarWidget : UBaseWidget {
	struct UHorizontalBox* StatusHorizontalBox; // 0x260(0x08)
	struct FVector2D IconSize; // 0x268(0x08)
	struct FMargin IconPadding; // 0x270(0x10)
	float PaddingBetweenGroups; // 0x280(0x04)
	char UnknownData_284[0x4]; // 0x284(0x04)

	void SetStatusBarData(struct FMadStatusBarData InStatusBarData); // Function Madness.MadStatusBarWidget.SetStatusBarData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x16d12b0
	void ClearStatusBar(); // Function Madness.MadStatusBarWidget.ClearStatusBar // (Final|Native|Public|BlueprintCallable) // @ game+0x16d1000
};

// Class Madness.MadStoneShards
// Size: 0x3c0 (Inherited: 0x2f0)
struct AMadStoneShards : AActor {
	struct AMadProjectile* ProjectileTemplate; // 0x2f0(0x08)
	float HazardousAreaOffset; // 0x2f8(0x04)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
	struct TArray<struct FVector> ProjectileOffsets; // 0x300(0x10)
	char bDebugDrawOffset : 1; // 0x310(0x01)
	char UnknownData_310_1 : 7; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)
	struct FMulticastInlineDelegate OnProjectilesSpawned; // 0x318(0x10)
	float MinDistance; // 0x328(0x04)
	float MaxDistance; // 0x32c(0x04)
	float MinDotProductBetweenSelfActorAndTarget; // 0x330(0x04)
	char UnknownData_334[0x4]; // 0x334(0x04)
	struct AMadBaseAICharacter* OwnerCharacter; // 0x338(0x08)
	struct TArray<int32_t> TargetMarkerIDs; // 0x340(0x10)
	char UnknownData_350[0x70]; // 0x350(0x70)

	void SpawnProjectilesWhenStonesCollide(); // Function Madness.MadStoneShards.SpawnProjectilesWhenStonesCollide // (Final|Native|Public|BlueprintCallable) // @ game+0x16d1520
	struct FTransform GetHazardousMarkerSpawnOrigin(); // Function Madness.MadStoneShards.GetHazardousMarkerSpawnOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x16d1160
	void EnableCancellationTests(bool bEnabled); // Function Madness.MadStoneShards.EnableCancellationTests // (Final|Native|Protected|BlueprintCallable) // @ game+0x16d10d0
	void DestroyTargetMarkers(struct TArray<int32_t> MarkerIDs); // Function Madness.MadStoneShards.DestroyTargetMarkers // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x16d1020
	void CancelAbility(); // Function Madness.MadStoneShards.CancelAbility // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadSubtitlesUIModel
// Size: 0xb0 (Inherited: 0x50)
struct UMadSubtitlesUIModel : UBaseUIModel {
	struct FText Subtitles; // 0x50(0x18)
	char UnknownData_68[0x18]; // 0x68(0x18)
	struct FText DescriptiveSubtitles; // 0x80(0x18)
	char UnknownData_98[0x18]; // 0x98(0x18)
};

// Class Madness.MadSwarm
// Size: 0x460 (Inherited: 0x2f0)
struct AMadSwarm : AActor {
	struct AMadSpider* SpiderClass; // 0x2f0(0x08)
	float BaseRadius; // 0x2f8(0x04)
	float MinRadius; // 0x2fc(0x04)
	float RandomSizePct; // 0x300(0x04)
	float MinBiteDistance; // 0x304(0x04)
	struct UMadGameplayEffect* VictimSwarmedEffect; // 0x308(0x08)
	float MinMovementSpeed; // 0x310(0x04)
	float MaxMovementSpeed; // 0x314(0x04)
	float RandomMovementSpeedPct; // 0x318(0x04)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct UCurveFloat* PctSpeedOverPctDistance; // 0x320(0x08)
	float RotationSpeed; // 0x328(0x04)
	float RandomRotationSpeedPct; // 0x32c(0x04)
	float SinMoveSpeed; // 0x330(0x04)
	float SinMoveAmplitude; // 0x334(0x04)
	float MinDistToVictimToStopSinMove; // 0x338(0x04)
	char UnknownData_33C[0x4]; // 0x33c(0x04)
	struct UAudioComponent* MovementAudio; // 0x340(0x08)
	struct UAudioComponent* FeastAudio; // 0x348(0x08)
	struct UAudioComponent* VictimKilledAudio; // 0x350(0x08)
	struct UAudioComponent* TensionAudio; // 0x358(0x08)
	float MovementAudioFadeTime; // 0x360(0x04)
	float FeastAudioFadeTime; // 0x364(0x04)
	struct FMulticastInlineDelegate OnSpiderReachedDestination; // 0x368(0x10)
	char UnknownData_378[0x8]; // 0x378(0x08)
	struct FWeakObjectPtr<struct UMadGameplayAbility> OwnerSwarmAbility; // 0x380(0x08)
	struct FWeakObjectPtr<struct AMadPlayerCharacter> OwnerCharacter; // 0x388(0x08)
	struct FWeakObjectPtr<struct AMadCharAI> Victim; // 0x390(0x08)
	float SwarmedTimer; // 0x398(0x04)
	float SwarmDistancePct; // 0x39c(0x04)
	int32_t NumOfVictimsKilled; // 0x3a0(0x04)
	char UnknownData_3A4[0xbc]; // 0x3a4(0xbc)

	struct AMadSwarm* SpawnSwarm(struct UMadGameplayAbility* SwarmAbility, struct AMadSwarm* SwarmClass, int32_t Quantity); // Function Madness.MadSwarm.SpawnSwarm // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d1540
	struct AMadSwarm* SpawnCosmeticSwarm(struct AVolume* SpawnVolume, struct AActor* DestinationActor, struct AMadSwarm* SwarmClass, int32_t Quantity, float MaxSpiderLifetime, float DURATION); // Function Madness.MadSwarm.SpawnCosmeticSwarm // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d1370
	void OnRep_Victim(); // Function Madness.MadSwarm.OnRep_Victim // (Final|Native|Private) // @ game+0x16d1290
	void MulticastStopMovementAudio(); // Function Madness.MadSwarm.MulticastStopMovementAudio // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xbe8d70
	void MulticastStopFeastAudio(); // Function Madness.MadSwarm.MulticastStopFeastAudio // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1516bc0
	void MulticastPlayVictimKilledAudio(); // Function Madness.MadSwarm.MulticastPlayVictimKilledAudio // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x150ed00
	void MulticastPlayMovementAudio(); // Function Madness.MadSwarm.MulticastPlayMovementAudio // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0xb14550
	void MulticastPlayFeastAudio(); // Function Madness.MadSwarm.MulticastPlayFeastAudio // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1522260
	void MulticastInitSwarm(int32_t Quantity, struct AMadCharAI* InVictim); // Function Madness.MadSwarm.MulticastInitSwarm // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x16d11a0
	void MulticastEscapeSwarm(struct AActor* DestinationActor); // Function Madness.MadSwarm.MulticastEscapeSwarm // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0xbf20e0
};

// Class Madness.MadTargetActorBase
// Size: 0x6a0 (Inherited: 0x410)
struct AMadTargetActorBase : AGameplayAbilityTargetActor {
	char UnknownData_410[0x50]; // 0x410(0x50)
	char UnknownData_460_0 : 7; // 0x460(0x01)
	bool bUseCameraAsOrigin : 1; // 0x460(0x01)
	enum class EMadAbilityTargetGroup TargetGroup; // 0x461(0x01)
	char UnknownData_462[0x2]; // 0x462(0x02)
	struct FMadTargetCollisionTest CollisionTest; // 0x464(0x0c)
	struct UMadSkillTargeting* SkillTargetingTemplate; // 0x470(0x08)
	char UnknownData_478_0 : 7; // 0x478(0x01)
	bool bIgnoreFlyingTargets : 1; // 0x478(0x01)
	char UnknownData_479[0x7]; // 0x479(0x07)
	struct FMadTargetMarker Marker; // 0x480(0x40)
	char UnknownData_4C0_0 : 7; // 0x4c0(0x01)
	bool bDisablesCrosshairDot : 1; // 0x4c0(0x01)
	char UnknownData_4C1[0x7]; // 0x4c1(0x07)
	struct UStaticMeshComponent* MarkerComponent; // 0x4c8(0x08)
	struct UParticleSystemComponent* MarkerParticleComponent; // 0x4d0(0x08)
	char UnknownData_4D8_0 : 7; // 0x4d8(0x01)
	bool bShowMarker : 1; // 0x4d8(0x01)
	char UnknownData_4D9[0x3]; // 0x4d9(0x03)
	struct FMadTargetHighlight Highlight; // 0x4dc(0x14)
	struct FName HighlightParamName; // 0x4f0(0x08)
	struct FLinearColor NoHighlightColor; // 0x4f8(0x10)
	float MarkerParticleSize; // 0x508(0x04)
	float MarkerParticleAngle; // 0x50c(0x04)
	float MarkerParticleMiddleExtrude; // 0x510(0x04)
	char UnknownData_514[0x18c]; // 0x514(0x18c)

	void OnRep_ShowMarker(); // Function Madness.MadTargetActorBase.OnRep_ShowMarker // (Final|Native|Protected) // @ game+0x16d1270
};

// Class Madness.MadTargetActor_Beam
// Size: 0x6f0 (Inherited: 0x6a0)
struct AMadTargetActor_Beam : AMadTargetActorBase {
	float Length; // 0x6a0(0x04)
	float Radius; // 0x6a4(0x04)
	char UnknownData_6A8_0 : 7; // 0x6a8(0x01)
	bool bOnlyYaw : 1; // 0x6a8(0x01)
	char UnknownData_6A9[0x47]; // 0x6a9(0x47)
};

// Class Madness.MadTargetActor_Cone
// Size: 0x6f0 (Inherited: 0x6a0)
struct AMadTargetActor_Cone : AMadTargetActorBase {
	float ConeLength; // 0x6a0(0x04)
	float ConeAngle; // 0x6a4(0x04)
	char UnknownData_6A8_0 : 7; // 0x6a8(0x01)
	bool bOnlyYaw : 1; // 0x6a8(0x01)
	char UnknownData_6A9[0x3]; // 0x6a9(0x03)
	float ConeBackOffset; // 0x6ac(0x04)
	float Radius; // 0x6b0(0x04)
	char UnknownData_6B4[0x3c]; // 0x6b4(0x3c)
};

// Class Madness.MadTargetActor_DirectionalCone
// Size: 0x6e0 (Inherited: 0x6a0)
struct AMadTargetActor_DirectionalCone : AMadTargetActorBase {
	float ConeLength; // 0x6a0(0x04)
	float ConeAngle; // 0x6a4(0x04)
	float ConeBackOffset; // 0x6a8(0x04)
	char UnknownData_6AC[0x34]; // 0x6ac(0x34)
};

// Class Madness.MadTargetActor_InRadius
// Size: 0x6b0 (Inherited: 0x6a0)
struct AMadTargetActor_InRadius : AMadTargetActorBase {
	float Radius; // 0x6a0(0x04)
	char UnknownData_6A4[0xc]; // 0x6a4(0x0c)
};

// Class Madness.MadTargetActor_InRadiusFromEnemy
// Size: 0x700 (Inherited: 0x6a0)
struct AMadTargetActor_InRadiusFromEnemy : AMadTargetActorBase {
	float SearchConeLength; // 0x6a0(0x04)
	float SearchConeAngle; // 0x6a4(0x04)
	float Radius; // 0x6a8(0x04)
	char UnknownData_6AC_0 : 7; // 0x6ac(0x01)
	bool bWantsOnlyEndPoint : 1; // 0x6ac(0x01)
	char UnknownData_6AD[0x3]; // 0x6ad(0x03)
	struct FMadTargetHighlight InitialTargetHighlight; // 0x6b0(0x14)
	char UnknownData_6C4[0x3c]; // 0x6c4(0x3c)
};

// Class Madness.MadTargetActor_Marker
// Size: 0x750 (Inherited: 0x6a0)
struct AMadTargetActor_Marker : AMadTargetActorBase {
	float TraceRange; // 0x6a0(0x04)
	float MarkerRadius; // 0x6a4(0x04)
	char UnknownData_6A8_0 : 7; // 0x6a8(0x01)
	bool bWantsOnlyEndPoint : 1; // 0x6a8(0x01)
	char UnknownData_6A9_0 : 7; // 0x6a9(0x01)
	bool bAlternativeMode : 1; // 0x6a9(0x01)
	char UnknownData_6AA_0 : 7; // 0x6aa(0x01)
	bool bOnlyAllowPointsOnNavMesh : 1; // 0x6aa(0x01)
	char UnknownData_6AB[0xa5]; // 0x6ab(0xa5)
};

// Class Madness.MadTargetActor_Marker2
// Size: 0x750 (Inherited: 0x750)
struct AMadTargetActor_Marker2 : AMadTargetActor_Marker {
	float DownTraceHeight; // 0x748(0x04)
};

// Class Madness.MadTargetActor_Marker3
// Size: 0x750 (Inherited: 0x750)
struct AMadTargetActor_Marker3 : AMadTargetActor_Marker {
	float AllowedSurfaceDot; // 0x748(0x04)
};

// Class Madness.MadTargetActorSpawnBase
// Size: 0x760 (Inherited: 0x6a0)
struct AMadTargetActorSpawnBase : AMadTargetActorBase {
	struct AMadActorWithPreview* ActorToPreviewClass; // 0x6a0(0x08)
	float AllowedSurfaceHeight; // 0x6a8(0x04)
	float AllowedSurfaceAngle; // 0x6ac(0x04)
	char UnknownData_6B0_0 : 7; // 0x6b0(0x01)
	bool bSurfaceAlignEnabled : 1; // 0x6b0(0x01)
	char UnknownData_6B1[0x7]; // 0x6b1(0x07)
	struct AMadActorWithPreview* PreviewActor; // 0x6b8(0x08)
	char UnknownData_6C0[0xa0]; // 0x6c0(0xa0)
};

// Class Madness.MadTargetActor_Spawn
// Size: 0x780 (Inherited: 0x760)
struct AMadTargetActor_Spawn : AMadTargetActorSpawnBase {
	float TraceRange; // 0x758(0x04)
	float DownTraceMultiplier; // 0x75c(0x04)
	char UnknownData_768_0 : 7; // 0x768(0x01)
	bool bNoVariablePitch : 1; // 0x760(0x01)
	float MinDistance; // 0x764(0x04)
	float SideOffset; // 0x768(0x04)
	struct FVector2D DistanceFromCoverMultiplier; // 0x76c(0x08)
	struct FVector2D TraceDirCoverMultiplier; // 0x774(0x08)
};

// Class Madness.MadTargetActor_SpawnInPlace
// Size: 0x770 (Inherited: 0x760)
struct AMadTargetActor_SpawnInPlace : AMadTargetActorSpawnBase {
	struct FVector2D PlacementOffset; // 0x758(0x08)
	struct FVector2D PlacementOffsetLowCover; // 0x760(0x08)
	struct FVector2D PlacementOffsetHighCover; // 0x768(0x08)
};

// Class Madness.MadTargetActor_Throw
// Size: 0x770 (Inherited: 0x6a0)
struct AMadTargetActor_Throw : AMadTargetActorBase {
	struct AProjectile* ProjectileClass; // 0x6a0(0x08)
	struct USceneComponent* TargetSpotComponent; // 0x6a8(0x08)
	struct UParticleSystemComponent* TargetSpotMarkerComponent; // 0x6b0(0x08)
	struct UParticleSystem* TargetSpotMarkerPS; // 0x6b8(0x08)
	struct AProjectile* SimulationProjectile; // 0x6c0(0x08)
	char UnknownData_6C8[0xa8]; // 0x6c8(0xa8)
};

// Class Madness.MadTargetingConeComponent
// Size: 0x580 (Inherited: 0x580)
struct UMadTargetingConeComponent : UStaticMeshComponent {
};

// Class Madness.MadTask_TutorialBase
// Size: 0x40 (Inherited: 0x28)
struct UMadTask_TutorialBase : UObject {
	char UnknownData_28[0x18]; // 0x28(0x18)
};

// Class Madness.MadTask_WaitDistanceTravelled
// Size: 0x70 (Inherited: 0x40)
struct UMadTask_WaitDistanceTravelled : UMadTask_TutorialBase {
	char UnknownData_40[0x20]; // 0x40(0x20)
	struct FMulticastInlineDelegate OnDistanceTravelled; // 0x60(0x10)

	struct UMadTask_WaitDistanceTravelled* WaitDistanceTravelled(float Distance, struct AActor* ContextActor, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitDistanceTravelled.WaitDistanceTravelled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d1750
	void DistanceTravelled__DelegateSignature(); // DelegateFunction Madness.MadTask_WaitDistanceTravelled.DistanceTravelled__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
};

// Class Madness.MadTask_WaitControlRotTravelled
// Size: 0x70 (Inherited: 0x40)
struct UMadTask_WaitControlRotTravelled : UMadTask_TutorialBase {
	char UnknownData_40[0x20]; // 0x40(0x20)
	struct FMulticastInlineDelegate OnAngleTravelled; // 0x60(0x10)

	struct UMadTask_WaitControlRotTravelled* WaitControlRotTravelled(float Angle, struct APlayerController* PlayerController, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitControlRotTravelled.WaitControlRotTravelled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d1650
	void RotationChanged__DelegateSignature(); // DelegateFunction Madness.MadTask_WaitControlRotTravelled.RotationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
};

// Class Madness.MadTask_WaitForDesiredMoveType
// Size: 0x60 (Inherited: 0x40)
struct UMadTask_WaitForDesiredMoveType : UMadTask_TutorialBase {
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct FMulticastInlineDelegate OnDesiredMoveTypeChanged; // 0x48(0x10)
	char UnknownData_58[0x8]; // 0x58(0x08)

	struct UMadTask_WaitForDesiredMoveType* WaitWaitForDesiredMoveType(enum class EPlayerMovementSpeed InDesiredMoveType, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitForDesiredMoveType.WaitWaitForDesiredMoveType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8670
	void OnDesiredMoveTypeCallback(enum class EPlayerMovementSpeed InDesiredMoveType); // Function Madness.MadTask_WaitForDesiredMoveType.OnDesiredMoveTypeCallback // (Final|Native|Public) // @ game+0x16d60f0
};

// Class Madness.MadTask_WaitForFactExpression
// Size: 0x70 (Inherited: 0x40)
struct UMadTask_WaitForFactExpression : UMadTask_TutorialBase {
	char UnknownData_40[0x18]; // 0x40(0x18)
	struct FMulticastInlineDelegate OnFactExpression; // 0x58(0x10)
	char UnknownData_68[0x8]; // 0x68(0x08)

	struct UMadTask_WaitForFactExpression* WaitForFactExpression(struct FFactExpression InFactExpression, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitForFactExpression.WaitForFactExpression // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d7ea0
	void WaitFactDelegate__DelegateSignature(); // DelegateFunction Madness.MadTask_WaitForFactExpression.WaitFactDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
};

// Class Madness.MadTask_WaitForInteraction
// Size: 0x60 (Inherited: 0x40)
struct UMadTask_WaitForInteraction : UMadTask_TutorialBase {
	char UnknownData_40[0x10]; // 0x40(0x10)
	struct FMulticastInlineDelegate OnInteracted; // 0x50(0x10)

	struct UMadTask_WaitForInteraction* WaitForInteraction(struct AActor* InInteractionActorClass, struct AMadPlayerCharacter* ContextCharacter); // Function Madness.MadTask_WaitForInteraction.WaitForInteraction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d7fe0
	void OnInteractionCallback(struct FName EventName, struct FGlobalEventParams GlobalEvent); // Function Madness.MadTask_WaitForInteraction.OnInteractionCallback // (Final|Native|Public|HasOutParms) // @ game+0x16d65d0
};

// Class Madness.MadTask_WaitMoveActionFinished
// Size: 0x60 (Inherited: 0x40)
struct UMadTask_WaitMoveActionFinished : UMadTask_TutorialBase {
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct FMulticastInlineDelegate OnMoveActionFinished; // 0x48(0x10)
	char UnknownData_58[0x8]; // 0x58(0x08)

	struct UMadTask_WaitMoveActionFinished* WaitMoveActionFinished(enum class EPlayerMoveAction InMoveAction, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitMoveActionFinished.WaitMoveActionFinished // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8490
	void OnMoveActionFinishedCallback(enum class EPlayerMoveAction InMoveAction); // Function Madness.MadTask_WaitMoveActionFinished.OnMoveActionFinishedCallback // (Final|Native|Public) // @ game+0x16d6d80
};

// Class Madness.MadTask_WaitMoveActionStarted
// Size: 0x60 (Inherited: 0x40)
struct UMadTask_WaitMoveActionStarted : UMadTask_TutorialBase {
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct FMulticastInlineDelegate OnMoveActionStarted; // 0x48(0x10)
	char UnknownData_58[0x8]; // 0x58(0x08)

	struct UMadTask_WaitMoveActionStarted* WaitMoveActionStarted(enum class EPlayerMoveAction InMoveAction, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitMoveActionStarted.WaitMoveActionStarted // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8580
	void OnMoveActionStartedCallback(enum class EPlayerMoveAction InMoveAction, float Angle); // Function Madness.MadTask_WaitMoveActionStarted.OnMoveActionStartedCallback // (Final|Native|Public) // @ game+0x16d6e00
};

// Class Madness.MadTask_WaitForTagBase
// Size: 0x60 (Inherited: 0x40)
struct UMadTask_WaitForTagBase : UMadTask_TutorialBase {
	char UnknownData_40[0x20]; // 0x40(0x20)

	void TagChangedResult__DelegateSignature(); // DelegateFunction Madness.MadTask_WaitForTagBase.TagChangedResult__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	void GameplayTagCallback(struct FGameplayTag InTag, int32_t NewCount); // Function Madness.MadTask_WaitForTagBase.GameplayTagCallback // (Final|Native|Public) // @ game+0x16d4f20
};

// Class Madness.MadTask_WaitForTagAdded
// Size: 0x70 (Inherited: 0x60)
struct UMadTask_WaitForTagAdded : UMadTask_WaitForTagBase {
	struct FMulticastInlineDelegate OnTagAdded; // 0x60(0x10)

	struct UMadTask_WaitForTagAdded* WaitForTagAdded(struct FGameplayTag InTag, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitForTagAdded.WaitForTagAdded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d80a0
};

// Class Madness.MadTask_WaitForTagRemoved
// Size: 0x70 (Inherited: 0x60)
struct UMadTask_WaitForTagRemoved : UMadTask_WaitForTagBase {
	struct FMulticastInlineDelegate OnTagRemoved; // 0x60(0x10)

	struct UMadTask_WaitForTagRemoved* WaitForTagRemoved(struct FGameplayTag InTag, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitForTagRemoved.WaitForTagRemoved // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8190
};

// Class Madness.MadTask_WaitForWeaponEquipped
// Size: 0x68 (Inherited: 0x40)
struct UMadTask_WaitForWeaponEquipped : UMadTask_TutorialBase {
	char UnknownData_40[0x8]; // 0x40(0x08)
	struct UMadTutorialListener_WeaponEquipped* WeaponListener; // 0x48(0x08)
	struct FMulticastInlineDelegate OnWeaponEquipped; // 0x50(0x10)
	char UnknownData_60[0x8]; // 0x60(0x08)

	struct UMadTask_WaitForWeaponEquipped* WaitForWeaponEquipped(struct FWeaponEquipParams EquipParams, struct AMadPlayerCharacter* ContextCharacter, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitForWeaponEquipped.WaitForWeaponEquipped // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8280
};

// Class Madness.MadTask_WaitInputAction
// Size: 0x80 (Inherited: 0x40)
struct UMadTask_WaitInputAction : UMadTask_TutorialBase {
	struct FMulticastInlineDelegate OnActionPressed; // 0x40(0x10)
	struct FName ActionName; // 0x50(0x08)
	char UnknownData_58_0 : 7; // 0x58(0x01)
	bool bHandleInput : 1; // 0x58(0x01)
	char UnknownData_59[0x27]; // 0x59(0x27)

	struct UMadTask_WaitInputAction* WaitInputAction(struct FName ActionName, bool bHandleInput, struct UObject* WorldContextObject); // Function Madness.MadTask_WaitInputAction.WaitInputAction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d8390
	void InputActionResult__DelegateSignature(); // DelegateFunction Madness.MadTask_WaitInputAction.InputActionResult__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
};

// Class Madness.MadTelemetry
// Size: 0x648 (Inherited: 0x28)
struct UMadTelemetry : UObject {
	char UnknownData_28[0x620]; // 0x28(0x620)

	bool StartGame(struct ULocalPlayer* StartPlayer, struct UMadOnlineSaveSystem* NewSaveSystem); // Function Madness.MadTelemetry.StartGame // (Final|Native|Public) // @ game+0x16d7d30
	void SkillUnlocked(struct FString SkillID); // Function Madness.MadTelemetry.SkillUnlocked // (Final|Native|Public) // @ game+0x16d7c90
	void PlayerDied(struct FTakeHitInfo TakeHitInfo); // Function Madness.MadTelemetry.PlayerDied // (Final|Native|Public|HasOutParms) // @ game+0x16d7a40
	void OnUnlockAchievement(struct FName AchievementID); // Function Madness.MadTelemetry.OnUnlockAchievement // (Final|Native|Private) // @ game+0x16d79c0
	void OnTick(float DeltaTime); // Function Madness.MadTelemetry.OnTick // (Final|Native|Private) // @ game+0x16d7940
	void OnSkillActivated(struct UMadSkillData* ActivatedSkill); // Function Madness.MadTelemetry.OnSkillActivated // (Final|Native|Private) // @ game+0x16d7880
	void OnReadFriendsListComplete(int32_t LocalUserNum, bool bWasSuccessful, struct FString ListName, struct FString ErrorStr); // Function Madness.MadTelemetry.OnReadFriendsListComplete // (Final|Native|Private) // @ game+0x16d7710
	void OnQuestFailedWithReason(struct UBaseQuest* quest, enum class EQuestFailReason Reason); // Function Madness.MadTelemetry.OnQuestFailedWithReason // (Final|Native|Private) // @ game+0x16d7650
	void OnQuestFailed(struct UBaseQuest* quest); // Function Madness.MadTelemetry.OnQuestFailed // (Final|Native|Private) // @ game+0x16d75d0
	void OnQuestCompleted(struct UBaseQuest* quest); // Function Madness.MadTelemetry.OnQuestCompleted // (Final|Native|Private) // @ game+0x16d7550
	void OnQuestBegin(struct UBaseQuest* quest); // Function Madness.MadTelemetry.OnQuestBegin // (Final|Native|Private) // @ game+0x16d74d0
	void OnQuest(struct UBaseQuest* quest, struct UBaseObjective* Objective, struct FString QuestStatus, enum class EQuestFailReason Reason, bool bNeedCoopStatus, enum class EObjectiveStatus ObjectiveStatus); // Function Madness.MadTelemetry.OnQuest // (Final|Native|Private) // @ game+0x16d7300
	void OnOriginaItemBeforUpgrade(struct AMadItem* Item); // Function Madness.MadTelemetry.OnOriginaItemBeforUpgrade // (Final|Native|Private) // @ game+0x16d7010
	void OnObjectiveStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bLoading); // Function Madness.MadTelemetry.OnObjectiveStatusChanged // (Final|Native|Private) // @ game+0x16d6f00
	void OnMovieOrDialogueSkippedEvent(); // Function Madness.MadTelemetry.OnMovieOrDialogueSkippedEvent // (Final|Native|Private) // @ game+0x16d6ee0
	void OnMovieOrDialogStarted(); // Function Madness.MadTelemetry.OnMovieOrDialogStarted // (Final|Native|Private) // @ game+0x16d6ec0
	void OnLeaveUIState(struct FName StateName); // Function Madness.MadTelemetry.OnLeaveUIState // (Final|Native|Private|HasOutParms) // @ game+0x16d6cf0
	void OnKeyPressed(struct FString KeyName); // Function Madness.MadTelemetry.OnKeyPressed // (Final|Native|Public) // @ game+0x16d6c50
	void OnItemOffersFinishedAcceptCallback(bool bSuccess, struct FItemOfferData ItemOfferData); // Function Madness.MadTelemetry.OnItemOffersFinishedAcceptCallback // (Final|Native|Private|HasOutParms) // @ game+0x16d6850
	void OnInventoryItemModChanged(struct AMadItem* Item); // Function Madness.MadTelemetry.OnInventoryItemModChanged // (Final|Native|Private) // @ game+0x16d6700
	void OnInventoryItemLeveled(struct AMadItem* Item); // Function Madness.MadTelemetry.OnInventoryItemLeveled // (Final|Native|Private) // @ game+0x16d6700
	void OnInventoryItemImproved(struct AMadItem* Item); // Function Madness.MadTelemetry.OnInventoryItemImproved // (Final|Native|Private) // @ game+0x16d6700
	void OnInventoryItemEnhanced(struct AMadItem* Item, bool bModSelectionAvailable); // Function Madness.MadTelemetry.OnInventoryItemEnhanced // (Final|Native|Private) // @ game+0x16d6780
	void OnInventoryItemConfigVariantChanged(struct AMadItem* Item); // Function Madness.MadTelemetry.OnInventoryItemConfigVariantChanged // (Final|Native|Private) // @ game+0x16d6700
	void OnHeroTreeUpgraded(struct FName UpgradeName, bool bAdded); // Function Madness.MadTelemetry.OnHeroTreeUpgraded // (Final|Native|Private) // @ game+0x16d6440
	void OnFrameworkSequenceEnded(struct ABasePlayerController* PC, struct ULevelSequence* Sequence); // Function Madness.MadTelemetry.OnFrameworkSequenceEnded // (Final|Native|Private) // @ game+0x16d6380
	void OnEnterUIState(struct FName StateName); // Function Madness.MadTelemetry.OnEnterUIState // (Final|Native|Private|HasOutParms) // @ game+0x16d62f0
	void OnEnemyKilled(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadTelemetry.OnEnemyKilled // (Final|Native|Private) // @ game+0x16d6170
	void OnDamageTaken(struct FTakeHitInfo TakeHitInfo); // Function Madness.MadTelemetry.OnDamageTaken // (Final|Native|Private) // @ game+0x16d5fc0
	void OnDamageDone(struct AMadBaseCharacter* Enemy, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadTelemetry.OnDamageDone // (Final|Native|Private) // @ game+0x16d5e40
	void OnCoverStatusChange(bool bInCover); // Function Madness.MadTelemetry.OnCoverStatusChange // (Final|Native|Private) // @ game+0x16d5db0
	void OnConvoyUpgraded(struct FName UpgradeName, bool bAdded); // Function Madness.MadTelemetry.OnConvoyUpgraded // (Final|Native|Private) // @ game+0x16d5ce0
	void OnCharacterHealed(struct AMadBaseCharacter* character, float DeltaHealth, bool bSelfHealing, struct AActor* InInstigator, bool bPassiveHealing); // Function Madness.MadTelemetry.OnCharacterHealed // (Final|Native|Private) // @ game+0x16d5b40
	void OnCharacterEmotePlayed(struct AMadPlayerCharacter* InCharacter, struct UMadEmoteData* InEmoteData); // Function Madness.MadTelemetry.OnCharacterEmotePlayed // (Final|Native|Private) // @ game+0x16d5a80
	void OnCharacterDeleted(bool bSuccess, struct FString CharacterName); // Function Madness.MadTelemetry.OnCharacterDeleted // (Final|Native|Private) // @ game+0x16d5950
	void OnCharacterCreated(bool bSuccess, struct FString CharacterName); // Function Madness.MadTelemetry.OnCharacterCreated // (Final|Native|Private) // @ game+0x16d5820
	void OnChallengeFinished(int32_t ChallengeID, enum class EMadChallengeEndReason EndReason, float ChallengeTime, enum class EMadChallengeTimeBracket TimeBracket); // Function Madness.MadTelemetry.OnChallengeFinished // (Final|Native|Private) // @ game+0x16d56b0
	void OnActiveskillSlotAttempt(struct UMadSkillData* Skill, enum class EMadnessActiveSkillSlots Slot); // Function Madness.MadTelemetry.OnActiveskillSlotAttempt // (Final|Native|Private) // @ game+0x16d5560
	void OnAccoladeCompleted(struct UMadEnochAccolade* Accolade); // Function Madness.MadTelemetry.OnAccoladeCompleted // (Final|Native|Private) // @ game+0x16d54e0
	void ItemScrapped(struct FString ItemId); // Function Madness.MadTelemetry.ItemScrapped // (Final|Native|Public) // @ game+0x16d5440
	void ItemAcquiredInStash(struct FString ItemId); // Function Madness.MadTelemetry.ItemAcquiredInStash // (Final|Native|Public) // @ game+0x16d53a0
	void ItemAcquired(struct FString ItemId); // Function Madness.MadTelemetry.ItemAcquired // (Final|Native|Public) // @ game+0x16d5300
	void InOutGame(struct UObject* WorldContextObject, bool bin, struct FString Method, struct FName ToRegion); // Function Madness.MadTelemetry.InOutGame // (Final|Native|Public) // @ game+0x16d5160
	void HealedSelf(float HP); // Function Madness.MadTelemetry.HealedSelf // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d50f0
	void HealedReceived(float HP); // Function Madness.MadTelemetry.HealedReceived // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d5080
	void HealedOther(float HP); // Function Madness.MadTelemetry.HealedOther // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16d5010
	void FastTravel(struct FName DestinationRegion); // Function Madness.MadTelemetry.FastTravel // (Final|Native|Public|HasOutParms) // @ game+0x16d4e90
	void BeginPlayClient(struct UWorld* World); // Function Madness.MadTelemetry.BeginPlayClient // (Final|Native|Public) // @ game+0x16d4df0
};

// Class Madness.MadTeleportationStone
// Size: 0x370 (Inherited: 0x2f0)
struct AMadTeleportationStone : AActor {
	char UnknownData_2F0_0 : 7; // 0x2f0(0x01)
	bool bUpdateDistanceToHostInRealtime : 1; // 0x2f0(0x01)
	char UnknownData_2F1[0x7]; // 0x2f1(0x07)
	struct USceneComponent* Scene; // 0x2f8(0x08)
	float MinimumDistanceToHost; // 0x300(0x04)
	char UnknownData_304[0x4]; // 0x304(0x04)
	struct ULocalInteractionComponent* InteractionComponent; // 0x308(0x08)
	struct UParticleSystemComponent* TeleporterParticle; // 0x310(0x08)
	struct FText InteractionText; // 0x318(0x18)
	struct FText HostInCombatText; // 0x330(0x18)
	struct UMadBlockerComponent* TeleportBlocker; // 0x348(0x08)
	struct ABasePlayerState* HostPtr; // 0x350(0x08)
	struct APlayerController* LocalPCPtr; // 0x358(0x08)
	char UnknownData_360[0x10]; // 0x360(0x10)

	bool UpdateDistanceToHostBlock(); // Function Madness.MadTeleportationStone.UpdateDistanceToHostBlock // (Final|Native|Public|BlueprintCallable) // @ game+0x16d7e70
	void TeleportToHost(struct ABasePlayerController* InteractingController); // Function Madness.MadTeleportationStone.TeleportToHost // (Final|Native|Protected|Const) // @ game+0x16d7df0
	void SetBlock(enum class ETeleportBlockState BlockReason); // Function Madness.MadTeleportationStone.SetBlock // (Final|Native|Public|BlueprintCallable) // @ game+0x16d7c10
	void ReleaseBlock(enum class ETeleportBlockState BlockReason); // Function Madness.MadTeleportationStone.ReleaseBlock // (Final|Native|Public|BlueprintCallable) // @ game+0x16d7b90
	void ReleaseAllBlocks(); // Function Madness.MadTeleportationStone.ReleaseAllBlocks // (Final|Native|Public|BlueprintCallable) // @ game+0x16d7b70
	void OnTeleportUnlockedBP(); // Function Madness.MadTeleportationStone.OnTeleportUnlockedBP // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnTeleportUnlocked(); // Function Madness.MadTeleportationStone.OnTeleportUnlocked // (Final|Native|Protected) // @ game+0x16d7920
	void OnTeleportBlockedBP(); // Function Madness.MadTeleportationStone.OnTeleportBlockedBP // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnTeleportBlocked(); // Function Madness.MadTeleportationStone.OnTeleportBlocked // (Final|Native|Protected) // @ game+0x16d7900
	void OnOverlapped(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadTeleportationStone.OnOverlapped // (Final|Native|Protected|HasOutParms) // @ game+0x16d7090
	void OnInteracted(struct ABasePlayerController* InteractingController, struct ULocalInteractionComponent* InteractedWith); // Function Madness.MadTeleportationStone.OnInteracted // (Final|Native|Protected) // @ game+0x16d6510
	void OnChallengeStarted(); // Function Madness.MadTeleportationStone.OnChallengeStarted // (Final|Native|Protected) // @ game+0x16d5800
	void OnBattleStateChanged(bool bInBattle); // Function Madness.MadTeleportationStone.OnBattleStateChanged // (Final|Native|Protected) // @ game+0x16d5620
	struct ABasePlayerState* GetHost(); // Function Madness.MadTeleportationStone.GetHost // (Final|Native|Private|Const) // @ game+0x16d4fe0
	void BindToChallengeController(); // Function Madness.MadTeleportationStone.BindToChallengeController // (Final|Native|Private) // @ game+0x16d4e70
};

// Class Madness.MadTemporaryCoverActor
// Size: 0x4c0 (Inherited: 0x4a0)
struct AMadTemporaryCoverActor : ACover {
	char UnknownData_4A0[0x20]; // 0x4a0(0x20)
};

// Class Madness.MadTentacle
// Size: 0x360 (Inherited: 0x2f0)
struct AMadTentacle : AActor {
	struct USkeletalMeshComponent* SkeletalMesh; // 0x2f0(0x08)
	struct TArray<struct UCapsuleComponent*> Capsules; // 0x2f8(0x10)
	struct UParticleSystem* MarkerParticleTemplate; // 0x308(0x08)
	struct UMadDamageType* DamageTypeClass; // 0x310(0x08)
	struct FScalableFloat BaseDamage; // 0x318(0x20)
	int32_t BonesPerCapsule; // 0x338(0x04)
	float CapsuleMaxRadius; // 0x33c(0x04)
	struct UParticleSystemComponent* MarkerParticle; // 0x340(0x08)
	struct TArray<struct AMadPlayerCharacter*> DamagedPlayers; // 0x348(0x10)
	char UnknownData_358[0x8]; // 0x358(0x08)

	void PlayMontage(struct UAnimMontage* Montage, int32_t SectionIndex); // Function Madness.MadTentacle.PlayMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x16def90
	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadTentacle.OnOwnerKilled // (Final|Native|Private) // @ game+0x16deaa0
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadTentacle.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x16de830
	void OnNotifyBegin(struct FName NotifyName, struct FBranchingPointNotifyPayload BranchingPointPayload); // Function Madness.MadTentacle.OnNotifyBegin // (Final|Native|Private|HasOutParms) // @ game+0x16de640
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Madness.MadTentacle.OnMontageEnded // (Final|Native|Private) // @ game+0x16de570
};

// Class Madness.MadTestingUIModel
// Size: 0x78 (Inherited: 0x50)
struct UMadTestingUIModel : UBaseUIModel {
	char UnknownData_50[0x28]; // 0x50(0x28)

	void SetDidClick(bool bInDidClick); // Function Madness.MadTestingUIModel.SetDidClick // (Final|Native|Public) // @ game+0x16df060
};

// Class Madness.MadTestSkillBox
// Size: 0x338 (Inherited: 0x2f8)
struct AMadTestSkillBox : ATriggerBox {
	struct UMadSkillData* ActiveSkill1; // 0x2f8(0x08)
	struct UMadSkillData* ActiveSkill2; // 0x300(0x08)
	struct UMadSkillData* ActiveSkill3; // 0x308(0x08)
	struct UMadSkillData* ActiveSkill4; // 0x310(0x08)
	struct TArray<struct UMadSkillData*> PassiveSkills; // 0x318(0x10)
	struct TArray<struct UMadSkillData*> Mods; // 0x328(0x10)
};

// Class Madness.MadTheRoom
// Size: 0x6c0 (Inherited: 0x2f0)
struct AMadTheRoom : AActor {
	char UnknownData_2F0[0x38]; // 0x2f0(0x38)
	char UnknownData_328_0 : 7; // 0x328(0x01)
	bool bIsRoomReady : 1; // 0x328(0x01)
	char UnknownData_329[0xf]; // 0x329(0x0f)
	enum class EMadRoomMode CurrentMode; // 0x338(0x01)
	char UnknownData_339[0x3]; // 0x339(0x03)
	struct FVector2D PreviewRotationYawRange; // 0x33c(0x08)
	char UnknownData_344_0 : 7; // 0x344(0x01)
	bool bClampPreviewYawRotation : 1; // 0x344(0x01)
	char UnknownData_345[0x3]; // 0x345(0x03)
	float PreviewRotationSpeed; // 0x348(0x04)
	struct FMadItemPreviewRotationParams MouseItemRotationParams; // 0x34c(0x30)
	struct FMadItemPreviewRotationParams ControllerItemRotationParams; // 0x37c(0x30)
	float MaxRotationVelocity; // 0x3ac(0x04)
	float PreviewZoomStep; // 0x3b0(0x04)
	char UnknownData_3B4_0 : 7; // 0x3b4(0x01)
	bool bSetDefaultsOnSpawn : 1; // 0x3b4(0x01)
	char UnknownData_3B5_0 : 7; // 0x3b5(0x01)
	bool bSetRoomAsViewTarget : 1; // 0x3b5(0x01)
	char UnknownData_3B6[0x2]; // 0x3b6(0x02)
	SoftClassProperty PreviewActorClass; // 0x3b8(0x28)
	struct USoundBase* RoomTheme; // 0x3e0(0x08)
	struct USceneComponent* SceneRoot; // 0x3e8(0x08)
	struct UBoxComponent* PreviewPlaceholder; // 0x3f0(0x08)
	struct AActor* PreviewActor; // 0x3f8(0x08)
	struct UAudioComponent* RoomThemeAudioComponent; // 0x400(0x08)
	char UnknownData_408[0x8]; // 0x408(0x08)
	struct FQuat PreviewTargetDeltaQuat; // 0x410(0x10)
	struct FRotator LocalPreviewTargetRotation; // 0x420(0x0c)
	char UnknownData_42C[0x4]; // 0x42c(0x04)
	struct FQuat CurrentPreviewActorRotQuat; // 0x430(0x10)
	struct FRotator CurrRotationDelta; // 0x440(0x0c)
	struct FRotator PrevRotationDelta; // 0x44c(0x0c)
	struct AActor* LobbyViewTarget; // 0x458(0x08)
	struct FVector PreviewInitialLocation; // 0x460(0x0c)
	struct FVector PreviewPlaceholderInitialLocation; // 0x46c(0x0c)
	struct FRotator PreviewInitialRotation; // 0x478(0x0c)
	struct FVector LastZoomedLocation; // 0x484(0x0c)
	struct FMadItemPreviewRotationParams CurrentItemPreviewRotationParams; // 0x490(0x30)
	float CurrentZoomVectorMagnitude; // 0x4c0(0x04)
	struct FRotator CurrentRotationMagnitudes; // 0x4c4(0x0c)
	struct FRotator PreviousRotationMagnitudes; // 0x4d0(0x0c)
	char UnknownData_4DC[0x4]; // 0x4dc(0x04)
	struct FQuat StartRotationActorQuat; // 0x4e0(0x10)
	char UnknownData_4F0_0 : 7; // 0x4f0(0x01)
	bool bShouldResetTransform : 1; // 0x4f0(0x01)
	char UnknownData_4F1_0 : 7; // 0x4f1(0x01)
	bool bShouldFocusOnItem : 1; // 0x4f1(0x01)
	char UnknownData_4F2_0 : 7; // 0x4f2(0x01)
	bool bCachedIsInCutscene : 1; // 0x4f2(0x01)
	char UnknownData_4F3[0x6e]; // 0x4f3(0x6e)
	char UnknownData_561_0 : 7; // 0x561(0x01)
	bool bCanChangeGender : 1; // 0x561(0x01)
	char UnknownData_562[0x6]; // 0x562(0x06)
	struct UMadCustomizationUIModel* CustomizationUIModel; // 0x568(0x08)
	enum class EMadGender PlayerGender; // 0x570(0x01)
	char UnknownData_571[0x7]; // 0x571(0x07)
	struct TMap<enum class EMadGender, SoftClassProperty> CharacterToPreviewClasses; // 0x578(0x50)
	char UnknownData_5C8[0x18]; // 0x5c8(0x18)
	struct TMap<SoftClassProperty, struct FMadItemPreviewParameters> WeaponPreviewSettings; // 0x5e0(0x50)
	struct FMadItemPreviewParameters CurrentWeaponPreviewParameters; // 0x630(0x44)
	char UnknownData_674[0xc]; // 0x674(0x0c)
	struct FTransform DefaultItemPreviewTransform; // 0x680(0x30)
	struct TArray<struct USkeletalMesh*> PreloadedMeshs; // 0x6b0(0x10)

	void SetMode(enum class EMadRoomMode NewMode); // Function Madness.MadTheRoom.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x16df1f0
	void SetMainCamera(struct UCameraComponent* Camera); // Function Madness.MadTheRoom.SetMainCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x16df170
	void OnModeChanged(enum class EMadRoomMode NewMode); // Function Madness.MadTheRoom.OnModeChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnLeaveTheRoom(enum class EMadRoomMode NewMode); // Function Madness.MadTheRoom.OnLeaveTheRoom // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void OnInventoryUIActionHandler(enum class EMadInventoryCustomizationUpdateFilter UpdateFilter); // Function Madness.MadTheRoom.OnInventoryUIActionHandler // (Final|Native|Private) // @ game+0x16de4d0
	void MoveCamera(enum class None SlotIndex); // Function Madness.MadTheRoom.MoveCamera // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void LoadBannerFlag(struct FDelegate BannerFlagLoaded); // Function Madness.MadTheRoom.LoadBannerFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x16de240
	bool IsRoomReady(); // Function Madness.MadTheRoom.IsRoomReady // (Final|Native|Public|BlueprintCallable) // @ game+0x16de220
	bool IsCameraMoving(); // Function Madness.MadTheRoom.IsCameraMoving // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1a35c70
	struct AMadConvoyTruck* GetTruck(); // Function Madness.MadTheRoom.GetTruck // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16de1c0
	struct AMadPlayerCharacter* GetRoomOwner(); // Function Madness.MadTheRoom.GetRoomOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16de190
	enum class EMadRoomMode GetMode(); // Function Madness.MadTheRoom.GetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x16de170
	void GetLoadedTruck(struct FDelegate TruckLoaded); // Function Madness.MadTheRoom.GetLoadedTruck // (Final|Native|Public|BlueprintCallable) // @ game+0x16de0a0
	struct AMadBannerFlag* GetBannerFlag(); // Function Madness.MadTheRoom.GetBannerFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16de070
	void ChangeArmorAnimSet(enum class EMadArmorPreviewView ArmorView); // Function Madness.MadTheRoom.ChangeArmorAnimSet // (Final|Native|Public|BlueprintCallable) // @ game+0x16ddff0
};

// Class Madness.MadThrowInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadThrowInterface : UInterface {
};

// Class Madness.MadAIAbilityTask_TestProjectile
// Size: 0xd0 (Inherited: 0x90)
struct UMadAIAbilityTask_TestProjectile : UMadAIAbilityTask {
	struct FMulticastInlineDelegate TestFinished; // 0x90(0x10)
	struct UFWAIWeaponComponent* TestedWeaponComponent; // 0xa0(0x08)
	char UnknownData_A8[0x28]; // 0xa8(0x28)

	struct UMadAIAbilityTask_TestProjectile* TestProjectile(struct UMadAIGameplayAbility* OwningAbility, struct UFWAIWeaponComponent* WeaponComponent, struct UMadDataAsset_ThrowProjectileVariants* AnimVariants, struct FVector DestPosition, bool bUseTargetAsDestination, bool bPredictTargetPosition, bool bUncertainty); // Function Madness.MadAIAbilityTask_TestProjectile.TestProjectile // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x16df270
};

// Class Madness.MadThrowProjectile
// Size: 0xd8 (Inherited: 0x80)
struct UMadThrowProjectile : UAbilityTask {
	struct FMulticastInlineDelegate OnComplete; // 0x80(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0x90(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnNotifyBegin; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnNotifyEnd; // 0xc0(0x10)
	struct UStaticMeshComponent* ProjectileAttachment; // 0xd0(0x08)

	struct UMadThrowProjectile* ThrowProjectile(struct UObject* WorldContextObject, struct UFWAIWeaponComponent* WeaponComponent); // Function Madness.MadThrowProjectile.ThrowProjectile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16df480
	void OnNotifyEndHandler(struct FName NotifyName); // Function Madness.MadThrowProjectile.OnNotifyEndHandler // (Final|Native|Protected) // @ game+0x16de7a0
	void OnNotifyBeginHandler(struct FName NotifyName); // Function Madness.MadThrowProjectile.OnNotifyBeginHandler // (Final|Native|Protected) // @ game+0x16de720
	void OnInterruptedHandler(struct FName NotifyName); // Function Madness.MadThrowProjectile.OnInterruptedHandler // (Final|Native|Protected) // @ game+0x16de450
	void OnCompleteHandler(struct FName NotifyName); // Function Madness.MadThrowProjectile.OnCompleteHandler // (Final|Native|Protected) // @ game+0x16de3b0
	void OnCancelledHandler(struct FName NotifyName); // Function Madness.MadThrowProjectile.OnCancelledHandler // (Final|Native|Protected) // @ game+0x16de310
};

// Class Madness.MadTierComponent
// Size: 0x1a0 (Inherited: 0x180)
struct UMadTierComponent : UActorComponent {
	char UnknownData_180[0x10]; // 0x180(0x10)
	int32_t CurrentTier; // 0x190(0x04)
	int32_t AvailableTier; // 0x194(0x04)
	char UnknownData_198[0x8]; // 0x198(0x08)

	void OnRep_CurrentTier(); // Function Madness.MadTierComponent.OnRep_CurrentTier // (Final|Native|Protected) // @ game+0x16def50
	void OnPlayerLogout(struct AGameModeBase* GameMode, struct AController* ExitingController); // Function Madness.MadTierComponent.OnPlayerLogout // (Final|Native|Protected) // @ game+0x16dee90
	void OnPlayerCoopReady(struct AMadPlayerState* MadPS); // Function Madness.MadTierComponent.OnPlayerCoopReady // (Final|Native|Public) // @ game+0x16dee10
};

// Class Madness.MadTileFloorSplashesObserver
// Size: 0x25638 (Inherited: 0x255e0)
struct UMadTileFloorSplashesObserver : UTileFloorEventObserver {
	int32_t MaxSplashes; // 0x255e0(0x04)
	char UnknownData_255E4[0x4]; // 0x255e4(0x04)
	struct TSoftObjectPtr<struct UParticleSystem> ParticleSystemToSpawn; // 0x255e8(0x28)
	float SpawnSphereRadius; // 0x25610(0x04)
	struct FVector SpawnSphereCenter; // 0x25614(0x0c)
	struct UParticleSystem* LoadedParticleSystem; // 0x25620(0x08)
	struct TArray<struct UParticleSystemComponent*> PooledParticleSystems; // 0x25628(0x10)

	void OnParticleSystemLoaded(); // Function Madness.MadTileFloorSplashesObserver.OnParticleSystemLoaded // (Final|Native|Private) // @ game+0x16dedf0
};

// Class Madness.MadTimeComponent
// Size: 0x1c8 (Inherited: 0x180)
struct UMadTimeComponent : UActorComponent {
	char UnknownData_180[0x48]; // 0x180(0x48)
};

// Class Madness.MadTollComponent
// Size: 0x198 (Inherited: 0x180)
struct UMadTollComponent : UActorComponent {
	char UnknownData_180[0x18]; // 0x180(0x18)
};

// Class Madness.MadTotemStateMachine
// Size: 0xf0 (Inherited: 0x60)
struct UMadTotemStateMachine : UBaseStateMachine {
	char UnknownData_60[0x90]; // 0x60(0x90)
};

// Class Madness.MadTotemState
// Size: 0x48 (Inherited: 0x38)
struct UMadTotemState : UBaseState {
	char UnknownData_38[0x8]; // 0x38(0x08)
	struct UMadTotemStateMachine* CachedMachine; // 0x40(0x08)
};

// Class Madness.MadTotemInactiveState
// Size: 0x48 (Inherited: 0x48)
struct UMadTotemInactiveState : UMadTotemState {
};

// Class Madness.MadTotemIdleState
// Size: 0x48 (Inherited: 0x48)
struct UMadTotemIdleState : UMadTotemState {
};

// Class Madness.MadTotemChargingState
// Size: 0x48 (Inherited: 0x48)
struct UMadTotemChargingState : UMadTotemState {
};

// Class Madness.MadTotemBlockedState
// Size: 0x48 (Inherited: 0x48)
struct UMadTotemBlockedState : UMadTotemState {
};

// Class Madness.MadTotemFinishedState
// Size: 0x48 (Inherited: 0x48)
struct UMadTotemFinishedState : UMadTotemState {
};

// Class Madness.MadTraversalAnimData
// Size: 0x80 (Inherited: 0x30)
struct UMadTraversalAnimData : UDataAsset {
	struct TArray<struct UAnimMontage*> MantleOverCoverAnimations; // 0x30(0x10)
	struct TArray<struct UAnimMontage*> MantleOverCoverAttacks; // 0x40(0x10)
	struct TArray<struct UAnimMontage*> JumpDownAnimations; // 0x50(0x10)
	struct TArray<struct UAnimMontage*> JumpUpAnimations; // 0x60(0x10)
	struct TArray<struct UAnimMontage*> JumpOverAnimations; // 0x70(0x10)
};

// Class Madness.MadTresholdBasedParticlesComponent
// Size: 0x1f0 (Inherited: 0x180)
struct UMadTresholdBasedParticlesComponent : UActorComponent {
	struct TArray<struct FTresholdBasedParticle> Particles; // 0x180(0x10)
	struct TArray<struct UParticleSystem*> LoadedParticles; // 0x190(0x10)
	struct TMap<enum class None, struct UParticleSystemComponent*> CreatedParticles; // 0x1a0(0x50)

	void UpdateParticles(float InValue); // Function Madness.MadTresholdBasedParticlesComponent.UpdateParticles // (Final|Native|Public|BlueprintCallable) // @ game+0x16e5660
	void DeactivateAllParticles(); // Function Madness.MadTresholdBasedParticlesComponent.DeactivateAllParticles // (Final|Native|Public|BlueprintCallable) // @ game+0x16e4780
};

// Class Madness.MadTripWire
// Size: 0x340 (Inherited: 0x2f0)
struct AMadTripWire : AActor {
	struct UExplosionTemplate* ExplosionTemplate; // 0x2f0(0x08)
	struct UParticleSystem* BeamParticleSystem; // 0x2f8(0x08)
	struct FLinearColor OwnerBeamColor; // 0x300(0x10)
	struct UCapsuleComponent* CapsuleCollisionComp; // 0x310(0x08)
	struct UParticleSystemComponent* BeamComponent; // 0x318(0x08)
	struct FTripWireData Data; // 0x320(0x1c)
	char UnknownData_33C[0x4]; // 0x33c(0x04)

	void SetEnabled(bool bEnable, struct FVector InStartPoint, struct FVector InEndPoint); // Function Madness.MadTripWire.SetEnabled // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x16e53e0
	void OnRep_Data(); // Function Madness.MadTripWire.OnRep_Data // (Final|Native|Private) // @ game+0x16e51e0
	void OnOverlapBeginCallback(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadTripWire.OnOverlapBeginCallback // (Final|Native|Protected|HasOutParms) // @ game+0x16e4de0
};

// Class Madness.MadTruckNavObstacleComponent
// Size: 0x1b8 (Inherited: 0x1b0)
struct UMadTruckNavObstacleComponent : UNavRelevantComponent {
	struct UNavArea* ObstacleAreaClass; // 0x1b0(0x08)
};

// Class Madness.MadTutorialConditionBase
// Size: 0x28 (Inherited: 0x28)
struct UMadTutorialConditionBase : UObject {

	bool IsConditionMet(); // Function Madness.MadTutorialConditionBase.IsConditionMet // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xe8a5d0
};

// Class Madness.MadTutorialCondition_Quests
// Size: 0x30 (Inherited: 0x28)
struct UMadTutorialCondition_Quests : UMadTutorialConditionBase {
	char UnknownData_28_0 : 7; // 0x28(0x01)
	bool bRequireMinQuestsCount : 1; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	int32_t MinActiveQuestsCount; // 0x2c(0x04)
};

// Class Madness.MadTutorialCondition_Inventory
// Size: 0x30 (Inherited: 0x28)
struct UMadTutorialCondition_Inventory : UMadTutorialConditionBase {
	char UnknownData_28_0 : 7; // 0x28(0x01)
	bool bMinUnequippedItemsCount : 1; // 0x28(0x01)
	char UnknownData_29[0x3]; // 0x29(0x03)
	int32_t MinUnequippedItemsCount; // 0x2c(0x04)
};

// Class Madness.MadTutorialResponseBase
// Size: 0x48 (Inherited: 0x28)
struct UMadTutorialResponseBase : UObject {
	struct TArray<struct UMadTutorialListenerBase*> Finishers; // 0x28(0x10)
	char UnknownData_38[0x10]; // 0x38(0x10)

	void Trigger(); // Function Madness.MadTutorialResponseBase.Trigger // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x156dca0
	void OnTriggered(); // Function Madness.MadTutorialResponseBase.OnTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x16e52a0
	void OnFinished(); // Function Madness.MadTutorialResponseBase.OnFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x16e4af0
	void K2_OnTriggered(); // Function Madness.MadTutorialResponseBase.K2_OnTriggered // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnFinished(); // Function Madness.MadTutorialResponseBase.K2_OnFinished // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct AMadPlayerCharacter* GetTrackedCharacter(); // Function Madness.MadTutorialResponseBase.GetTrackedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16e48d0
	void Finish(); // Function Madness.MadTutorialResponseBase.Finish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x156dc80
};

// Class Madness.MadTutorialResponse_UpdateFact
// Size: 0x58 (Inherited: 0x48)
struct UMadTutorialResponse_UpdateFact : UMadTutorialResponseBase {
	struct TArray<struct FFactQuery> FactsToUpdate; // 0x48(0x10)
};

// Class Madness.MadTutorialResponse_ShowHint
// Size: 0x98 (Inherited: 0x48)
struct UMadTutorialResponse_ShowHint : UMadTutorialResponseBase {
	struct FNameWrapper TutorialID; // 0x48(0x10)
	float DisplayTime; // 0x58(0x04)
	float MinTimeOnScreen; // 0x5c(0x04)
	char UnknownData_60_0 : 7; // 0x60(0x01)
	bool bIsSkippable : 1; // 0x60(0x01)
	enum class ETutorialUIPosition PositionOnScreen; // 0x61(0x01)
	char UnknownData_62_0 : 7; // 0x62(0x01)
	bool bUseTutorialEvent : 1; // 0x62(0x01)
	char UnknownData_63[0x1]; // 0x63(0x01)
	float ShowHintFallbackDelay; // 0x64(0x04)
	float StartingDelay; // 0x68(0x04)
	char UnknownData_6C[0x2c]; // 0x6c(0x2c)

	void TryShowHint(); // Function Madness.MadTutorialResponse_ShowHint.TryShowHint // (Final|Native|Public) // @ game+0x16e5640
	void ShowHintDelayed(); // Function Madness.MadTutorialResponse_ShowHint.ShowHintDelayed // (Final|Native|Private) // @ game+0x16e5620
	void ShowHint(bool bDelayed); // Function Madness.MadTutorialResponse_ShowHint.ShowHint // (Final|Native|Public) // @ game+0x16e5590
	void OnStateChanged(struct FName NewStateName); // Function Madness.MadTutorialResponse_ShowHint.OnStateChanged // (Final|Native|Public) // @ game+0x16e5220
	void OnInDialogueChanged(bool bIsInDialogue); // Function Madness.MadTutorialResponse_ShowHint.OnInDialogueChanged // (Final|Native|Public) // @ game+0x16e4b30
};

// Class Madness.MadTutorialResponse_StartSequence
// Size: 0x58 (Inherited: 0x48)
struct UMadTutorialResponse_StartSequence : UMadTutorialResponseBase {
	struct UMadTutorialSequence* TutorialSequenceClass; // 0x48(0x08)
	struct UMadTutorialSequence* StartedTutorialSequence; // 0x50(0x08)

	void SetStartredTutorialSequence(struct UMadTutorialSequence* InStartedTutorialSequence); // Function Madness.MadTutorialResponse_StartSequence.SetStartredTutorialSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x16e5510
	struct UMadTutorialSequence* GetStartedTutorialSequence(); // Function Madness.MadTutorialResponse_StartSequence.GetStartedTutorialSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16e4860
};

// Class Madness.MadTutorialListenerBase
// Size: 0xf8 (Inherited: 0x28)
struct UMadTutorialListenerBase : UObject {
	struct TArray<struct UMadTutorialConditionBase*> Conditions; // 0x28(0x10)
	float ChanceToOccur; // 0x38(0x04)
	char UnknownData_3C_0 : 7; // 0x3c(0x01)
	bool bTriggerIfDead : 1; // 0x3c(0x01)
	char UnknownData_3D[0x3]; // 0x3d(0x03)
	float LastTimeTriggered; // 0x40(0x04)
	float MinSecondsBetweenTriggering; // 0x44(0x04)
	struct FFactExpression TriggerAllowingFact; // 0x48(0x18)
	struct FFactExpression TriggerBlockingFact; // 0x60(0x18)
	char UnknownData_78_0 : 7; // 0x78(0x01)
	bool bRequireRegion : 1; // 0x78(0x01)
	char UnknownData_79[0x7]; // 0x79(0x07)
	struct TSet<struct FName> RequiredRegions; // 0x80(0x50)
	char UnknownData_D0_0 : 7; // 0xd0(0x01)
	bool bAllowInLobby : 1; // 0xd0(0x01)
	char UnknownData_D1[0x27]; // 0xd1(0x27)

	void K2_OnCharacterSet(struct AMadPlayerCharacter* InCharacter); // Function Madness.MadTutorialListenerBase.K2_OnCharacterSet // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct AMadPlayerCharacter* GetTrackedCharacter(); // Function Madness.MadTutorialListenerBase.GetTrackedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16e4890
};

// Class Madness.MadTutorialListener_ValueBase
// Size: 0x108 (Inherited: 0xf8)
struct UMadTutorialListener_ValueBase : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bTriggerOnValueIncreased : 1; // 0xf8(0x01)
	char UnknownData_F9_0 : 7; // 0xf9(0x01)
	bool bTriggerOnValueDecreased : 1; // 0xf9(0x01)
	char UnknownData_FA_0 : 7; // 0xfa(0x01)
	bool bUseMinValue : 1; // 0xfa(0x01)
	char UnknownData_FB_0 : 7; // 0xfb(0x01)
	bool bUseMaxValue : 1; // 0xfb(0x01)
	float MinValue; // 0xfc(0x04)
	float MaxValue; // 0x100(0x04)
	char UnknownData_104[0x4]; // 0x104(0x04)
};

// Class Madness.MadTutorialListener_Health
// Size: 0x108 (Inherited: 0x108)
struct UMadTutorialListener_Health : UMadTutorialListener_ValueBase {

	void K2_OnHealthChanged(float LastHealth, float NewHealth); // Function Madness.MadTutorialListener_Health.K2_OnHealthChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_Attribute
// Size: 0x140 (Inherited: 0x108)
struct UMadTutorialListener_Attribute : UMadTutorialListener_ValueBase {
	struct FGameplayAttribute Attribute; // 0x108(0x38)

	void K2_OnAttributeChanged(struct FGameplayAttribute AttributeChanged, float OldValue, float NewValue); // Function Madness.MadTutorialListener_Attribute.K2_OnAttributeChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_Tag
// Size: 0x110 (Inherited: 0xf8)
struct UMadTutorialListener_Tag : UMadTutorialListenerBase {
	struct FGameplayTag Tag; // 0xf8(0x08)
	char UnknownData_100_0 : 7; // 0x100(0x01)
	bool bTriggerOnAdded : 1; // 0x100(0x01)
	char UnknownData_101_0 : 7; // 0x101(0x01)
	bool bTriggerOnRemoved : 1; // 0x101(0x01)
	char UnknownData_102[0xe]; // 0x102(0x0e)

	void K2_OnTagRemoved(); // Function Madness.MadTutorialListener_Tag.K2_OnTagRemoved // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnTagAdded(); // Function Madness.MadTutorialListener_Tag.K2_OnTagAdded // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void GameplayTagCallback(struct FGameplayTag InTag, int32_t NewCount); // Function Madness.MadTutorialListener_Tag.GameplayTagCallback // (Final|Native|Public) // @ game+0x16e47a0
};

// Class Madness.MadTutorialListener_FactExpression
// Size: 0x110 (Inherited: 0xf8)
struct UMadTutorialListener_FactExpression : UMadTutorialListenerBase {
	struct FFactExpression FactExpression; // 0xf8(0x18)

	void K2_OnFactExpressionIsValid(); // Function Madness.MadTutorialListener_FactExpression.K2_OnFactExpressionIsValid // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_UIState
// Size: 0x128 (Inherited: 0xf8)
struct UMadTutorialListener_UIState : UMadTutorialListenerBase {
	struct FName StateName; // 0xf8(0x08)
	struct FName ScreenTabName; // 0x100(0x08)
	struct TArray<struct FName> AllowingScreenTabNames; // 0x108(0x10)
	struct FName HeroScreenTabName; // 0x118(0x08)
	char UnknownData_120_0 : 7; // 0x120(0x01)
	bool bInverseStateCheck : 1; // 0x120(0x01)
	char UnknownData_121[0x7]; // 0x121(0x07)

	void OnUIStateJSScriptReady(struct FName NewStateName); // Function Madness.MadTutorialListener_UIState.OnUIStateJSScriptReady // (Final|Native|Public|HasOutParms) // @ game+0x16e5350
	void OnUIScreenTabChanged(struct FName InTabName); // Function Madness.MadTutorialListener_UIState.OnUIScreenTabChanged // (Final|Native|Public|HasOutParms) // @ game+0x16e52c0
	void K2_OnStateChanged(); // Function Madness.MadTutorialListener_UIState.K2_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_DesiredMoveType
// Size: 0x100 (Inherited: 0xf8)
struct UMadTutorialListener_DesiredMoveType : UMadTutorialListenerBase {
	enum class EPlayerMovementSpeed DesiredMovementType; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)

	void K2_OnDesiredMovementTypeChanged(); // Function Madness.MadTutorialListener_DesiredMoveType.K2_OnDesiredMovementTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_WeaponEquipped
// Size: 0x108 (Inherited: 0xf8)
struct UMadTutorialListener_WeaponEquipped : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bEquipped : 1; // 0xf8(0x01)
	char UnknownData_F9_0 : 7; // 0xf9(0x01)
	bool bUnequipped : 1; // 0xf9(0x01)
	char UnknownData_FA_0 : 7; // 0xfa(0x01)
	bool bPrimary : 1; // 0xfa(0x01)
	char UnknownData_FB_0 : 7; // 0xfb(0x01)
	bool bSecondary : 1; // 0xfb(0x01)
	char UnknownData_FC_0 : 7; // 0xfc(0x01)
	bool bSideArm : 1; // 0xfc(0x01)
	char UnknownData_FD[0x3]; // 0xfd(0x03)
	struct UWeaponType* WeaponType; // 0x100(0x08)

	void OnNewWeaponEquipped(); // Function Madness.MadTutorialListener_WeaponEquipped.OnNewWeaponEquipped // (Final|Native|Public) // @ game+0x16e4dc0
	void K2_OnNewWeaponEquipped(struct AWeapon* LastWeapon, struct AWeapon* CurrentWeapon); // Function Madness.MadTutorialListener_WeaponEquipped.K2_OnNewWeaponEquipped // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_QuestStatusChanged
// Size: 0x108 (Inherited: 0xf8)
struct UMadTutorialListener_QuestStatusChanged : UMadTutorialListenerBase {
	struct FName IDName; // 0xf8(0x08)
	char UnknownData_100_0 : 7; // 0x100(0x01)
	bool bAnyStatus : 1; // 0x100(0x01)
	enum class EObjectiveStatus DesiredStatus; // 0x101(0x01)
	char UnknownData_102_0 : 7; // 0x102(0x01)
	bool bAnyType : 1; // 0x102(0x01)
	enum class EQuestType QuestType; // 0x103(0x01)
	char UnknownData_104_0 : 7; // 0x104(0x01)
	bool bAllowObjectives : 1; // 0x104(0x01)
	char UnknownData_105[0x3]; // 0x105(0x03)

	void OnQuestStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bIsLoading); // Function Madness.MadTutorialListener_QuestStatusChanged.OnQuestStatusChanged // (Final|Native|Public) // @ game+0x16e50d0
	void K2_OnQuestStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bIsLoading); // Function Madness.MadTutorialListener_QuestStatusChanged.K2_OnQuestStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void BindDelegates(); // Function Madness.MadTutorialListener_QuestStatusChanged.BindDelegates // (Final|Native|Public) // @ game+0x16e4760
};

// Class Madness.MadTutorialListener_ItemDropComplete
// Size: 0x100 (Inherited: 0xf8)
struct UMadTutorialListener_ItemDropComplete : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bSpecificItemType : 1; // 0xf8(0x01)
	enum class EMadItemType ItemType; // 0xf9(0x01)
	char UnknownData_FA[0x6]; // 0xfa(0x06)

	void OnItemDropComplete(struct AMadItem* InItem); // Function Madness.MadTutorialListener_ItemDropComplete.OnItemDropComplete // (Final|Native|Public) // @ game+0x16e4c40
	void K2_OnItemDropComplete(struct AMadItem* InItem); // Function Madness.MadTutorialListener_ItemDropComplete.K2_OnItemDropComplete // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_ItemPickedUp
// Size: 0x150 (Inherited: 0xf8)
struct UMadTutorialListener_ItemPickedUp : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bSpecificItemType : 1; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)
	struct TSet<enum class EMadItemType> ItemTypes; // 0x100(0x50)

	void OnItemPickedUp(struct AMadItem* InItem); // Function Madness.MadTutorialListener_ItemPickedUp.OnItemPickedUp // (Final|Native|Public) // @ game+0x16e4d40
	void K2_OnItemPickedUp(struct AMadItem* InItem); // Function Madness.MadTutorialListener_ItemPickedUp.K2_OnItemPickedUp // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_PlayerVoteSuccess
// Size: 0x150 (Inherited: 0xf8)
struct UMadTutorialListener_PlayerVoteSuccess : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bSpecificVoteReason : 1; // 0xf8(0x01)
	char UnknownData_F9[0x7]; // 0xf9(0x07)
	struct TSet<enum class EMadVoteReason> VoteReasons; // 0x100(0x50)

	void OnPlayerVoteSuccess(enum class EMadVoteReason InVoteReaon); // Function Madness.MadTutorialListener_PlayerVoteSuccess.OnPlayerVoteSuccess // (Final|Native|Public) // @ game+0x16e5050
	void K2_OnPlayerVoteSuccess(enum class EMadVoteReason InVoteReaon); // Function Madness.MadTutorialListener_PlayerVoteSuccess.K2_OnPlayerVoteSuccess // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_Interaction
// Size: 0x128 (Inherited: 0xf8)
struct UMadTutorialListener_Interaction : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bCheckOverlap : 1; // 0xf8(0x01)
	char UnknownData_F9_0 : 7; // 0xf9(0x01)
	bool bInteractionActorClass : 1; // 0xf9(0x01)
	char UnknownData_FA[0x6]; // 0xfa(0x06)
	SoftClassProperty InteractionActorClass; // 0x100(0x28)

	void OnInteractionOverlap(struct UObject* InInteraction); // Function Madness.MadTutorialListener_Interaction.OnInteractionOverlap // (Final|Native|Public) // @ game+0x16e4bc0
	void K2_OnInteractionOverlap(struct UObject* InInteraction); // Function Madness.MadTutorialListener_Interaction.K2_OnInteractionOverlap // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_PlayerDBNO
// Size: 0x100 (Inherited: 0xf8)
struct UMadTutorialListener_PlayerDBNO : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bDBNOState : 1; // 0xf8(0x01)
	char UnknownData_F9_0 : 7; // 0xf9(0x01)
	bool bSpecificPlayerControlType : 1; // 0xf9(0x01)
	enum class EPlayerControlType PlayerControlType; // 0xfa(0x01)
	char UnknownData_FB[0x5]; // 0xfb(0x05)

	void OnAnyPlayerDBNOChanged(struct AMadPlayerCharacter* InCharacter, bool bIsInDBNOState); // Function Madness.MadTutorialListener_PlayerDBNO.OnAnyPlayerDBNOChanged // (Final|Native|Public) // @ game+0x16e4910
	void K2_OnAnyPlayerDBNOChanged(struct AMadPlayerCharacter* InCharacter, bool bIsInDBNOState); // Function Madness.MadTutorialListener_PlayerDBNO.K2_OnAnyPlayerDBNOChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_WipeoutWssLimitReached
// Size: 0x100 (Inherited: 0xf8)
struct UMadTutorialListener_WipeoutWssLimitReached : UMadTutorialListenerBase {
	char UnknownData_F8[0x8]; // 0xf8(0x08)

	void K2_OnWssWipeoutLimitReached(); // Function Madness.MadTutorialListener_WipeoutWssLimitReached.K2_OnWssWipeoutLimitReached // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_HeroPoints
// Size: 0x110 (Inherited: 0x108)
struct UMadTutorialListener_HeroPoints : UMadTutorialListener_ValueBase {
	char UnknownData_108_0 : 7; // 0x108(0x01)
	bool bUseLevelUpNotify : 1; // 0x108(0x01)
	char UnknownData_109[0x7]; // 0x109(0x07)

	void OnHeroPointsChanged(); // Function Madness.MadTutorialListener_HeroPoints.OnHeroPointsChanged // (Final|Native|Public) // @ game+0x16e4b10
	void OnCharacterLevelUpNotify(float OldLevel, float Level, bool IsSilentNotification); // Function Madness.MadTutorialListener_HeroPoints.OnCharacterLevelUpNotify // (Final|Native|Public) // @ game+0x16e49e0
	void K2_OnHeroPointsChanged(); // Function Madness.MadTutorialListener_HeroPoints.K2_OnHeroPointsChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialListener_ItemModChanged
// Size: 0x108 (Inherited: 0xf8)
struct UMadTutorialListener_ItemModChanged : UMadTutorialListenerBase {
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool bDiscovered : 1; // 0xf8(0x01)
	char UnknownData_F9_0 : 7; // 0xf9(0x01)
	bool bRequireScreenTab : 1; // 0xf9(0x01)
	char UnknownData_FA[0x2]; // 0xfa(0x02)
	struct FName ScreenTabName; // 0xfc(0x08)
	char UnknownData_104[0x4]; // 0x104(0x04)

	void OnItemModChanged(struct AMadItem* InItem); // Function Madness.MadTutorialListener_ItemModChanged.OnItemModChanged // (Final|Native|Public) // @ game+0x16e4cc0
};

// Class Madness.MadTutorialLootChest
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMadTutorialLootChest : AMadLootChest {
	struct FGameplayTag TutorialRegion; // 0x3c0(0x08)

	void SetEnableInteraction(bool bEnabled); // Function Madness.MadTutorialLootChest.SetEnableInteraction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x16f5dd0
};

// Class Madness.MadTutorialManager
// Size: 0x210 (Inherited: 0x28)
struct UMadTutorialManager : UObject {
	char UnknownData_28[0x8]; // 0x28(0x08)
	struct TArray<struct FMadTutorialCustomLogicData> CustomTutorialsData; // 0x30(0x10)
	struct FMadWorldLevelSelectionTutorialInfo WorldLevelSelectionTutorialInfo; // 0x40(0x14)
	char UnknownData_54[0x4]; // 0x54(0x04)
	struct FMadLowerDifficultyLogicData LowerDifficultyLogicData; // 0x58(0x38)
	struct FMadLowerDifficultyPromptData LowerDifficultyPromptData; // 0x90(0x60)
	struct TSet<struct UMadTutorialTracker*> TrackerClasses; // 0xf0(0x50)
	struct TSet<struct UMadTutorialTracker*> Trackers; // 0x140(0x50)
	struct UMadTutorialSequence* ActiveSequence; // 0x190(0x08)
	struct UMadTutorialSequence* PendingWorldLevelTutorialClass; // 0x198(0x08)
	char UnknownData_1A0[0x20]; // 0x1a0(0x20)
	struct TArray<struct UMadTutorialResponse_ShowHint*> TutorialHints; // 0x1c0(0x10)
	struct TArray<struct UMadTutorialResponse_ShowHint*> PostponedTutorialHints; // 0x1d0(0x10)
	char UnknownData_1E0[0x10]; // 0x1e0(0x10)
	struct UInputComponent* TutorialInputComponent; // 0x1f0(0x08)
	char UnknownData_1F8[0x8]; // 0x1f8(0x08)
	struct AMadGameState* TrackedGameState; // 0x200(0x08)
	char UnknownData_208[0x8]; // 0x208(0x08)

	void TryUpdateTutorialFactForPlayer(struct AMadPlayerController* PlayerController, struct FName TutorialFactName, enum class EMadTutorialFactUpdateResult OutResult); // Function Madness.MadTutorialManager.TryUpdateTutorialFactForPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x16f6540
	void TryShowTutorialWithCustomLogicById(struct AMadPlayerCharacter* character, struct FName TutorialIdName); // Function Madness.MadTutorialManager.TryShowTutorialWithCustomLogicById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16f6490
	void TryShowTutorialWithCustomLogic(struct AMadPlayerCharacter* character, struct FMadTutorialCustomLogicData TutorialLogicData); // Function Madness.MadTutorialManager.TryShowTutorialWithCustomLogic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x16f6390
	void SkipTutorialByID(struct UObject* WorldContextObject, struct FName TutorialID); // Function Madness.MadTutorialManager.SkipTutorialByID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16f6200
	void OpenWorldLeveSelectionWithTutorial(struct UObject* WorldContextObject, struct UMadTutorialSequence* TutorialClass); // Function Madness.MadTutorialManager.OpenWorldLeveSelectionWithTutorial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16f5c80
	void OnShutdown(); // Function Madness.MadTutorialManager.OnShutdown // (Final|Native|Private) // @ game+0x16f5c60
	void OnShowWorldLevelTutorial(struct FName InTabName); // Function Madness.MadTutorialManager.OnShowWorldLevelTutorial // (Final|Native|Public|HasOutParms) // @ game+0x16f5bd0
	void OnSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.MadTutorialManager.OnSequenceStart // (Final|Native|Protected|HasOutParms) // @ game+0x16f5aa0
	void OnSequenceEnd(); // Function Madness.MadTutorialManager.OnSequenceEnd // (Final|Native|Protected) // @ game+0x16f5a80
	void OnPreLevelTransition(); // Function Madness.MadTutorialManager.OnPreLevelTransition // (Final|Native|Private) // @ game+0x16f5a60
	void OnLocalCharacterPossessed(struct AMadPlayerCharacter* InCharacter); // Function Madness.MadTutorialManager.OnLocalCharacterPossessed // (Final|Native|Public) // @ game+0x16f59e0
	void OnLevelTransitionCompleted(struct FName regionname); // Function Madness.MadTutorialManager.OnLevelTransitionCompleted // (Final|Native|Protected) // @ game+0x16f5960
};

// Class Madness.MadTutorialSequence
// Size: 0x80 (Inherited: 0x28)
struct UMadTutorialSequence : UObject {
	struct FMulticastInlineDelegate onSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0x38(0x10)
	char UnknownData_48[0x18]; // 0x48(0x18)
	struct UUserWidget* CurrentWidget; // 0x60(0x08)
	char UnknownData_68[0x18]; // 0x68(0x18)

	void TutorialSkipProgressChanged(float SkipProgress); // Function Madness.MadTutorialSequence.TutorialSkipProgressChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x16f6640
	void TutorialSequenceResult__DelegateSignature(); // DelegateFunction Madness.MadTutorialSequence.TutorialSequenceResult__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1a35c70
	struct UMadTutorialSequence* StartTutorialSequence(struct UMadTutorialSequence* SequenceClass, struct UObject* WorldContextObject); // Function Madness.MadTutorialSequence.StartTutorialSequence // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x16f62d0
	void StartOver(); // Function Madness.MadTutorialSequence.StartOver // (Final|Native|Public|BlueprintCallable) // @ game+0x16f62b0
	void ShowTutorial(struct FTutorialNameWrapper TutorialID, bool bIsSkippable, bool bFinishSequenceOnSkip, enum class ETutorialUIPosition TutorialPosition); // Function Madness.MadTutorialSequence.ShowTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x16f6070
	void SetInputActionsBlocked(bool bBlocked, struct TSet<struct FName> ActionInputs); // Function Madness.MadTutorialSequence.SetInputActionsBlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x16f5e60
	void SetCurrentWidget(struct UUserWidget* InWidget); // Function Madness.MadTutorialSequence.SetCurrentWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x16f5d50
	void ResetTasks(); // Function Madness.MadTutorialSequence.ResetTasks // (Final|Native|Public|BlueprintCallable) // @ game+0x16f5d30
	void OnTick(float DeltaTime); // Function Madness.MadTutorialSequence.OnTick // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnHideTutorial(struct FTutorialNameWrapper TutorialID, bool bWasSkipped); // Function Madness.MadTutorialSequence.K2_OnHideTutorial // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void K2_OnFinishSequence(bool bSuccess); // Function Madness.MadTutorialSequence.K2_OnFinishSequence // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void HideTutorial(struct FTutorialNameWrapper TutorialID, bool bWasSkipped); // Function Madness.MadTutorialSequence.HideTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x16f5870
	struct AMadPlayerController* GetLocalPlayerController(); // Function Madness.MadTutorialSequence.GetLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16f5800
	struct AMadPlayerCharacter* GetLocalPlayerCharacter(); // Function Madness.MadTutorialSequence.GetLocalPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x16f57d0
	void FinishSequence(bool bSuccess); // Function Madness.MadTutorialSequence.FinishSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x16f5740
	bool Equal_TutorialNameWrapper(struct FTutorialNameWrapper T1, struct FTutorialNameWrapper T2); // Function Madness.MadTutorialSequence.Equal_TutorialNameWrapper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x16f5640
	void BeginSequence(); // Function Madness.MadTutorialSequence.BeginSequence // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadTutorialTracker
// Size: 0xd0 (Inherited: 0x28)
struct UMadTutorialTracker : UObject {
	struct TSet<struct UMadTutorialListenerBase*> Listeners; // 0x28(0x50)
	struct TSet<struct UMadTutorialResponseBase*> Responses; // 0x78(0x50)
	char UnknownData_C8[0x8]; // 0xc8(0x08)

	void K2_OnCharacterSet(struct AMadPlayerCharacter* InCharacter); // Function Madness.MadTutorialTracker.K2_OnCharacterSet // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	struct AMadPlayerCharacter* GetTrackedCharacter(); // Function Madness.MadTutorialTracker.GetTrackedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16f5830
};

// Class Madness.MadUIAnomalyBreakerWidget
// Size: 0x230 (Inherited: 0x230)
struct UMadUIAnomalyBreakerWidget : UUserWidget {

	void SetEnragedDurationProgress(float InProgress); // Function Madness.MadUIAnomalyBreakerWidget.SetEnragedDurationProgress // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
	void SetAnomalyBreakerVisState(enum class EAnomalyBreakerVisState InAnomalyBreakerVisState); // Function Madness.MadUIAnomalyBreakerWidget.SetAnomalyBreakerVisState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadUIGlobals
// Size: 0xe18 (Inherited: 0x30)
struct UMadUIGlobals : UDataAsset {
	struct FMadUIGlobalsGroupingPeriods GroupingPeriods; // 0x30(0x08)
	struct FMadUIGlobalsHitFeedback HitFeedback; // 0x38(0x10)
	struct FMadUIGlobalsMessages Messages; // 0x48(0x18)
	struct TMap<struct FName, struct FModalErrorMsg> ErrorMessages; // 0x60(0x50)
	struct FMadUIGlobalsIcons Icons; // 0xb0(0xa0)
	struct FMadUIGlobalsCrosshairs Crosshairs; // 0x150(0x58)
	float HealthBarGlobalZOffset; // 0x1a8(0x04)
	char UnknownData_1AC[0x4]; // 0x1ac(0x04)
	struct FFilePath TransparentHTMLPath; // 0x1b0(0x10)
	struct UMadUIStateMachine* StateMachineClass; // 0x1c0(0x08)
	struct UMainUIWidget* MainWidgetClass; // 0x1c8(0x08)
	struct FSoftObjectPath WorldMapTexture; // 0x1d0(0x18)
	struct FSoftObjectPath ConvoyWorldMapTexture; // 0x1e8(0x18)
	struct FSoftObjectPath MemberInDialogueTexture; // 0x200(0x18)
	struct FSoftObjectPath MemberInDBNOTexture; // 0x218(0x18)
	struct TMap<enum class EMadnessSkillPath, struct TSoftObjectPtr<struct UTexture2D>> PlayerClassIconPaths; // 0x230(0x50)
	struct TArray<struct TSoftObjectPtr<struct UObject>> PreloadedFonts; // 0x280(0x10)
	struct TArray<struct UFont*> LoadedFonts; // 0x290(0x10)
	struct UDataTable* TutorialsTextsDT; // 0x2a0(0x08)
	struct UDataTable* CharacterCustomizationMaleDT; // 0x2a8(0x08)
	struct UDataTable* CharacterCustomizationFemaleDT; // 0x2b0(0x08)
	struct UDataTable* BackMenuOptionsDataTable; // 0x2b8(0x08)
	struct UDataTable* DiffucultyUIDataTable; // 0x2c0(0x08)
	struct UDataTable* UISoundsDT; // 0x2c8(0x08)
	struct UDataTable* NPCLocalizationDT; // 0x2d0(0x08)
	struct UDataTable* EnemyLocalizationDT; // 0x2d8(0x08)
	struct UDataTable* PlayerMaleNamesDT; // 0x2e0(0x08)
	struct UDataTable* PlayerFemaleNamesDT; // 0x2e8(0x08)
	struct UDataTable* EmoteTextFeedDT; // 0x2f0(0x08)
	struct FMadOptionsGlobals OptionsGlobals; // 0x2f8(0x20)
	struct TMap<struct FName, struct FText> ActionMappingDisplayNames; // 0x318(0x50)
	struct TSoftObjectPtr<struct ULevelSequence> DemoStartSequence; // 0x368(0x28)
	struct TSoftObjectPtr<struct ULevelSequence> DemoEndSequence; // 0x390(0x28)
	struct UDataTable* LoadingScreenHintsDataTable; // 0x3b8(0x08)
	char UnknownData_3C0_0 : 7; // 0x3c0(0x01)
	bool bStoryHintFromLobbyOnly : 1; // 0x3c0(0x01)
	char UnknownData_3C1[0x7]; // 0x3c1(0x07)
	struct FBasicLoadingRegionData DefaultBasicLoadingRegionData; // 0x3c8(0x40)
	struct TMap<struct FGameplayTag, struct FBasicLoadingRegionData> BasicLoadingRegionData; // 0x408(0x50)
	struct TArray<struct FMadHeroScreenTabStateData> HeroScreenTabStateData; // 0x458(0x10)
	float DelayBeforeShowMarkerIcon; // 0x468(0x04)
	char UnknownData_46C[0x4]; // 0x46c(0x04)
	struct UMadCreditsData* CreditsData; // 0x470(0x08)
	struct TSet<enum class EMadHUDElement> CombatHUDElements; // 0x478(0x50)
	struct TSoftObjectPtr<struct UParticleSystem> LevelUpParticle; // 0x4c8(0x28)
	struct TSoftObjectPtr<struct USoundCue> LevelUpStartSound; // 0x4f0(0x28)
	struct TSoftObjectPtr<struct USoundCue> LevelUpBonusSound; // 0x518(0x28)
	struct TSoftObjectPtr<struct USoundCue> LevelUpWingSound; // 0x540(0x28)
	float LevelUpNotificationDelay; // 0x568(0x04)
	char UnknownData_56C[0x4]; // 0x56c(0x04)
	struct FBarrierAssetsData BarrierAssetsData[0x8]; // 0x570(0x2c0)
	float BarrierMarkerDefaultSize; // 0x830(0x04)
	char UnknownData_834[0x4]; // 0x834(0x04)
	struct TMap<struct FName, struct FMadTutorialsTextData> TutorialsTextsData; // 0x838(0x50)
	struct TMap<struct FName, struct FMadTutorialsTextData> HintsTextsData; // 0x888(0x50)
	struct TMap<struct FName, struct FMadCustomizationUIData> CharacterCustomizationMaleData; // 0x8d8(0x50)
	struct TMap<struct FName, struct FMadCustomizationUIData> CharacterCustomizationFemaleData; // 0x928(0x50)
	struct TMap<struct FName, struct FMadUISoundData> UISoundData; // 0x978(0x50)
	struct TMap<struct FName, struct FMadDifficultyDescritpion> UIDifficultyData; // 0x9c8(0x50)
	struct TMap<struct FName, struct FMadAICharacterLocalizedData> NPCLocalizationData; // 0xa18(0x50)
	struct TMap<struct FName, struct FMadAICharacterLocalizedData> EnemyLocalizationData; // 0xa68(0x50)
	struct TMap<struct FName, struct FMadPlayerNameLocalizedData> MaleNamesData; // 0xab8(0x50)
	struct TMap<struct FName, struct FMadPlayerNameLocalizedData> FemaleNamesData; // 0xb08(0x50)
	struct FMadLoadingScreenHintsData LoadingScreenHintsData; // 0xb58(0xa0)
	struct TMap<enum class EMadContextPanelType, float> ContextPanelTimeouts; // 0xbf8(0x50)
	struct TMap<enum class EMadContextPanelType, int32_t> ContextPanelPriorityOverrides; // 0xc48(0x50)
	struct FMadCategoriesScreenUIData ExpeditionsUIData; // 0xc98(0x40)
	struct FMadCategoriesScreenUIData MatchmakingUIData; // 0xcd8(0x40)
	struct FMadCategoriesScreenUIData InterruptsTutorialUIData; // 0xd18(0x40)
	struct FMadCategoriesScreenUIData CraftingTutorialUIData; // 0xd58(0x40)
	struct FMadCategoriesScreenUIData ResourcesTutorialUIData; // 0xd98(0x40)
	struct FMadCategoriesScreenUIData DemoWelcomeUIData; // 0xdd8(0x40)

	struct TArray<struct FName> GetTutorialNames(); // Function Madness.MadUIGlobals.GetTutorialNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16fbf90
};

// Class Madness.MadUIInfoUIModel
// Size: 0x70 (Inherited: 0x50)
struct UMadUIInfoUIModel : UBaseUIModel {
	float CoherentWidgetOpacity; // 0x50(0x04)
	char UnknownData_54[0x1c]; // 0x54(0x1c)
};

// Class Madness.MadUIManager
// Size: 0x3d0 (Inherited: 0xe0)
struct UMadUIManager : UUIManager {
	char UnknownData_E0[0x20]; // 0xe0(0x20)
	SoftClassProperty TutorialOverlayClass; // 0x100(0x28)
	struct UUserWidget* TutorialOverlay; // 0x128(0x08)
	struct UMadUIStateMachine* StateMachineClass; // 0x130(0x08)
	struct UMadUIStateMachine* StateMachine; // 0x138(0x08)
	char UnknownData_140[0x75]; // 0x140(0x75)
	char UnknownData_1B5_0 : 7; // 0x1b5(0x01)
	bool bUITransitionInProgress : 1; // 0x1b5(0x01)
	char UnknownData_1B6[0x1a]; // 0x1b6(0x1a)
	struct UMadVirtualKeyboardUIModel* VirtualKeyboardUIModel; // 0x1d0(0x08)
	struct UMadSettingsUIModel* SettingsUIModel; // 0x1d8(0x08)
	struct UMadControlsUIModel* ControlsUIModel; // 0x1e0(0x08)
	struct UMadLocalisedResourcesUIModel* LocalisedResourcesUIModel; // 0x1e8(0x08)
	struct UMadPartyUIModel* PartyUIModel; // 0x1f0(0x08)
	struct UMadAreaMapUIModel* AreaMapUIModel; // 0x1f8(0x08)
	struct UMadVotingUIModel* VotingUIModel; // 0x200(0x08)
	struct UMadCinematicUIModel* CinematicUIModel; // 0x208(0x08)
	struct UMadInventoryUIModel* InventoryUIModel; // 0x210(0x08)
	struct UMadWorldMapUIModel* WorldMapUIModel; // 0x218(0x08)
	struct UMadExplorerFlagsUIModel* ExplorerFlagsUIModel; // 0x220(0x08)
	struct UMadCollectibleUIModel* CollectibleUIModel; // 0x228(0x08)
	struct UMadChallengesUIModel* ChallengesUIModel; // 0x230(0x08)
	struct UMadLoadingScreenUIModel* LoadingScreenUIModel; // 0x238(0x08)
	struct UMadBackMenuUIModel* BackMenuUIModel; // 0x240(0x08)
	struct UMadAccoladesUIModel* AccoladesUIModel; // 0x248(0x08)
	struct UMadCreditsUIModel* CreditsUIModel; // 0x250(0x08)
	struct UMadContextPanelManagerUIModel* ContextPanelManagerUIModel; // 0x258(0x08)
	struct UMadTestingUIModel* TestingUIModel; // 0x260(0x08)
	struct UMadBarrierUIModel* BarrierUIModel; // 0x268(0x08)
	struct UMadUIInfoUIModel* UIInfoUIModel; // 0x270(0x08)
	struct UMadSubtitlesUIModel* SubtitlesUIModel; // 0x278(0x08)
	char UnknownData_280[0x28]; // 0x280(0x28)
	struct TArray<struct UBaseUIModel*> PendingDestroyUIModels; // 0x2a8(0x10)
	char UnknownData_2B8[0x100]; // 0x2b8(0x100)
	struct UMadHUDWidget* MadHUDWidgetCache; // 0x3b8(0x08)
	char UnknownData_3C0[0x10]; // 0x3c0(0x10)

	void ViewStartLoading(struct FString Path, bool bIsMainFrame); // Function Madness.MadUIManager.ViewStartLoading // (Final|Native|Public) // @ game+0x16fcfc0
	void ViewFailLoad(struct FString Path, struct FString Error, bool bIsMainFrame); // Function Madness.MadUIManager.ViewFailLoad // (Final|Native|Public) // @ game+0x16fce90
	void UnbindUI(); // Function Madness.MadUIManager.UnbindUI // (Final|Native|Public) // @ game+0x16fce70
	void ToggleCoherentUIGTInputFocus(); // Function Madness.MadUIManager.ToggleCoherentUIGTInputFocus // (Final|Native|Public|BlueprintCallable) // @ game+0x16fce50
	void StopUISound(struct FName UISoundName); // Function Madness.MadUIManager.StopUISound // (Final|Native|Public|Const) // @ game+0x16fcdd0
	void SetPreviousUIState(struct FName PreviousStateName); // Function Madness.MadUIManager.SetPreviousUIState // (Final|Native|Public|BlueprintCallable) // @ game+0x16fcd50
	void SetInputMode(enum class EInputMode InputMode, enum class EUIInputLayer InputLayer); // Function Madness.MadUIManager.SetInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x16fcc90
	void SetCoherentURL(struct FString NewURL); // Function Madness.MadUIManager.SetCoherentURL // (Final|Native|Public|BlueprintCallable) // @ game+0x16fcbf0
	void SetCoherentUIGTInputFocus(bool FocusUI); // Function Madness.MadUIManager.SetCoherentUIGTInputFocus // (Final|Native|Public|BlueprintCallable) // @ game+0x16fcb60
	bool PlayUISound(struct FName UISoundName, bool Looping); // Function Madness.MadUIManager.PlayUISound // (Final|Native|Public|Const) // @ game+0x16fcaa0
	void OnJSScriptReady(); // Function Madness.MadUIManager.OnJSScriptReady // (Final|Native|Public) // @ game+0x16fca80
	void OnInfoCastsReceived(struct TArray<struct FInfoCastData> InfoCasts); // Function Madness.MadUIManager.OnInfoCastsReceived // (Final|Native|Public|HasOutParms) // @ game+0x16fc910
	void OnEventResponseCallbackReceived(bool bSuccess, struct FBackendEventData Event, enum class EMadBackendEventResponse response, struct FEventParticipationResponseData EventParticipationResponseData); // Function Madness.MadUIManager.OnEventResponseCallbackReceived // (Final|Native|Public|HasOutParms) // @ game+0x16fc660
	void OnBackendEventsReceived(struct TArray<struct FBackendEventData> Events); // Function Madness.MadUIManager.OnBackendEventsReceived // (Final|Native|Public|HasOutParms) // @ game+0x16fc460
	void OnArenaRetreatStarted(struct FMadArenaRetreatUIModel RetreatUIModel); // Function Madness.MadUIManager.OnArenaRetreatStarted // (Final|Native|Public|HasOutParms) // @ game+0x16fc390
	void OnArenaRetreatPlayerReturned(struct FMadArenaRetreatUIModel RetreatUIModel); // Function Madness.MadUIManager.OnArenaRetreatPlayerReturned // (Final|Native|Public|HasOutParms) // @ game+0x16fc2c0
	void OnArenaRetreatFinished(struct FMadArenaRetreatUIModel RetreatUIModel); // Function Madness.MadUIManager.OnArenaRetreatFinished // (Final|Native|Public|HasOutParms) // @ game+0x16fc1f0
	void OnArenaRetreatCountdownStarted(struct FMadArenaRetreatUIModel RetreatUIModel); // Function Madness.MadUIManager.OnArenaRetreatCountdownStarted // (Final|Native|Public|HasOutParms) // @ game+0x16fc120
	void NewStateLoaded(struct FString Path, bool bIsMainFrame); // Function Madness.MadUIManager.NewStateLoaded // (Final|Native|Public) // @ game+0x16fc040
	bool IsCoherentUIGTFocused(); // Function Madness.MadUIManager.IsCoherentUIGTFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16fc010
	struct TArray<struct FName> GetPreviousUIStates(); // Function Madness.MadUIManager.GetPreviousUIStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16fbf10
	struct FName GetPreviousUIState(); // Function Madness.MadUIManager.GetPreviousUIState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16fbed0
	struct FName GetCurrentUIScreenTabName(); // Function Madness.MadUIManager.GetCurrentUIScreenTabName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16fbe90
	struct UMadInfoCastGlobals* GetBackendInfoCasts(); // Function Madness.MadUIManager.GetBackendInfoCasts // (Final|Native|Public) // @ game+0x16fbe60
	struct UMadBackendEvents* GetBackendEvents(); // Function Madness.MadUIManager.GetBackendEvents // (Final|Native|Public) // @ game+0x16fbe30
	void ChangeState(int32_t StateIdx, struct FName PreviousStateName); // Function Madness.MadUIManager.ChangeState // (Final|Native|Public) // @ game+0x16fbd70
	void BindUI(); // Function Madness.MadUIManager.BindUI // (Final|Native|Public) // @ game+0x16fbd50
};

// Class Madness.MadUIState
// Size: 0x160 (Inherited: 0x38)
struct UMadUIState : UBaseState {
	char UnknownData_38_0 : 7; // 0x38(0x01)
	bool bForceChangeHTML : 1; // 0x38(0x01)
	char UnknownData_39[0x7]; // 0x39(0x07)
	struct FString URL; // 0x40(0x10)
	struct FFilePath HTMLPath; // 0x50(0x10)
	SoftClassProperty UMGWidgetClass; // 0x60(0x28)
	char UnknownData_88_0 : 7; // 0x88(0x01)
	bool bEnableUMGWidgetOnEnterState : 1; // 0x88(0x01)
	char UnknownData_89[0x3]; // 0x89(0x03)
	int32_t UMGWidgetZOrder; // 0x8c(0x04)
	enum class EInputMode InputMode; // 0x90(0x01)
	enum class EMouseLockMode MouseLockMode; // 0x91(0x01)
	enum class ESlateVisibility CoherentWidgetVisibility; // 0x92(0x01)
	char UnknownData_93[0x1]; // 0x93(0x01)
	char bShowMouseCursor : 1; // 0x94(0x01)
	char bDisableWorldRendering : 1; // 0x94(0x01)
	char bBlurWorldRendering : 1; // 0x94(0x01)
	char bOverrideCoherentWidgetVisibility : 1; // 0x94(0x01)
	char bBlockDuringLevelTransition : 1; // 0x94(0x01)
	char UnknownData_94_5 : 3; // 0x94(0x01)
	char UnknownData_95[0xb]; // 0x95(0x0b)
	struct UUserWidget* UMGWidget; // 0xa0(0x08)
	struct UMadHUDWidget* UMGMadWidget; // 0xa8(0x08)
	struct FName TutorialFactName; // 0xb0(0x08)
	struct TSoftObjectPtr<struct USoundMix> OverrideSoundMix; // 0xb8(0x28)
	struct TSoftObjectPtr<struct USoundBase> StateSoundBase; // 0xe0(0x28)
	float SoundBaseFadeInDuration; // 0x108(0x04)
	float SoundBaseFadeOutDuration; // 0x10c(0x04)
	char bOverrideSoundMixOnlyOnDisabledWorldRendering : 1; // 0x110(0x01)
	char bIsGameplayUIState : 1; // 0x110(0x01)
	char UnknownData_110_2 : 6; // 0x110(0x01)
	char UnknownData_111[0x3f]; // 0x111(0x3f)
	struct UAudioComponent* SoundBaseAudioComponent; // 0x150(0x08)
	char UnknownData_158[0x8]; // 0x158(0x08)

	void OnCoherentReady(struct FName NewStateName); // Function Madness.MadUIState.OnCoherentReady // (Final|Native|Protected|HasOutParms) // @ game+0x1702820
	void CreateUMGWidget(); // Function Madness.MadUIState.CreateUMGWidget // (Final|Native|Protected) // @ game+0x1701df0
};

// Class Madness.MadUIState_Room
// Size: 0x1f0 (Inherited: 0x160)
struct UMadUIState_Room : UMadUIState {
	char UnknownData_160[0x8]; // 0x160(0x08)
	struct FRoomParameters PlayerPreviewSettings; // 0x168(0x58)
	enum class EMadSaveFlags SaveFlagOnLeave; // 0x1c0(0x01)
	char UnknownData_1C1_0 : 7; // 0x1c1(0x01)
	bool bFlushSaveOnLeave : 1; // 0x1c1(0x01)
	char UnknownData_1C2[0x6]; // 0x1c2(0x06)
	struct AMadTheRoom* MadPreviewEnvironment; // 0x1c8(0x08)
	char UnknownData_1D0[0x20]; // 0x1d0(0x20)

	void OnJSSReady(struct FName InStateName); // Function Madness.MadUIState_Room.OnJSSReady // (Final|Native|Public|HasOutParms) // @ game+0x1702a90
};

// Class Madness.MadUIState_Banner
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMadUIState_Banner : UMadUIState_Room {
};

// Class Madness.MadUIState_Convoy
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMadUIState_Convoy : UMadUIState_Room {
};

// Class Madness.MadUIState_Inventory
// Size: 0x1f8 (Inherited: 0x1f0)
struct UMadUIState_Inventory : UMadUIState_Room {
	char UnknownData_1F0[0x8]; // 0x1f0(0x08)
};

// Class Madness.MadUIState_Crafting
// Size: 0x1f8 (Inherited: 0x1f8)
struct UMadUIState_Crafting : UMadUIState_Inventory {
};

// Class Madness.MadUIState_Customization
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMadUIState_Customization : UMadUIState_Room {
};

// Class Madness.MadUIState_Lobby
// Size: 0x160 (Inherited: 0x160)
struct UMadUIState_Lobby : UMadUIState {
};

// Class Madness.MadUIState_Options
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMadUIState_Options : UMadUIState_Room {
};

// Class Madness.MadUIStateMachine
// Size: 0x108 (Inherited: 0x60)
struct UMadUIStateMachine : UBaseStateMachine {
	char UnknownData_60[0x8]; // 0x60(0x08)
	char UnknownData_68_0 : 7; // 0x68(0x01)
	bool bUseVirtualCursor : 1; // 0x68(0x01)
	char UnknownData_69[0x7]; // 0x69(0x07)
	struct TSoftObjectPtr<struct USoundMix> DuckGameplaySoundMix; // 0x70(0x28)
	struct FName InitialLobbyStateName; // 0x98(0x08)
	struct TSet<struct FMadUIStateTransition> StateTransitions; // 0xa0(0x50)
	float TransitionTime; // 0xf0(0x04)
	char UnknownData_F4[0x14]; // 0xf4(0x14)
};

// Class Madness.MadUITestFramework
// Size: 0x28 (Inherited: 0x28)
struct UMadUITestFramework : UBlueprintFunctionLibrary {

	bool UITestClick(struct UObject* WorldContextObject, struct FString QueryString); // Function Madness.MadUITestFramework.UITestClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x17033d0
};

// Class Madness.MadVendor
// Size: 0x440 (Inherited: 0x180)
struct UMadVendor : UActorComponent {
	struct FMulticastInlineDelegate OnOfferExpired; // 0x180(0x10)
	struct FNameWrapper Data; // 0x190(0x10)
	int32_t RegularOfferSeed; // 0x1a0(0x04)
	int32_t DailyOfferSeed; // 0x1a4(0x04)
	int32_t ExchangeOfferSeed; // 0x1a8(0x04)
	char UnknownData_1AC[0x4]; // 0x1ac(0x04)
	struct TArray<struct AMadItem*> RegularOffer; // 0x1b0(0x10)
	struct TArray<struct AMadItem*> DailyOffer; // 0x1c0(0x10)
	struct TArray<struct AMadItem*> ExchangeOffer; // 0x1d0(0x10)
	struct TArray<int32_t> ExchangeOfferIds; // 0x1e0(0x10)
	struct TArray<struct AMadItem*> EliteOffer; // 0x1f0(0x10)
	struct TArray<int32_t> EliteOfferIds; // 0x200(0x10)
	struct FWeakObjectPtr<struct AMadPlayerCharacter> Player; // 0x210(0x08)
	struct FWeakObjectPtr<struct AMadInventory> Inventory; // 0x218(0x08)
	int32_t PlayerLevel; // 0x220(0x04)
	int32_t PlayerInventoryLevel; // 0x224(0x04)
	struct FString PlayerName; // 0x228(0x10)
	enum class EMadnessSkillPath PlayerClass; // 0x238(0x01)
	char UnknownData_239[0x7]; // 0x239(0x07)
	struct FMadVendorData VendorData; // 0x240(0x1a8)
	struct FMadVendorPriceTemplateData PriceTemplate; // 0x3e8(0x38)
	char UnknownData_420[0x18]; // 0x420(0x18)
	struct UMadVendorUIModel* UIModel; // 0x438(0x08)

	void Sell(struct AMadItem* Item); // Function Madness.MadVendor.Sell // (Final|Native|Public|BlueprintCallable) // @ game+0x1703200
	void Open(struct AMadPlayerCharacter* InPlayer); // Function Madness.MadVendor.Open // (Final|Native|Public|BlueprintCallable) // @ game+0x1703180
	void OnEnterUIStateHandler(struct FName StateName); // Function Madness.MadVendor.OnEnterUIStateHandler // (Final|Native|Protected|HasOutParms) // @ game+0x1702940
	bool HasDailyOffer(); // Function Madness.MadVendor.HasDailyOffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1702670
	struct TMap<struct FName, int32_t> GetSellRefund(struct AMadItem* Item); // Function Madness.MadVendor.GetSellRefund // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1702470
	struct FTimespan GetOfferTotalTime(enum class EMadVendorOfferType Offer); // Function Madness.MadVendor.GetOfferTotalTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17023e0
	struct FTimespan GetOfferRemainingTime(enum class EMadVendorOfferType Offer); // Function Madness.MadVendor.GetOfferRemainingTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1702350
	struct TMap<struct FName, int32_t> GetBuyCost(enum class EMadVendorOfferType Offer, int32_t ItemId, int32_t Amount); // Function Madness.MadVendor.GetBuyCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1701ed0
	void Close(); // Function Madness.MadVendor.Close // (Final|Native|Public|BlueprintCallable) // @ game+0x1701dd0
	bool CanSell(struct AMadItem* Item); // Function Madness.MadVendor.CanSell // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1701cb0
	bool CanBuy(enum class EMadVendorOfferType Offer, int32_t ItemId, int32_t Amount); // Function Madness.MadVendor.CanBuy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1701a30
	void Buy(enum class EMadVendorOfferType Offer, int32_t ItemId, int32_t Amount); // Function Madness.MadVendor.Buy // (Final|Native|Public|BlueprintCallable) // @ game+0x1701870
};

// Class Madness.MadVendorUIModel
// Size: 0x120 (Inherited: 0x50)
struct UMadVendorUIModel : UBaseUIModel {
	char UnknownData_50[0x50]; // 0x50(0x50)
	struct TArray<struct FMadVendorItemUIData> RegularOffer; // 0xa0(0x10)
	int32_t RegularOfferRemainingTime; // 0xb0(0x04)
	int32_t RegularOfferTotalTime; // 0xb4(0x04)
	struct TArray<struct FMadVendorItemUIData> DailyOffer; // 0xb8(0x10)
	int32_t DailyOfferRemainingTime; // 0xc8(0x04)
	int32_t DailyOfferTotalTime; // 0xcc(0x04)
	struct TArray<struct FMadVendorItemUIData> ExchangeOffer; // 0xd0(0x10)
	int32_t ExchangeOfferRemainingTime; // 0xe0(0x04)
	int32_t ExchangeOfferTotalTime; // 0xe4(0x04)
	struct TArray<struct FMadVendorItemUIData> EliteOffer; // 0xe8(0x10)
	char UnknownData_F8_0 : 7; // 0xf8(0x01)
	bool HasDailyOffer : 1; // 0xf8(0x01)
	char UnknownData_F9[0x3]; // 0xf9(0x03)
	float DailyOfferDiscount; // 0xfc(0x04)
	char UnknownData_100[0x20]; // 0x100(0x20)

	void Sell(uint32_t ItemUniqueID); // Function Madness.MadVendorUIModel.Sell // (Final|Native|Public) // @ game+0x1703280
	void OnResourcesChanged(struct FName Name, int32_t Delta); // Function Madness.MadVendorUIModel.OnResourcesChanged // (Final|Native|Public) // @ game+0x1702d30
	void OnOfferExpired(enum class EMadVendorOfferType Offer); // Function Madness.MadVendorUIModel.OnOfferExpired // (Final|Native|Public) // @ game+0x1702c70
	struct TArray<struct FMadResourceUIData> GetSellRefund(uint32_t ItemUniqueID); // Function Madness.MadVendorUIModel.GetSellRefund // (Final|Native|Public|Const) // @ game+0x17025c0
	struct TArray<struct FMadResourceUIData> GetExchangeResourcesRefund(int32_t ItemId, int32_t Amount); // Function Madness.MadVendorUIModel.GetExchangeResourcesRefund // (Final|Native|Public|Const) // @ game+0x1702270
	struct TArray<struct FMadResourceUIData> GetExchangeResourcesCost(int32_t ItemId, int32_t Amount); // Function Madness.MadVendorUIModel.GetExchangeResourcesCost // (Final|Native|Public|Const) // @ game+0x1702190
	struct TArray<struct FMadResourceUIData> GetBuyCost(enum class EMadVendorOfferType Offer, int32_t ItemId); // Function Madness.MadVendorUIModel.GetBuyCost // (Final|Native|Public|Const) // @ game+0x17020b0
	void ExchangeResources(uint32_t ItemId, int32_t Amount); // Function Madness.MadVendorUIModel.ExchangeResources // (Final|Native|Public) // @ game+0x1701e10
	bool CanSell(uint32_t ItemUniqueID); // Function Madness.MadVendorUIModel.CanSell // (Final|Native|Public|Const) // @ game+0x1701d40
	bool CanExchangeResources(uint32_t ItemId, int32_t Amount); // Function Madness.MadVendorUIModel.CanExchangeResources // (Final|Native|Public|Const) // @ game+0x1701bf0
	bool CanBuy(enum class EMadVendorOfferType Offer, int32_t ItemId); // Function Madness.MadVendorUIModel.CanBuy // (Final|Native|Public|Const) // @ game+0x1701b30
	void Buy(enum class EMadVendorOfferType Offer, int32_t ItemId); // Function Madness.MadVendorUIModel.Buy // (Final|Native|Public) // @ game+0x1701970
};

// Class Madness.MadVirtualCursor
// Size: 0x250 (Inherited: 0x230)
struct UMadVirtualCursor : UUserWidget {
	float CursorBlendSpeed; // 0x230(0x04)
	char UnknownData_234[0x14]; // 0x234(0x14)
	struct AMadPlayerController* MadPC; // 0x248(0x08)

	void TryBindToUIManager(); // Function Madness.MadVirtualCursor.TryBindToUIManager // (Final|Native|Protected) // @ game+0x17033b0
	struct UImage* GetCursorImage(); // Function Madness.MadVirtualCursor.GetCursorImage // (Event|Public|BlueprintEvent|Const) // @ game+0x1a35c70
};

// Class Madness.MadVirtualKeyboardUIModel
// Size: 0xb0 (Inherited: 0x50)
struct UMadVirtualKeyboardUIModel : UBaseUIModel {
	char UnknownData_50[0x18]; // 0x50(0x18)
	struct FString LastEnteredString; // 0x68(0x10)
	struct UMadVirtualKeyboardWidget* VirtualKeyboardWidget; // 0x78(0x08)
	char UnknownData_80[0x30]; // 0x80(0x30)

	void Show(struct FString IninitalText); // Function Madness.MadVirtualKeyboardUIModel.Show // (Final|Native|Public) // @ game+0x15bf8a0
	void Hide(); // Function Madness.MadVirtualKeyboardUIModel.Hide // (Final|Native|Public) // @ game+0xe8aaf0
};

// Class Madness.MadVirtualKeyboardWidget
// Size: 0x268 (Inherited: 0x230)
struct UMadVirtualKeyboardWidget : UUserWidget {
	char UnknownData_230[0x38]; // 0x230(0x38)
};

// Class Madness.MadVolcanoBossSkeletalMeshComponent
// Size: 0xdd0 (Inherited: 0xdc0)
struct UMadVolcanoBossSkeletalMeshComponent : UMadSkeletalMeshComponent {
	struct TArray<struct UBlastMeshComponent*> BlastMeshes; // 0xdb8(0x10)
};

// Class Madness.MadVOManager
// Size: 0x240 (Inherited: 0x210)
struct UMadVOManager : UVOManager {
	float IdleVOMinTime; // 0x210(0x04)
	float IdleVOMaxTime; // 0x214(0x04)
	char UnknownData_218[0x28]; // 0x218(0x28)

	void OnWeaponFired(struct FHitResult Trace, struct TArray<struct ABaseCharacter*> EnemiesHit, enum class EHitMarkerType HitMarkerType); // Function Madness.MadVOManager.OnWeaponFired // (Final|Native|Private|HasOutParms) // @ game+0x1702fa0
	void OnSkillActivated(struct UMadSkillData* ActivatedSkill); // Function Madness.MadVOManager.OnSkillActivated // (Final|Native|Private) // @ game+0x1702f20
	void OnSequenceStarted(struct FFrameworkPlayerPlayParams Params); // Function Madness.MadVOManager.OnSequenceStarted // (Final|Native|Public|HasOutParms) // @ game+0x1702df0
	void OnMoveActionTriggered(enum class EPlayerMoveAction MoveAction, float Angle); // Function Madness.MadVOManager.OnMoveActionTriggered // (Final|Native|Private) // @ game+0x1702bb0
	void OnLeaveUIState(struct FName StateName); // Function Madness.MadVOManager.OnLeaveUIState // (Final|Native|Private|HasOutParms) // @ game+0x1702b20
	void OnInventoryItemSell(); // Function Madness.MadVOManager.OnInventoryItemSell // (Final|Native|Private) // @ game+0x1702a70
	void OnInventoryItemBuy(); // Function Madness.MadVOManager.OnInventoryItemBuy // (Final|Native|Private) // @ game+0x1702a50
	void OnGenderChanged(enum class EMadGender NewGender); // Function Madness.MadVOManager.OnGenderChanged // (Final|Native|Private) // @ game+0x17029d0
	void OnEnterUIState(struct FName StateName); // Function Madness.MadVOManager.OnEnterUIState // (Final|Native|Private|HasOutParms) // @ game+0x17028b0
	void OnCharacterInDialogueStateChanged(bool bInDialogue); // Function Madness.MadVOManager.OnCharacterInDialogueStateChanged // (Final|Native|Private) // @ game+0x1702790
	void OnBattleEvent(struct FGlobalEventParams GlobalEvent); // Function Madness.MadVOManager.OnBattleEvent // (Final|Native|Private|HasOutParms) // @ game+0x17026a0
};

// Class Madness.MadVortex
// Size: 0x398 (Inherited: 0x2f0)
struct AMadVortex : AActor {
	struct FScalableFloat DURATION; // 0x2f0(0x20)
	struct FScalableFloat Strength; // 0x310(0x20)
	struct FScalableFloat PullRadius; // 0x330(0x20)
	struct UParticleSystem* ParticleTemplate; // 0x350(0x08)
	struct UParticleSystem* OnTeleportParticleTemplate; // 0x358(0x08)
	struct AMadBaseCharacter* OwnerCharacter; // 0x360(0x08)
	struct UParticleSystemComponent* ParticleComp; // 0x368(0x08)
	struct TArray<struct FVector> TeleportLocations; // 0x370(0x10)
	char UnknownData_380[0x18]; // 0x380(0x18)

	void SetTeleportLocations(struct TArray<struct FVector> Locations); // Function Madness.MadVortex.SetTeleportLocations // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1703300
	void OnRep_Locations(); // Function Madness.MadVortex.OnRep_Locations // (Final|Native|Public) // @ game+0x1702d10
};

// Class Madness.MadVoteContextPanel
// Size: 0x178 (Inherited: 0x138)
struct UMadVoteContextPanel : UMadContextPanel {
	struct TArray<struct FVoteStateUIData> Votes; // 0x138(0x10)
	float VoteDuration; // 0x148(0x04)
	float VoteTimeLeft; // 0x14c(0x04)
	char UnknownData_150_0 : 7; // 0x150(0x01)
	bool bPlayerUsedDelay : 1; // 0x150(0x01)
	char UnknownData_151[0x7]; // 0x151(0x07)
	struct FString UIVoteStateName; // 0x158(0x10)
	char UnknownData_168[0x10]; // 0x168(0x10)

	void OnRemotePlayerVoteStateChanged(struct FVoteState InVoteState); // Function Madness.MadVoteContextPanel.OnRemotePlayerVoteStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0x1709b80
	void OnLocalPlayerVoteStateChanged(struct FVoteState InVoteState); // Function Madness.MadVoteContextPanel.OnLocalPlayerVoteStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0x17096b0
};

// Class Madness.MadVotingUIModel
// Size: 0xd0 (Inherited: 0x50)
struct UMadVotingUIModel : UBaseUIModel {
	char UnknownData_50[0x8]; // 0x50(0x08)
	struct TArray<struct FVoteStateUIData> VotesState; // 0x58(0x10)
	char UnknownData_68_0 : 7; // 0x68(0x01)
	bool bHasPartyLeaderAccepted : 1; // 0x68(0x01)
	char UnknownData_69_0 : 7; // 0x69(0x01)
	bool bVotingInProgress : 1; // 0x69(0x01)
	char UnknownData_6A[0x2]; // 0x6a(0x02)
	int32_t VoteReason; // 0x6c(0x04)
	int32_t VoteTimerDuration; // 0x70(0x04)
	char UnknownData_74[0x4]; // 0x74(0x04)
	struct FString VoteInstigatorName; // 0x78(0x10)
	struct FString VoteDestinationRegion; // 0x88(0x10)
	struct FText VoteReasonText; // 0x98(0x18)
	char UnknownData_B0[0x20]; // 0xb0(0x20)

	void OnVoteVisibilityChanged(bool bVisible, int32_t InVoteReason); // Function Madness.MadVotingUIModel.OnVoteVisibilityChanged // (Final|Native|Public) // @ game+0x1709e60
	void OnVoteStateChanged(struct FVoteState VoteState); // Function Madness.MadVotingUIModel.OnVoteStateChanged // (Final|Native|Public|HasOutParms) // @ game+0x1709dc0
	void OnVoteFinished(int32_t InVoteReason, bool bSuccess, int32_t WinningChoice); // Function Madness.MadVotingUIModel.OnVoteFinished // (Final|Native|Public) // @ game+0x1709cc0
};

// Class Madness.MadWanderingFlame
// Size: 0x3d0 (Inherited: 0x2f0)
struct AMadWanderingFlame : AActor {
	struct UParticleSystem* FlameTemplate; // 0x2f0(0x08)
	struct UParticleSystem* MarkerTemplate; // 0x2f8(0x08)
	struct UParticleSystem* TrailTemplate; // 0x300(0x08)
	struct UMadDamageType* DamageTypeClass; // 0x308(0x08)
	struct UEnvQuery* ChaoticMovementQueryTemplate; // 0x310(0x08)
	struct FVector CurrentLocation; // 0x318(0x0c)
	char UnknownData_324[0x4]; // 0x324(0x04)
	struct TArray<struct FVector> PathPoints; // 0x328(0x10)
	int32_t CurrentPathPoint; // 0x338(0x04)
	char UnknownData_33C[0x4]; // 0x33c(0x04)
	struct UParticleSystemComponent* FlameParticleComponent; // 0x340(0x08)
	struct UParticleSystemComponent* MarkerParticleComponent; // 0x348(0x08)
	struct UCapsuleComponent* CollisionComp; // 0x350(0x08)
	struct TArray<struct FFlameTrailData> TrailsData; // 0x358(0x10)
	struct TArray<struct FOverlappedActorData> OverlappedActorsToDamage; // 0x368(0x10)
	char UnknownData_378[0x58]; // 0x378(0x58)

	void OnRep_CurrentLocation(); // Function Madness.MadWanderingFlame.OnRep_CurrentLocation // (Final|Native|Private) // @ game+0x1709c40
	void OnOwnerKilled(struct ABaseCharacter* ControllerOwner, struct FTakeHitInfo TakeHitInfo); // Function Madness.MadWanderingFlame.OnOwnerKilled // (Final|Native|Private) // @ game+0x1709830
	void OnOwnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Madness.MadWanderingFlame.OnOwnerEndPlay // (Final|Native|Private) // @ game+0x1709770
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Madness.MadWanderingFlame.OnEndOverlap // (Final|Native|Private) // @ game+0x17091d0
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.MadWanderingFlame.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1708f60
	void MulticastSpawnFlame(); // Function Madness.MadWanderingFlame.MulticastSpawnFlame // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1516bc0
	void MulticastSetDestroyTimer(); // Function Madness.MadWanderingFlame.MulticastSetDestroyTimer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x150ed00
};

// Class Madness.MadWaveSpawningSystem
// Size: 0x670 (Inherited: 0x658)
struct AMadWaveSpawningSystem : AFWWaveSpawningSystem {
	int32_t EncounterLevel; // 0x658(0x04)
	char UnknownData_65C_0 : 7; // 0x65c(0x01)
	bool bHideQuestMarkers : 1; // 0x65c(0x01)
	char UnknownData_65D[0x3]; // 0x65d(0x03)
	struct TArray<struct UMadCategorizedAbilitySet*> UsedAbilitySets; // 0x660(0x10)
};

// Class Madness.MadWaypointNavigationGraph
// Size: 0x890 (Inherited: 0x830)
struct AMadWaypointNavigationGraph : AWaypointNavigationGraph {
	struct UMadExplorerFlagsStateComponent* FlagsState; // 0x830(0x08)
	char UnknownData_838[0x58]; // 0x838(0x58)
};

// Class Madness.MadWeaponType_AssaultWeapon
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponType_AssaultWeapon : UWeaponType {
};

// Class Madness.MadWeaponType_HeavyWeapon
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponType_HeavyWeapon : UWeaponType {
};

// Class Madness.MadWeaponType_Rifle
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponType_Rifle : UWeaponType {
};

// Class Madness.MadWeaponType_Shotgun
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponType_Shotgun : UWeaponType {
};

// Class Madness.MadWeaponType_Sidearm
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponType_Sidearm : UWeaponType {
};

// Class Madness.MadWeaponEntry
// Size: 0x4c8 (Inherited: 0x4c0)
struct AMadWeaponEntry : AMadItem {
	struct FWeakObjectPtr<struct AMadWeapon> Weapon; // 0x4c0(0x08)

	void OnRep_Weapon(); // Function Madness.MadWeaponEntry.OnRep_Weapon // (Final|Native|Protected) // @ game+0x1709c80
	struct AMadWeapon* GetWeaponArchetype(); // Function Madness.MadWeaponEntry.GetWeaponArchetype // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1708c20
	struct AMadWeapon* GetWeapon(); // Function Madness.MadWeaponEntry.GetWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1708be0
	int32_t GetAmmoPerClip(); // Function Madness.MadWeaponEntry.GetAmmoPerClip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1708630
};

// Class Madness.MadWeaponScheme
// Size: 0x3c8 (Inherited: 0x2f0)
struct AMadWeaponScheme : AActor {
	struct USkeletalMeshComponent* WeaponBase; // 0x2f0(0x08)
	struct UStaticMeshComponent* Clip; // 0x2f8(0x08)
	struct UStaticMeshComponent* Muzzle; // 0x300(0x08)
	struct UStaticMeshComponent* Pump; // 0x308(0x08)
	struct UStaticMeshComponent* Slot1; // 0x310(0x08)
	struct UStaticMeshComponent* Slot2; // 0x318(0x08)
	struct UStaticMeshComponent* Slot3; // 0x320(0x08)
	struct UStaticMeshComponent* Slot4; // 0x328(0x08)
	struct UStaticMeshComponent* Slot5; // 0x330(0x08)
	struct TMap<struct FName, struct UMaterialInstanceConstant*> MaterialOverrides; // 0x338(0x50)
	struct FMadMaterialParams GlobalParams; // 0x388(0x30)
	struct TArray<struct FMadMeshMIDs> MeshMIDs; // 0x3b8(0x10)
};

// Class Madness.MadWeaponShaderInterface
// Size: 0x28 (Inherited: 0x28)
struct UMadWeaponShaderInterface : UInterface {

	bool GetWeaponMeshArray(struct TArray<struct UMeshComponent*> OutArray); // Function Madness.MadWeaponShaderInterface.GetWeaponMeshArray // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1708c80
	bool CanBeApplied(); // Function Madness.MadWeaponShaderInterface.CanBeApplied // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1708600
};

// Class Madness.MadWeaponShaderEffect
// Size: 0x1c0 (Inherited: 0x1b0)
struct UMadWeaponShaderEffect : UMadShaderEffect {
	char UnknownData_1B0_0 : 7; // 0x1b0(0x01)
	bool bAffectOnlyWeaponInHands : 1; // 0x1b0(0x01)
	char UnknownData_1B1_0 : 7; // 0x1b1(0x01)
	bool bHideWeaponSchemeParticles : 1; // 0x1b1(0x01)
	char UnknownData_1B2[0x6]; // 0x1b2(0x06)
	struct AActor* AffectedActor; // 0x1b8(0x08)

	void OnNewWeaponEquipped(); // Function Madness.MadWeaponShaderEffect.OnNewWeaponEquipped // (Final|Native|Public) // @ game+0x1709750
	struct TArray<struct UMeshComponent*> GetWeaponMeshes(struct AWeapon* InWeapon); // Function Madness.MadWeaponShaderEffect.GetWeaponMeshes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1708d40
	float GetValueForWeaponType(float DefaultValue, struct TMap<struct AMadWeapon*, float> ValueMap, bool bExact); // Function Madness.MadWeaponShaderEffect.GetValueForWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1708980
	struct TArray<struct UMeshComponent*> GetHolsteredWeaponsMeshes(); // Function Madness.MadWeaponShaderEffect.GetHolsteredWeaponsMeshes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1708820
	struct TArray<struct UMeshComponent*> GetEquippedWeaponsMeshes(); // Function Madness.MadWeaponShaderEffect.GetEquippedWeaponsMeshes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1708770
	struct TArray<struct UMeshComponent*> GetCurrentWeaponMeshes(); // Function Madness.MadWeaponShaderEffect.GetCurrentWeaponMeshes // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17086b0
};

// Class Madness.MadWidgetWrapper
// Size: 0x318 (Inherited: 0x2f0)
struct AMadWidgetWrapper : AActor {
	struct FString DisplayText; // 0x2f0(0x10)
	struct FLinearColor TextColor; // 0x300(0x10)
	char UnknownData_310_0 : 7; // 0x310(0x01)
	bool bVisible : 1; // 0x310(0x01)
	char UnknownData_311[0x7]; // 0x311(0x07)

	void SetVisible(bool bInVisible); // Function Madness.MadWidgetWrapper.SetVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1711740
	void SetDisplayText(struct FString InDisplayText, struct FLinearColor InTextColor); // Function Madness.MadWidgetWrapper.SetDisplayText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x17111e0
	void OnVisibilityChanged(); // Function Madness.MadWidgetWrapper.OnVisibilityChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void OnDisplayTextChanged(); // Function Madness.MadWidgetWrapper.OnDisplayTextChanged // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.MadWorldDifficultyContextPanel
// Size: 0x138 (Inherited: 0x138)
struct UMadWorldDifficultyContextPanel : UMadContextPanel {
};

// Class Madness.MadWorldMapNode
// Size: 0x128 (Inherited: 0x128)
struct UMadWorldMapNode : UBaseWorldMapNode {
};

// Class Madness.MadWorldMapUIModel
// Size: 0xb8 (Inherited: 0x50)
struct UMadWorldMapUIModel : UBaseUIModel {
	char UnknownData_50[0x10]; // 0x50(0x10)
	struct TArray<struct FWorldMapNodeUIData> WorldMapNodes; // 0x60(0x10)
	struct FString WorldMapTexturePath; // 0x70(0x10)
	struct FString ConvoyWorldMapTexturePath; // 0x80(0x10)
	char UnknownData_90[0x18]; // 0x90(0x18)
	struct AMadPlayerController* MadnessPC; // 0xa8(0x08)
	struct FWeakObjectPtr<struct UBaseWorldMap> WorldMapPtr; // 0xb0(0x08)

	void TravelToNode(int32_t NodeID); // Function Madness.MadWorldMapUIModel.TravelToNode // (Final|Native|Public|Const) // @ game+0x1711990
	void OnEnterUIState(struct FName StateName); // Function Madness.MadWorldMapUIModel.OnEnterUIState // (Final|Native|Public|HasOutParms) // @ game+0x1710aa0
};

// Class Madness.MadWorldSettings
// Size: 0x4b8 (Inherited: 0x4b8)
struct AMadWorldSettings : ABaseWorldSettings {
};

// Class Madness.MadWorldStructure
// Size: 0xb0 (Inherited: 0xa0)
struct UMadWorldStructure : UBaseWorldStructure {
	struct TArray<struct FBackToHubStructure> BackToHubList; // 0xa0(0x10)
};

// Class Madness.MadYagakAnomalyShield
// Size: 0x388 (Inherited: 0x2f0)
struct AMadYagakAnomalyShield : AActor {
	struct AMadNavmeshProjectile* ProjectileTemplate; // 0x2f0(0x08)
	struct FScalableFloat RotationSpeed; // 0x2f8(0x20)
	struct UParticleSystem* DestroyParticleTemplate; // 0x318(0x08)
	struct UParticleSystem* ImpactParticleTemplate; // 0x320(0x08)
	float ImpactSpawnMinFrequency; // 0x328(0x04)
	float BaseDistanceFromRoot; // 0x32c(0x04)
	float BaseDistanceBetweenShields; // 0x330(0x04)
	float AscendSpeed; // 0x334(0x04)
	float DescendSpeed; // 0x338(0x04)
	float SpawnAngle; // 0x33c(0x04)
	float ShowMarkerAfterTime; // 0x340(0x04)
	char UnknownData_344[0x4]; // 0x344(0x04)
	struct UStaticMeshComponent* MeshComp; // 0x348(0x08)
	struct UCapsuleComponent* CapsuleComp; // 0x350(0x08)
	struct UParticleSystemComponent* Marker; // 0x358(0x08)
	struct AActor* Target; // 0x360(0x08)
	char UnknownData_368[0x20]; // 0x368(0x20)

	void SpawnImpactParticle(struct FVector ImpactPoint, struct FRotator Rotation); // Function Madness.MadYagakAnomalyShield.SpawnImpactParticle // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|Const) // @ game+0x162be40
	void SpawnDestroyParticle(); // Function Madness.MadYagakAnomalyShield.SpawnDestroyParticle // (Final|Native|Public) // @ game+0x1711850
	void Init(struct AActor* InTarget, float LifeTime); // Function Madness.MadYagakAnomalyShield.Init // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17108e0
};

// Class Madness.MGC_Freezing
// Size: 0x588 (Inherited: 0x548)
struct AMGC_Freezing : AMadGameplayCue {
	struct UParticleSystem* FrozenExplosionEffect; // 0x548(0x08)
	struct UCurveFloat* FreezingCurve; // 0x550(0x08)
	struct UCurveFloat* UnfreezingCurve; // 0x558(0x08)
	float FreezingDuration; // 0x560(0x04)
	float UnfreezingDuration; // 0x564(0x04)
	float MinPawnTimeDilation; // 0x568(0x04)
	char UnknownData_56C[0x14]; // 0x56c(0x14)
	struct AMadBaseCharacter* MyPawn; // 0x580(0x08)

	void OnDamaged(struct ABaseCharacter* character, float Change); // Function Madness.MGC_Freezing.OnDamaged // (Final|Native|Private) // @ game+0x17109d0
};

// Class Madness.MiningInteractionComponent
// Size: 0x7e0 (Inherited: 0x7e0)
struct UMiningInteractionComponent : UInteractionComponent {

	void MulticastPreparePromptOnAnimStarted(struct ABasePlayerController* InPC); // Function Madness.MiningInteractionComponent.MulticastPreparePromptOnAnimStarted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1709f20
};

// Class Madness.PhysicalLayerMeshComponent
// Size: 0x580 (Inherited: 0x580)
struct UPhysicalLayerMeshComponent : UStaticMeshComponent {
};

// Class Madness.PlayerEffectModData
// Size: 0x40 (Inherited: 0x28)
struct UPlayerEffectModData : UMadChallengeModData {
	struct UMadGameplayEffect* Effect; // 0x28(0x08)
	struct TArray<struct FMadPlayerEffectHandle> Handles; // 0x30(0x10)
};

// Class Madness.PostBlinkExplosion
// Size: 0x3c8 (Inherited: 0x2f0)
struct APostBlinkExplosion : AActor {
	float ExplosionDelay; // 0x2f0(0x04)
	float PostExplosionLifetime; // 0x2f4(0x04)
	float MinDamageMultiplier; // 0x2f8(0x04)
	char UnknownData_2FC[0x4]; // 0x2fc(0x04)
	struct FScalableFloat DamageScalable; // 0x300(0x20)
	struct FScalableFloat ExplosionRadiusScalable; // 0x320(0x20)
	struct FScalableFloat DamageFalloffScalable; // 0x340(0x20)
	struct UDamageType* ExplosionDamageType; // 0x360(0x08)
	struct UParticleSystem* AttachableParticlesEffect; // 0x368(0x08)
	struct FName AttachableBoneName; // 0x370(0x08)
	struct FVector AttachableLocationOffset; // 0x378(0x0c)
	struct FRotator AttachableRotationOffset; // 0x384(0x0c)
	struct UParticleSystemComponent* PostExplosionEffect; // 0x390(0x08)
	struct USphereComponent* ExplosionOrigin; // 0x398(0x08)
	struct UAudioComponent* InitialSound; // 0x3a0(0x08)
	struct UAudioComponent* ExplosionSound; // 0x3a8(0x08)
	char UnknownData_3B0[0x18]; // 0x3b0(0x18)

	void StartExplosion(); // Function Madness.PostBlinkExplosion.StartExplosion // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1516bc0
	void SpawnParticleEffects(struct TArray<struct AActor*> DamageActors); // Function Madness.PostBlinkExplosion.SpawnParticleEffects // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1711870
	void Explosion(); // Function Madness.PostBlinkExplosion.Explosion // (Final|Native|Private) // @ game+0x1710420
};

// Class Madness.QuakeProjectile
// Size: 0x330 (Inherited: 0x2f0)
struct AQuakeProjectile : AActor {
	struct USceneComponent* Scene_Root; // 0x2f0(0x08)
	struct USceneComponent* ProjectileMeshRoot; // 0x2f8(0x08)
	struct UStaticMeshComponent* Mesh; // 0x300(0x08)
	struct UAudioComponent* Audio_QuakeSound; // 0x308(0x08)
	struct UProjectileMovementComponent* ProjectileMovement; // 0x310(0x08)
	float Damage; // 0x318(0x04)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct TArray<struct AMadBaseCharacter*> DamagedEnemies; // 0x320(0x10)

	void OnMeshBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.QuakeProjectile.OnMeshBeginOverlap // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1710b30
	void GetDamage(); // Function Madness.QuakeProjectile.GetDamage // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
};

// Class Madness.QueryTest_IsGrouped
// Size: 0x270 (Inherited: 0x268)
struct UQueryTest_IsGrouped : UEnvQueryTest {
	float MaxDistanceToBeGrouped; // 0x268(0x04)
	char UnknownData_26C[0x4]; // 0x26c(0x04)
};

// Class Madness.QueryTest_IsTargetIgnored
// Size: 0x270 (Inherited: 0x268)
struct UQueryTest_IsTargetIgnored : UEnvQueryTest {
	float TimeToReactivate; // 0x268(0x04)
	char UnknownData_26C[0x4]; // 0x26c(0x04)
};

// Class Madness.ReactionDataAsset
// Size: 0x5e0 (Inherited: 0x30)
struct UReactionDataAsset : UDataAsset {
	float HealthLostRequiredForReaction; // 0x30(0x04)
	float HealthLostRecentlyResetTime; // 0x34(0x04)
	struct FMadReactionAnimData DefaultReaction; // 0x38(0xb0)
	struct TArray<struct FMadReactionData> ReactionsPerDamageType; // 0xe8(0x10)
	struct FMadReactionAnimData DefaultTwitchReaction; // 0xf8(0xb0)
	struct TArray<struct FMadReactionData> TwitchReactionsPerDamageType; // 0x1a8(0x10)
	struct FMadReactionAnimData DefaultMeleeReaction; // 0x1b8(0xb0)
	struct TArray<struct FMadReactionData> MeleeReactionsPerDamageType; // 0x268(0x10)
	char UnknownData_278_0 : 7; // 0x278(0x01)
	bool bOverrideKnockdown : 1; // 0x278(0x01)
	char UnknownData_279[0x3]; // 0x279(0x03)
	struct FGameplayTag KnockdownOverrideTag; // 0x27c(0x08)
	float KnockdownMultiplier; // 0x284(0x04)
	struct FName KnockdownImpulseBone; // 0x288(0x08)
	struct FMadReactionAnimData DefaultKnockdown; // 0x290(0xb0)
	struct TArray<struct FMadReactionData> KnockdownsPerDamageType; // 0x340(0x10)
	char UnknownData_350_0 : 7; // 0x350(0x01)
	bool bOverrideKnockback : 1; // 0x350(0x01)
	char UnknownData_351[0x3]; // 0x351(0x03)
	struct FGameplayTag KnockbackOverrideTag; // 0x354(0x08)
	float KnockbackDistance; // 0x35c(0x04)
	struct FMadReactionAnimData DefaultKnockback; // 0x360(0xb0)
	struct TArray<struct FMadReactionData> KnockbacksPerDamageType; // 0x410(0x10)
	struct TSoftObjectPtr<struct UAnimMontage> StunnedMontage; // 0x420(0x28)
	struct TSoftObjectPtr<struct UAnimMontage> InFireMontage; // 0x448(0x28)
	char UnknownData_470_0 : 7; // 0x470(0x01)
	bool bHeadshotsAreCrits : 1; // 0x470(0x01)
	char UnknownData_471[0x7]; // 0x471(0x07)
	struct TArray<struct FMadWeakSpot> WeakSpots; // 0x478(0x10)
	struct TSoftObjectPtr<struct UAnimMontage> ThermalBombedMontage; // 0x488(0x28)
	char UnknownData_4B0_0 : 7; // 0x4b0(0x01)
	bool bThermalBombDontGib : 1; // 0x4b0(0x01)
	char UnknownData_4B1[0x7]; // 0x4b1(0x07)
	struct TSoftObjectPtr<struct UAnimMontage> ImpaleMontage; // 0x4b8(0x28)
	char UnknownData_4E0_0 : 7; // 0x4e0(0x01)
	bool bImpaleDissolveBody : 1; // 0x4e0(0x01)
	char UnknownData_4E1[0x7]; // 0x4e1(0x07)
	struct TSoftObjectPtr<struct UAnimMontage> BlackbodyMontage; // 0x4e8(0x28)
	struct TSoftObjectPtr<struct UAnimMontage> BlackbodyMainMontage; // 0x510(0x28)
	struct TSoftObjectPtr<struct UAnimMontage> StoneExplosionMontage; // 0x538(0x28)
	struct TSoftObjectPtr<struct UAnimMontage> TremorMontage; // 0x560(0x28)
	char UnknownData_588_0 : 7; // 0x588(0x01)
	bool bReceiveDeathEffects : 1; // 0x588(0x01)
	char UnknownData_589[0x7]; // 0x589(0x07)
	struct TMap<struct FGameplayTag, struct FGameplayCueOverrides> GameplayCueOverrides; // 0x590(0x50)

	struct FGameplayCueOverrides GetGameplayCueOverrides(struct FGameplayTag InGameplayCueTag); // Function Madness.ReactionDataAsset.GetGameplayCueOverrides // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1710680
};

// Class Madness.RepelAttackDamageArea
// Size: 0x2f0 (Inherited: 0x2f0)
struct ARepelAttackDamageArea : AActor {
};

// Class Madness.RepelAttackTrailArea
// Size: 0x2f0 (Inherited: 0x2f0)
struct ARepelAttackTrailArea : AActor {
};

// Class Madness.ScrapBarrage_Marker
// Size: 0x318 (Inherited: 0x2f0)
struct AScrapBarrage_Marker : AActor {
	struct USceneComponent* Root; // 0x2f0(0x08)
	struct USceneComponent* Marker; // 0x2f8(0x08)
	struct UParticleSystemComponent* BarrageMarkerParticleSystemComponent; // 0x300(0x08)
	struct UAudioComponent* Audio; // 0x308(0x08)
	float TimelineAlpha; // 0x310(0x04)
	char UnknownData_314[0x4]; // 0x314(0x04)

	void CallSetupBarrageTarget(); // Function Madness.ScrapBarrage_Marker.CallSetupBarrageTarget // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallDeactivateMarker(); // Function Madness.ScrapBarrage_Marker.CallDeactivateMarker // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.ScrapBarrage_Projectile
// Size: 0x5f0 (Inherited: 0x5c0)
struct AScrapBarrage_Projectile : AMadProjectile {
	struct UParticleSystemComponent* ProjectileBody; // 0x5c0(0x08)
	struct UParticleSystemComponent* ProjectileDebris; // 0x5c8(0x08)
	float BaseDamage; // 0x5d0(0x04)
	float DamageRadius; // 0x5d4(0x04)
	struct TArray<struct UStaticMesh*> StaticMeshes; // 0x5d8(0x10)
	char UnknownData_5E8[0x8]; // 0x5e8(0x08)

	void KillProjectile(); // Function Madness.ScrapBarrage_Projectile.KillProjectile // (Final|Native|Protected|BlueprintCallable) // @ game+0x17109b0
};

// Class Madness.ScrapShield
// Size: 0x368 (Inherited: 0x2f0)
struct AScrapShield : AActor {
	struct FScrapShieldParams ShieldParams; // 0x2f0(0x10)
	struct UMadAIGameplayAbility* Ability; // 0x300(0x08)
	int32_t ShieldElementsToSpawn; // 0x308(0x04)
	char UnknownData_30C[0x4]; // 0x30c(0x04)
	struct FTimerHandle ChargeHandle; // 0x310(0x08)
	float OverchargeRadiusBase; // 0x318(0x04)
	float OverchargeRadiusMax; // 0x31c(0x04)
	struct TArray<struct AScrapShieldElement*> ShieldParts; // 0x320(0x10)
	struct UMadDamageType* Lightning; // 0x330(0x08)
	struct AScrapShieldElement* ScrapShieldElementClass; // 0x338(0x08)
	struct TArray<struct UStaticMesh*> MeshVariations; // 0x340(0x10)
	int32_t Elements; // 0x350(0x04)
	char UnknownData_354[0x14]; // 0x354(0x14)

	void SpawnShieldElements(struct USceneComponent* AttachmentRoot); // Function Madness.ScrapShield.SpawnShieldElements // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711910
	void ShowShield(struct USceneComponent* Shield); // Function Madness.ScrapShield.ShowShield // (Final|Native|Protected|BlueprintCallable) // @ game+0x17117d0
	void SetShieldElementCharged(struct UParticleSystemComponent* Overload); // Function Madness.ScrapShield.SetShieldElementCharged // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711530
	void PrepareShield(struct USceneComponent* Shield, struct USceneComponent* Shrapnel); // Function Madness.ScrapShield.PrepareShield // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711060
	void OnShieldElementsCreated(); // Function Madness.ScrapShield.OnShieldElementsCreated // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void OnShieldElementDestroyed(bool bIsActive, struct AScrapShieldElement* Element); // Function Madness.ScrapShield.OnShieldElementDestroyed // (Final|Native|Private) // @ game+0x1710da0
	void OnAllShieldPartsDestroyed(); // Function Madness.ScrapShield.OnAllShieldPartsDestroyed // (Event|Protected|BlueprintEvent) // @ game+0x1a35c70
	void FiredScrapElements(struct UParticleSystemComponent* ExplodeScraps); // Function Madness.ScrapShield.FiredScrapElements // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710600
	void DeactivateShield(struct UAudioComponent* Audio); // Function Madness.ScrapShield.DeactivateShield // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710210
	void DamageTrappedPlayers(struct USphereComponent* OverchargeTrigger); // Function Madness.ScrapShield.DamageTrappedPlayers // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710190
	void DamageHitPlayers(struct UObject* HitTarget); // Function Madness.ScrapShield.DamageHitPlayers // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710110
	void CallSetupShield(struct UMadAIGameplayAbility* NewAbility, struct FScrapShieldParams NewShieldParams); // Function Madness.ScrapShield.CallSetupShield // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void BindShieldElementsDestroyed(); // Function Madness.ScrapShield.BindShieldElementsDestroyed // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710030
	void AnimateShieldExplosion(struct USceneComponent* Shrapnel, struct USphereComponent* OverchargeTrigger, float Alpha); // Function Madness.ScrapShield.AnimateShieldExplosion // (Final|Native|Protected|BlueprintCallable) // @ game+0x170fe90
	void ActivateShield(); // Function Madness.ScrapShield.ActivateShield // (Final|Native|Protected|BlueprintCallable) // @ game+0x170fe70
};

// Class Madness.ScrapShieldElement
// Size: 0x340 (Inherited: 0x2f0)
struct AScrapShieldElement : AActor {
	char UnknownData_2F0[0x18]; // 0x2f0(0x18)
	char UnknownData_308_0 : 7; // 0x308(0x01)
	bool bIsElementActive : 1; // 0x308(0x01)
	char UnknownData_309[0x3]; // 0x309(0x03)
	float Durability; // 0x30c(0x04)
	float ShrapnelDamage; // 0x310(0x04)
	char UnknownData_314[0x4]; // 0x314(0x04)
	struct UMadDamageType* Lightning; // 0x318(0x08)
	struct USoundCue* DestroySound; // 0x320(0x08)
	char UnknownData_328[0x18]; // 0x328(0x18)

	void SetShieldVisibility(struct USceneComponent* Shield, bool NewVisibility); // Function Madness.ScrapShieldElement.SetShieldVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711670
	void SetShieldParams(float NewDurabilityMax, float NewShrapnelDamage); // Function Madness.ScrapShieldElement.SetShieldParams // (Final|Native|Protected|BlueprintCallable) // @ game+0x17115b0
	void SetShieldCollision(struct UStaticMeshComponent* ShieldElement, struct UBoxComponent* Box, bool bIsOn); // Function Madness.ScrapShieldElement.SetShieldCollision // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711420
	void SetScrapLocation(float Alpha, float RelativeUpLocation, struct USceneComponent* Offset); // Function Madness.ScrapShieldElement.SetScrapLocation // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711310
	void SetDamageConeCollision(bool bIsOn, struct UStaticMeshComponent* DamageCone); // Function Madness.ScrapShieldElement.SetDamageConeCollision // (Final|Native|Protected|BlueprintCallable) // @ game+0x1711120
	void PrepareElement(struct APawn* NewInstigator, struct USceneComponent* Shield, struct UStaticMeshComponent* ShieldElement, struct UBoxComponent* Box, struct UStaticMeshComponent* DamageCone, struct UParticleSystemComponent* Charge, struct USceneComponent* Offset); // Function Madness.ScrapShieldElement.PrepareElement // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710e60
	void FireOfShieldElement(struct UParticleSystemComponent* ScrapShieldBurst, struct UStaticMeshComponent* DamageCone, struct UArrowComponent* TraceStart, struct USceneComponent* Shield, struct UStaticMeshComponent* ShieldElement, struct UBoxComponent* Box); // Function Madness.ScrapShieldElement.FireOfShieldElement // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710440
	void DestroyElement(struct USceneComponent* Shield, struct UStaticMeshComponent* ShieldElement, struct UBoxComponent* Box, struct UParticleSystemComponent* Explode, struct UParticleSystemComponent* Charge); // Function Madness.ScrapShieldElement.DestroyElement // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710290
	void ChargeUpElement(bool bNewIsCharged, struct UParticleSystemComponent* Charge); // Function Madness.ScrapShieldElement.ChargeUpElement // (Final|Native|Protected|BlueprintCallable) // @ game+0x1710050
	void CallSpawnShieldElement(float NewDurabilityMax, float NewShrapnelDamage); // Function Madness.ScrapShieldElement.CallSpawnShieldElement // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallPrepareElement(struct APawn* NewInstigator); // Function Madness.ScrapShieldElement.CallPrepareElement // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallExplodeShield(); // Function Madness.ScrapShieldElement.CallExplodeShield // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallDestroyElement(); // Function Madness.ScrapShieldElement.CallDestroyElement // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CallChargeUpElement(bool bNewIsCharged); // Function Madness.ScrapShieldElement.CallChargeUpElement // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	bool ApplyDamageToElement(float Damage); // Function Madness.ScrapShieldElement.ApplyDamageToElement // (Final|Native|Protected|BlueprintCallable) // @ game+0x170ffa0
};

// Class Madness.SideProjectile
// Size: 0x5c0 (Inherited: 0x5c0)
struct ASideProjectile : AMadProjectile {
};

// Class Madness.SideProjectilePostDamageArea
// Size: 0x2f0 (Inherited: 0x2f0)
struct ASideProjectilePostDamageArea : AActor {
};

// Class Madness.SlowProjectileMovementComponent
// Size: 0x1d8 (Inherited: 0x1c0)
struct USlowProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0x1c0(0x04)
	char UnknownData_1C4[0x14]; // 0x1c4(0x14)
};

// Class Madness.SphereQuakeProjectile
// Size: 0x328 (Inherited: 0x2f0)
struct ASphereQuakeProjectile : AActor {
	struct USceneComponent* Scene_Root; // 0x2f0(0x08)
	struct USceneComponent* ProjectileMeshRoot; // 0x2f8(0x08)
	struct USphereComponent* DamageArea; // 0x300(0x08)
	struct UAudioComponent* Audio_QuakeSound; // 0x308(0x08)
	float Damage; // 0x310(0x04)
	char UnknownData_314[0x4]; // 0x314(0x04)
	struct TArray<struct AMadBaseCharacter*> AffectedActors; // 0x318(0x10)

	void OnDamageAreaBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.SphereQuakeProjectile.OnDamageAreaBeginOverlap // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1710b30
	void GetDamage(); // Function Madness.SphereQuakeProjectile.GetDamage // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
};

// Class Madness.Tentacle
// Size: 0x348 (Inherited: 0x2f0)
struct ATentacle : AActor {
	struct USceneComponent* SceneRoot; // 0x2f0(0x08)
	struct USkeletalMeshComponent* SKTentacle01; // 0x2f8(0x08)
	struct TArray<struct UParticleSystemComponent*> BossTentacleParticleSystem; // 0x300(0x10)
	struct UCapsuleComponent* SlamCollision; // 0x310(0x08)
	struct UAudioComponent* AudioHitSound; // 0x318(0x08)
	struct TArray<struct AActor*> AffectedActors; // 0x320(0x10)
	char UnknownData_330[0x18]; // 0x330(0x18)

	void StartMiddleSlameAttackPhase01(); // Function Madness.Tentacle.StartMiddleSlameAttackPhase01 // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1516bc0
	void ApplyDamage_Main(); // Function Madness.Tentacle.ApplyDamage_Main // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1522260
	void ActivateHitFXandSFX(); // Function Madness.Tentacle.ActivateHitFXandSFX // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x150ed00
};

// Class Madness.TentacleAttackFrontDamageArea
// Size: 0x2f0 (Inherited: 0x2f0)
struct ATentacleAttackFrontDamageArea : AActor {
};

// Class Madness.MadCoverHintComponent
// Size: 0x390 (Inherited: 0x370)
struct UMadCoverHintComponent : UBase3DWidgetComponent {
	enum class ECoverMovementDirection CurrentDirection; // 0x370(0x01)
	enum class ECoverSlotType CurrentSlotType; // 0x371(0x01)
	char UnknownData_372_0 : 7; // 0x372(0x01)
	bool bUseAlternatingPositions : 1; // 0x372(0x01)
	char UnknownData_373[0x5]; // 0x373(0x05)
	struct TArray<struct FMadCoverHintOrientation> AlternatingPositions; // 0x378(0x10)
	char UnknownData_388_0 : 7; // 0x388(0x01)
	bool PassScreenAngle : 1; // 0x388(0x01)
	char UnknownData_389[0x7]; // 0x389(0x07)
};

// Class Madness.WaypointMarker
// Size: 0x318 (Inherited: 0x2f0)
struct AWaypointMarker : AActor {
	struct UBase3DWidgetComponent* ScreenMarker; // 0x2f0(0x08)
	struct USphereComponent* TriggerSphere; // 0x2f8(0x08)
	float MaxRange; // 0x300(0x04)
	char UnknownData_304[0x4]; // 0x304(0x04)
	struct UNavigationPath* NavPath; // 0x308(0x08)
	char UnknownData_310[0x8]; // 0x310(0x08)

	void OnOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function Madness.WaypointMarker.OnOverlap // (Final|Native|Protected) // @ game+0x1714f90
};

// Class Madness.WaypointPathMarker
// Size: 0x318 (Inherited: 0x2f0)
struct AWaypointPathMarker : AActor {
	float MaxDistanceFromOwner; // 0x2f0(0x04)
	float MovementVelocity; // 0x2f4(0x04)
	float LifeSpanAfterReachingTarget; // 0x2f8(0x04)
	int32_t MaxPathPoints; // 0x2fc(0x04)
	int32_t PointsPerSegment; // 0x300(0x04)
	char UnknownData_304[0x4]; // 0x304(0x04)
	struct UCapsuleComponent* CapsuleComponent; // 0x308(0x08)
	struct UInterpToMovementComponent* MovementComponent; // 0x310(0x08)

	void StartMovement(); // Function Madness.WaypointPathMarker.StartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x17155b0
	void SetPath(struct UNavigationPath* Path); // Function Madness.WaypointPathMarker.SetPath // (Final|Native|Public|BlueprintCallable) // @ game+0x1715470
	void OnSequenceStart(struct FFrameworkPlayerPlayParams PlayParams); // Function Madness.WaypointPathMarker.OnSequenceStart // (Final|Native|Protected|HasOutParms) // @ game+0x1715160
	void OnMovementStop(struct FHitResult HitResult, float Time); // Function Madness.WaypointPathMarker.OnMovementStop // (Final|Native|Protected|HasOutParms) // @ game+0x1714df0
};

// Class Madness.WaypointQuestCompass
// Size: 0x4a0 (Inherited: 0x2f0)
struct AWaypointQuestCompass : AActor {
	struct UMinimapNodeComponent* MinimapNode; // 0x2f0(0x08)
	struct TSet<struct FName> InactiveRegions; // 0x2f8(0x50)
	float WorkingRadius; // 0x348(0x04)
	int32_t MinimapIconZOrder; // 0x34c(0x04)
	struct TSet<struct AActor*> ActorsToTrack; // 0x350(0x50)
	char UnknownData_3A0[0x100]; // 0x3a0(0x100)

	void OnQuestHandleStatusChanged(struct UQuestEventHandler* QuestOrObjective, enum class EObjectiveStatus NewStatus, bool bIsLoading); // Function Madness.WaypointQuestCompass.OnQuestHandleStatusChanged // (Final|Native|Public) // @ game+0x1715050
};

// Class Madness.WideQuakeProjectile
// Size: 0x330 (Inherited: 0x2f0)
struct AWideQuakeProjectile : AActor {
	struct USceneComponent* Scene_Root; // 0x2f0(0x08)
	struct USceneComponent* ProjectileMeshRoot; // 0x2f8(0x08)
	struct UStaticMeshComponent* Mesh; // 0x300(0x08)
	struct UAudioComponent* Audio_QuakeSound; // 0x308(0x08)
	struct UProjectileMovementComponent* ProjectileMovement; // 0x310(0x08)
	float Damage; // 0x318(0x04)
	char UnknownData_31C[0x4]; // 0x31c(0x04)
	struct TArray<struct AMadBaseCharacter*> AffectedActors; // 0x320(0x10)

	void OnMeshBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.WideQuakeProjectile.OnMeshBeginOverlap // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1710b30
	void GetDamage(); // Function Madness.WideQuakeProjectile.GetDamage // (Final|Native|Public|BlueprintCallable) // @ game+0xe8aaf0
};

// Class Madness.YagakAnomalyShieldProjectile
// Size: 0x648 (Inherited: 0x5f0)
struct AYagakAnomalyShieldProjectile : AMadNavmeshProjectile {
	struct UBoxComponent* BoxCollision; // 0x5f0(0x08)
	struct FScalableFloat BaseDamage; // 0x5f8(0x20)
	struct FScalableFloat AbsorbDamage; // 0x618(0x20)
	struct UDamageType* DamageTypeClass; // 0x638(0x08)
	char UnknownData_640[0x8]; // 0x640(0x08)

	void OnOwnerKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.YagakAnomalyShieldProjectile.OnOwnerKilled // (Final|Native|Public) // @ game+0x150fcb0
	void OnBoxOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function Madness.YagakAnomalyShieldProjectile.OnBoxOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1714980
};

// Class Madness.YagakAVWaveProjectile
// Size: 0x5f8 (Inherited: 0x5f0)
struct AYagakAVWaveProjectile : AMadNavmeshProjectile {
	float FinalDamage; // 0x5f0(0x04)
	char UnknownData_5F4[0x4]; // 0x5f4(0x04)

	void SetFinalDamage(float Damage); // Function Madness.YagakAVWaveProjectile.SetFinalDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x17153f0
};

// Class Madness.YagakBlinkWave
// Size: 0x2f0 (Inherited: 0x2f0)
struct AYagakBlinkWave : AActor {
};

// Class Madness.YagakLightningStrike
// Size: 0x360 (Inherited: 0x2f0)
struct AYagakLightningStrike : AActor {
	float DURATION; // 0x2f0(0x04)
	float StrikesLifespan; // 0x2f4(0x04)
	struct FTimerHandle StrikeHandle; // 0x2f8(0x08)
	struct FTimerHandle EndStrikeHandle; // 0x300(0x08)
	struct AActor* Target; // 0x308(0x08)
	struct UMadAIGameplayAbility* Ability; // 0x310(0x08)
	char UnknownData_318_0 : 7; // 0x318(0x01)
	bool bIsStrikeActivated : 1; // 0x318(0x01)
	char UnknownData_319[0x3]; // 0x319(0x03)
	struct FName AttachPointName; // 0x31c(0x08)
	char UnknownData_324[0x4]; // 0x324(0x04)
	struct UDamageType* DamageTypeClass; // 0x328(0x08)
	struct UParticleSystem* EmitterTemplate; // 0x330(0x08)
	struct FGameplayTagContainer DamageTags; // 0x338(0x20)
	struct UCurveTable* EnemySkillsValues; // 0x358(0x08)

	void TurnOffStrikes(); // Function Madness.YagakLightningStrike.TurnOffStrikes // (Final|Native|Public|BlueprintCallable) // @ game+0x17155f0
	void ToggleMarker(struct UParticleSystemComponent* TargetTell, bool bTurnOn); // Function Madness.YagakLightningStrike.ToggleMarker // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1510150
	void ShowMarkerAndApplyDot(struct UParticleSystemComponent* Thunders); // Function Madness.YagakLightningStrike.ShowMarkerAndApplyDot // (Final|Native|Public|BlueprintCallable) // @ game+0x1715510
	void OnInterrupted(struct FName NotifyName); // Function Madness.YagakLightningStrike.OnInterrupted // (Final|Native|Public|BlueprintCallable) // @ game+0x1714d70
	void OnCasterKilled(struct ABaseCharacter* character, struct FTakeHitInfo TakeHitInfo); // Function Madness.YagakLightningStrike.OnCasterKilled // (Final|Native|Public|BlueprintCallable) // @ game+0x1714bf0
	void FireParticles(struct UParticleSystemComponent* Thunders); // Function Madness.YagakLightningStrike.FireParticles // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1560570
	void EndStrike(); // Function Madness.YagakLightningStrike.EndStrike // (Final|Native|Public|BlueprintCallable) // @ game+0x1714960
	void CallToggleMarker(); // Function Madness.YagakLightningStrike.CallToggleMarker // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void Activate(float TimeToLightningHit); // Function Madness.YagakLightningStrike.Activate // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.YagakPostBlinkExplosion
// Size: 0x2f0 (Inherited: 0x2f0)
struct AYagakPostBlinkExplosion : AActor {
};

// Class Madness.YagakRiftEnergy
// Size: 0x340 (Inherited: 0x2f0)
struct AYagakRiftEnergy : AActor {
	struct UParticleSystem* ParticleTemplate; // 0x2f0(0x08)
	struct FScalableFloat MaxHealth; // 0x2f8(0x20)
	struct FVector RelativeOffset; // 0x318(0x0c)
	struct FName AttachPoint; // 0x324(0x08)
	char UnknownData_32C[0x4]; // 0x32c(0x04)
	struct UParticleSystemComponent* Particle; // 0x330(0x08)
	char UnknownData_338[0x8]; // 0x338(0x08)

	void SetParticleSize(float Size); // Function Madness.YagakRiftEnergy.SetParticleSize // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x15148c0
};

// Class Madness.YagakRiftWorm
// Size: 0x338 (Inherited: 0x2f0)
struct AYagakRiftWorm : AActor {
	char UnknownData_2F0[0x18]; // 0x2f0(0x18)
	struct USceneComponent* Root; // 0x308(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x310(0x08)
	struct UBoxComponent* Box; // 0x318(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x320(0x08)
	struct FVector BaseLocation; // 0x328(0x0c)
	char UnknownData_334[0x4]; // 0x334(0x04)

	void SetupWyrmCaller(); // Function Madness.YagakRiftWorm.SetupWyrmCaller // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
	void CreateDynamicMaterials(); // Function Madness.YagakRiftWorm.CreateDynamicMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x1714770
};

// Class Madness.YagakShield
// Size: 0x3b0 (Inherited: 0x2f0)
struct AYagakShield : AActor {
	struct UMaterialInstanceDynamic* ShieldMaterial; // 0x2f0(0x08)
	struct UParticleSystem* WaveProjectileParticle; // 0x2f8(0x08)
	char UnknownData_300_0 : 7; // 0x300(0x01)
	bool bPlayerDestroyedShield : 1; // 0x300(0x01)
	char UnknownData_301[0x3]; // 0x301(0x03)
	float HpDamage; // 0x304(0x04)
	float HpHealthMax; // 0x308(0x04)
	char UnknownData_30C[0x4]; // 0x30c(0x04)
	struct UParticleSystem* PlayerDestroyedEmitter; // 0x310(0x08)
	struct UParticleSystem* Emitter; // 0x318(0x08)
	float EmissiveMultiplier; // 0x320(0x04)
	float OpacityMultiplier; // 0x324(0x04)
	char UnknownData_328[0x4]; // 0x328(0x04)
	float DamageMultiplierOffset; // 0x32c(0x04)
	float ForwardOffset; // 0x330(0x04)
	char UnknownData_334[0x4]; // 0x334(0x04)
	struct AMadCharAI_Yagak* Yagak; // 0x338(0x08)
	struct FTimerHandle WaveTimer; // 0x340(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x348(0x08)
	struct UStaticMeshComponent* ShieldMesh; // 0x350(0x08)
	float TimeBeforeShieldBreaks; // 0x358(0x04)
	float WaveSpawnDelay; // 0x35c(0x04)
	float FirstWaveSpawnDelay; // 0x360(0x04)
	int32_t NumWaves; // 0x364(0x04)
	int32_t WavesSpawned; // 0x368(0x04)
	struct FVector Direction; // 0x36c(0x0c)
	struct FVector Ground; // 0x378(0x0c)
	struct FVector ProjectileHeightOffset; // 0x384(0x0c)
	struct UParticleSystemComponent* Particle; // 0x390(0x08)
	struct FVector SpawnScale; // 0x398(0x0c)
	char UnknownData_3A4[0x4]; // 0x3a4(0x04)
	struct AMadNavmeshProjectile* ProjectileClass; // 0x3a8(0x08)

	void StartWaveTimer(); // Function Madness.YagakShield.StartWaveTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x17155d0
	void SpawnWaves(); // Function Madness.YagakShield.SpawnWaves // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x150ed00
	void SetShieldScalar(); // Function Madness.YagakShield.SetShieldScalar // (Final|Native|Public|BlueprintCallable) // @ game+0x17154f0
	void RemoveShield(); // Function Madness.YagakShield.RemoveShield // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1516bc0
	void ReceiveDamage(float Damage); // Function Madness.YagakShield.ReceiveDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1715290
	void CallTimelineLerp(); // Function Madness.YagakShield.CallTimelineLerp // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

// Class Madness.YagakShroud
// Size: 0x3c8 (Inherited: 0x2f0)
struct AYagakShroud : AActor {
	struct AMadWeapon* DummyGun; // 0x2f0(0x08)
	struct FScalableFloat ShieldContactDamage; // 0x2f8(0x20)
	float DamageEnter; // 0x318(0x04)
	float DamageLoop; // 0x31c(0x04)
	float TargetForwardMultiplier; // 0x320(0x04)
	float DamageOverTimeRate; // 0x324(0x04)
	float RandShotOffset; // 0x328(0x04)
	float AudioFadeOutTime; // 0x32c(0x04)
	struct UMadDamageType* ShroudDmgType; // 0x330(0x08)
	struct FGameplayAttribute Attribute; // 0x338(0x38)
	struct FWeaponNameWrapper WeaponName; // 0x370(0x10)
	struct UExplosionTemplate* Explosion; // 0x380(0x08)
	struct UDamageType* ShieldEnterDmgClass; // 0x388(0x08)
	struct FGameplayTagContainer Tag; // 0x390(0x20)
	struct USoundBase* SpawnedSound; // 0x3b0(0x08)
	struct UParticleSystem* Emitter; // 0x3b8(0x08)
	char UnknownData_3C0[0x8]; // 0x3c0(0x08)

	void SpawnShieldContactEffects(struct FVector ImpactPoint); // Function Madness.YagakShroud.SpawnShieldContactEffects // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x15c22a0
	void SpawnEndingExplosion(); // Function Madness.YagakShroud.SpawnEndingExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x1715590
	void ReceiveDamage(struct FVector HitLocation, struct FVector ShotFromDirection); // Function Madness.YagakShroud.ReceiveDamage // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1715310
	void DeactivateFXAndSFX(struct UAudioComponent* Audio, struct UParticleSystemComponent* ShroudFX, struct UStaticMeshComponent* SphereMesh); // Function Madness.YagakShroud.DeactivateFXAndSFX // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1714860
	void DamageOnShieldEnter(struct AActor* OtherActor, struct FVector ImpactPoint); // Function Madness.YagakShroud.DamageOnShieldEnter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1714790
	void CallDeactiveFXandSFX(); // Function Madness.YagakShroud.CallDeactiveFXandSFX // (Event|Public|BlueprintEvent) // @ game+0x1a35c70
};

